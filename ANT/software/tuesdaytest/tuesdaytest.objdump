
tuesdaytest.elf:     file format elf32-littlenios2
tuesdaytest.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00014e20 memsz 0x00014e20 flags r-x
    LOAD off    0x00015e40 vaddr 0x00814e40 paddr 0x008169ec align 2**12
         filesz 0x00001bac memsz 0x00001bac flags rw-
    LOAD off    0x00018598 vaddr 0x00818598 paddr 0x00818598 align 2**12
         filesz 0x00000000 memsz 0x00000400 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001426c  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a20  00814420  00814420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bac  00814e40  008169ec  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000400  00818598  00818598  00018598  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000179ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  00017a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a5e  00000000  00000000  00018c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000371e7  00000000  00000000  0001a666  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b9d3  00000000  00000000  0005184d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d200  00000000  00000000  0005d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002488  00000000  00000000  0007a420  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ea9  00000000  00000000  0007c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012b33  00000000  00000000  0007f751  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00092284  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  000922d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00096c5f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00096c62  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00096c67  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00096c68  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00096c6c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00096c70  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00096c74  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00096c7f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00096c8a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  00096c95  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000000e  00000000  00000000  00096ca2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00814420 l    d  .rodata	00000000 .rodata
00814e40 l    d  .rwdata	00000000 .rwdata
00818598 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 board_diag.c
008001f0 l     F .text	00000068 MenuBegin
00800258 l     F .text	00000040 MenuItem
00818598 l     O .bss	00000001 ch.2451
00818599 l     O .bss	00000004 entry.2450
00800328 l     F .text	000000fc MenuEnd
0081859d l     O .bss	00000001 ch.2478
00800424 l     F .text	00000128 TopMenu
0080054c l     F .text	000000c4 TestLEDs
00800610 l     F .text	00000108 TestLCD
00800818 l     F .text	00000194 TestButtons
0081859e l     O .bss	00000004 entry.2504
008185a2 l     O .bss	00000001 ch.2503
008185a3 l     O .bss	00000004 entry.2519
008185a7 l     O .bss	00000001 ch.2518
00800718 l     F .text	00000054 handle_button_interrupts
0080076c l     F .text	00000064 init_button_pio
008007d0 l     F .text	00000048 disable_button_pio
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00800d5c l     F .text	00000058 std
00800e68 l     F .text	00000008 __fp_lock
00800e70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00814e40 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00802b60 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00802c4c l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00802f20 l     F .text	00000058 __sprint_r
0081485e l     O .rodata	00000010 blanks.3452
0081484e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814876 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00814999 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0080680c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
008169bc l     O .rwdata	00000004 charset
00814b3c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00814c84 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080a874 l     F .text	00000048 match
00815668 l     O .rwdata	00000014 fpi.1950
00814ca0 l     O .rodata	00000028 tinytens
00815654 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080cf50 l     F .text	00000024 htinit
0080cfdc l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d888 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080eb18 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080fd40 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00810854 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008108b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008109b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810da8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810e88 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810fe8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
008110f4 l     F .text	000000f8 alt_file_locked
00811378 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
008114fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008169dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
008117e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815824 l     O .rwdata	00001060 jtag_uart_0
00816884 l     O .rwdata	00000120 lcd_display
008118ec l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811b2c l     F .text	00000228 altera_avalon_jtag_uart_irq
00811d54 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008169e0 l     O .rwdata	00000004 colstart
008123d0 l     F .text	000000b8 lcd_write_command
00812488 l     F .text	000000d4 lcd_write_data
0081255c l     F .text	000000d8 lcd_clear_screen
00812634 l     F .text	00000214 lcd_repaint_screen
00812848 l     F .text	000000e0 lcd_scroll_up
00812928 l     F .text	000002e4 lcd_handle_escape
00813148 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008133a8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813828 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00813c04 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081419c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814350 l     F .text	00000040 alt_sim_halt
008028c4 g     F .text	0000001c putchar
008090d4 g     F .text	00000094 _mprec_log10
008091c0 g     F .text	00000088 __any_on
0080878c g     F .text	00000070 _isatty_r
00814c5c g     O .rodata	00000028 __mprec_tinytens
00811048 g     F .text	0000006c alt_main
008028e8 g     F .text	000000a0 _puts_r
00818708 g     O .bss	00000100 alt_irq
008088ec g     F .text	00000078 _lseek_r
008169ec g       *ABS*	00000000 __flash_rwdata_start
00808004 g     F .text	000000a0 __sflags
0080f638 g     F .text	00000088 __eqdf2
00818998 g       *ABS*	00000000 __alt_heap_start
0080284c g     F .text	00000044 printf
00802d68 g     F .text	00000068 __sseek
00800dc4 g     F .text	000000a4 __sinit
0080cd3c g     F .text	00000130 __swbuf_r
0080884c g     F .text	00000084 _setlocale_r
00800ec4 g     F .text	0000009c __sfmoreglue
0080cd20 g     F .text	0000001c ungetc
008110d4 g     F .text	00000020 __malloc_unlock
0080a8bc g     F .text	000015cc _strtod_r
00800298 g     F .text	00000090 GetInputString
00808be8 g     F .text	000000e0 memmove
00800eb4 g     F .text	00000010 _cleanup
00809248 g     F .text	000000bc _Balloc
0080f748 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
008185a8 g     O .bss	00000004 edge_capture
00800020 g       *ABS*	00000000 __flash_exceptions_start
00801a60 g     F .text	00000074 _fstat_r
008185ac g     O .bss	00000004 errno
00802bc8 g     F .text	00000014 __srget
008064e8 g     F .text	00000024 __svfscanf
008100b4 g     F .text	0000002c __make_fp
008185d0 g     O .bss	00000004 alt_argv
0081e9a4 g       *ABS*	00000000 _gp
00811690 g     F .text	00000030 usleep
008156a4 g     O .rwdata	00000180 alt_fd_list
00801dd8 g     F .text	00000090 _getc_r
00801d40 g     F .text	00000098 getc
008028e0 g     F .text	00000008 _putchar_r
00813950 g     F .text	00000094 alt_find_dev
00808b48 g     F .text	000000a0 memcpy
0080d8d4 g     F .text	00000248 __hexnan
00800ea8 g     F .text	0000000c _cleanup_r
0080f968 g     F .text	000000f8 __floatsidf
00813cdc g     F .text	00000078 alt_io_redirect
0080f858 g     F .text	00000088 __ltdf2
00814420 g       *ABS*	00000000 __DTOR_END__
00802988 g     F .text	00000014 puts
008089e4 g     F .text	00000040 mbrtowc
00813ef8 g     F .text	00000020 altera_nios2_irq_init
0080650c g     F .text	00000068 _vfscanf_r
00809024 g     F .text	000000b0 __ratio
00811f6c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00802890 g     F .text	00000034 _printf_r
0080fe7c g     F .text	00000008 __udivsi3
00810ce4 g     F .text	000000c4 isatty
008087fc g     F .text	0000002c iswspace
00814b6c g     O .rodata	000000c8 __mprec_tens
00808828 g     F .text	00000008 __locale_charset
0080dc40 g     F .text	000000a4 __fixunsdfsi
00813f18 g     F .text	00000090 alt_icache_flush
008185b0 g     O .bss	00000004 __malloc_top_pad
0080c794 g     F .text	00000024 strtoul
008169b8 g     O .rwdata	00000004 __mb_cur_max
00808830 g     F .text	0000000c _localeconv_r
0080c7b8 g     F .text	000002f0 _strtoull_r
008099ac g     F .text	0000003c __i2b
008082f0 g     F .text	0000049c __sfvwrite_r
00802bdc g     F .text	00000070 _sbrk_r
00809f40 g     F .text	00000078 _read_r
00815648 g     O .rwdata	0000000c __lc_ctype
008169d0 g     O .rwdata	00000004 alt_max_fd
008103f4 g     F .text	00000138 __unpack_d
00800a08 g     F .text	00000110 _fclose_r
00800d28 g     F .text	00000034 fflush
008185b4 g     O .bss	00000004 __malloc_max_sbrked_mem
0080efa8 g     F .text	00000074 __adddf3
0080e9b0 g     F .text	00000078 __nesf2
00808f04 g     F .text	00000120 __b2d
0080e350 g     F .text	00000660 __umoddi3
00810ef4 g     F .text	000000f4 lseek
008169a8 g     O .rwdata	00000004 _global_impure_ptr
00809fb8 g     F .text	000005f4 _realloc_r
00818998 g       *ABS*	00000000 __bss_end
00810bec g     F .text	000000f8 alt_iic_isr_register
00813dec g     F .text	0000010c alt_tick
00818608 g     O .bss	00000100 __hexdig
0080dce4 g     F .text	0000066c __udivdi3
00814c34 g     O .rodata	00000028 __mprec_bigtens
00809c34 g     F .text	00000120 __s2b
0080fbac g     F .text	00000194 __floatunsidf
00808e24 g     F .text	00000060 __mcmp
008169b4 g     O .rwdata	00000004 __ctype_ptr
00800e90 g     F .text	00000018 __fp_lock_all
00810ba4 g     F .text	00000048 alt_ic_irq_enabled
00813d54 g     F .text	00000098 alt_alarm_stop
0080c218 g     F .text	00000024 strtol
008185c8 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0081567c g     O .rwdata	00000028 alt_dev_null
0080ff44 g     F .text	000000c8 __unpack_f
00813758 g     F .text	0000001c alt_dcache_flush_all
00808cf0 g     F .text	00000070 __hi0bits
0080fa60 g     F .text	000000d8 __fixdfsi
0080bfac g     F .text	0000001c strtod
008169ec g       *ABS*	00000000 __ram_rwdata_end
008169c8 g     O .rwdata	00000008 alt_dev_list
008116c0 g     F .text	00000124 write
00809e58 g     F .text	000000e8 _putc_r
0080ea28 g     F .text	00000078 __gtsf2
00814e40 g       *ABS*	00000000 __ram_rodata_end
008108e0 g     F .text	000000d8 fstat
00801160 g     F .text	0000002c fprintf
0080f8e0 g     F .text	00000088 __ledf2
00809b14 g     F .text	00000120 __pow5mult
008185bc g     O .bss	00000004 __nlocale_changed
0080fe84 g     F .text	00000008 __umodsi3
00818998 g       *ABS*	00000000 end
008105f4 g     F .text	00000160 __pack_f
00812c0c g     F .text	0000053c altera_avalon_lcd_16207_write
00801a3c g     F .text	00000024 fseek
00811a6c g     F .text	000000c0 altera_avalon_jtag_uart_init
0081441c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813418 g     F .text	00000090 alt_avalon_timer_sc_init
0080fec4 g     F .text	00000080 __clzsi2
00812190 g     F .text	00000240 altera_avalon_jtag_uart_write
00800db4 g     F .text	00000004 __sfp_lock_acquire
00808a64 g     F .text	000000e4 memchr
00802f78 g     F .text	00001ec4 ___vfprintf_internal_r
0080a758 g     F .text	00000060 _sprintf_r
008012ec g     F .text	00000314 _free_r
008141a0 g     F .text	000001b0 __call_exitprocs
00802b7c g     F .text	0000004c __srget_r
008185c0 g     O .bss	00000004 __mlocale_changed
008169b0 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
008185d8 g     O .bss	00000004 _alt_tick_rate
0080c23c g     F .text	00000318 _strtoll_r
0080960c g     F .text	0000014c __lshift
008185dc g     O .bss	00000004 _alt_nticks
008113d8 g     F .text	00000124 read
00811878 g     F .text	00000074 alt_sys_init
008027d4 g     F .text	00000078 _open_r
00814068 g     F .text	00000134 __register_exitproc
00809758 g     F .text	00000254 __multiply
00811e04 g     F .text	00000074 altera_avalon_jtag_uart_close
0080fe8c g     F .text	00000038 __mulsi3
00814e40 g       *ABS*	00000000 __ram_rwdata_start
00814420 g       *ABS*	00000000 __ram_rodata_start
008185e0 g     O .bss	00000028 __malloc_current_mallinfo
00809304 g     F .text	0000017c __d2b
00811924 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c554 g     F .text	00000240 _strtoul_r
00813b04 g     F .text	000000d0 alt_get_fd
008135fc g     F .text	0000015c alt_busy_sleep
0081052c g     F .text	000000c8 __fpcmp_parts_d
0080679c g     F .text	00000070 _close_r
00813ff4 g     F .text	00000074 memcmp
008119d4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00818998 g       *ABS*	00000000 __alt_stack_base
00811a1c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00801c54 g     F .text	000000ac _fwrite_r
00802cdc g     F .text	00000084 sscanf
00806660 g     F .text	0000013c __swsetup_r
0080f3e0 g     F .text	00000258 __divdf3
00800f60 g     F .text	000000f0 __sfp
00809168 g     F .text	00000058 __copybits
00815240 g     O .rwdata	00000408 __malloc_av_
00800dc0 g     F .text	00000004 __sinit_lock_release
0080f01c g     F .text	000003c4 __muldf3
00802e4c g     F .text	00000060 __sread
008082b0 g     F .text	00000040 fread
008139e4 g     F .text	00000120 alt_find_file
00813774 g     F .text	000000b4 alt_dev_llist_insert
008110b4 g     F .text	00000020 __malloc_lock
0080118c g     F .text	00000034 _fprintf_r
008115d4 g     F .text	000000bc sbrk
00800b2c g     F .text	000001fc _fflush_r
0080ce88 g     F .text	000000c8 _calloc_r
00801144 g     F .text	0000001c fopen
00818598 g       *ABS*	00000000 __bss_start
0080273c g     F .text	00000098 memset
008009ac g     F .text	0000005c main
008185d4 g     O .bss	00000004 alt_envp
008185b8 g     O .bss	00000004 __malloc_max_total_mem
0081197c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080ce6c g     F .text	0000001c __swbuf
0080eaa0 g     F .text	00000078 __ltsf2
008080a4 g     F .text	0000020c _fread_r
00813214 g     F .text	0000013c altera_avalon_lcd_16207_init
00802d60 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00800b18 g     F .text	00000014 fclose
0080bfc8 g     F .text	00000250 _strtol_r
0080fb38 g     F .text	00000074 __truncdfsf2
00818808 g     O .bss	00000190 _atexit0
00806a50 g     F .text	000015b4 _dtoa_r
00801ffc g     F .text	00000740 _malloc_r
008169d4 g     O .rwdata	00000004 alt_errno
0080caa8 g     F .text	000000dc __submore
00801b9c g     F .text	000000b8 _fwalk
00808a24 g     F .text	00000040 _mbtowc_r
00809d54 g     F .text	00000104 putc
0080fdbc g     F .text	00000060 __divsi3
00814ce4 g     O .rodata	00000014 __thenan_df
008011c0 g     F .text	0000012c _malloc_trim_r
00814420 g       *ABS*	00000000 __CTOR_END__
0080a7b8 g     F .text	000000bc strcmp
00814420 g       *ABS*	00000000 __flash_rodata_start
00814420 g       *ABS*	00000000 __DTOR_LIST__
0080f6c0 g     F .text	00000088 __nedf2
00811844 g     F .text	00000034 alt_irq_init
0081155c g     F .text	00000078 alt_release_fd
0080a6e4 g     F .text	00000074 sprintf
00814cf8 g     O .rodata	00000100 __clz_tab
008185c4 g     O .bss	00000004 _PathLocale
0080be88 g     F .text	00000124 strtof
00813fa8 g     F .text	00000014 atexit
008065e8 g     F .text	00000078 _write_r
008088d0 g     F .text	0000001c setlocale
0080a6dc g     F .text	00000008 nanf
008169a4 g     O .rwdata	00000004 _impure_ptr
008185cc g     O .bss	00000004 alt_argc
00808964 g     F .text	00000080 _mbrtowc_r
008138ec g     F .text	00000064 _do_dtors
00801600 g     F .text	0000043c _fseek_r
0080299c g     F .text	000001c4 __srefill_r
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00808e84 g     F .text	00000080 __ulp
0080a5ac g     F .text	00000040 __isinfd
00800e78 g     F .text	00000018 __fp_unlock_all
00813350 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
008169c0 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080883c g     F .text	00000010 localeconv
00810a18 g     F .text	00000050 alt_ic_isr_register
00801d00 g     F .text	00000040 fwrite
0080cf74 g     F .text	00000068 __hexdig_init
00802c54 g     F .text	00000088 _sscanf_r
008169ec g       *ABS*	00000000 _edata
00818998 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00806574 g     F .text	00000074 vfscanf
00811e78 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00810b04 g     F .text	000000a0 alt_ic_irq_disable
00802dd0 g     F .text	0000007c __swrite
008169ac g     O .rwdata	00000004 __malloc_trim_threshold
00813fbc g     F .text	00000038 exit
00801ad4 g     F .text	000000c8 _fwalk_reent
00809480 g     F .text	0000018c __mdiff
0080fe1c g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800db8 g     F .text	00000004 __sfp_lock_release
0080a61c g     F .text	000000c0 __sccl
00814898 g     O .rodata	00000101 _ctype_
0081000c g     F .text	000000a8 __fpcmp_parts_f
00801050 g     F .text	000000f4 _fopen_r
00814390 g     F .text	00000020 _exit
0080a5ec g     F .text	00000030 __isnand
008134a8 g     F .text	00000154 alt_alarm_start
0080db1c g     F .text	00000124 __muldi3
00801e68 g     F .text	00000194 __smakebuf_r
00802eac g     F .text	00000074 strlen
008111ec g     F .text	0000018c open
0080f7d0 g     F .text	00000088 __gedf2
0080d08c g     F .text	000007fc __gethex
00813bd4 g     F .text	00000030 alt_icache_flush_all
008169d8 g     O .rwdata	00000004 alt_priority_mask
00810a68 g     F .text	0000009c alt_ic_irq_enable
00804e3c g     F .text	00000024 __vfprintf_internal
0080ef28 g     F .text	00000080 __subdf3
00808d60 g     F .text	000000c4 __lo0bits
00804e60 g     F .text	00001688 __svfscanf_r
008169e4 g     O .rwdata	00000008 alt_alarm_list
0080cb84 g     F .text	0000019c _ungetc_r
00813888 g     F .text	00000064 _do_ctors
00810754 g     F .text	00000100 close
00810e08 g     F .text	00000080 alt_load
008100e0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00800dbc g     F .text	00000004 __sinit_lock_acquire
008099e8 g     F .text	0000012c __multadd
00808cc8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e1c204 	addi	r3,r3,-30968
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e1c204 	addi	r3,r3,-30968
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6ba6914 	ori	gp,gp,59812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10a16614 	ori	r2,r2,34200

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18e26614 	ori	r3,r3,35224

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	0810e080 	call	810e08 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	08110480 	call	811048 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <MenuBegin>:
 * 
 * Function to set the Menu "header".
 */

static void MenuBegin( char *title )
{
  8001f0:	defffd04 	addi	sp,sp,-12
  8001f4:	dfc00215 	stw	ra,8(sp)
  8001f8:	df000115 	stw	fp,4(sp)
  8001fc:	df000104 	addi	fp,sp,4
  800200:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
  800204:	01002074 	movhi	r4,129
  800208:	21110804 	addi	r4,r4,17440
  80020c:	08029880 	call	802988 <puts>
  printf("----------------------------------\n");
  800210:	01002074 	movhi	r4,129
  800214:	21110904 	addi	r4,r4,17444
  800218:	08029880 	call	802988 <puts>
  printf("Nios II Board Diagnostics\n");
  80021c:	01002074 	movhi	r4,129
  800220:	21111204 	addi	r4,r4,17480
  800224:	08029880 	call	802988 <puts>
  printf("----------------------------------\n");
  800228:	01002074 	movhi	r4,129
  80022c:	21110904 	addi	r4,r4,17444
  800230:	08029880 	call	802988 <puts>
  printf(" %s\n",title);
  800234:	01002074 	movhi	r4,129
  800238:	21111904 	addi	r4,r4,17508
  80023c:	e17fff17 	ldw	r5,-4(fp)
  800240:	080284c0 	call	80284c <printf>
}
  800244:	e037883a 	mov	sp,fp
  800248:	dfc00117 	ldw	ra,4(sp)
  80024c:	df000017 	ldw	fp,0(sp)
  800250:	dec00204 	addi	sp,sp,8
  800254:	f800283a 	ret

00800258 <MenuItem>:
 *    (defined by 'string').
 *
 **********************************************************************/

static void MenuItem( char letter, char *name )
{
  800258:	defffc04 	addi	sp,sp,-16
  80025c:	dfc00315 	stw	ra,12(sp)
  800260:	df000215 	stw	fp,8(sp)
  800264:	df000204 	addi	fp,sp,8
  800268:	e17fff15 	stw	r5,-4(fp)
  80026c:	e13ffe05 	stb	r4,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
  800270:	e17ffe07 	ldb	r5,-8(fp)
  800274:	01002074 	movhi	r4,129
  800278:	21111b04 	addi	r4,r4,17516
  80027c:	e1bfff17 	ldw	r6,-4(fp)
  800280:	080284c0 	call	80284c <printf>
}
  800284:	e037883a 	mov	sp,fp
  800288:	dfc00117 	ldw	ra,4(sp)
  80028c:	df000017 	ldw	fp,0(sp)
  800290:	dec00204 	addi	sp,sp,8
  800294:	f800283a 	ret

00800298 <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
  800298:	defff904 	addi	sp,sp,-28
  80029c:	dfc00615 	stw	ra,24(sp)
  8002a0:	df000515 	stw	fp,20(sp)
  8002a4:	df000504 	addi	fp,sp,20
  8002a8:	e13ffd15 	stw	r4,-12(fp)
  8002ac:	e17ffe15 	stw	r5,-8(fp)
  8002b0:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
  8002b4:	e03ffb15 	stw	zero,-20(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
  8002b8:	e03ffc15 	stw	zero,-16(fp)
  8002bc:	00000f06 	br	8002fc <GetInputString+0x64>
  {
    if( (ch = getc(stream)) != '\r')
  8002c0:	e13fff17 	ldw	r4,-4(fp)
  8002c4:	0801d400 	call	801d40 <getc>
  8002c8:	e0bffb15 	stw	r2,-20(fp)
  8002cc:	e0bffb17 	ldw	r2,-20(fp)
  8002d0:	10800360 	cmpeqi	r2,r2,13
  8002d4:	1000091e 	bne	r2,zero,8002fc <GetInputString+0x64>
    {
      entry[i] = ch;
  8002d8:	e0bffc17 	ldw	r2,-16(fp)
  8002dc:	1007883a 	mov	r3,r2
  8002e0:	e0bffd17 	ldw	r2,-12(fp)
  8002e4:	1887883a 	add	r3,r3,r2
  8002e8:	e0bffb17 	ldw	r2,-20(fp)
  8002ec:	18800005 	stb	r2,0(r3)
      i++;
  8002f0:	e0bffc17 	ldw	r2,-16(fp)
  8002f4:	10800044 	addi	r2,r2,1
  8002f8:	e0bffc15 	stw	r2,-16(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
  8002fc:	e0bffb17 	ldw	r2,-20(fp)
  800300:	108002a0 	cmpeqi	r2,r2,10
  800304:	1000031e 	bne	r2,zero,800314 <GetInputString+0x7c>
  800308:	e0fffc17 	ldw	r3,-16(fp)
  80030c:	e0bffe17 	ldw	r2,-8(fp)
  800310:	18bfeb16 	blt	r3,r2,8002c0 <GetInputString+0x28>
    {
      entry[i] = ch;
      i++;
    }
  }
}
  800314:	e037883a 	mov	sp,fp
  800318:	dfc00117 	ldw	ra,4(sp)
  80031c:	df000017 	ldw	fp,0(sp)
  800320:	dec00204 	addi	sp,sp,8
  800324:	f800283a 	ret

00800328 <MenuEnd>:
 *    and continues until either a 'q' or a character outside of the 
 *    range, enclosed by 'lowLetter' and 'highLetter', is reached.
 */

static int MenuEnd( char lowLetter, char highLetter )
{
  800328:	defffc04 	addi	sp,sp,-16
  80032c:	dfc00315 	stw	ra,12(sp)
  800330:	df000215 	stw	fp,8(sp)
  800334:	df000204 	addi	fp,sp,8
  800338:	e13ffe05 	stb	r4,-8(fp)
  80033c:	e17fff05 	stb	r5,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
  800340:	01002074 	movhi	r4,129
  800344:	21111f04 	addi	r4,r4,17532
  800348:	08029880 	call	802988 <puts>
  printf("----------------------------------\n");
  80034c:	01002074 	movhi	r4,129
  800350:	21110904 	addi	r4,r4,17444
  800354:	08029880 	call	802988 <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
  800358:	e17ffe07 	ldb	r5,-8(fp)
  80035c:	e1bfff07 	ldb	r6,-4(fp)
  800360:	01002074 	movhi	r4,129
  800364:	21112304 	addi	r4,r4,17548
  800368:	080284c0 	call	80284c <printf>
  
  GetInputString( entry, sizeof(entry), stdin );
  80036c:	00802074 	movhi	r2,129
  800370:	109a6904 	addi	r2,r2,27044
  800374:	10800017 	ldw	r2,0(r2)
  800378:	11800117 	ldw	r6,4(r2)
  80037c:	d126fd44 	addi	r4,gp,-25611
  800380:	01400104 	movi	r5,4
  800384:	08002980 	call	800298 <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
  800388:	d126fd44 	addi	r4,gp,-25611
  80038c:	01402074 	movhi	r5,129
  800390:	29512f04 	addi	r5,r5,17596
  800394:	d1a6fd04 	addi	r6,gp,-25612
  800398:	0802cdc0 	call	802cdc <sscanf>
  80039c:	1005003a 	cmpeq	r2,r2,zero
  8003a0:	1000171e 	bne	r2,zero,800400 <MenuEnd+0xd8>
  {
    if( ch >= 'A' && ch <= 'Z' )
  8003a4:	d0a6fd03 	ldbu	r2,-25612(gp)
  8003a8:	10803fcc 	andi	r2,r2,255
  8003ac:	1080201c 	xori	r2,r2,128
  8003b0:	10bfe004 	addi	r2,r2,-128
  8003b4:	10801050 	cmplti	r2,r2,65
  8003b8:	1000091e 	bne	r2,zero,8003e0 <MenuEnd+0xb8>
  8003bc:	d0a6fd03 	ldbu	r2,-25612(gp)
  8003c0:	10803fcc 	andi	r2,r2,255
  8003c4:	1080201c 	xori	r2,r2,128
  8003c8:	10bfe004 	addi	r2,r2,-128
  8003cc:	108016c8 	cmpgei	r2,r2,91
  8003d0:	1000031e 	bne	r2,zero,8003e0 <MenuEnd+0xb8>
      ch += 'a' - 'A';
  8003d4:	d0a6fd03 	ldbu	r2,-25612(gp)
  8003d8:	10800804 	addi	r2,r2,32
  8003dc:	d0a6fd05 	stb	r2,-25612(gp)
    if( ch == 27 )
  8003e0:	d0a6fd03 	ldbu	r2,-25612(gp)
  8003e4:	10803fcc 	andi	r2,r2,255
  8003e8:	1080201c 	xori	r2,r2,128
  8003ec:	10bfe004 	addi	r2,r2,-128
  8003f0:	108006d8 	cmpnei	r2,r2,27
  8003f4:	1000021e 	bne	r2,zero,800400 <MenuEnd+0xd8>
      ch = 'q';        
  8003f8:	00801c44 	movi	r2,113
  8003fc:	d0a6fd05 	stb	r2,-25612(gp)
  }
  return ch;
  800400:	d0a6fd03 	ldbu	r2,-25612(gp)
  800404:	10803fcc 	andi	r2,r2,255
  800408:	1080201c 	xori	r2,r2,128
  80040c:	10bfe004 	addi	r2,r2,-128
}
  800410:	e037883a 	mov	sp,fp
  800414:	dfc00117 	ldw	ra,4(sp)
  800418:	df000017 	ldw	fp,0(sp)
  80041c:	dec00204 	addi	sp,sp,8
  800420:	f800283a 	ret

00800424 <TopMenu>:
 * Generates the top level menu for this diagnostics program.
 * 
 ******************************************************************************/

static char TopMenu( void )
{
  800424:	defffd04 	addi	sp,sp,-12
  800428:	dfc00215 	stw	ra,8(sp)
  80042c:	df000115 	stw	fp,4(sp)
  800430:	df000104 	addi	fp,sp,4
  
  /* Output the top-level menu to STDOUT */

  while (1)
  {
    MenuBegin("Main Menu");
  800434:	01002074 	movhi	r4,129
  800438:	21113004 	addi	r4,r4,17600
  80043c:	08001f00 	call	8001f0 <MenuBegin>
#ifdef LED_PIO_NAME
    MenuItem( 'a', "Test LEDs" );
  800440:	01001844 	movi	r4,97
  800444:	01402074 	movhi	r5,129
  800448:	29513304 	addi	r5,r5,17612
  80044c:	08002580 	call	800258 <MenuItem>
#endif
#ifdef LCD_DISPLAY_NAME
    MenuItem( 'b', "LCD Display Test");
  800450:	01001884 	movi	r4,98
  800454:	01402074 	movhi	r5,129
  800458:	29513604 	addi	r5,r5,17624
  80045c:	08002580 	call	800258 <MenuItem>
#endif
#ifdef BUTTON_PIO_NAME
    MenuItem( 'c', "Button/Switch Test");
  800460:	010018c4 	movi	r4,99
  800464:	01402074 	movhi	r5,129
  800468:	29513b04 	addi	r5,r5,17644
  80046c:	08002580 	call	800258 <MenuItem>
    MenuItem( 'd', "Seven Segment Menu" );
#endif
#ifdef JTAG_UART_NAME
    MenuItem( 'e', "JTAG UART Menu" );
#endif  
    ch = MenuEnd('a', 'e');
  800470:	01001844 	movi	r4,97
  800474:	01401944 	movi	r5,101
  800478:	08003280 	call	800328 <MenuEnd>
  80047c:	d0a6fe45 	stb	r2,-25607(gp)

  
    switch(ch)
  800480:	d0a6fe43 	ldbu	r2,-25607(gp)
  800484:	10803fcc 	andi	r2,r2,255
  800488:	1080201c 	xori	r2,r2,128
  80048c:	10bfe004 	addi	r2,r2,-128
  800490:	e0bfff15 	stw	r2,-4(fp)
  800494:	e0ffff17 	ldw	r3,-4(fp)
  800498:	188018a0 	cmpeqi	r2,r3,98
  80049c:	1000101e 	bne	r2,zero,8004e0 <TopMenu+0xbc>
  8004a0:	e0ffff17 	ldw	r3,-4(fp)
  8004a4:	188018c8 	cmpgei	r2,r3,99
  8004a8:	1000041e 	bne	r2,zero,8004bc <TopMenu+0x98>
  8004ac:	e0ffff17 	ldw	r3,-4(fp)
  8004b0:	18801860 	cmpeqi	r2,r3,97
  8004b4:	1000081e 	bne	r2,zero,8004d8 <TopMenu+0xb4>
  8004b8:	00000d06 	br	8004f0 <TopMenu+0xcc>
  8004bc:	e0ffff17 	ldw	r3,-4(fp)
  8004c0:	188018e0 	cmpeqi	r2,r3,99
  8004c4:	1000081e 	bne	r2,zero,8004e8 <TopMenu+0xc4>
  8004c8:	e0ffff17 	ldw	r3,-4(fp)
  8004cc:	18801c60 	cmpeqi	r2,r3,113
  8004d0:	10000e1e 	bne	r2,zero,80050c <TopMenu+0xe8>
  8004d4:	00000606 	br	8004f0 <TopMenu+0xcc>
    {
#ifdef LED_PIO_NAME
      MenuCase('a',TestLEDs);
  8004d8:	080054c0 	call	80054c <TestLEDs>
  8004dc:	00000b06 	br	80050c <TopMenu+0xe8>
#endif
#ifdef LCD_DISPLAY_NAME
      MenuCase('b',TestLCD);
  8004e0:	08006100 	call	800610 <TestLCD>
  8004e4:	00000906 	br	80050c <TopMenu+0xe8>
#endif
#ifdef BUTTON_PIO_NAME
      MenuCase('c',TestButtons);
  8004e8:	08008180 	call	800818 <TestButtons>
  8004ec:	00000706 	br	80050c <TopMenu+0xe8>
#endif
#ifdef JTAG_UART_NAME
      MenuCase('e',DoJTAGUARTMenu);
#endif
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
  8004f0:	d0a6fe43 	ldbu	r2,-25607(gp)
  8004f4:	11403fcc 	andi	r5,r2,255
  8004f8:	2940201c 	xori	r5,r5,128
  8004fc:	297fe004 	addi	r5,r5,-128
  800500:	01002074 	movhi	r4,129
  800504:	21114004 	addi	r4,r4,17664
  800508:	080284c0 	call	80284c <printf>
    }
    
    if (ch == 'q' )
  80050c:	d0a6fe43 	ldbu	r2,-25607(gp)
  800510:	10803fcc 	andi	r2,r2,255
  800514:	1080201c 	xori	r2,r2,128
  800518:	10bfe004 	addi	r2,r2,-128
  80051c:	10801c60 	cmpeqi	r2,r2,113
  800520:	1000011e 	bne	r2,zero,800528 <TopMenu+0x104>
      break;
  }
  800524:	003fc306 	br	800434 <TopMenu+0x10>
  return( ch );
  800528:	d0a6fe43 	ldbu	r2,-25607(gp)
  80052c:	10803fcc 	andi	r2,r2,255
  800530:	1080201c 	xori	r2,r2,128
  800534:	10bfe004 	addi	r2,r2,-128
}
  800538:	e037883a 	mov	sp,fp
  80053c:	dfc00117 	ldw	ra,4(sp)
  800540:	df000017 	ldw	fp,0(sp)
  800544:	dec00204 	addi	sp,sp,8
  800548:	f800283a 	ret

0080054c <TestLEDs>:
 * This function tests LED functionality.
 * It exits when the user types a 'q'.
 */

static void TestLEDs(void)
{
  80054c:	defffd04 	addi	sp,sp,-12
  800550:	dfc00215 	stw	ra,8(sp)
  800554:	df000115 	stw	fp,4(sp)
  800558:	df000104 	addi	fp,sp,4
  volatile alt_u8 led;
  static char ch;
  static char entry[4];
  
  /* Turn the LEDs on. */
  led = 0xff;
  80055c:	00bfffc4 	movi	r2,-1
  800560:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led);
  800564:	e0bfff03 	ldbu	r2,-4(fp)
  800568:	10c03fcc 	andi	r3,r2,255
  80056c:	00804034 	movhi	r2,256
  800570:	10841404 	addi	r2,r2,4176
  800574:	10c00035 	stwio	r3,0(r2)
  printf( "\nAll LEDs should now be on.\n" );
  800578:	01002074 	movhi	r4,129
  80057c:	21114e04 	addi	r4,r4,17720
  800580:	08029880 	call	802988 <puts>
  printf( "\tPlease press 'q' [Followed by <enter>] to exit this test.\n" );
  800584:	01002074 	movhi	r4,129
  800588:	21115504 	addi	r4,r4,17748
  80058c:	08029880 	call	802988 <puts>
  
  /* Get the input string for exiting this test. */
  do {
    GetInputString( entry, sizeof(entry), stdin);
  800590:	00802074 	movhi	r2,129
  800594:	109a6904 	addi	r2,r2,27044
  800598:	10800017 	ldw	r2,0(r2)
  80059c:	11800117 	ldw	r6,4(r2)
  8005a0:	d126fe84 	addi	r4,gp,-25606
  8005a4:	01400104 	movi	r5,4
  8005a8:	08002980 	call	800298 <GetInputString>
    sscanf( entry, "%c\n", &ch );
  8005ac:	d126fe84 	addi	r4,gp,-25606
  8005b0:	01402074 	movhi	r5,129
  8005b4:	29512f04 	addi	r5,r5,17596
  8005b8:	d1a6ff84 	addi	r6,gp,-25602
  8005bc:	0802cdc0 	call	802cdc <sscanf>
  } while ( ch != 'q' );
  8005c0:	d0a6ff83 	ldbu	r2,-25602(gp)
  8005c4:	10803fcc 	andi	r2,r2,255
  8005c8:	1080201c 	xori	r2,r2,128
  8005cc:	10bfe004 	addi	r2,r2,-128
  8005d0:	10801c58 	cmpnei	r2,r2,113
  8005d4:	103fee1e 	bne	r2,zero,800590 <TestLEDs+0x44>
  
  /* Turn the LEDs off and exit. */
  led = 0x0;
  8005d8:	e03fff05 	stb	zero,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led);
  8005dc:	e0bfff03 	ldbu	r2,-4(fp)
  8005e0:	10c03fcc 	andi	r3,r2,255
  8005e4:	00804034 	movhi	r2,256
  8005e8:	10841404 	addi	r2,r2,4176
  8005ec:	10c00035 	stwio	r3,0(r2)
  printf(".....Exiting LED Test.\n");
  8005f0:	01002074 	movhi	r4,129
  8005f4:	21116404 	addi	r4,r4,17808
  8005f8:	08029880 	call	802988 <puts>
}
  8005fc:	e037883a 	mov	sp,fp
  800600:	dfc00117 	ldw	ra,4(sp)
  800604:	df000017 	ldw	fp,0(sp)
  800608:	dec00204 	addi	sp,sp,8
  80060c:	f800283a 	ret

00800610 <TestLCD>:
 * Tests the LCD by printing some simple output to each line.
 * 
 ******************************************************************************/

static void TestLCD( void )
{
  800610:	defffd04 	addi	sp,sp,-12
  800614:	dfc00215 	stw	ra,8(sp)
  800618:	df000115 	stw	fp,4(sp)
  80061c:	df000104 	addi	fp,sp,4
  FILE *lcd;
  static char ch;
  static char entry[4];
  
  lcd = fopen("/dev/lcd_display", "w");
  800620:	01002074 	movhi	r4,129
  800624:	21116a04 	addi	r4,r4,17832
  800628:	01402074 	movhi	r5,129
  80062c:	29516f04 	addi	r5,r5,17852
  800630:	08011440 	call	801144 <fopen>
  800634:	e0bfff15 	stw	r2,-4(fp)
  
  /* Write some simple text to the LCD. */
  if (lcd != NULL )
  800638:	e0bfff17 	ldw	r2,-4(fp)
  80063c:	1005003a 	cmpeq	r2,r2,zero
  800640:	10000c1e 	bne	r2,zero,800674 <TestLCD+0x64>
  {
    fprintf(lcd, "\nThis is the LCD Display.\n");
  800644:	01002074 	movhi	r4,129
  800648:	21117004 	addi	r4,r4,17856
  80064c:	01400044 	movi	r5,1
  800650:	01800684 	movi	r6,26
  800654:	e1ffff17 	ldw	r7,-4(fp)
  800658:	0801d000 	call	801d00 <fwrite>
    fprintf(lcd, "If you can see this, your LCD is functional.\n");
  80065c:	01002074 	movhi	r4,129
  800660:	21117704 	addi	r4,r4,17884
  800664:	01400044 	movi	r5,1
  800668:	01800b44 	movi	r6,45
  80066c:	e1ffff17 	ldw	r7,-4(fp)
  800670:	0801d000 	call	801d00 <fwrite>
  }
  printf("\nIf you can see messages scrolling on the LCD Display, then it is functional!\n");
  800674:	01002074 	movhi	r4,129
  800678:	21118304 	addi	r4,r4,17932
  80067c:	08029880 	call	802988 <puts>
  printf( "\tPlease press 'q' [Followed by <enter>] to exit this test.\n" );
  800680:	01002074 	movhi	r4,129
  800684:	21115504 	addi	r4,r4,17748
  800688:	08029880 	call	802988 <puts>
  
  /* Get the input string for exiting this test. */
  do {
    GetInputString( entry, sizeof(entry), stdin);
  80068c:	00802074 	movhi	r2,129
  800690:	109a6904 	addi	r2,r2,27044
  800694:	10800017 	ldw	r2,0(r2)
  800698:	11800117 	ldw	r6,4(r2)
  80069c:	d126ffc4 	addi	r4,gp,-25601
  8006a0:	01400104 	movi	r5,4
  8006a4:	08002980 	call	800298 <GetInputString>
    sscanf( entry, "%c\n", &ch );
  8006a8:	d126ffc4 	addi	r4,gp,-25601
  8006ac:	01402074 	movhi	r5,129
  8006b0:	29512f04 	addi	r5,r5,17596
  8006b4:	d1a700c4 	addi	r6,gp,-25597
  8006b8:	0802cdc0 	call	802cdc <sscanf>
  } while ( ch != 'q' );
  8006bc:	d0a700c3 	ldbu	r2,-25597(gp)
  8006c0:	10803fcc 	andi	r2,r2,255
  8006c4:	1080201c 	xori	r2,r2,128
  8006c8:	10bfe004 	addi	r2,r2,-128
  8006cc:	10801c58 	cmpnei	r2,r2,113
  8006d0:	103fee1e 	bne	r2,zero,80068c <TestLCD+0x7c>

  /* Send the command sequence to clear the LCD. */
  if (lcd != NULL )
  8006d4:	e0bfff17 	ldw	r2,-4(fp)
  8006d8:	1005003a 	cmpeq	r2,r2,zero
  8006dc:	1000071e 	bne	r2,zero,8006fc <TestLCD+0xec>
  {
    fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8006e0:	e13fff17 	ldw	r4,-4(fp)
  8006e4:	01402074 	movhi	r5,129
  8006e8:	29519704 	addi	r5,r5,18012
  8006ec:	018006c4 	movi	r6,27
  8006f0:	01c02074 	movhi	r7,129
  8006f4:	39d19904 	addi	r7,r7,18020
  8006f8:	08011600 	call	801160 <fprintf>
  }
  fclose( lcd );
  8006fc:	e13fff17 	ldw	r4,-4(fp)
  800700:	0800b180 	call	800b18 <fclose>

  return;
}
  800704:	e037883a 	mov	sp,fp
  800708:	dfc00117 	ldw	ra,4(sp)
  80070c:	df000017 	ldw	fp,0(sp)
  800710:	dec00204 	addi	sp,sp,8
  800714:	f800283a 	ret

00800718 <handle_button_interrupts>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_button_interrupts(void* context)
#else
static void handle_button_interrupts(void* context, alt_u32 id)
#endif
{
  800718:	defffd04 	addi	sp,sp,-12
  80071c:	df000215 	stw	fp,8(sp)
  800720:	df000204 	addi	fp,sp,8
  800724:	e13fff15 	stw	r4,-4(fp)
  /* Cast context to edge_capture's type.
   * It is important to keep this volatile,
   * to avoid compiler optimization issues.
   */
  volatile int* edge_capture_ptr = (volatile int*) context;
  800728:	e0bfff17 	ldw	r2,-4(fp)
  80072c:	e0bffe15 	stw	r2,-8(fp)
  /* Store the value in the Button's edge capture register in *context. */
  *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
  800730:	00804034 	movhi	r2,256
  800734:	10841b04 	addi	r2,r2,4204
  800738:	10c00037 	ldwio	r3,0(r2)
  80073c:	e0bffe17 	ldw	r2,-8(fp)
  800740:	10c00015 	stw	r3,0(r2)
  /* Reset the Button's edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0);
  800744:	00804034 	movhi	r2,256
  800748:	10841b04 	addi	r2,r2,4204
  80074c:	10000035 	stwio	zero,0(r2)
  /* 
   * Read the PIO to delay ISR exit. This is done to prevent a spurious
   * interrupt in systems with high processor -> pio latency and fast
   * interrupts.
   */
  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
  800750:	00804034 	movhi	r2,256
  800754:	10841b04 	addi	r2,r2,4204
  800758:	10800037 	ldwio	r2,0(r2)
}
  80075c:	e037883a 	mov	sp,fp
  800760:	df000017 	ldw	fp,0(sp)
  800764:	dec00104 	addi	sp,sp,4
  800768:	f800283a 	ret

0080076c <init_button_pio>:

/* Initialize the button_pio. */

static void init_button_pio()
{
  80076c:	defffc04 	addi	sp,sp,-16
  800770:	dfc00315 	stw	ra,12(sp)
  800774:	df000215 	stw	fp,8(sp)
  800778:	df000204 	addi	fp,sp,8
  /* Recast the edge_capture pointer to match the alt_irq_register() function
  * prototype. */
  void* edge_capture_ptr = (void*) &edge_capture;
  80077c:	d0a70104 	addi	r2,gp,-25596
  800780:	e0bfff15 	stw	r2,-4(fp)
  /* Enable all 4 button interrupts. */
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0xf);
  800784:	00c04034 	movhi	r3,256
  800788:	18c41a04 	addi	r3,r3,4200
  80078c:	008003c4 	movi	r2,15
  800790:	18800035 	stwio	r2,0(r3)
  /* Reset the edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0x0);
  800794:	00804034 	movhi	r2,256
  800798:	10841b04 	addi	r2,r2,4204
  80079c:	10000035 	stwio	zero,0(r2)
   * which does not support enhanced interrupts. For systems created using
   * the Nios II softawre build tools, the enhanced API is recommended
   * for new designs.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ, 
  8007a0:	d8000015 	stw	zero,0(sp)
  8007a4:	013fffc4 	movi	r4,-1
  8007a8:	017fffc4 	movi	r5,-1
  8007ac:	01802034 	movhi	r6,128
  8007b0:	3181c604 	addi	r6,r6,1816
  8007b4:	e1ffff17 	ldw	r7,-4(fp)
  8007b8:	0810a180 	call	810a18 <alt_ic_isr_register>
    handle_button_interrupts, edge_capture_ptr, 0x0);
#else
  alt_irq_register( BUTTON_PIO_IRQ, edge_capture_ptr, 
    handle_button_interrupts);
#endif
}
  8007bc:	e037883a 	mov	sp,fp
  8007c0:	dfc00117 	ldw	ra,4(sp)
  8007c4:	df000017 	ldw	fp,0(sp)
  8007c8:	dec00204 	addi	sp,sp,8
  8007cc:	f800283a 	ret

008007d0 <disable_button_pio>:

/* Tear down the button_pio. */

static void disable_button_pio()
{
  8007d0:	defffd04 	addi	sp,sp,-12
  8007d4:	dfc00215 	stw	ra,8(sp)
  8007d8:	df000115 	stw	fp,4(sp)
  8007dc:	df000104 	addi	fp,sp,4
  /* Disable interrupts from the button_pio PIO component. */
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0x0);
  8007e0:	00804034 	movhi	r2,256
  8007e4:	10841a04 	addi	r2,r2,4200
  8007e8:	10000035 	stwio	zero,0(r2)
  /* Un-register the IRQ handler by passing a null handler. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ, 
  8007ec:	d8000015 	stw	zero,0(sp)
  8007f0:	013fffc4 	movi	r4,-1
  8007f4:	017fffc4 	movi	r5,-1
  8007f8:	000d883a 	mov	r6,zero
  8007fc:	000f883a 	mov	r7,zero
  800800:	0810a180 	call	810a18 <alt_ic_isr_register>
    NULL, NULL, NULL);
#else
  alt_irq_register( BUTTON_PIO_IRQ, NULL, NULL );
#endif
}
  800804:	e037883a 	mov	sp,fp
  800808:	dfc00117 	ldw	ra,4(sp)
  80080c:	df000017 	ldw	fp,0(sp)
  800810:	dec00204 	addi	sp,sp,8
  800814:	f800283a 	ret

00800818 <TestButtons>:
 * 
 ******************************************************************************/


static void TestButtons( void )
{
  800818:	defffb04 	addi	sp,sp,-20
  80081c:	dfc00415 	stw	ra,16(sp)
  800820:	df000315 	stw	fp,12(sp)
  800824:	df000304 	addi	fp,sp,12
  /* Variable which holds the last value of edge_capture to avoid 
   * "double counting" button/switch presses
   */
  int last_tested;
  /* Initialize the Buttons/Switches (SW0-SW3) */
  init_button_pio();
  800828:	080076c0 	call	80076c <init_button_pio>
  /* Initialize the variables which keep track of which buttons have been tested. */
  buttons_tested = 0x0;
  80082c:	e03ffe45 	stb	zero,-7(fp)
  all_tested = 0xf;
  800830:	008003c4 	movi	r2,15
  800834:	e0bffe05 	stb	r2,-8(fp)

  /* Initialize edge_capture to avoid any "false" triggers from
   * a previous run.
   */
   
  edge_capture = 0;
  800838:	d0270115 	stw	zero,-25596(gp)
  
  /* Set last_tested to a value that edge_capture can never equal
   * to avoid accidental equalities in the while() loop below.
   */
    
  last_tested = 0xffff;
  80083c:	00bfffd4 	movui	r2,65535
  800840:	e0bffd15 	stw	r2,-12(fp)

  /* Print a quick message stating what is happening */
  
  printf("\nA loop will be run until all buttons/switches have been pressed.\n\n");
  800844:	01002074 	movhi	r4,129
  800848:	21119a04 	addi	r4,r4,18024
  80084c:	08029880 	call	802988 <puts>
  printf("\n\tNOTE:  Once a button press has been detected, for a particular button,\n\tany further presses will be ignored!\n\n");
  800850:	01002074 	movhi	r4,129
  800854:	2111ab04 	addi	r4,r4,18092
  800858:	08029880 	call	802988 <puts>
  
  /* Loop until all buttons have been pressed.
   * This happens when buttons_tested == all_tested.
   */
  
  while (  buttons_tested != all_tested )
  80085c:	00004406 	br	800970 <TestButtons+0x158>
  { 
    if (last_tested == edge_capture)
  800860:	d0e70117 	ldw	r3,-25596(gp)
  800864:	e0bffd17 	ldw	r2,-12(fp)
  800868:	10c04126 	beq	r2,r3,800970 <TestButtons+0x158>
    {
      continue;
    }
    else
    {
      last_tested = edge_capture;
  80086c:	d0a70117 	ldw	r2,-25596(gp)
  800870:	e0bffd15 	stw	r2,-12(fp)
      switch (edge_capture)
  800874:	d0a70117 	ldw	r2,-25596(gp)
  800878:	e0bfff15 	stw	r2,-4(fp)
  80087c:	e0ffff17 	ldw	r3,-4(fp)
  800880:	188000a0 	cmpeqi	r2,r3,2
  800884:	10001a1e 	bne	r2,zero,8008f0 <TestButtons+0xd8>
  800888:	e0ffff17 	ldw	r3,-4(fp)
  80088c:	188000c8 	cmpgei	r2,r3,3
  800890:	1000041e 	bne	r2,zero,8008a4 <TestButtons+0x8c>
  800894:	e0ffff17 	ldw	r3,-4(fp)
  800898:	18800060 	cmpeqi	r2,r3,1
  80089c:	1000081e 	bne	r2,zero,8008c0 <TestButtons+0xa8>
  8008a0:	00003306 	br	800970 <TestButtons+0x158>
  8008a4:	e0ffff17 	ldw	r3,-4(fp)
  8008a8:	18800120 	cmpeqi	r2,r3,4
  8008ac:	10001b1e 	bne	r2,zero,80091c <TestButtons+0x104>
  8008b0:	e0ffff17 	ldw	r3,-4(fp)
  8008b4:	18800220 	cmpeqi	r2,r3,8
  8008b8:	1000231e 	bne	r2,zero,800948 <TestButtons+0x130>
  8008bc:	00002c06 	br	800970 <TestButtons+0x158>
      {
        case 0x1:
          if (buttons_tested & 0x1)
  8008c0:	e0bffe43 	ldbu	r2,-7(fp)
  8008c4:	1080004c 	andi	r2,r2,1
  8008c8:	10803fcc 	andi	r2,r2,255
  8008cc:	1004c03a 	cmpne	r2,r2,zero
  8008d0:	1000271e 	bne	r2,zero,800970 <TestButtons+0x158>
          {
            continue;
          }
          else
          {
            printf("\nButton 1 (SW0) Pressed.\n");
  8008d4:	01002074 	movhi	r4,129
  8008d8:	2111c704 	addi	r4,r4,18204
  8008dc:	08029880 	call	802988 <puts>
            buttons_tested = buttons_tested | 0x1;
  8008e0:	e0bffe43 	ldbu	r2,-7(fp)
  8008e4:	10800054 	ori	r2,r2,1
  8008e8:	e0bffe45 	stb	r2,-7(fp)
          } 
          break;
  8008ec:	00002006 	br	800970 <TestButtons+0x158>
        case 0x2:
          if (buttons_tested & 0x2)
  8008f0:	e0bffe43 	ldbu	r2,-7(fp)
  8008f4:	1080008c 	andi	r2,r2,2
  8008f8:	1004c03a 	cmpne	r2,r2,zero
  8008fc:	10001c1e 	bne	r2,zero,800970 <TestButtons+0x158>
          {
            continue;
          } 
          else
          {
            printf("\nButton 2 (SW1) Pressed.\n");
  800900:	01002074 	movhi	r4,129
  800904:	2111ce04 	addi	r4,r4,18232
  800908:	08029880 	call	802988 <puts>
            buttons_tested = buttons_tested | 0x2;
  80090c:	e0bffe43 	ldbu	r2,-7(fp)
  800910:	10800094 	ori	r2,r2,2
  800914:	e0bffe45 	stb	r2,-7(fp)
          }
          break;
  800918:	00001506 	br	800970 <TestButtons+0x158>
        case 0x4:
          if (buttons_tested & 0x4)
  80091c:	e0bffe43 	ldbu	r2,-7(fp)
  800920:	1080010c 	andi	r2,r2,4
  800924:	1004c03a 	cmpne	r2,r2,zero
  800928:	1000111e 	bne	r2,zero,800970 <TestButtons+0x158>
          {
            continue;
          }
          else
          {
            printf("\nButton 3 (SW2) Pressed.\n");
  80092c:	01002074 	movhi	r4,129
  800930:	2111d504 	addi	r4,r4,18260
  800934:	08029880 	call	802988 <puts>
            buttons_tested = buttons_tested | 0x4;
  800938:	e0bffe43 	ldbu	r2,-7(fp)
  80093c:	10800114 	ori	r2,r2,4
  800940:	e0bffe45 	stb	r2,-7(fp)
          }
          break;
  800944:	00000a06 	br	800970 <TestButtons+0x158>
        case 0x8:
          if (buttons_tested & 0x8)
  800948:	e0bffe43 	ldbu	r2,-7(fp)
  80094c:	1080020c 	andi	r2,r2,8
  800950:	1004c03a 	cmpne	r2,r2,zero
  800954:	1000061e 	bne	r2,zero,800970 <TestButtons+0x158>
          {
            continue;
          }
          else
          {
            printf("\nButton 4 (SW3) Pressed.\n");
  800958:	01002074 	movhi	r4,129
  80095c:	2111dc04 	addi	r4,r4,18288
  800960:	08029880 	call	802988 <puts>
            buttons_tested = buttons_tested | 0x8;
  800964:	e0bffe43 	ldbu	r2,-7(fp)
  800968:	10800214 	ori	r2,r2,8
  80096c:	e0bffe45 	stb	r2,-7(fp)
  
  /* Loop until all buttons have been pressed.
   * This happens when buttons_tested == all_tested.
   */
  
  while (  buttons_tested != all_tested )
  800970:	e0fffe43 	ldbu	r3,-7(fp)
  800974:	e0bffe03 	ldbu	r2,-8(fp)
  800978:	18bfb91e 	bne	r3,r2,800860 <TestButtons+0x48>
          break;
      }
    }
  }
  /* Disable the button pio. */
  disable_button_pio();
  80097c:	08007d00 	call	8007d0 <disable_button_pio>

  printf ("\nAll Buttons (SW0-SW3) were pressed, at least, once.\n");
  800980:	01002074 	movhi	r4,129
  800984:	2111e304 	addi	r4,r4,18316
  800988:	08029880 	call	802988 <puts>
  usleep(2000000);
  80098c:	010007f4 	movhi	r4,31
  800990:	21212004 	addi	r4,r4,-31616
  800994:	08116900 	call	811690 <usleep>
  return;
}
  800998:	e037883a 	mov	sp,fp
  80099c:	dfc00117 	ldw	ra,4(sp)
  8009a0:	df000017 	ldw	fp,0(sp)
  8009a4:	dec00204 	addi	sp,sp,8
  8009a8:	f800283a 	ret

008009ac <main>:
}

#endif

int main()
{
  8009ac:	defffd04 	addi	sp,sp,-12
  8009b0:	dfc00215 	stw	ra,8(sp)
  8009b4:	df000115 	stw	fp,4(sp)
  8009b8:	df000104 	addi	fp,sp,4
  /* Declare variable for received character. */
  int ch;
  
  while (1)
  {
    ch = TopMenu();
  8009bc:	08004240 	call	800424 <TopMenu>
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1080201c 	xori	r2,r2,128
  8009c8:	10bfe004 	addi	r2,r2,-128
  8009cc:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
  8009d0:	e0bfff17 	ldw	r2,-4(fp)
  8009d4:	10801c58 	cmpnei	r2,r2,113
  8009d8:	103ff81e 	bne	r2,zero,8009bc <main+0x10>
    {
      printf( "\nExiting from Board Diagnostics.\n");
  8009dc:	01002074 	movhi	r4,129
  8009e0:	2111f104 	addi	r4,r4,18372
  8009e4:	08029880 	call	802988 <puts>
      /* Send EOT to nios2-terminal on the other side of the link. */
      printf( "%c", EOT );
  8009e8:	01000104 	movi	r4,4
  8009ec:	08028c40 	call	8028c4 <putchar>
      break;
    }
  }
  return( 0 );
  8009f0:	0005883a 	mov	r2,zero
}
  8009f4:	e037883a 	mov	sp,fp
  8009f8:	dfc00117 	ldw	ra,4(sp)
  8009fc:	df000017 	ldw	fp,0(sp)
  800a00:	dec00204 	addi	sp,sp,8
  800a04:	f800283a 	ret

00800a08 <_fclose_r>:
  800a08:	defffc04 	addi	sp,sp,-16
  800a0c:	dc400115 	stw	r17,4(sp)
  800a10:	dc000015 	stw	r16,0(sp)
  800a14:	dfc00315 	stw	ra,12(sp)
  800a18:	dc800215 	stw	r18,8(sp)
  800a1c:	2821883a 	mov	r16,r5
  800a20:	2023883a 	mov	r17,r4
  800a24:	28002926 	beq	r5,zero,800acc <_fclose_r+0xc4>
  800a28:	0800db40 	call	800db4 <__sfp_lock_acquire>
  800a2c:	88000226 	beq	r17,zero,800a38 <_fclose_r+0x30>
  800a30:	88800e17 	ldw	r2,56(r17)
  800a34:	10002d26 	beq	r2,zero,800aec <_fclose_r+0xe4>
  800a38:	8080030f 	ldh	r2,12(r16)
  800a3c:	10002226 	beq	r2,zero,800ac8 <_fclose_r+0xc0>
  800a40:	8809883a 	mov	r4,r17
  800a44:	800b883a 	mov	r5,r16
  800a48:	0800b2c0 	call	800b2c <_fflush_r>
  800a4c:	1025883a 	mov	r18,r2
  800a50:	80800b17 	ldw	r2,44(r16)
  800a54:	10000426 	beq	r2,zero,800a68 <_fclose_r+0x60>
  800a58:	81400717 	ldw	r5,28(r16)
  800a5c:	8809883a 	mov	r4,r17
  800a60:	103ee83a 	callr	r2
  800a64:	10002a16 	blt	r2,zero,800b10 <_fclose_r+0x108>
  800a68:	8080030b 	ldhu	r2,12(r16)
  800a6c:	1080200c 	andi	r2,r2,128
  800a70:	1000231e 	bne	r2,zero,800b00 <_fclose_r+0xf8>
  800a74:	81400c17 	ldw	r5,48(r16)
  800a78:	28000526 	beq	r5,zero,800a90 <_fclose_r+0x88>
  800a7c:	80801004 	addi	r2,r16,64
  800a80:	28800226 	beq	r5,r2,800a8c <_fclose_r+0x84>
  800a84:	8809883a 	mov	r4,r17
  800a88:	08012ec0 	call	8012ec <_free_r>
  800a8c:	80000c15 	stw	zero,48(r16)
  800a90:	81401117 	ldw	r5,68(r16)
  800a94:	28000326 	beq	r5,zero,800aa4 <_fclose_r+0x9c>
  800a98:	8809883a 	mov	r4,r17
  800a9c:	08012ec0 	call	8012ec <_free_r>
  800aa0:	80001115 	stw	zero,68(r16)
  800aa4:	8000030d 	sth	zero,12(r16)
  800aa8:	0800db80 	call	800db8 <__sfp_lock_release>
  800aac:	9005883a 	mov	r2,r18
  800ab0:	dfc00317 	ldw	ra,12(sp)
  800ab4:	dc800217 	ldw	r18,8(sp)
  800ab8:	dc400117 	ldw	r17,4(sp)
  800abc:	dc000017 	ldw	r16,0(sp)
  800ac0:	dec00404 	addi	sp,sp,16
  800ac4:	f800283a 	ret
  800ac8:	0800db80 	call	800db8 <__sfp_lock_release>
  800acc:	0025883a 	mov	r18,zero
  800ad0:	9005883a 	mov	r2,r18
  800ad4:	dfc00317 	ldw	ra,12(sp)
  800ad8:	dc800217 	ldw	r18,8(sp)
  800adc:	dc400117 	ldw	r17,4(sp)
  800ae0:	dc000017 	ldw	r16,0(sp)
  800ae4:	dec00404 	addi	sp,sp,16
  800ae8:	f800283a 	ret
  800aec:	8809883a 	mov	r4,r17
  800af0:	0800dc40 	call	800dc4 <__sinit>
  800af4:	8080030f 	ldh	r2,12(r16)
  800af8:	103fd11e 	bne	r2,zero,800a40 <_fclose_r+0x38>
  800afc:	003ff206 	br	800ac8 <_fclose_r+0xc0>
  800b00:	81400417 	ldw	r5,16(r16)
  800b04:	8809883a 	mov	r4,r17
  800b08:	08012ec0 	call	8012ec <_free_r>
  800b0c:	003fd906 	br	800a74 <_fclose_r+0x6c>
  800b10:	04bfffc4 	movi	r18,-1
  800b14:	003fd406 	br	800a68 <_fclose_r+0x60>

00800b18 <fclose>:
  800b18:	00802074 	movhi	r2,129
  800b1c:	109a6904 	addi	r2,r2,27044
  800b20:	200b883a 	mov	r5,r4
  800b24:	11000017 	ldw	r4,0(r2)
  800b28:	0800a081 	jmpi	800a08 <_fclose_r>

00800b2c <_fflush_r>:
  800b2c:	defffb04 	addi	sp,sp,-20
  800b30:	dcc00315 	stw	r19,12(sp)
  800b34:	dc800215 	stw	r18,8(sp)
  800b38:	dfc00415 	stw	ra,16(sp)
  800b3c:	dc400115 	stw	r17,4(sp)
  800b40:	dc000015 	stw	r16,0(sp)
  800b44:	2027883a 	mov	r19,r4
  800b48:	2825883a 	mov	r18,r5
  800b4c:	20000226 	beq	r4,zero,800b58 <_fflush_r+0x2c>
  800b50:	20800e17 	ldw	r2,56(r4)
  800b54:	10005626 	beq	r2,zero,800cb0 <_fflush_r+0x184>
  800b58:	9100030b 	ldhu	r4,12(r18)
  800b5c:	20ffffcc 	andi	r3,r4,65535
  800b60:	18e0001c 	xori	r3,r3,32768
  800b64:	18e00004 	addi	r3,r3,-32768
  800b68:	1880020c 	andi	r2,r3,8
  800b6c:	1000261e 	bne	r2,zero,800c08 <_fflush_r+0xdc>
  800b70:	90c00117 	ldw	r3,4(r18)
  800b74:	20820014 	ori	r2,r4,2048
  800b78:	9080030d 	sth	r2,12(r18)
  800b7c:	1009883a 	mov	r4,r2
  800b80:	00c0400e 	bge	zero,r3,800c84 <_fflush_r+0x158>
  800b84:	92000a17 	ldw	r8,40(r18)
  800b88:	40004026 	beq	r8,zero,800c8c <_fflush_r+0x160>
  800b8c:	2084000c 	andi	r2,r4,4096
  800b90:	10005326 	beq	r2,zero,800ce0 <_fflush_r+0x1b4>
  800b94:	94001417 	ldw	r16,80(r18)
  800b98:	9080030b 	ldhu	r2,12(r18)
  800b9c:	1080010c 	andi	r2,r2,4
  800ba0:	1000481e 	bne	r2,zero,800cc4 <_fflush_r+0x198>
  800ba4:	91400717 	ldw	r5,28(r18)
  800ba8:	9809883a 	mov	r4,r19
  800bac:	800d883a 	mov	r6,r16
  800bb0:	000f883a 	mov	r7,zero
  800bb4:	403ee83a 	callr	r8
  800bb8:	8080261e 	bne	r16,r2,800c54 <_fflush_r+0x128>
  800bbc:	9080030b 	ldhu	r2,12(r18)
  800bc0:	91000417 	ldw	r4,16(r18)
  800bc4:	90000115 	stw	zero,4(r18)
  800bc8:	10bdffcc 	andi	r2,r2,63487
  800bcc:	10ffffcc 	andi	r3,r2,65535
  800bd0:	18c4000c 	andi	r3,r3,4096
  800bd4:	9080030d 	sth	r2,12(r18)
  800bd8:	91000015 	stw	r4,0(r18)
  800bdc:	18002b26 	beq	r3,zero,800c8c <_fflush_r+0x160>
  800be0:	0007883a 	mov	r3,zero
  800be4:	1805883a 	mov	r2,r3
  800be8:	94001415 	stw	r16,80(r18)
  800bec:	dfc00417 	ldw	ra,16(sp)
  800bf0:	dcc00317 	ldw	r19,12(sp)
  800bf4:	dc800217 	ldw	r18,8(sp)
  800bf8:	dc400117 	ldw	r17,4(sp)
  800bfc:	dc000017 	ldw	r16,0(sp)
  800c00:	dec00504 	addi	sp,sp,20
  800c04:	f800283a 	ret
  800c08:	94400417 	ldw	r17,16(r18)
  800c0c:	88001f26 	beq	r17,zero,800c8c <_fflush_r+0x160>
  800c10:	90800017 	ldw	r2,0(r18)
  800c14:	18c000cc 	andi	r3,r3,3
  800c18:	94400015 	stw	r17,0(r18)
  800c1c:	1461c83a 	sub	r16,r2,r17
  800c20:	18002526 	beq	r3,zero,800cb8 <_fflush_r+0x18c>
  800c24:	0005883a 	mov	r2,zero
  800c28:	90800215 	stw	r2,8(r18)
  800c2c:	0400170e 	bge	zero,r16,800c8c <_fflush_r+0x160>
  800c30:	90c00917 	ldw	r3,36(r18)
  800c34:	91400717 	ldw	r5,28(r18)
  800c38:	880d883a 	mov	r6,r17
  800c3c:	800f883a 	mov	r7,r16
  800c40:	9809883a 	mov	r4,r19
  800c44:	183ee83a 	callr	r3
  800c48:	88a3883a 	add	r17,r17,r2
  800c4c:	80a1c83a 	sub	r16,r16,r2
  800c50:	00bff616 	blt	zero,r2,800c2c <_fflush_r+0x100>
  800c54:	9080030b 	ldhu	r2,12(r18)
  800c58:	00ffffc4 	movi	r3,-1
  800c5c:	10801014 	ori	r2,r2,64
  800c60:	9080030d 	sth	r2,12(r18)
  800c64:	1805883a 	mov	r2,r3
  800c68:	dfc00417 	ldw	ra,16(sp)
  800c6c:	dcc00317 	ldw	r19,12(sp)
  800c70:	dc800217 	ldw	r18,8(sp)
  800c74:	dc400117 	ldw	r17,4(sp)
  800c78:	dc000017 	ldw	r16,0(sp)
  800c7c:	dec00504 	addi	sp,sp,20
  800c80:	f800283a 	ret
  800c84:	90800f17 	ldw	r2,60(r18)
  800c88:	00bfbe16 	blt	zero,r2,800b84 <_fflush_r+0x58>
  800c8c:	0007883a 	mov	r3,zero
  800c90:	1805883a 	mov	r2,r3
  800c94:	dfc00417 	ldw	ra,16(sp)
  800c98:	dcc00317 	ldw	r19,12(sp)
  800c9c:	dc800217 	ldw	r18,8(sp)
  800ca0:	dc400117 	ldw	r17,4(sp)
  800ca4:	dc000017 	ldw	r16,0(sp)
  800ca8:	dec00504 	addi	sp,sp,20
  800cac:	f800283a 	ret
  800cb0:	0800dc40 	call	800dc4 <__sinit>
  800cb4:	003fa806 	br	800b58 <_fflush_r+0x2c>
  800cb8:	90800517 	ldw	r2,20(r18)
  800cbc:	90800215 	stw	r2,8(r18)
  800cc0:	003fda06 	br	800c2c <_fflush_r+0x100>
  800cc4:	90800117 	ldw	r2,4(r18)
  800cc8:	90c00c17 	ldw	r3,48(r18)
  800ccc:	80a1c83a 	sub	r16,r16,r2
  800cd0:	183fb426 	beq	r3,zero,800ba4 <_fflush_r+0x78>
  800cd4:	90800f17 	ldw	r2,60(r18)
  800cd8:	80a1c83a 	sub	r16,r16,r2
  800cdc:	003fb106 	br	800ba4 <_fflush_r+0x78>
  800ce0:	91400717 	ldw	r5,28(r18)
  800ce4:	9809883a 	mov	r4,r19
  800ce8:	000d883a 	mov	r6,zero
  800cec:	01c00044 	movi	r7,1
  800cf0:	403ee83a 	callr	r8
  800cf4:	1021883a 	mov	r16,r2
  800cf8:	00bfffc4 	movi	r2,-1
  800cfc:	80800226 	beq	r16,r2,800d08 <_fflush_r+0x1dc>
  800d00:	92000a17 	ldw	r8,40(r18)
  800d04:	003fa406 	br	800b98 <_fflush_r+0x6c>
  800d08:	98c00017 	ldw	r3,0(r19)
  800d0c:	00800744 	movi	r2,29
  800d10:	18bfde26 	beq	r3,r2,800c8c <_fflush_r+0x160>
  800d14:	9080030b 	ldhu	r2,12(r18)
  800d18:	8007883a 	mov	r3,r16
  800d1c:	10801014 	ori	r2,r2,64
  800d20:	9080030d 	sth	r2,12(r18)
  800d24:	003fcf06 	br	800c64 <_fflush_r+0x138>

00800d28 <fflush>:
  800d28:	01402034 	movhi	r5,128
  800d2c:	2942cb04 	addi	r5,r5,2860
  800d30:	2007883a 	mov	r3,r4
  800d34:	20000526 	beq	r4,zero,800d4c <fflush+0x24>
  800d38:	00802074 	movhi	r2,129
  800d3c:	109a6904 	addi	r2,r2,27044
  800d40:	11000017 	ldw	r4,0(r2)
  800d44:	180b883a 	mov	r5,r3
  800d48:	0800b2c1 	jmpi	800b2c <_fflush_r>
  800d4c:	00802074 	movhi	r2,129
  800d50:	109a6a04 	addi	r2,r2,27048
  800d54:	11000017 	ldw	r4,0(r2)
  800d58:	0801ad41 	jmpi	801ad4 <_fwalk_reent>

00800d5c <std>:
  800d5c:	00802034 	movhi	r2,128
  800d60:	108b5804 	addi	r2,r2,11616
  800d64:	20800b15 	stw	r2,44(r4)
  800d68:	00802034 	movhi	r2,128
  800d6c:	108b9304 	addi	r2,r2,11852
  800d70:	20800815 	stw	r2,32(r4)
  800d74:	00c02034 	movhi	r3,128
  800d78:	18cb7404 	addi	r3,r3,11728
  800d7c:	00802034 	movhi	r2,128
  800d80:	108b5a04 	addi	r2,r2,11624
  800d84:	2140030d 	sth	r5,12(r4)
  800d88:	2180038d 	sth	r6,14(r4)
  800d8c:	20c00915 	stw	r3,36(r4)
  800d90:	20800a15 	stw	r2,40(r4)
  800d94:	20000015 	stw	zero,0(r4)
  800d98:	20000115 	stw	zero,4(r4)
  800d9c:	20000215 	stw	zero,8(r4)
  800da0:	20000415 	stw	zero,16(r4)
  800da4:	20000515 	stw	zero,20(r4)
  800da8:	20000615 	stw	zero,24(r4)
  800dac:	21000715 	stw	r4,28(r4)
  800db0:	f800283a 	ret

00800db4 <__sfp_lock_acquire>:
  800db4:	f800283a 	ret

00800db8 <__sfp_lock_release>:
  800db8:	f800283a 	ret

00800dbc <__sinit_lock_acquire>:
  800dbc:	f800283a 	ret

00800dc0 <__sinit_lock_release>:
  800dc0:	f800283a 	ret

00800dc4 <__sinit>:
  800dc4:	20800e17 	ldw	r2,56(r4)
  800dc8:	defffd04 	addi	sp,sp,-12
  800dcc:	dc400115 	stw	r17,4(sp)
  800dd0:	dc000015 	stw	r16,0(sp)
  800dd4:	dfc00215 	stw	ra,8(sp)
  800dd8:	04400044 	movi	r17,1
  800ddc:	01400104 	movi	r5,4
  800de0:	000d883a 	mov	r6,zero
  800de4:	2021883a 	mov	r16,r4
  800de8:	2200bb04 	addi	r8,r4,748
  800dec:	200f883a 	mov	r7,r4
  800df0:	10000526 	beq	r2,zero,800e08 <__sinit+0x44>
  800df4:	dfc00217 	ldw	ra,8(sp)
  800df8:	dc400117 	ldw	r17,4(sp)
  800dfc:	dc000017 	ldw	r16,0(sp)
  800e00:	dec00304 	addi	sp,sp,12
  800e04:	f800283a 	ret
  800e08:	21000117 	ldw	r4,4(r4)
  800e0c:	00802034 	movhi	r2,128
  800e10:	1083aa04 	addi	r2,r2,3752
  800e14:	00c000c4 	movi	r3,3
  800e18:	80800f15 	stw	r2,60(r16)
  800e1c:	80c0b915 	stw	r3,740(r16)
  800e20:	8200ba15 	stw	r8,744(r16)
  800e24:	84400e15 	stw	r17,56(r16)
  800e28:	8000b815 	stw	zero,736(r16)
  800e2c:	0800d5c0 	call	800d5c <std>
  800e30:	81000217 	ldw	r4,8(r16)
  800e34:	880d883a 	mov	r6,r17
  800e38:	800f883a 	mov	r7,r16
  800e3c:	01400284 	movi	r5,10
  800e40:	0800d5c0 	call	800d5c <std>
  800e44:	81000317 	ldw	r4,12(r16)
  800e48:	800f883a 	mov	r7,r16
  800e4c:	01400484 	movi	r5,18
  800e50:	01800084 	movi	r6,2
  800e54:	dfc00217 	ldw	ra,8(sp)
  800e58:	dc400117 	ldw	r17,4(sp)
  800e5c:	dc000017 	ldw	r16,0(sp)
  800e60:	dec00304 	addi	sp,sp,12
  800e64:	0800d5c1 	jmpi	800d5c <std>

00800e68 <__fp_lock>:
  800e68:	0005883a 	mov	r2,zero
  800e6c:	f800283a 	ret

00800e70 <__fp_unlock>:
  800e70:	0005883a 	mov	r2,zero
  800e74:	f800283a 	ret

00800e78 <__fp_unlock_all>:
  800e78:	00802074 	movhi	r2,129
  800e7c:	109a6904 	addi	r2,r2,27044
  800e80:	11000017 	ldw	r4,0(r2)
  800e84:	01402034 	movhi	r5,128
  800e88:	29439c04 	addi	r5,r5,3696
  800e8c:	0801b9c1 	jmpi	801b9c <_fwalk>

00800e90 <__fp_lock_all>:
  800e90:	00802074 	movhi	r2,129
  800e94:	109a6904 	addi	r2,r2,27044
  800e98:	11000017 	ldw	r4,0(r2)
  800e9c:	01402034 	movhi	r5,128
  800ea0:	29439a04 	addi	r5,r5,3688
  800ea4:	0801b9c1 	jmpi	801b9c <_fwalk>

00800ea8 <_cleanup_r>:
  800ea8:	01402034 	movhi	r5,128
  800eac:	2942c604 	addi	r5,r5,2840
  800eb0:	0801b9c1 	jmpi	801b9c <_fwalk>

00800eb4 <_cleanup>:
  800eb4:	00802074 	movhi	r2,129
  800eb8:	109a6a04 	addi	r2,r2,27048
  800ebc:	11000017 	ldw	r4,0(r2)
  800ec0:	0800ea81 	jmpi	800ea8 <_cleanup_r>

00800ec4 <__sfmoreglue>:
  800ec4:	defffc04 	addi	sp,sp,-16
  800ec8:	dc000015 	stw	r16,0(sp)
  800ecc:	2821883a 	mov	r16,r5
  800ed0:	dc400115 	stw	r17,4(sp)
  800ed4:	01401704 	movi	r5,92
  800ed8:	2023883a 	mov	r17,r4
  800edc:	8009883a 	mov	r4,r16
  800ee0:	dfc00315 	stw	ra,12(sp)
  800ee4:	dcc00215 	stw	r19,8(sp)
  800ee8:	080fe8c0 	call	80fe8c <__mulsi3>
  800eec:	11400304 	addi	r5,r2,12
  800ef0:	8809883a 	mov	r4,r17
  800ef4:	1027883a 	mov	r19,r2
  800ef8:	0801ffc0 	call	801ffc <_malloc_r>
  800efc:	10c00304 	addi	r3,r2,12
  800f00:	1023883a 	mov	r17,r2
  800f04:	1809883a 	mov	r4,r3
  800f08:	980d883a 	mov	r6,r19
  800f0c:	000b883a 	mov	r5,zero
  800f10:	10000b26 	beq	r2,zero,800f40 <__sfmoreglue+0x7c>
  800f14:	14000115 	stw	r16,4(r2)
  800f18:	10c00215 	stw	r3,8(r2)
  800f1c:	10000015 	stw	zero,0(r2)
  800f20:	080273c0 	call	80273c <memset>
  800f24:	8805883a 	mov	r2,r17
  800f28:	dfc00317 	ldw	ra,12(sp)
  800f2c:	dcc00217 	ldw	r19,8(sp)
  800f30:	dc400117 	ldw	r17,4(sp)
  800f34:	dc000017 	ldw	r16,0(sp)
  800f38:	dec00404 	addi	sp,sp,16
  800f3c:	f800283a 	ret
  800f40:	0023883a 	mov	r17,zero
  800f44:	8805883a 	mov	r2,r17
  800f48:	dfc00317 	ldw	ra,12(sp)
  800f4c:	dcc00217 	ldw	r19,8(sp)
  800f50:	dc400117 	ldw	r17,4(sp)
  800f54:	dc000017 	ldw	r16,0(sp)
  800f58:	dec00404 	addi	sp,sp,16
  800f5c:	f800283a 	ret

00800f60 <__sfp>:
  800f60:	defffd04 	addi	sp,sp,-12
  800f64:	00802074 	movhi	r2,129
  800f68:	109a6a04 	addi	r2,r2,27048
  800f6c:	dc000015 	stw	r16,0(sp)
  800f70:	14000017 	ldw	r16,0(r2)
  800f74:	dc400115 	stw	r17,4(sp)
  800f78:	dfc00215 	stw	ra,8(sp)
  800f7c:	80800e17 	ldw	r2,56(r16)
  800f80:	2023883a 	mov	r17,r4
  800f84:	10002626 	beq	r2,zero,801020 <__sfp+0xc0>
  800f88:	8400b804 	addi	r16,r16,736
  800f8c:	80800117 	ldw	r2,4(r16)
  800f90:	81000217 	ldw	r4,8(r16)
  800f94:	10ffffc4 	addi	r3,r2,-1
  800f98:	18000916 	blt	r3,zero,800fc0 <__sfp+0x60>
  800f9c:	2080030f 	ldh	r2,12(r4)
  800fa0:	10000b26 	beq	r2,zero,800fd0 <__sfp+0x70>
  800fa4:	017fffc4 	movi	r5,-1
  800fa8:	00000206 	br	800fb4 <__sfp+0x54>
  800fac:	2080030f 	ldh	r2,12(r4)
  800fb0:	10000726 	beq	r2,zero,800fd0 <__sfp+0x70>
  800fb4:	18ffffc4 	addi	r3,r3,-1
  800fb8:	21001704 	addi	r4,r4,92
  800fbc:	197ffb1e 	bne	r3,r5,800fac <__sfp+0x4c>
  800fc0:	80800017 	ldw	r2,0(r16)
  800fc4:	10001926 	beq	r2,zero,80102c <__sfp+0xcc>
  800fc8:	1021883a 	mov	r16,r2
  800fcc:	003fef06 	br	800f8c <__sfp+0x2c>
  800fd0:	00bfffc4 	movi	r2,-1
  800fd4:	00c00044 	movi	r3,1
  800fd8:	2080038d 	sth	r2,14(r4)
  800fdc:	20c0030d 	sth	r3,12(r4)
  800fe0:	20000015 	stw	zero,0(r4)
  800fe4:	20000215 	stw	zero,8(r4)
  800fe8:	20000115 	stw	zero,4(r4)
  800fec:	20000415 	stw	zero,16(r4)
  800ff0:	20000515 	stw	zero,20(r4)
  800ff4:	20000615 	stw	zero,24(r4)
  800ff8:	20000c15 	stw	zero,48(r4)
  800ffc:	20000d15 	stw	zero,52(r4)
  801000:	20001115 	stw	zero,68(r4)
  801004:	20001215 	stw	zero,72(r4)
  801008:	2005883a 	mov	r2,r4
  80100c:	dfc00217 	ldw	ra,8(sp)
  801010:	dc400117 	ldw	r17,4(sp)
  801014:	dc000017 	ldw	r16,0(sp)
  801018:	dec00304 	addi	sp,sp,12
  80101c:	f800283a 	ret
  801020:	8009883a 	mov	r4,r16
  801024:	0800dc40 	call	800dc4 <__sinit>
  801028:	003fd706 	br	800f88 <__sfp+0x28>
  80102c:	8809883a 	mov	r4,r17
  801030:	01400104 	movi	r5,4
  801034:	0800ec40 	call	800ec4 <__sfmoreglue>
  801038:	80800015 	stw	r2,0(r16)
  80103c:	103fe21e 	bne	r2,zero,800fc8 <__sfp+0x68>
  801040:	00800304 	movi	r2,12
  801044:	0009883a 	mov	r4,zero
  801048:	88800015 	stw	r2,0(r17)
  80104c:	003fee06 	br	801008 <__sfp+0xa8>

00801050 <_fopen_r>:
  801050:	defffa04 	addi	sp,sp,-24
  801054:	dcc00415 	stw	r19,16(sp)
  801058:	2827883a 	mov	r19,r5
  80105c:	300b883a 	mov	r5,r6
  801060:	d80d883a 	mov	r6,sp
  801064:	dc800315 	stw	r18,12(sp)
  801068:	dc400215 	stw	r17,8(sp)
  80106c:	dc000115 	stw	r16,4(sp)
  801070:	dfc00515 	stw	ra,20(sp)
  801074:	2021883a 	mov	r16,r4
  801078:	08080040 	call	808004 <__sflags>
  80107c:	1025883a 	mov	r18,r2
  801080:	8009883a 	mov	r4,r16
  801084:	0023883a 	mov	r17,zero
  801088:	1000081e 	bne	r2,zero,8010ac <_fopen_r+0x5c>
  80108c:	8805883a 	mov	r2,r17
  801090:	dfc00517 	ldw	ra,20(sp)
  801094:	dcc00417 	ldw	r19,16(sp)
  801098:	dc800317 	ldw	r18,12(sp)
  80109c:	dc400217 	ldw	r17,8(sp)
  8010a0:	dc000117 	ldw	r16,4(sp)
  8010a4:	dec00604 	addi	sp,sp,24
  8010a8:	f800283a 	ret
  8010ac:	0800f600 	call	800f60 <__sfp>
  8010b0:	1023883a 	mov	r17,r2
  8010b4:	980b883a 	mov	r5,r19
  8010b8:	8009883a 	mov	r4,r16
  8010bc:	01c06d84 	movi	r7,438
  8010c0:	103ff226 	beq	r2,zero,80108c <_fopen_r+0x3c>
  8010c4:	d9800017 	ldw	r6,0(sp)
  8010c8:	08027d40 	call	8027d4 <_open_r>
  8010cc:	10001816 	blt	r2,zero,801130 <_fopen_r+0xe0>
  8010d0:	00c02034 	movhi	r3,128
  8010d4:	18cb7404 	addi	r3,r3,11728
  8010d8:	923fffcc 	andi	r8,r18,65535
  8010dc:	8880038d 	sth	r2,14(r17)
  8010e0:	00802034 	movhi	r2,128
  8010e4:	108b9304 	addi	r2,r2,11852
  8010e8:	88800815 	stw	r2,32(r17)
  8010ec:	88c00915 	stw	r3,36(r17)
  8010f0:	00802034 	movhi	r2,128
  8010f4:	108b5a04 	addi	r2,r2,11624
  8010f8:	00c02034 	movhi	r3,128
  8010fc:	18cb5804 	addi	r3,r3,11616
  801100:	4200400c 	andi	r8,r8,256
  801104:	8c80030d 	sth	r18,12(r17)
  801108:	8009883a 	mov	r4,r16
  80110c:	880b883a 	mov	r5,r17
  801110:	000d883a 	mov	r6,zero
  801114:	01c00084 	movi	r7,2
  801118:	88800a15 	stw	r2,40(r17)
  80111c:	88c00b15 	stw	r3,44(r17)
  801120:	8c400715 	stw	r17,28(r17)
  801124:	403fd926 	beq	r8,zero,80108c <_fopen_r+0x3c>
  801128:	08016000 	call	801600 <_fseek_r>
  80112c:	003fd706 	br	80108c <_fopen_r+0x3c>
  801130:	0800db40 	call	800db4 <__sfp_lock_acquire>
  801134:	8800030d 	sth	zero,12(r17)
  801138:	0800db80 	call	800db8 <__sfp_lock_release>
  80113c:	0023883a 	mov	r17,zero
  801140:	003fd206 	br	80108c <_fopen_r+0x3c>

00801144 <fopen>:
  801144:	01802074 	movhi	r6,129
  801148:	319a6904 	addi	r6,r6,27044
  80114c:	2007883a 	mov	r3,r4
  801150:	31000017 	ldw	r4,0(r6)
  801154:	280d883a 	mov	r6,r5
  801158:	180b883a 	mov	r5,r3
  80115c:	08010501 	jmpi	801050 <_fopen_r>

00801160 <fprintf>:
  801160:	defffc04 	addi	sp,sp,-16
  801164:	dfc00115 	stw	ra,4(sp)
  801168:	d9800215 	stw	r6,8(sp)
  80116c:	d9c00315 	stw	r7,12(sp)
  801170:	d8800204 	addi	r2,sp,8
  801174:	100d883a 	mov	r6,r2
  801178:	d8800015 	stw	r2,0(sp)
  80117c:	0804e3c0 	call	804e3c <__vfprintf_internal>
  801180:	dfc00117 	ldw	ra,4(sp)
  801184:	dec00404 	addi	sp,sp,16
  801188:	f800283a 	ret

0080118c <_fprintf_r>:
  80118c:	defffd04 	addi	sp,sp,-12
  801190:	2807883a 	mov	r3,r5
  801194:	dfc00115 	stw	ra,4(sp)
  801198:	d9c00215 	stw	r7,8(sp)
  80119c:	d8800204 	addi	r2,sp,8
  8011a0:	300b883a 	mov	r5,r6
  8011a4:	1809883a 	mov	r4,r3
  8011a8:	100d883a 	mov	r6,r2
  8011ac:	d8800015 	stw	r2,0(sp)
  8011b0:	0804e3c0 	call	804e3c <__vfprintf_internal>
  8011b4:	dfc00117 	ldw	ra,4(sp)
  8011b8:	dec00304 	addi	sp,sp,12
  8011bc:	f800283a 	ret

008011c0 <_malloc_trim_r>:
  8011c0:	defffb04 	addi	sp,sp,-20
  8011c4:	dcc00315 	stw	r19,12(sp)
  8011c8:	04c02074 	movhi	r19,129
  8011cc:	9cd49004 	addi	r19,r19,21056
  8011d0:	dc800215 	stw	r18,8(sp)
  8011d4:	dc400115 	stw	r17,4(sp)
  8011d8:	dc000015 	stw	r16,0(sp)
  8011dc:	2823883a 	mov	r17,r5
  8011e0:	2025883a 	mov	r18,r4
  8011e4:	dfc00415 	stw	ra,16(sp)
  8011e8:	08110b40 	call	8110b4 <__malloc_lock>
  8011ec:	98800217 	ldw	r2,8(r19)
  8011f0:	9009883a 	mov	r4,r18
  8011f4:	000b883a 	mov	r5,zero
  8011f8:	10c00117 	ldw	r3,4(r2)
  8011fc:	00bfff04 	movi	r2,-4
  801200:	18a0703a 	and	r16,r3,r2
  801204:	8463c83a 	sub	r17,r16,r17
  801208:	8c43fbc4 	addi	r17,r17,4079
  80120c:	8822d33a 	srli	r17,r17,12
  801210:	0083ffc4 	movi	r2,4095
  801214:	8c7fffc4 	addi	r17,r17,-1
  801218:	8822933a 	slli	r17,r17,12
  80121c:	1440060e 	bge	r2,r17,801238 <_malloc_trim_r+0x78>
  801220:	0802bdc0 	call	802bdc <_sbrk_r>
  801224:	98c00217 	ldw	r3,8(r19)
  801228:	9009883a 	mov	r4,r18
  80122c:	044bc83a 	sub	r5,zero,r17
  801230:	80c7883a 	add	r3,r16,r3
  801234:	10c00926 	beq	r2,r3,80125c <_malloc_trim_r+0x9c>
  801238:	08110d40 	call	8110d4 <__malloc_unlock>
  80123c:	0005883a 	mov	r2,zero
  801240:	dfc00417 	ldw	ra,16(sp)
  801244:	dcc00317 	ldw	r19,12(sp)
  801248:	dc800217 	ldw	r18,8(sp)
  80124c:	dc400117 	ldw	r17,4(sp)
  801250:	dc000017 	ldw	r16,0(sp)
  801254:	dec00504 	addi	sp,sp,20
  801258:	f800283a 	ret
  80125c:	9009883a 	mov	r4,r18
  801260:	0802bdc0 	call	802bdc <_sbrk_r>
  801264:	844dc83a 	sub	r6,r16,r17
  801268:	00ffffc4 	movi	r3,-1
  80126c:	9009883a 	mov	r4,r18
  801270:	000b883a 	mov	r5,zero
  801274:	01c020b4 	movhi	r7,130
  801278:	39e17804 	addi	r7,r7,-31264
  80127c:	31800054 	ori	r6,r6,1
  801280:	10c00926 	beq	r2,r3,8012a8 <_malloc_trim_r+0xe8>
  801284:	38800017 	ldw	r2,0(r7)
  801288:	98c00217 	ldw	r3,8(r19)
  80128c:	9009883a 	mov	r4,r18
  801290:	1445c83a 	sub	r2,r2,r17
  801294:	38800015 	stw	r2,0(r7)
  801298:	19800115 	stw	r6,4(r3)
  80129c:	08110d40 	call	8110d4 <__malloc_unlock>
  8012a0:	00800044 	movi	r2,1
  8012a4:	003fe606 	br	801240 <_malloc_trim_r+0x80>
  8012a8:	0802bdc0 	call	802bdc <_sbrk_r>
  8012ac:	99800217 	ldw	r6,8(r19)
  8012b0:	100f883a 	mov	r7,r2
  8012b4:	9009883a 	mov	r4,r18
  8012b8:	1187c83a 	sub	r3,r2,r6
  8012bc:	008003c4 	movi	r2,15
  8012c0:	19400054 	ori	r5,r3,1
  8012c4:	10ffdc0e 	bge	r2,r3,801238 <_malloc_trim_r+0x78>
  8012c8:	00802074 	movhi	r2,129
  8012cc:	109a6c04 	addi	r2,r2,27056
  8012d0:	10c00017 	ldw	r3,0(r2)
  8012d4:	008020b4 	movhi	r2,130
  8012d8:	10a17804 	addi	r2,r2,-31264
  8012dc:	31400115 	stw	r5,4(r6)
  8012e0:	38c7c83a 	sub	r3,r7,r3
  8012e4:	10c00015 	stw	r3,0(r2)
  8012e8:	003fd306 	br	801238 <_malloc_trim_r+0x78>

008012ec <_free_r>:
  8012ec:	defffd04 	addi	sp,sp,-12
  8012f0:	dc400115 	stw	r17,4(sp)
  8012f4:	dc000015 	stw	r16,0(sp)
  8012f8:	dfc00215 	stw	ra,8(sp)
  8012fc:	2821883a 	mov	r16,r5
  801300:	2023883a 	mov	r17,r4
  801304:	28005a26 	beq	r5,zero,801470 <_free_r+0x184>
  801308:	08110b40 	call	8110b4 <__malloc_lock>
  80130c:	823ffe04 	addi	r8,r16,-8
  801310:	41400117 	ldw	r5,4(r8)
  801314:	00bfff84 	movi	r2,-2
  801318:	02802074 	movhi	r10,129
  80131c:	52949004 	addi	r10,r10,21056
  801320:	288e703a 	and	r7,r5,r2
  801324:	41cd883a 	add	r6,r8,r7
  801328:	30c00117 	ldw	r3,4(r6)
  80132c:	51000217 	ldw	r4,8(r10)
  801330:	00bfff04 	movi	r2,-4
  801334:	1892703a 	and	r9,r3,r2
  801338:	5017883a 	mov	r11,r10
  80133c:	31006726 	beq	r6,r4,8014dc <_free_r+0x1f0>
  801340:	2880004c 	andi	r2,r5,1
  801344:	1005003a 	cmpeq	r2,r2,zero
  801348:	32400115 	stw	r9,4(r6)
  80134c:	10001a1e 	bne	r2,zero,8013b8 <_free_r+0xcc>
  801350:	000b883a 	mov	r5,zero
  801354:	3247883a 	add	r3,r6,r9
  801358:	18800117 	ldw	r2,4(r3)
  80135c:	1080004c 	andi	r2,r2,1
  801360:	1000231e 	bne	r2,zero,8013f0 <_free_r+0x104>
  801364:	280ac03a 	cmpne	r5,r5,zero
  801368:	3a4f883a 	add	r7,r7,r9
  80136c:	2800451e 	bne	r5,zero,801484 <_free_r+0x198>
  801370:	31000217 	ldw	r4,8(r6)
  801374:	00802074 	movhi	r2,129
  801378:	10949204 	addi	r2,r2,21064
  80137c:	20807b26 	beq	r4,r2,80156c <_free_r+0x280>
  801380:	30800317 	ldw	r2,12(r6)
  801384:	3a07883a 	add	r3,r7,r8
  801388:	19c00015 	stw	r7,0(r3)
  80138c:	11000215 	stw	r4,8(r2)
  801390:	20800315 	stw	r2,12(r4)
  801394:	38800054 	ori	r2,r7,1
  801398:	40800115 	stw	r2,4(r8)
  80139c:	28001a26 	beq	r5,zero,801408 <_free_r+0x11c>
  8013a0:	8809883a 	mov	r4,r17
  8013a4:	dfc00217 	ldw	ra,8(sp)
  8013a8:	dc400117 	ldw	r17,4(sp)
  8013ac:	dc000017 	ldw	r16,0(sp)
  8013b0:	dec00304 	addi	sp,sp,12
  8013b4:	08110d41 	jmpi	8110d4 <__malloc_unlock>
  8013b8:	80bffe17 	ldw	r2,-8(r16)
  8013bc:	50c00204 	addi	r3,r10,8
  8013c0:	4091c83a 	sub	r8,r8,r2
  8013c4:	41000217 	ldw	r4,8(r8)
  8013c8:	388f883a 	add	r7,r7,r2
  8013cc:	20c06126 	beq	r4,r3,801554 <_free_r+0x268>
  8013d0:	40800317 	ldw	r2,12(r8)
  8013d4:	3247883a 	add	r3,r6,r9
  8013d8:	000b883a 	mov	r5,zero
  8013dc:	11000215 	stw	r4,8(r2)
  8013e0:	20800315 	stw	r2,12(r4)
  8013e4:	18800117 	ldw	r2,4(r3)
  8013e8:	1080004c 	andi	r2,r2,1
  8013ec:	103fdd26 	beq	r2,zero,801364 <_free_r+0x78>
  8013f0:	38800054 	ori	r2,r7,1
  8013f4:	3a07883a 	add	r3,r7,r8
  8013f8:	280ac03a 	cmpne	r5,r5,zero
  8013fc:	40800115 	stw	r2,4(r8)
  801400:	19c00015 	stw	r7,0(r3)
  801404:	283fe61e 	bne	r5,zero,8013a0 <_free_r+0xb4>
  801408:	00807fc4 	movi	r2,511
  80140c:	11c01f2e 	bgeu	r2,r7,80148c <_free_r+0x1a0>
  801410:	3806d27a 	srli	r3,r7,9
  801414:	1800481e 	bne	r3,zero,801538 <_free_r+0x24c>
  801418:	3804d0fa 	srli	r2,r7,3
  80141c:	100690fa 	slli	r3,r2,3
  801420:	1acd883a 	add	r6,r3,r11
  801424:	31400217 	ldw	r5,8(r6)
  801428:	31405926 	beq	r6,r5,801590 <_free_r+0x2a4>
  80142c:	28800117 	ldw	r2,4(r5)
  801430:	00ffff04 	movi	r3,-4
  801434:	10c4703a 	and	r2,r2,r3
  801438:	3880022e 	bgeu	r7,r2,801444 <_free_r+0x158>
  80143c:	29400217 	ldw	r5,8(r5)
  801440:	317ffa1e 	bne	r6,r5,80142c <_free_r+0x140>
  801444:	29800317 	ldw	r6,12(r5)
  801448:	41800315 	stw	r6,12(r8)
  80144c:	41400215 	stw	r5,8(r8)
  801450:	8809883a 	mov	r4,r17
  801454:	2a000315 	stw	r8,12(r5)
  801458:	32000215 	stw	r8,8(r6)
  80145c:	dfc00217 	ldw	ra,8(sp)
  801460:	dc400117 	ldw	r17,4(sp)
  801464:	dc000017 	ldw	r16,0(sp)
  801468:	dec00304 	addi	sp,sp,12
  80146c:	08110d41 	jmpi	8110d4 <__malloc_unlock>
  801470:	dfc00217 	ldw	ra,8(sp)
  801474:	dc400117 	ldw	r17,4(sp)
  801478:	dc000017 	ldw	r16,0(sp)
  80147c:	dec00304 	addi	sp,sp,12
  801480:	f800283a 	ret
  801484:	31000217 	ldw	r4,8(r6)
  801488:	003fbd06 	br	801380 <_free_r+0x94>
  80148c:	3806d0fa 	srli	r3,r7,3
  801490:	00800044 	movi	r2,1
  801494:	51400117 	ldw	r5,4(r10)
  801498:	180890fa 	slli	r4,r3,3
  80149c:	1807d0ba 	srai	r3,r3,2
  8014a0:	22c9883a 	add	r4,r4,r11
  8014a4:	21800217 	ldw	r6,8(r4)
  8014a8:	10c4983a 	sll	r2,r2,r3
  8014ac:	41000315 	stw	r4,12(r8)
  8014b0:	41800215 	stw	r6,8(r8)
  8014b4:	288ab03a 	or	r5,r5,r2
  8014b8:	22000215 	stw	r8,8(r4)
  8014bc:	8809883a 	mov	r4,r17
  8014c0:	51400115 	stw	r5,4(r10)
  8014c4:	32000315 	stw	r8,12(r6)
  8014c8:	dfc00217 	ldw	ra,8(sp)
  8014cc:	dc400117 	ldw	r17,4(sp)
  8014d0:	dc000017 	ldw	r16,0(sp)
  8014d4:	dec00304 	addi	sp,sp,12
  8014d8:	08110d41 	jmpi	8110d4 <__malloc_unlock>
  8014dc:	2880004c 	andi	r2,r5,1
  8014e0:	3a4d883a 	add	r6,r7,r9
  8014e4:	1000071e 	bne	r2,zero,801504 <_free_r+0x218>
  8014e8:	80bffe17 	ldw	r2,-8(r16)
  8014ec:	4091c83a 	sub	r8,r8,r2
  8014f0:	41000317 	ldw	r4,12(r8)
  8014f4:	40c00217 	ldw	r3,8(r8)
  8014f8:	308d883a 	add	r6,r6,r2
  8014fc:	20c00215 	stw	r3,8(r4)
  801500:	19000315 	stw	r4,12(r3)
  801504:	00802074 	movhi	r2,129
  801508:	109a6b04 	addi	r2,r2,27052
  80150c:	11000017 	ldw	r4,0(r2)
  801510:	30c00054 	ori	r3,r6,1
  801514:	52000215 	stw	r8,8(r10)
  801518:	40c00115 	stw	r3,4(r8)
  80151c:	313fa036 	bltu	r6,r4,8013a0 <_free_r+0xb4>
  801520:	008020b4 	movhi	r2,130
  801524:	10a16c04 	addi	r2,r2,-31312
  801528:	11400017 	ldw	r5,0(r2)
  80152c:	8809883a 	mov	r4,r17
  801530:	08011c00 	call	8011c0 <_malloc_trim_r>
  801534:	003f9a06 	br	8013a0 <_free_r+0xb4>
  801538:	00800104 	movi	r2,4
  80153c:	10c0072e 	bgeu	r2,r3,80155c <_free_r+0x270>
  801540:	00800504 	movi	r2,20
  801544:	10c01936 	bltu	r2,r3,8015ac <_free_r+0x2c0>
  801548:	188016c4 	addi	r2,r3,91
  80154c:	100690fa 	slli	r3,r2,3
  801550:	003fb306 	br	801420 <_free_r+0x134>
  801554:	01400044 	movi	r5,1
  801558:	003f7e06 	br	801354 <_free_r+0x68>
  80155c:	3804d1ba 	srli	r2,r7,6
  801560:	10800e04 	addi	r2,r2,56
  801564:	100690fa 	slli	r3,r2,3
  801568:	003fad06 	br	801420 <_free_r+0x134>
  80156c:	22000315 	stw	r8,12(r4)
  801570:	22000215 	stw	r8,8(r4)
  801574:	3a05883a 	add	r2,r7,r8
  801578:	38c00054 	ori	r3,r7,1
  80157c:	11c00015 	stw	r7,0(r2)
  801580:	41000215 	stw	r4,8(r8)
  801584:	40c00115 	stw	r3,4(r8)
  801588:	41000315 	stw	r4,12(r8)
  80158c:	003f8406 	br	8013a0 <_free_r+0xb4>
  801590:	1005d0ba 	srai	r2,r2,2
  801594:	00c00044 	movi	r3,1
  801598:	51000117 	ldw	r4,4(r10)
  80159c:	1886983a 	sll	r3,r3,r2
  8015a0:	20c8b03a 	or	r4,r4,r3
  8015a4:	51000115 	stw	r4,4(r10)
  8015a8:	003fa706 	br	801448 <_free_r+0x15c>
  8015ac:	00801504 	movi	r2,84
  8015b0:	10c00436 	bltu	r2,r3,8015c4 <_free_r+0x2d8>
  8015b4:	3804d33a 	srli	r2,r7,12
  8015b8:	10801b84 	addi	r2,r2,110
  8015bc:	100690fa 	slli	r3,r2,3
  8015c0:	003f9706 	br	801420 <_free_r+0x134>
  8015c4:	00805504 	movi	r2,340
  8015c8:	10c00436 	bltu	r2,r3,8015dc <_free_r+0x2f0>
  8015cc:	3804d3fa 	srli	r2,r7,15
  8015d0:	10801dc4 	addi	r2,r2,119
  8015d4:	100690fa 	slli	r3,r2,3
  8015d8:	003f9106 	br	801420 <_free_r+0x134>
  8015dc:	00815504 	movi	r2,1364
  8015e0:	10c0032e 	bgeu	r2,r3,8015f0 <_free_r+0x304>
  8015e4:	00801f84 	movi	r2,126
  8015e8:	00c0fc04 	movi	r3,1008
  8015ec:	003f8c06 	br	801420 <_free_r+0x134>
  8015f0:	3804d4ba 	srli	r2,r7,18
  8015f4:	10801f04 	addi	r2,r2,124
  8015f8:	100690fa 	slli	r3,r2,3
  8015fc:	003f8806 	br	801420 <_free_r+0x134>

00801600 <_fseek_r>:
  801600:	deffe804 	addi	sp,sp,-96
  801604:	dd801515 	stw	r22,84(sp)
  801608:	dcc01215 	stw	r19,72(sp)
  80160c:	dc801115 	stw	r18,68(sp)
  801610:	dc000f15 	stw	r16,60(sp)
  801614:	dfc01715 	stw	ra,92(sp)
  801618:	ddc01615 	stw	r23,88(sp)
  80161c:	dd401415 	stw	r21,80(sp)
  801620:	dd001315 	stw	r20,76(sp)
  801624:	dc401015 	stw	r17,64(sp)
  801628:	2025883a 	mov	r18,r4
  80162c:	2821883a 	mov	r16,r5
  801630:	302d883a 	mov	r22,r6
  801634:	3827883a 	mov	r19,r7
  801638:	20000226 	beq	r4,zero,801644 <_fseek_r+0x44>
  80163c:	20800e17 	ldw	r2,56(r4)
  801640:	10007826 	beq	r2,zero,801824 <_fseek_r+0x224>
  801644:	8080030b 	ldhu	r2,12(r16)
  801648:	00c04204 	movi	r3,264
  80164c:	1080420c 	andi	r2,r2,264
  801650:	10c07926 	beq	r2,r3,801838 <_fseek_r+0x238>
  801654:	85400a17 	ldw	r21,40(r16)
  801658:	a800ea26 	beq	r21,zero,801a04 <_fseek_r+0x404>
  80165c:	00800044 	movi	r2,1
  801660:	98805f26 	beq	r19,r2,8017e0 <_fseek_r+0x1e0>
  801664:	00800084 	movi	r2,2
  801668:	98801026 	beq	r19,r2,8016ac <_fseek_r+0xac>
  80166c:	98000f26 	beq	r19,zero,8016ac <_fseek_r+0xac>
  801670:	00800584 	movi	r2,22
  801674:	013fffc4 	movi	r4,-1
  801678:	90800015 	stw	r2,0(r18)
  80167c:	2005883a 	mov	r2,r4
  801680:	dfc01717 	ldw	ra,92(sp)
  801684:	ddc01617 	ldw	r23,88(sp)
  801688:	dd801517 	ldw	r22,84(sp)
  80168c:	dd401417 	ldw	r21,80(sp)
  801690:	dd001317 	ldw	r20,76(sp)
  801694:	dcc01217 	ldw	r19,72(sp)
  801698:	dc801117 	ldw	r18,68(sp)
  80169c:	dc401017 	ldw	r17,64(sp)
  8016a0:	dc000f17 	ldw	r16,60(sp)
  8016a4:	dec01804 	addi	sp,sp,96
  8016a8:	f800283a 	ret
  8016ac:	81800417 	ldw	r6,16(r16)
  8016b0:	0023883a 	mov	r17,zero
  8016b4:	002f883a 	mov	r23,zero
  8016b8:	3000a626 	beq	r6,zero,801954 <_fseek_r+0x354>
  8016bc:	8100030b 	ldhu	r4,12(r16)
  8016c0:	2082068c 	andi	r2,r4,2074
  8016c4:	1000081e 	bne	r2,zero,8016e8 <_fseek_r+0xe8>
  8016c8:	2081000c 	andi	r2,r4,1024
  8016cc:	10001b1e 	bne	r2,zero,80173c <_fseek_r+0x13c>
  8016d0:	00802034 	movhi	r2,128
  8016d4:	108b5a04 	addi	r2,r2,11624
  8016d8:	a8800926 	beq	r21,r2,801700 <_fseek_r+0x100>
  8016dc:	8080030b 	ldhu	r2,12(r16)
  8016e0:	10820014 	ori	r2,r2,2048
  8016e4:	8080030d 	sth	r2,12(r16)
  8016e8:	9009883a 	mov	r4,r18
  8016ec:	800b883a 	mov	r5,r16
  8016f0:	0800b2c0 	call	800b2c <_fflush_r>
  8016f4:	1000a326 	beq	r2,zero,801984 <_fseek_r+0x384>
  8016f8:	013fffc4 	movi	r4,-1
  8016fc:	003fdf06 	br	80167c <_fseek_r+0x7c>
  801700:	8140038f 	ldh	r5,14(r16)
  801704:	283ff516 	blt	r5,zero,8016dc <_fseek_r+0xdc>
  801708:	9009883a 	mov	r4,r18
  80170c:	d80d883a 	mov	r6,sp
  801710:	0801a600 	call	801a60 <_fstat_r>
  801714:	103ff11e 	bne	r2,zero,8016dc <_fseek_r+0xdc>
  801718:	d8800117 	ldw	r2,4(sp)
  80171c:	00e00014 	movui	r3,32768
  801720:	10bc000c 	andi	r2,r2,61440
  801724:	10ffed1e 	bne	r2,r3,8016dc <_fseek_r+0xdc>
  801728:	80c0030b 	ldhu	r3,12(r16)
  80172c:	00810004 	movi	r2,1024
  801730:	80801315 	stw	r2,76(r16)
  801734:	1886b03a 	or	r3,r3,r2
  801738:	80c0030d 	sth	r3,12(r16)
  80173c:	9800701e 	bne	r19,zero,801900 <_fseek_r+0x300>
  801740:	b029883a 	mov	r20,r22
  801744:	b804c03a 	cmpne	r2,r23,zero
  801748:	10003f1e 	bne	r2,zero,801848 <_fseek_r+0x248>
  80174c:	8100030b 	ldhu	r4,12(r16)
  801750:	2084000c 	andi	r2,r4,4096
  801754:	1000a126 	beq	r2,zero,8019dc <_fseek_r+0x3dc>
  801758:	81801417 	ldw	r6,80(r16)
  80175c:	80c00117 	ldw	r3,4(r16)
  801760:	81400c17 	ldw	r5,48(r16)
  801764:	30e3c83a 	sub	r17,r6,r3
  801768:	28008026 	beq	r5,zero,80196c <_fseek_r+0x36c>
  80176c:	81c00f17 	ldw	r7,60(r16)
  801770:	89e3c83a 	sub	r17,r17,r7
  801774:	80800e17 	ldw	r2,56(r16)
  801778:	81800417 	ldw	r6,16(r16)
  80177c:	88c7883a 	add	r3,r17,r3
  801780:	1185c83a 	sub	r2,r2,r6
  801784:	11cf883a 	add	r7,r2,r7
  801788:	1887c83a 	sub	r3,r3,r2
  80178c:	2088000c 	andi	r2,r4,8192
  801790:	10003e1e 	bne	r2,zero,80188c <_fseek_r+0x28c>
  801794:	a0c03d16 	blt	r20,r3,80188c <_fseek_r+0x28c>
  801798:	38c5883a 	add	r2,r7,r3
  80179c:	a0803b2e 	bgeu	r20,r2,80188c <_fseek_r+0x28c>
  8017a0:	a0c5c83a 	sub	r2,r20,r3
  8017a4:	3887c83a 	sub	r3,r7,r2
  8017a8:	3085883a 	add	r2,r6,r2
  8017ac:	80800015 	stw	r2,0(r16)
  8017b0:	80c00115 	stw	r3,4(r16)
  8017b4:	28000526 	beq	r5,zero,8017cc <_fseek_r+0x1cc>
  8017b8:	80801004 	addi	r2,r16,64
  8017bc:	28800226 	beq	r5,r2,8017c8 <_fseek_r+0x1c8>
  8017c0:	9009883a 	mov	r4,r18
  8017c4:	08012ec0 	call	8012ec <_free_r>
  8017c8:	80000c15 	stw	zero,48(r16)
  8017cc:	8080030b 	ldhu	r2,12(r16)
  8017d0:	0009883a 	mov	r4,zero
  8017d4:	10bff7cc 	andi	r2,r2,65503
  8017d8:	8080030d 	sth	r2,12(r16)
  8017dc:	003fa706 	br	80167c <_fseek_r+0x7c>
  8017e0:	9009883a 	mov	r4,r18
  8017e4:	800b883a 	mov	r5,r16
  8017e8:	0800b2c0 	call	800b2c <_fflush_r>
  8017ec:	8100030b 	ldhu	r4,12(r16)
  8017f0:	2084000c 	andi	r2,r4,4096
  8017f4:	10008726 	beq	r2,zero,801a14 <_fseek_r+0x414>
  8017f8:	84401417 	ldw	r17,80(r16)
  8017fc:	2080010c 	andi	r2,r4,4
  801800:	1000171e 	bne	r2,zero,801860 <_fseek_r+0x260>
  801804:	2080020c 	andi	r2,r4,8
  801808:	10003b26 	beq	r2,zero,8018f8 <_fseek_r+0x2f8>
  80180c:	80800017 	ldw	r2,0(r16)
  801810:	10003926 	beq	r2,zero,8018f8 <_fseek_r+0x2f8>
  801814:	81800417 	ldw	r6,16(r16)
  801818:	1185c83a 	sub	r2,r2,r6
  80181c:	88a3883a 	add	r17,r17,r2
  801820:	00001606 	br	80187c <_fseek_r+0x27c>
  801824:	0800dc40 	call	800dc4 <__sinit>
  801828:	8080030b 	ldhu	r2,12(r16)
  80182c:	00c04204 	movi	r3,264
  801830:	1080420c 	andi	r2,r2,264
  801834:	10ff871e 	bne	r2,r3,801654 <_fseek_r+0x54>
  801838:	9009883a 	mov	r4,r18
  80183c:	800b883a 	mov	r5,r16
  801840:	0800b2c0 	call	800b2c <_fflush_r>
  801844:	003f8306 	br	801654 <_fseek_r+0x54>
  801848:	81400c17 	ldw	r5,48(r16)
  80184c:	28004526 	beq	r5,zero,801964 <_fseek_r+0x364>
  801850:	8100030b 	ldhu	r4,12(r16)
  801854:	80c00117 	ldw	r3,4(r16)
  801858:	81c00f17 	ldw	r7,60(r16)
  80185c:	003fc506 	br	801774 <_fseek_r+0x174>
  801860:	80c00117 	ldw	r3,4(r16)
  801864:	80800c17 	ldw	r2,48(r16)
  801868:	88e3c83a 	sub	r17,r17,r3
  80186c:	10002226 	beq	r2,zero,8018f8 <_fseek_r+0x2f8>
  801870:	81c00f17 	ldw	r7,60(r16)
  801874:	81800417 	ldw	r6,16(r16)
  801878:	89e3c83a 	sub	r17,r17,r7
  80187c:	b46d883a 	add	r22,r22,r17
  801880:	0027883a 	mov	r19,zero
  801884:	05c00044 	movi	r23,1
  801888:	003f8b06 	br	8016b8 <_fseek_r+0xb8>
  80188c:	80801317 	ldw	r2,76(r16)
  801890:	81400717 	ldw	r5,28(r16)
  801894:	9009883a 	mov	r4,r18
  801898:	0085c83a 	sub	r2,zero,r2
  80189c:	a0a2703a 	and	r17,r20,r2
  8018a0:	880d883a 	mov	r6,r17
  8018a4:	000f883a 	mov	r7,zero
  8018a8:	a83ee83a 	callr	r21
  8018ac:	00ffffc4 	movi	r3,-1
  8018b0:	10ff8d26 	beq	r2,r3,8016e8 <_fseek_r+0xe8>
  8018b4:	80800417 	ldw	r2,16(r16)
  8018b8:	81400c17 	ldw	r5,48(r16)
  8018bc:	80000115 	stw	zero,4(r16)
  8018c0:	80800015 	stw	r2,0(r16)
  8018c4:	28000526 	beq	r5,zero,8018dc <_fseek_r+0x2dc>
  8018c8:	80801004 	addi	r2,r16,64
  8018cc:	28800226 	beq	r5,r2,8018d8 <_fseek_r+0x2d8>
  8018d0:	9009883a 	mov	r4,r18
  8018d4:	08012ec0 	call	8012ec <_free_r>
  8018d8:	80000c15 	stw	zero,48(r16)
  8018dc:	8080030b 	ldhu	r2,12(r16)
  8018e0:	a463c83a 	sub	r17,r20,r17
  8018e4:	10bff7cc 	andi	r2,r2,65503
  8018e8:	8080030d 	sth	r2,12(r16)
  8018ec:	88000c1e 	bne	r17,zero,801920 <_fseek_r+0x320>
  8018f0:	0009883a 	mov	r4,zero
  8018f4:	003f6106 	br	80167c <_fseek_r+0x7c>
  8018f8:	81800417 	ldw	r6,16(r16)
  8018fc:	003fdf06 	br	80187c <_fseek_r+0x27c>
  801900:	8140038f 	ldh	r5,14(r16)
  801904:	9009883a 	mov	r4,r18
  801908:	d80d883a 	mov	r6,sp
  80190c:	0801a600 	call	801a60 <_fstat_r>
  801910:	103f751e 	bne	r2,zero,8016e8 <_fseek_r+0xe8>
  801914:	d8800417 	ldw	r2,16(sp)
  801918:	b0a9883a 	add	r20,r22,r2
  80191c:	003f8906 	br	801744 <_fseek_r+0x144>
  801920:	9009883a 	mov	r4,r18
  801924:	800b883a 	mov	r5,r16
  801928:	080299c0 	call	80299c <__srefill_r>
  80192c:	103f6e1e 	bne	r2,zero,8016e8 <_fseek_r+0xe8>
  801930:	80c00117 	ldw	r3,4(r16)
  801934:	1c7f6c36 	bltu	r3,r17,8016e8 <_fseek_r+0xe8>
  801938:	80800017 	ldw	r2,0(r16)
  80193c:	1c47c83a 	sub	r3,r3,r17
  801940:	0009883a 	mov	r4,zero
  801944:	1445883a 	add	r2,r2,r17
  801948:	80c00115 	stw	r3,4(r16)
  80194c:	80800015 	stw	r2,0(r16)
  801950:	003f4a06 	br	80167c <_fseek_r+0x7c>
  801954:	9009883a 	mov	r4,r18
  801958:	800b883a 	mov	r5,r16
  80195c:	0801e680 	call	801e68 <__smakebuf_r>
  801960:	003f5606 	br	8016bc <_fseek_r+0xbc>
  801964:	8100030b 	ldhu	r4,12(r16)
  801968:	80c00117 	ldw	r3,4(r16)
  80196c:	80800017 	ldw	r2,0(r16)
  801970:	81800417 	ldw	r6,16(r16)
  801974:	1185c83a 	sub	r2,r2,r6
  801978:	10cf883a 	add	r7,r2,r3
  80197c:	8887c83a 	sub	r3,r17,r2
  801980:	003f8206 	br	80178c <_fseek_r+0x18c>
  801984:	81400717 	ldw	r5,28(r16)
  801988:	b00d883a 	mov	r6,r22
  80198c:	980f883a 	mov	r7,r19
  801990:	9009883a 	mov	r4,r18
  801994:	a83ee83a 	callr	r21
  801998:	00ffffc4 	movi	r3,-1
  80199c:	10ff5626 	beq	r2,r3,8016f8 <_fseek_r+0xf8>
  8019a0:	81400c17 	ldw	r5,48(r16)
  8019a4:	28000526 	beq	r5,zero,8019bc <_fseek_r+0x3bc>
  8019a8:	80801004 	addi	r2,r16,64
  8019ac:	28800226 	beq	r5,r2,8019b8 <_fseek_r+0x3b8>
  8019b0:	9009883a 	mov	r4,r18
  8019b4:	08012ec0 	call	8012ec <_free_r>
  8019b8:	80000c15 	stw	zero,48(r16)
  8019bc:	8080030b 	ldhu	r2,12(r16)
  8019c0:	80c00417 	ldw	r3,16(r16)
  8019c4:	0009883a 	mov	r4,zero
  8019c8:	10bdf7cc 	andi	r2,r2,63455
  8019cc:	8080030d 	sth	r2,12(r16)
  8019d0:	80c00015 	stw	r3,0(r16)
  8019d4:	80000115 	stw	zero,4(r16)
  8019d8:	003f2806 	br	80167c <_fseek_r+0x7c>
  8019dc:	81400717 	ldw	r5,28(r16)
  8019e0:	000d883a 	mov	r6,zero
  8019e4:	9009883a 	mov	r4,r18
  8019e8:	01c00044 	movi	r7,1
  8019ec:	a83ee83a 	callr	r21
  8019f0:	100d883a 	mov	r6,r2
  8019f4:	00bfffc4 	movi	r2,-1
  8019f8:	30bf3b26 	beq	r6,r2,8016e8 <_fseek_r+0xe8>
  8019fc:	8100030b 	ldhu	r4,12(r16)
  801a00:	003f5606 	br	80175c <_fseek_r+0x15c>
  801a04:	00800744 	movi	r2,29
  801a08:	013fffc4 	movi	r4,-1
  801a0c:	90800015 	stw	r2,0(r18)
  801a10:	003f1a06 	br	80167c <_fseek_r+0x7c>
  801a14:	81400717 	ldw	r5,28(r16)
  801a18:	980f883a 	mov	r7,r19
  801a1c:	9009883a 	mov	r4,r18
  801a20:	000d883a 	mov	r6,zero
  801a24:	a83ee83a 	callr	r21
  801a28:	1023883a 	mov	r17,r2
  801a2c:	00bfffc4 	movi	r2,-1
  801a30:	88bf3126 	beq	r17,r2,8016f8 <_fseek_r+0xf8>
  801a34:	8100030b 	ldhu	r4,12(r16)
  801a38:	003f7006 	br	8017fc <_fseek_r+0x1fc>

00801a3c <fseek>:
  801a3c:	00802074 	movhi	r2,129
  801a40:	109a6904 	addi	r2,r2,27044
  801a44:	2013883a 	mov	r9,r4
  801a48:	11000017 	ldw	r4,0(r2)
  801a4c:	2805883a 	mov	r2,r5
  801a50:	300f883a 	mov	r7,r6
  801a54:	480b883a 	mov	r5,r9
  801a58:	100d883a 	mov	r6,r2
  801a5c:	08016001 	jmpi	801600 <_fseek_r>

00801a60 <_fstat_r>:
  801a60:	defffd04 	addi	sp,sp,-12
  801a64:	dc000015 	stw	r16,0(sp)
  801a68:	040020b4 	movhi	r16,130
  801a6c:	84216b04 	addi	r16,r16,-31316
  801a70:	dc400115 	stw	r17,4(sp)
  801a74:	80000015 	stw	zero,0(r16)
  801a78:	2023883a 	mov	r17,r4
  801a7c:	2809883a 	mov	r4,r5
  801a80:	300b883a 	mov	r5,r6
  801a84:	dfc00215 	stw	ra,8(sp)
  801a88:	08108e00 	call	8108e0 <fstat>
  801a8c:	1007883a 	mov	r3,r2
  801a90:	00bfffc4 	movi	r2,-1
  801a94:	18800626 	beq	r3,r2,801ab0 <_fstat_r+0x50>
  801a98:	1805883a 	mov	r2,r3
  801a9c:	dfc00217 	ldw	ra,8(sp)
  801aa0:	dc400117 	ldw	r17,4(sp)
  801aa4:	dc000017 	ldw	r16,0(sp)
  801aa8:	dec00304 	addi	sp,sp,12
  801aac:	f800283a 	ret
  801ab0:	80800017 	ldw	r2,0(r16)
  801ab4:	103ff826 	beq	r2,zero,801a98 <_fstat_r+0x38>
  801ab8:	88800015 	stw	r2,0(r17)
  801abc:	1805883a 	mov	r2,r3
  801ac0:	dfc00217 	ldw	ra,8(sp)
  801ac4:	dc400117 	ldw	r17,4(sp)
  801ac8:	dc000017 	ldw	r16,0(sp)
  801acc:	dec00304 	addi	sp,sp,12
  801ad0:	f800283a 	ret

00801ad4 <_fwalk_reent>:
  801ad4:	defff704 	addi	sp,sp,-36
  801ad8:	dcc00315 	stw	r19,12(sp)
  801adc:	24c0b804 	addi	r19,r4,736
  801ae0:	dd800615 	stw	r22,24(sp)
  801ae4:	dd400515 	stw	r21,20(sp)
  801ae8:	dfc00815 	stw	ra,32(sp)
  801aec:	ddc00715 	stw	r23,28(sp)
  801af0:	dd000415 	stw	r20,16(sp)
  801af4:	dc800215 	stw	r18,8(sp)
  801af8:	dc400115 	stw	r17,4(sp)
  801afc:	dc000015 	stw	r16,0(sp)
  801b00:	202b883a 	mov	r21,r4
  801b04:	282d883a 	mov	r22,r5
  801b08:	0800db40 	call	800db4 <__sfp_lock_acquire>
  801b0c:	98002126 	beq	r19,zero,801b94 <_fwalk_reent+0xc0>
  801b10:	002f883a 	mov	r23,zero
  801b14:	9c800117 	ldw	r18,4(r19)
  801b18:	9c000217 	ldw	r16,8(r19)
  801b1c:	90bfffc4 	addi	r2,r18,-1
  801b20:	10000d16 	blt	r2,zero,801b58 <_fwalk_reent+0x84>
  801b24:	0023883a 	mov	r17,zero
  801b28:	053fffc4 	movi	r20,-1
  801b2c:	8080030f 	ldh	r2,12(r16)
  801b30:	8c400044 	addi	r17,r17,1
  801b34:	10000626 	beq	r2,zero,801b50 <_fwalk_reent+0x7c>
  801b38:	8080038f 	ldh	r2,14(r16)
  801b3c:	800b883a 	mov	r5,r16
  801b40:	a809883a 	mov	r4,r21
  801b44:	15000226 	beq	r2,r20,801b50 <_fwalk_reent+0x7c>
  801b48:	b03ee83a 	callr	r22
  801b4c:	b8aeb03a 	or	r23,r23,r2
  801b50:	84001704 	addi	r16,r16,92
  801b54:	947ff51e 	bne	r18,r17,801b2c <_fwalk_reent+0x58>
  801b58:	9cc00017 	ldw	r19,0(r19)
  801b5c:	983fed1e 	bne	r19,zero,801b14 <_fwalk_reent+0x40>
  801b60:	0800db80 	call	800db8 <__sfp_lock_release>
  801b64:	b805883a 	mov	r2,r23
  801b68:	dfc00817 	ldw	ra,32(sp)
  801b6c:	ddc00717 	ldw	r23,28(sp)
  801b70:	dd800617 	ldw	r22,24(sp)
  801b74:	dd400517 	ldw	r21,20(sp)
  801b78:	dd000417 	ldw	r20,16(sp)
  801b7c:	dcc00317 	ldw	r19,12(sp)
  801b80:	dc800217 	ldw	r18,8(sp)
  801b84:	dc400117 	ldw	r17,4(sp)
  801b88:	dc000017 	ldw	r16,0(sp)
  801b8c:	dec00904 	addi	sp,sp,36
  801b90:	f800283a 	ret
  801b94:	002f883a 	mov	r23,zero
  801b98:	003ff106 	br	801b60 <_fwalk_reent+0x8c>

00801b9c <_fwalk>:
  801b9c:	defff804 	addi	sp,sp,-32
  801ba0:	dcc00315 	stw	r19,12(sp)
  801ba4:	24c0b804 	addi	r19,r4,736
  801ba8:	dd400515 	stw	r21,20(sp)
  801bac:	dfc00715 	stw	ra,28(sp)
  801bb0:	dd800615 	stw	r22,24(sp)
  801bb4:	dd000415 	stw	r20,16(sp)
  801bb8:	dc800215 	stw	r18,8(sp)
  801bbc:	dc400115 	stw	r17,4(sp)
  801bc0:	dc000015 	stw	r16,0(sp)
  801bc4:	282b883a 	mov	r21,r5
  801bc8:	0800db40 	call	800db4 <__sfp_lock_acquire>
  801bcc:	98001f26 	beq	r19,zero,801c4c <_fwalk+0xb0>
  801bd0:	002d883a 	mov	r22,zero
  801bd4:	9c800117 	ldw	r18,4(r19)
  801bd8:	9c000217 	ldw	r16,8(r19)
  801bdc:	90bfffc4 	addi	r2,r18,-1
  801be0:	10000c16 	blt	r2,zero,801c14 <_fwalk+0x78>
  801be4:	0023883a 	mov	r17,zero
  801be8:	053fffc4 	movi	r20,-1
  801bec:	8080030f 	ldh	r2,12(r16)
  801bf0:	8c400044 	addi	r17,r17,1
  801bf4:	10000526 	beq	r2,zero,801c0c <_fwalk+0x70>
  801bf8:	8080038f 	ldh	r2,14(r16)
  801bfc:	8009883a 	mov	r4,r16
  801c00:	15000226 	beq	r2,r20,801c0c <_fwalk+0x70>
  801c04:	a83ee83a 	callr	r21
  801c08:	b0acb03a 	or	r22,r22,r2
  801c0c:	84001704 	addi	r16,r16,92
  801c10:	947ff61e 	bne	r18,r17,801bec <_fwalk+0x50>
  801c14:	9cc00017 	ldw	r19,0(r19)
  801c18:	983fee1e 	bne	r19,zero,801bd4 <_fwalk+0x38>
  801c1c:	0800db80 	call	800db8 <__sfp_lock_release>
  801c20:	b005883a 	mov	r2,r22
  801c24:	dfc00717 	ldw	ra,28(sp)
  801c28:	dd800617 	ldw	r22,24(sp)
  801c2c:	dd400517 	ldw	r21,20(sp)
  801c30:	dd000417 	ldw	r20,16(sp)
  801c34:	dcc00317 	ldw	r19,12(sp)
  801c38:	dc800217 	ldw	r18,8(sp)
  801c3c:	dc400117 	ldw	r17,4(sp)
  801c40:	dc000017 	ldw	r16,0(sp)
  801c44:	dec00804 	addi	sp,sp,32
  801c48:	f800283a 	ret
  801c4c:	002d883a 	mov	r22,zero
  801c50:	003ff206 	br	801c1c <_fwalk+0x80>

00801c54 <_fwrite_r>:
  801c54:	defff604 	addi	sp,sp,-40
  801c58:	dc000515 	stw	r16,20(sp)
  801c5c:	d9400015 	stw	r5,0(sp)
  801c60:	2021883a 	mov	r16,r4
  801c64:	300b883a 	mov	r5,r6
  801c68:	3809883a 	mov	r4,r7
  801c6c:	dcc00815 	stw	r19,32(sp)
  801c70:	dc800715 	stw	r18,28(sp)
  801c74:	dc400615 	stw	r17,24(sp)
  801c78:	dfc00915 	stw	ra,36(sp)
  801c7c:	3825883a 	mov	r18,r7
  801c80:	3027883a 	mov	r19,r6
  801c84:	080fe8c0 	call	80fe8c <__mulsi3>
  801c88:	1023883a 	mov	r17,r2
  801c8c:	00800044 	movi	r2,1
  801c90:	d8800315 	stw	r2,12(sp)
  801c94:	dc400115 	stw	r17,4(sp)
  801c98:	dc400415 	stw	r17,16(sp)
  801c9c:	dec00215 	stw	sp,8(sp)
  801ca0:	80000326 	beq	r16,zero,801cb0 <_fwrite_r+0x5c>
  801ca4:	80800e17 	ldw	r2,56(r16)
  801ca8:	8009883a 	mov	r4,r16
  801cac:	10001226 	beq	r2,zero,801cf8 <_fwrite_r+0xa4>
  801cb0:	d9400a17 	ldw	r5,40(sp)
  801cb4:	8009883a 	mov	r4,r16
  801cb8:	d9800204 	addi	r6,sp,8
  801cbc:	08082f00 	call	8082f0 <__sfvwrite_r>
  801cc0:	980b883a 	mov	r5,r19
  801cc4:	10000426 	beq	r2,zero,801cd8 <_fwrite_r+0x84>
  801cc8:	d9000417 	ldw	r4,16(sp)
  801ccc:	8909c83a 	sub	r4,r17,r4
  801cd0:	080fe7c0 	call	80fe7c <__udivsi3>
  801cd4:	1025883a 	mov	r18,r2
  801cd8:	9005883a 	mov	r2,r18
  801cdc:	dfc00917 	ldw	ra,36(sp)
  801ce0:	dcc00817 	ldw	r19,32(sp)
  801ce4:	dc800717 	ldw	r18,28(sp)
  801ce8:	dc400617 	ldw	r17,24(sp)
  801cec:	dc000517 	ldw	r16,20(sp)
  801cf0:	dec00a04 	addi	sp,sp,40
  801cf4:	f800283a 	ret
  801cf8:	0800dc40 	call	800dc4 <__sinit>
  801cfc:	003fec06 	br	801cb0 <_fwrite_r+0x5c>

00801d00 <fwrite>:
  801d00:	00802074 	movhi	r2,129
  801d04:	109a6904 	addi	r2,r2,27044
  801d08:	2017883a 	mov	r11,r4
  801d0c:	11000017 	ldw	r4,0(r2)
  801d10:	defffe04 	addi	sp,sp,-8
  801d14:	3013883a 	mov	r9,r6
  801d18:	2805883a 	mov	r2,r5
  801d1c:	d9c00015 	stw	r7,0(sp)
  801d20:	580b883a 	mov	r5,r11
  801d24:	100d883a 	mov	r6,r2
  801d28:	480f883a 	mov	r7,r9
  801d2c:	dfc00115 	stw	ra,4(sp)
  801d30:	0801c540 	call	801c54 <_fwrite_r>
  801d34:	dfc00117 	ldw	ra,4(sp)
  801d38:	dec00204 	addi	sp,sp,8
  801d3c:	f800283a 	ret

00801d40 <getc>:
  801d40:	defffd04 	addi	sp,sp,-12
  801d44:	dc400115 	stw	r17,4(sp)
  801d48:	04402074 	movhi	r17,129
  801d4c:	8c5a6904 	addi	r17,r17,27044
  801d50:	88c00017 	ldw	r3,0(r17)
  801d54:	dc000015 	stw	r16,0(sp)
  801d58:	dfc00215 	stw	ra,8(sp)
  801d5c:	2021883a 	mov	r16,r4
  801d60:	18000326 	beq	r3,zero,801d70 <getc+0x30>
  801d64:	18800e17 	ldw	r2,56(r3)
  801d68:	1809883a 	mov	r4,r3
  801d6c:	10000e26 	beq	r2,zero,801da8 <getc+0x68>
  801d70:	80800117 	ldw	r2,4(r16)
  801d74:	800b883a 	mov	r5,r16
  801d78:	10bfffc4 	addi	r2,r2,-1
  801d7c:	80800115 	stw	r2,4(r16)
  801d80:	10000f16 	blt	r2,zero,801dc0 <getc+0x80>
  801d84:	80c00017 	ldw	r3,0(r16)
  801d88:	18800003 	ldbu	r2,0(r3)
  801d8c:	18c00044 	addi	r3,r3,1
  801d90:	80c00015 	stw	r3,0(r16)
  801d94:	dfc00217 	ldw	ra,8(sp)
  801d98:	dc400117 	ldw	r17,4(sp)
  801d9c:	dc000017 	ldw	r16,0(sp)
  801da0:	dec00304 	addi	sp,sp,12
  801da4:	f800283a 	ret
  801da8:	0800dc40 	call	800dc4 <__sinit>
  801dac:	80800117 	ldw	r2,4(r16)
  801db0:	800b883a 	mov	r5,r16
  801db4:	10bfffc4 	addi	r2,r2,-1
  801db8:	80800115 	stw	r2,4(r16)
  801dbc:	103ff10e 	bge	r2,zero,801d84 <getc+0x44>
  801dc0:	89000017 	ldw	r4,0(r17)
  801dc4:	dfc00217 	ldw	ra,8(sp)
  801dc8:	dc400117 	ldw	r17,4(sp)
  801dcc:	dc000017 	ldw	r16,0(sp)
  801dd0:	dec00304 	addi	sp,sp,12
  801dd4:	0802b7c1 	jmpi	802b7c <__srget_r>

00801dd8 <_getc_r>:
  801dd8:	defffd04 	addi	sp,sp,-12
  801ddc:	dc400115 	stw	r17,4(sp)
  801de0:	dc000015 	stw	r16,0(sp)
  801de4:	dfc00215 	stw	ra,8(sp)
  801de8:	2021883a 	mov	r16,r4
  801dec:	2823883a 	mov	r17,r5
  801df0:	20000226 	beq	r4,zero,801dfc <_getc_r+0x24>
  801df4:	20800e17 	ldw	r2,56(r4)
  801df8:	10000f26 	beq	r2,zero,801e38 <_getc_r+0x60>
  801dfc:	88800117 	ldw	r2,4(r17)
  801e00:	8009883a 	mov	r4,r16
  801e04:	880b883a 	mov	r5,r17
  801e08:	10bfffc4 	addi	r2,r2,-1
  801e0c:	88800115 	stw	r2,4(r17)
  801e10:	10001016 	blt	r2,zero,801e54 <_getc_r+0x7c>
  801e14:	88c00017 	ldw	r3,0(r17)
  801e18:	18800003 	ldbu	r2,0(r3)
  801e1c:	18c00044 	addi	r3,r3,1
  801e20:	88c00015 	stw	r3,0(r17)
  801e24:	dfc00217 	ldw	ra,8(sp)
  801e28:	dc400117 	ldw	r17,4(sp)
  801e2c:	dc000017 	ldw	r16,0(sp)
  801e30:	dec00304 	addi	sp,sp,12
  801e34:	f800283a 	ret
  801e38:	0800dc40 	call	800dc4 <__sinit>
  801e3c:	88800117 	ldw	r2,4(r17)
  801e40:	8009883a 	mov	r4,r16
  801e44:	880b883a 	mov	r5,r17
  801e48:	10bfffc4 	addi	r2,r2,-1
  801e4c:	88800115 	stw	r2,4(r17)
  801e50:	103ff00e 	bge	r2,zero,801e14 <_getc_r+0x3c>
  801e54:	dfc00217 	ldw	ra,8(sp)
  801e58:	dc400117 	ldw	r17,4(sp)
  801e5c:	dc000017 	ldw	r16,0(sp)
  801e60:	dec00304 	addi	sp,sp,12
  801e64:	0802b7c1 	jmpi	802b7c <__srget_r>

00801e68 <__smakebuf_r>:
  801e68:	2880030b 	ldhu	r2,12(r5)
  801e6c:	deffed04 	addi	sp,sp,-76
  801e70:	dc401015 	stw	r17,64(sp)
  801e74:	1080008c 	andi	r2,r2,2
  801e78:	dc000f15 	stw	r16,60(sp)
  801e7c:	dfc01215 	stw	ra,72(sp)
  801e80:	dc801115 	stw	r18,68(sp)
  801e84:	2821883a 	mov	r16,r5
  801e88:	2023883a 	mov	r17,r4
  801e8c:	10000b26 	beq	r2,zero,801ebc <__smakebuf_r+0x54>
  801e90:	28c010c4 	addi	r3,r5,67
  801e94:	00800044 	movi	r2,1
  801e98:	28800515 	stw	r2,20(r5)
  801e9c:	28c00415 	stw	r3,16(r5)
  801ea0:	28c00015 	stw	r3,0(r5)
  801ea4:	dfc01217 	ldw	ra,72(sp)
  801ea8:	dc801117 	ldw	r18,68(sp)
  801eac:	dc401017 	ldw	r17,64(sp)
  801eb0:	dc000f17 	ldw	r16,60(sp)
  801eb4:	dec01304 	addi	sp,sp,76
  801eb8:	f800283a 	ret
  801ebc:	2940038f 	ldh	r5,14(r5)
  801ec0:	28002116 	blt	r5,zero,801f48 <__smakebuf_r+0xe0>
  801ec4:	d80d883a 	mov	r6,sp
  801ec8:	0801a600 	call	801a60 <_fstat_r>
  801ecc:	10001e16 	blt	r2,zero,801f48 <__smakebuf_r+0xe0>
  801ed0:	d8800117 	ldw	r2,4(sp)
  801ed4:	00e00014 	movui	r3,32768
  801ed8:	113c000c 	andi	r4,r2,61440
  801edc:	20c03126 	beq	r4,r3,801fa4 <__smakebuf_r+0x13c>
  801ee0:	8080030b 	ldhu	r2,12(r16)
  801ee4:	00c80004 	movi	r3,8192
  801ee8:	10820014 	ori	r2,r2,2048
  801eec:	8080030d 	sth	r2,12(r16)
  801ef0:	20c01e26 	beq	r4,r3,801f6c <__smakebuf_r+0x104>
  801ef4:	04810004 	movi	r18,1024
  801ef8:	8809883a 	mov	r4,r17
  801efc:	900b883a 	mov	r5,r18
  801f00:	0801ffc0 	call	801ffc <_malloc_r>
  801f04:	1009883a 	mov	r4,r2
  801f08:	10003126 	beq	r2,zero,801fd0 <__smakebuf_r+0x168>
  801f0c:	80c0030b 	ldhu	r3,12(r16)
  801f10:	00802034 	movhi	r2,128
  801f14:	1083aa04 	addi	r2,r2,3752
  801f18:	88800f15 	stw	r2,60(r17)
  801f1c:	18c02014 	ori	r3,r3,128
  801f20:	84800515 	stw	r18,20(r16)
  801f24:	80c0030d 	sth	r3,12(r16)
  801f28:	81000415 	stw	r4,16(r16)
  801f2c:	81000015 	stw	r4,0(r16)
  801f30:	dfc01217 	ldw	ra,72(sp)
  801f34:	dc801117 	ldw	r18,68(sp)
  801f38:	dc401017 	ldw	r17,64(sp)
  801f3c:	dc000f17 	ldw	r16,60(sp)
  801f40:	dec01304 	addi	sp,sp,76
  801f44:	f800283a 	ret
  801f48:	80c0030b 	ldhu	r3,12(r16)
  801f4c:	1880200c 	andi	r2,r3,128
  801f50:	10000426 	beq	r2,zero,801f64 <__smakebuf_r+0xfc>
  801f54:	04801004 	movi	r18,64
  801f58:	18820014 	ori	r2,r3,2048
  801f5c:	8080030d 	sth	r2,12(r16)
  801f60:	003fe506 	br	801ef8 <__smakebuf_r+0x90>
  801f64:	04810004 	movi	r18,1024
  801f68:	003ffb06 	br	801f58 <__smakebuf_r+0xf0>
  801f6c:	8140038f 	ldh	r5,14(r16)
  801f70:	8809883a 	mov	r4,r17
  801f74:	080878c0 	call	80878c <_isatty_r>
  801f78:	103fde26 	beq	r2,zero,801ef4 <__smakebuf_r+0x8c>
  801f7c:	8080030b 	ldhu	r2,12(r16)
  801f80:	80c010c4 	addi	r3,r16,67
  801f84:	04810004 	movi	r18,1024
  801f88:	10800054 	ori	r2,r2,1
  801f8c:	8080030d 	sth	r2,12(r16)
  801f90:	00800044 	movi	r2,1
  801f94:	80c00415 	stw	r3,16(r16)
  801f98:	80800515 	stw	r2,20(r16)
  801f9c:	80c00015 	stw	r3,0(r16)
  801fa0:	003fd506 	br	801ef8 <__smakebuf_r+0x90>
  801fa4:	80c00a17 	ldw	r3,40(r16)
  801fa8:	00802034 	movhi	r2,128
  801fac:	108b5a04 	addi	r2,r2,11624
  801fb0:	18bfcb1e 	bne	r3,r2,801ee0 <__smakebuf_r+0x78>
  801fb4:	8080030b 	ldhu	r2,12(r16)
  801fb8:	00c10004 	movi	r3,1024
  801fbc:	1825883a 	mov	r18,r3
  801fc0:	10c4b03a 	or	r2,r2,r3
  801fc4:	8080030d 	sth	r2,12(r16)
  801fc8:	80c01315 	stw	r3,76(r16)
  801fcc:	003fca06 	br	801ef8 <__smakebuf_r+0x90>
  801fd0:	8100030b 	ldhu	r4,12(r16)
  801fd4:	2080800c 	andi	r2,r4,512
  801fd8:	103fb21e 	bne	r2,zero,801ea4 <__smakebuf_r+0x3c>
  801fdc:	80c010c4 	addi	r3,r16,67
  801fe0:	21000094 	ori	r4,r4,2
  801fe4:	00800044 	movi	r2,1
  801fe8:	80800515 	stw	r2,20(r16)
  801fec:	8100030d 	sth	r4,12(r16)
  801ff0:	80c00415 	stw	r3,16(r16)
  801ff4:	80c00015 	stw	r3,0(r16)
  801ff8:	003faa06 	br	801ea4 <__smakebuf_r+0x3c>

00801ffc <_malloc_r>:
  801ffc:	defff604 	addi	sp,sp,-40
  802000:	28c002c4 	addi	r3,r5,11
  802004:	00800584 	movi	r2,22
  802008:	dc800215 	stw	r18,8(sp)
  80200c:	dfc00915 	stw	ra,36(sp)
  802010:	df000815 	stw	fp,32(sp)
  802014:	ddc00715 	stw	r23,28(sp)
  802018:	dd800615 	stw	r22,24(sp)
  80201c:	dd400515 	stw	r21,20(sp)
  802020:	dd000415 	stw	r20,16(sp)
  802024:	dcc00315 	stw	r19,12(sp)
  802028:	dc400115 	stw	r17,4(sp)
  80202c:	dc000015 	stw	r16,0(sp)
  802030:	2025883a 	mov	r18,r4
  802034:	10c01236 	bltu	r2,r3,802080 <_malloc_r+0x84>
  802038:	04400404 	movi	r17,16
  80203c:	8940142e 	bgeu	r17,r5,802090 <_malloc_r+0x94>
  802040:	00800304 	movi	r2,12
  802044:	0007883a 	mov	r3,zero
  802048:	90800015 	stw	r2,0(r18)
  80204c:	1805883a 	mov	r2,r3
  802050:	dfc00917 	ldw	ra,36(sp)
  802054:	df000817 	ldw	fp,32(sp)
  802058:	ddc00717 	ldw	r23,28(sp)
  80205c:	dd800617 	ldw	r22,24(sp)
  802060:	dd400517 	ldw	r21,20(sp)
  802064:	dd000417 	ldw	r20,16(sp)
  802068:	dcc00317 	ldw	r19,12(sp)
  80206c:	dc800217 	ldw	r18,8(sp)
  802070:	dc400117 	ldw	r17,4(sp)
  802074:	dc000017 	ldw	r16,0(sp)
  802078:	dec00a04 	addi	sp,sp,40
  80207c:	f800283a 	ret
  802080:	00bffe04 	movi	r2,-8
  802084:	18a2703a 	and	r17,r3,r2
  802088:	883fed16 	blt	r17,zero,802040 <_malloc_r+0x44>
  80208c:	897fec36 	bltu	r17,r5,802040 <_malloc_r+0x44>
  802090:	9009883a 	mov	r4,r18
  802094:	08110b40 	call	8110b4 <__malloc_lock>
  802098:	00807dc4 	movi	r2,503
  80209c:	14402b2e 	bgeu	r2,r17,80214c <_malloc_r+0x150>
  8020a0:	8806d27a 	srli	r3,r17,9
  8020a4:	18003f1e 	bne	r3,zero,8021a4 <_malloc_r+0x1a8>
  8020a8:	880cd0fa 	srli	r6,r17,3
  8020ac:	300490fa 	slli	r2,r6,3
  8020b0:	02c02074 	movhi	r11,129
  8020b4:	5ad49004 	addi	r11,r11,21056
  8020b8:	12cb883a 	add	r5,r2,r11
  8020bc:	2c000317 	ldw	r16,12(r5)
  8020c0:	580f883a 	mov	r7,r11
  8020c4:	2c00041e 	bne	r5,r16,8020d8 <_malloc_r+0xdc>
  8020c8:	00000a06 	br	8020f4 <_malloc_r+0xf8>
  8020cc:	1800860e 	bge	r3,zero,8022e8 <_malloc_r+0x2ec>
  8020d0:	84000317 	ldw	r16,12(r16)
  8020d4:	2c000726 	beq	r5,r16,8020f4 <_malloc_r+0xf8>
  8020d8:	80800117 	ldw	r2,4(r16)
  8020dc:	00ffff04 	movi	r3,-4
  8020e0:	10c8703a 	and	r4,r2,r3
  8020e4:	2447c83a 	sub	r3,r4,r17
  8020e8:	008003c4 	movi	r2,15
  8020ec:	10fff70e 	bge	r2,r3,8020cc <_malloc_r+0xd0>
  8020f0:	31bfffc4 	addi	r6,r6,-1
  8020f4:	32400044 	addi	r9,r6,1
  8020f8:	02802074 	movhi	r10,129
  8020fc:	52949204 	addi	r10,r10,21064
  802100:	54000217 	ldw	r16,8(r10)
  802104:	8280a026 	beq	r16,r10,802388 <_malloc_r+0x38c>
  802108:	80800117 	ldw	r2,4(r16)
  80210c:	00ffff04 	movi	r3,-4
  802110:	10ca703a 	and	r5,r2,r3
  802114:	2c4dc83a 	sub	r6,r5,r17
  802118:	008003c4 	movi	r2,15
  80211c:	11808316 	blt	r2,r6,80232c <_malloc_r+0x330>
  802120:	52800315 	stw	r10,12(r10)
  802124:	52800215 	stw	r10,8(r10)
  802128:	30002916 	blt	r6,zero,8021d0 <_malloc_r+0x1d4>
  80212c:	8147883a 	add	r3,r16,r5
  802130:	18800117 	ldw	r2,4(r3)
  802134:	9009883a 	mov	r4,r18
  802138:	10800054 	ori	r2,r2,1
  80213c:	18800115 	stw	r2,4(r3)
  802140:	08110d40 	call	8110d4 <__malloc_unlock>
  802144:	80c00204 	addi	r3,r16,8
  802148:	003fc006 	br	80204c <_malloc_r+0x50>
  80214c:	02c02074 	movhi	r11,129
  802150:	5ad49004 	addi	r11,r11,21056
  802154:	8ac5883a 	add	r2,r17,r11
  802158:	14000317 	ldw	r16,12(r2)
  80215c:	580f883a 	mov	r7,r11
  802160:	8806d0fa 	srli	r3,r17,3
  802164:	14006c26 	beq	r2,r16,802318 <_malloc_r+0x31c>
  802168:	80c00117 	ldw	r3,4(r16)
  80216c:	00bfff04 	movi	r2,-4
  802170:	81800317 	ldw	r6,12(r16)
  802174:	1886703a 	and	r3,r3,r2
  802178:	80c7883a 	add	r3,r16,r3
  80217c:	18800117 	ldw	r2,4(r3)
  802180:	81400217 	ldw	r5,8(r16)
  802184:	9009883a 	mov	r4,r18
  802188:	10800054 	ori	r2,r2,1
  80218c:	18800115 	stw	r2,4(r3)
  802190:	31400215 	stw	r5,8(r6)
  802194:	29800315 	stw	r6,12(r5)
  802198:	08110d40 	call	8110d4 <__malloc_unlock>
  80219c:	80c00204 	addi	r3,r16,8
  8021a0:	003faa06 	br	80204c <_malloc_r+0x50>
  8021a4:	00800104 	movi	r2,4
  8021a8:	10c0052e 	bgeu	r2,r3,8021c0 <_malloc_r+0x1c4>
  8021ac:	00800504 	movi	r2,20
  8021b0:	10c07836 	bltu	r2,r3,802394 <_malloc_r+0x398>
  8021b4:	198016c4 	addi	r6,r3,91
  8021b8:	300490fa 	slli	r2,r6,3
  8021bc:	003fbc06 	br	8020b0 <_malloc_r+0xb4>
  8021c0:	8804d1ba 	srli	r2,r17,6
  8021c4:	11800e04 	addi	r6,r2,56
  8021c8:	300490fa 	slli	r2,r6,3
  8021cc:	003fb806 	br	8020b0 <_malloc_r+0xb4>
  8021d0:	00807fc4 	movi	r2,511
  8021d4:	1140bb36 	bltu	r2,r5,8024c4 <_malloc_r+0x4c8>
  8021d8:	2806d0fa 	srli	r3,r5,3
  8021dc:	573ffe04 	addi	fp,r10,-8
  8021e0:	00800044 	movi	r2,1
  8021e4:	180890fa 	slli	r4,r3,3
  8021e8:	1807d0ba 	srai	r3,r3,2
  8021ec:	e1c00117 	ldw	r7,4(fp)
  8021f0:	5909883a 	add	r4,r11,r4
  8021f4:	21400217 	ldw	r5,8(r4)
  8021f8:	10c4983a 	sll	r2,r2,r3
  8021fc:	81000315 	stw	r4,12(r16)
  802200:	81400215 	stw	r5,8(r16)
  802204:	388eb03a 	or	r7,r7,r2
  802208:	2c000315 	stw	r16,12(r5)
  80220c:	24000215 	stw	r16,8(r4)
  802210:	e1c00115 	stw	r7,4(fp)
  802214:	4807883a 	mov	r3,r9
  802218:	4800cd16 	blt	r9,zero,802550 <_malloc_r+0x554>
  80221c:	1807d0ba 	srai	r3,r3,2
  802220:	00800044 	movi	r2,1
  802224:	10c8983a 	sll	r4,r2,r3
  802228:	39004436 	bltu	r7,r4,80233c <_malloc_r+0x340>
  80222c:	21c4703a 	and	r2,r4,r7
  802230:	10000a1e 	bne	r2,zero,80225c <_malloc_r+0x260>
  802234:	2109883a 	add	r4,r4,r4
  802238:	00bfff04 	movi	r2,-4
  80223c:	4884703a 	and	r2,r9,r2
  802240:	3906703a 	and	r3,r7,r4
  802244:	12400104 	addi	r9,r2,4
  802248:	1800041e 	bne	r3,zero,80225c <_malloc_r+0x260>
  80224c:	2109883a 	add	r4,r4,r4
  802250:	3904703a 	and	r2,r7,r4
  802254:	4a400104 	addi	r9,r9,4
  802258:	103ffc26 	beq	r2,zero,80224c <_malloc_r+0x250>
  80225c:	480490fa 	slli	r2,r9,3
  802260:	4819883a 	mov	r12,r9
  802264:	023fff04 	movi	r8,-4
  802268:	589b883a 	add	r13,r11,r2
  80226c:	6807883a 	mov	r3,r13
  802270:	014003c4 	movi	r5,15
  802274:	1c000317 	ldw	r16,12(r3)
  802278:	1c00041e 	bne	r3,r16,80228c <_malloc_r+0x290>
  80227c:	0000a706 	br	80251c <_malloc_r+0x520>
  802280:	3000ab0e 	bge	r6,zero,802530 <_malloc_r+0x534>
  802284:	84000317 	ldw	r16,12(r16)
  802288:	1c00a426 	beq	r3,r16,80251c <_malloc_r+0x520>
  80228c:	80800117 	ldw	r2,4(r16)
  802290:	1204703a 	and	r2,r2,r8
  802294:	144dc83a 	sub	r6,r2,r17
  802298:	29bff90e 	bge	r5,r6,802280 <_malloc_r+0x284>
  80229c:	81000317 	ldw	r4,12(r16)
  8022a0:	80c00217 	ldw	r3,8(r16)
  8022a4:	89400054 	ori	r5,r17,1
  8022a8:	8445883a 	add	r2,r16,r17
  8022ac:	20c00215 	stw	r3,8(r4)
  8022b0:	19000315 	stw	r4,12(r3)
  8022b4:	81400115 	stw	r5,4(r16)
  8022b8:	1187883a 	add	r3,r2,r6
  8022bc:	31000054 	ori	r4,r6,1
  8022c0:	50800315 	stw	r2,12(r10)
  8022c4:	50800215 	stw	r2,8(r10)
  8022c8:	19800015 	stw	r6,0(r3)
  8022cc:	11000115 	stw	r4,4(r2)
  8022d0:	12800215 	stw	r10,8(r2)
  8022d4:	12800315 	stw	r10,12(r2)
  8022d8:	9009883a 	mov	r4,r18
  8022dc:	08110d40 	call	8110d4 <__malloc_unlock>
  8022e0:	80c00204 	addi	r3,r16,8
  8022e4:	003f5906 	br	80204c <_malloc_r+0x50>
  8022e8:	8109883a 	add	r4,r16,r4
  8022ec:	20800117 	ldw	r2,4(r4)
  8022f0:	80c00217 	ldw	r3,8(r16)
  8022f4:	81400317 	ldw	r5,12(r16)
  8022f8:	10800054 	ori	r2,r2,1
  8022fc:	20800115 	stw	r2,4(r4)
  802300:	28c00215 	stw	r3,8(r5)
  802304:	19400315 	stw	r5,12(r3)
  802308:	9009883a 	mov	r4,r18
  80230c:	08110d40 	call	8110d4 <__malloc_unlock>
  802310:	80c00204 	addi	r3,r16,8
  802314:	003f4d06 	br	80204c <_malloc_r+0x50>
  802318:	80800204 	addi	r2,r16,8
  80231c:	14000317 	ldw	r16,12(r2)
  802320:	143f911e 	bne	r2,r16,802168 <_malloc_r+0x16c>
  802324:	1a400084 	addi	r9,r3,2
  802328:	003f7306 	br	8020f8 <_malloc_r+0xfc>
  80232c:	88c00054 	ori	r3,r17,1
  802330:	8445883a 	add	r2,r16,r17
  802334:	80c00115 	stw	r3,4(r16)
  802338:	003fdf06 	br	8022b8 <_malloc_r+0x2bc>
  80233c:	e4000217 	ldw	r16,8(fp)
  802340:	00bfff04 	movi	r2,-4
  802344:	80c00117 	ldw	r3,4(r16)
  802348:	802d883a 	mov	r22,r16
  80234c:	18aa703a 	and	r21,r3,r2
  802350:	ac401636 	bltu	r21,r17,8023ac <_malloc_r+0x3b0>
  802354:	ac49c83a 	sub	r4,r21,r17
  802358:	008003c4 	movi	r2,15
  80235c:	1100130e 	bge	r2,r4,8023ac <_malloc_r+0x3b0>
  802360:	88800054 	ori	r2,r17,1
  802364:	8447883a 	add	r3,r16,r17
  802368:	80800115 	stw	r2,4(r16)
  80236c:	20800054 	ori	r2,r4,1
  802370:	18800115 	stw	r2,4(r3)
  802374:	e0c00215 	stw	r3,8(fp)
  802378:	9009883a 	mov	r4,r18
  80237c:	08110d40 	call	8110d4 <__malloc_unlock>
  802380:	80c00204 	addi	r3,r16,8
  802384:	003f3106 	br	80204c <_malloc_r+0x50>
  802388:	39c00117 	ldw	r7,4(r7)
  80238c:	573ffe04 	addi	fp,r10,-8
  802390:	003fa006 	br	802214 <_malloc_r+0x218>
  802394:	00801504 	movi	r2,84
  802398:	10c06736 	bltu	r2,r3,802538 <_malloc_r+0x53c>
  80239c:	8804d33a 	srli	r2,r17,12
  8023a0:	11801b84 	addi	r6,r2,110
  8023a4:	300490fa 	slli	r2,r6,3
  8023a8:	003f4106 	br	8020b0 <_malloc_r+0xb4>
  8023ac:	d0a70317 	ldw	r2,-25588(gp)
  8023b0:	d0e00317 	ldw	r3,-32756(gp)
  8023b4:	053fffc4 	movi	r20,-1
  8023b8:	10800404 	addi	r2,r2,16
  8023bc:	88a7883a 	add	r19,r17,r2
  8023c0:	1d000326 	beq	r3,r20,8023d0 <_malloc_r+0x3d4>
  8023c4:	98c3ffc4 	addi	r3,r19,4095
  8023c8:	00bc0004 	movi	r2,-4096
  8023cc:	18a6703a 	and	r19,r3,r2
  8023d0:	9009883a 	mov	r4,r18
  8023d4:	980b883a 	mov	r5,r19
  8023d8:	0802bdc0 	call	802bdc <_sbrk_r>
  8023dc:	1009883a 	mov	r4,r2
  8023e0:	15000426 	beq	r2,r20,8023f4 <_malloc_r+0x3f8>
  8023e4:	854b883a 	add	r5,r16,r21
  8023e8:	1029883a 	mov	r20,r2
  8023ec:	11405a2e 	bgeu	r2,r5,802558 <_malloc_r+0x55c>
  8023f0:	87000c26 	beq	r16,fp,802424 <_malloc_r+0x428>
  8023f4:	e4000217 	ldw	r16,8(fp)
  8023f8:	80c00117 	ldw	r3,4(r16)
  8023fc:	00bfff04 	movi	r2,-4
  802400:	1884703a 	and	r2,r3,r2
  802404:	14400336 	bltu	r2,r17,802414 <_malloc_r+0x418>
  802408:	1449c83a 	sub	r4,r2,r17
  80240c:	008003c4 	movi	r2,15
  802410:	113fd316 	blt	r2,r4,802360 <_malloc_r+0x364>
  802414:	9009883a 	mov	r4,r18
  802418:	08110d40 	call	8110d4 <__malloc_unlock>
  80241c:	0007883a 	mov	r3,zero
  802420:	003f0a06 	br	80204c <_malloc_r+0x50>
  802424:	05c020b4 	movhi	r23,130
  802428:	bde17804 	addi	r23,r23,-31264
  80242c:	b8800017 	ldw	r2,0(r23)
  802430:	988d883a 	add	r6,r19,r2
  802434:	b9800015 	stw	r6,0(r23)
  802438:	d0e00317 	ldw	r3,-32756(gp)
  80243c:	00bfffc4 	movi	r2,-1
  802440:	18808e26 	beq	r3,r2,80267c <_malloc_r+0x680>
  802444:	2145c83a 	sub	r2,r4,r5
  802448:	3085883a 	add	r2,r6,r2
  80244c:	b8800015 	stw	r2,0(r23)
  802450:	20c001cc 	andi	r3,r4,7
  802454:	18005f1e 	bne	r3,zero,8025d4 <_malloc_r+0x5d8>
  802458:	000b883a 	mov	r5,zero
  80245c:	a4c5883a 	add	r2,r20,r19
  802460:	1083ffcc 	andi	r2,r2,4095
  802464:	00c40004 	movi	r3,4096
  802468:	1887c83a 	sub	r3,r3,r2
  80246c:	28e7883a 	add	r19,r5,r3
  802470:	9009883a 	mov	r4,r18
  802474:	980b883a 	mov	r5,r19
  802478:	0802bdc0 	call	802bdc <_sbrk_r>
  80247c:	1007883a 	mov	r3,r2
  802480:	00bfffc4 	movi	r2,-1
  802484:	18807a26 	beq	r3,r2,802670 <_malloc_r+0x674>
  802488:	1d05c83a 	sub	r2,r3,r20
  80248c:	9885883a 	add	r2,r19,r2
  802490:	10c00054 	ori	r3,r2,1
  802494:	b8800017 	ldw	r2,0(r23)
  802498:	a021883a 	mov	r16,r20
  80249c:	a0c00115 	stw	r3,4(r20)
  8024a0:	9885883a 	add	r2,r19,r2
  8024a4:	b8800015 	stw	r2,0(r23)
  8024a8:	e5000215 	stw	r20,8(fp)
  8024ac:	b7003626 	beq	r22,fp,802588 <_malloc_r+0x58c>
  8024b0:	018003c4 	movi	r6,15
  8024b4:	35404b36 	bltu	r6,r21,8025e4 <_malloc_r+0x5e8>
  8024b8:	00800044 	movi	r2,1
  8024bc:	a0800115 	stw	r2,4(r20)
  8024c0:	003fcd06 	br	8023f8 <_malloc_r+0x3fc>
  8024c4:	2808d27a 	srli	r4,r5,9
  8024c8:	2000371e 	bne	r4,zero,8025a8 <_malloc_r+0x5ac>
  8024cc:	2808d0fa 	srli	r4,r5,3
  8024d0:	200690fa 	slli	r3,r4,3
  8024d4:	1ad1883a 	add	r8,r3,r11
  8024d8:	41800217 	ldw	r6,8(r8)
  8024dc:	41805b26 	beq	r8,r6,80264c <_malloc_r+0x650>
  8024e0:	30800117 	ldw	r2,4(r6)
  8024e4:	00ffff04 	movi	r3,-4
  8024e8:	10c4703a 	and	r2,r2,r3
  8024ec:	2880022e 	bgeu	r5,r2,8024f8 <_malloc_r+0x4fc>
  8024f0:	31800217 	ldw	r6,8(r6)
  8024f4:	41bffa1e 	bne	r8,r6,8024e0 <_malloc_r+0x4e4>
  8024f8:	32000317 	ldw	r8,12(r6)
  8024fc:	39c00117 	ldw	r7,4(r7)
  802500:	82000315 	stw	r8,12(r16)
  802504:	81800215 	stw	r6,8(r16)
  802508:	07002074 	movhi	fp,129
  80250c:	e7149004 	addi	fp,fp,21056
  802510:	34000315 	stw	r16,12(r6)
  802514:	44000215 	stw	r16,8(r8)
  802518:	003f3e06 	br	802214 <_malloc_r+0x218>
  80251c:	63000044 	addi	r12,r12,1
  802520:	608000cc 	andi	r2,r12,3
  802524:	10005d26 	beq	r2,zero,80269c <_malloc_r+0x6a0>
  802528:	18c00204 	addi	r3,r3,8
  80252c:	003f5106 	br	802274 <_malloc_r+0x278>
  802530:	8089883a 	add	r4,r16,r2
  802534:	003f6d06 	br	8022ec <_malloc_r+0x2f0>
  802538:	00805504 	movi	r2,340
  80253c:	10c02036 	bltu	r2,r3,8025c0 <_malloc_r+0x5c4>
  802540:	8804d3fa 	srli	r2,r17,15
  802544:	11801dc4 	addi	r6,r2,119
  802548:	300490fa 	slli	r2,r6,3
  80254c:	003ed806 	br	8020b0 <_malloc_r+0xb4>
  802550:	48c000c4 	addi	r3,r9,3
  802554:	003f3106 	br	80221c <_malloc_r+0x220>
  802558:	05c020b4 	movhi	r23,130
  80255c:	bde17804 	addi	r23,r23,-31264
  802560:	b8800017 	ldw	r2,0(r23)
  802564:	988d883a 	add	r6,r19,r2
  802568:	b9800015 	stw	r6,0(r23)
  80256c:	293fb21e 	bne	r5,r4,802438 <_malloc_r+0x43c>
  802570:	2083ffcc 	andi	r2,r4,4095
  802574:	103fb01e 	bne	r2,zero,802438 <_malloc_r+0x43c>
  802578:	e4000217 	ldw	r16,8(fp)
  80257c:	9d45883a 	add	r2,r19,r21
  802580:	10800054 	ori	r2,r2,1
  802584:	80800115 	stw	r2,4(r16)
  802588:	b8c00017 	ldw	r3,0(r23)
  80258c:	d0a70417 	ldw	r2,-25584(gp)
  802590:	10c0012e 	bgeu	r2,r3,802598 <_malloc_r+0x59c>
  802594:	d0e70415 	stw	r3,-25584(gp)
  802598:	d0a70517 	ldw	r2,-25580(gp)
  80259c:	10ff962e 	bgeu	r2,r3,8023f8 <_malloc_r+0x3fc>
  8025a0:	d0e70515 	stw	r3,-25580(gp)
  8025a4:	003f9406 	br	8023f8 <_malloc_r+0x3fc>
  8025a8:	00800104 	movi	r2,4
  8025ac:	11001e36 	bltu	r2,r4,802628 <_malloc_r+0x62c>
  8025b0:	2804d1ba 	srli	r2,r5,6
  8025b4:	11000e04 	addi	r4,r2,56
  8025b8:	200690fa 	slli	r3,r4,3
  8025bc:	003fc506 	br	8024d4 <_malloc_r+0x4d8>
  8025c0:	00815504 	movi	r2,1364
  8025c4:	10c01d2e 	bgeu	r2,r3,80263c <_malloc_r+0x640>
  8025c8:	01801f84 	movi	r6,126
  8025cc:	0080fc04 	movi	r2,1008
  8025d0:	003eb706 	br	8020b0 <_malloc_r+0xb4>
  8025d4:	00800204 	movi	r2,8
  8025d8:	10cbc83a 	sub	r5,r2,r3
  8025dc:	2169883a 	add	r20,r4,r5
  8025e0:	003f9e06 	br	80245c <_malloc_r+0x460>
  8025e4:	00bffe04 	movi	r2,-8
  8025e8:	a93ffd04 	addi	r4,r21,-12
  8025ec:	2088703a 	and	r4,r4,r2
  8025f0:	b10b883a 	add	r5,r22,r4
  8025f4:	00c00144 	movi	r3,5
  8025f8:	28c00215 	stw	r3,8(r5)
  8025fc:	28c00115 	stw	r3,4(r5)
  802600:	b0800117 	ldw	r2,4(r22)
  802604:	1080004c 	andi	r2,r2,1
  802608:	2084b03a 	or	r2,r4,r2
  80260c:	b0800115 	stw	r2,4(r22)
  802610:	313fdd2e 	bgeu	r6,r4,802588 <_malloc_r+0x58c>
  802614:	b1400204 	addi	r5,r22,8
  802618:	9009883a 	mov	r4,r18
  80261c:	08012ec0 	call	8012ec <_free_r>
  802620:	e4000217 	ldw	r16,8(fp)
  802624:	003fd806 	br	802588 <_malloc_r+0x58c>
  802628:	00800504 	movi	r2,20
  80262c:	11001536 	bltu	r2,r4,802684 <_malloc_r+0x688>
  802630:	210016c4 	addi	r4,r4,91
  802634:	200690fa 	slli	r3,r4,3
  802638:	003fa606 	br	8024d4 <_malloc_r+0x4d8>
  80263c:	8804d4ba 	srli	r2,r17,18
  802640:	11801f04 	addi	r6,r2,124
  802644:	300490fa 	slli	r2,r6,3
  802648:	003e9906 	br	8020b0 <_malloc_r+0xb4>
  80264c:	2009d0ba 	srai	r4,r4,2
  802650:	01402074 	movhi	r5,129
  802654:	29549004 	addi	r5,r5,21056
  802658:	00c00044 	movi	r3,1
  80265c:	28800117 	ldw	r2,4(r5)
  802660:	1906983a 	sll	r3,r3,r4
  802664:	10c4b03a 	or	r2,r2,r3
  802668:	28800115 	stw	r2,4(r5)
  80266c:	003fa306 	br	8024fc <_malloc_r+0x500>
  802670:	0027883a 	mov	r19,zero
  802674:	00c00044 	movi	r3,1
  802678:	003f8606 	br	802494 <_malloc_r+0x498>
  80267c:	d1200315 	stw	r4,-32756(gp)
  802680:	003f7306 	br	802450 <_malloc_r+0x454>
  802684:	00801504 	movi	r2,84
  802688:	11001936 	bltu	r2,r4,8026f0 <_malloc_r+0x6f4>
  80268c:	2804d33a 	srli	r2,r5,12
  802690:	11001b84 	addi	r4,r2,110
  802694:	200690fa 	slli	r3,r4,3
  802698:	003f8e06 	br	8024d4 <_malloc_r+0x4d8>
  80269c:	480b883a 	mov	r5,r9
  8026a0:	6807883a 	mov	r3,r13
  8026a4:	288000cc 	andi	r2,r5,3
  8026a8:	18fffe04 	addi	r3,r3,-8
  8026ac:	297fffc4 	addi	r5,r5,-1
  8026b0:	10001526 	beq	r2,zero,802708 <_malloc_r+0x70c>
  8026b4:	18800217 	ldw	r2,8(r3)
  8026b8:	10fffa26 	beq	r2,r3,8026a4 <_malloc_r+0x6a8>
  8026bc:	2109883a 	add	r4,r4,r4
  8026c0:	393f1e36 	bltu	r7,r4,80233c <_malloc_r+0x340>
  8026c4:	203f1d26 	beq	r4,zero,80233c <_malloc_r+0x340>
  8026c8:	21c4703a 	and	r2,r4,r7
  8026cc:	10000226 	beq	r2,zero,8026d8 <_malloc_r+0x6dc>
  8026d0:	6013883a 	mov	r9,r12
  8026d4:	003ee106 	br	80225c <_malloc_r+0x260>
  8026d8:	2109883a 	add	r4,r4,r4
  8026dc:	3904703a 	and	r2,r7,r4
  8026e0:	63000104 	addi	r12,r12,4
  8026e4:	103ffc26 	beq	r2,zero,8026d8 <_malloc_r+0x6dc>
  8026e8:	6013883a 	mov	r9,r12
  8026ec:	003edb06 	br	80225c <_malloc_r+0x260>
  8026f0:	00805504 	movi	r2,340
  8026f4:	11000836 	bltu	r2,r4,802718 <_malloc_r+0x71c>
  8026f8:	2804d3fa 	srli	r2,r5,15
  8026fc:	11001dc4 	addi	r4,r2,119
  802700:	200690fa 	slli	r3,r4,3
  802704:	003f7306 	br	8024d4 <_malloc_r+0x4d8>
  802708:	0104303a 	nor	r2,zero,r4
  80270c:	388e703a 	and	r7,r7,r2
  802710:	e1c00115 	stw	r7,4(fp)
  802714:	003fe906 	br	8026bc <_malloc_r+0x6c0>
  802718:	00815504 	movi	r2,1364
  80271c:	1100032e 	bgeu	r2,r4,80272c <_malloc_r+0x730>
  802720:	01001f84 	movi	r4,126
  802724:	00c0fc04 	movi	r3,1008
  802728:	003f6a06 	br	8024d4 <_malloc_r+0x4d8>
  80272c:	2804d4ba 	srli	r2,r5,18
  802730:	11001f04 	addi	r4,r2,124
  802734:	200690fa 	slli	r3,r4,3
  802738:	003f6606 	br	8024d4 <_malloc_r+0x4d8>

0080273c <memset>:
  80273c:	008000c4 	movi	r2,3
  802740:	29403fcc 	andi	r5,r5,255
  802744:	2007883a 	mov	r3,r4
  802748:	1180022e 	bgeu	r2,r6,802754 <memset+0x18>
  80274c:	2084703a 	and	r2,r4,r2
  802750:	10000826 	beq	r2,zero,802774 <memset+0x38>
  802754:	30000526 	beq	r6,zero,80276c <memset+0x30>
  802758:	2805883a 	mov	r2,r5
  80275c:	30cd883a 	add	r6,r6,r3
  802760:	18800005 	stb	r2,0(r3)
  802764:	18c00044 	addi	r3,r3,1
  802768:	19bffd1e 	bne	r3,r6,802760 <memset+0x24>
  80276c:	2005883a 	mov	r2,r4
  802770:	f800283a 	ret
  802774:	2804923a 	slli	r2,r5,8
  802778:	020003c4 	movi	r8,15
  80277c:	200f883a 	mov	r7,r4
  802780:	2884b03a 	or	r2,r5,r2
  802784:	1006943a 	slli	r3,r2,16
  802788:	10c6b03a 	or	r3,r2,r3
  80278c:	41800a2e 	bgeu	r8,r6,8027b8 <memset+0x7c>
  802790:	4005883a 	mov	r2,r8
  802794:	31bffc04 	addi	r6,r6,-16
  802798:	38c00015 	stw	r3,0(r7)
  80279c:	38c00115 	stw	r3,4(r7)
  8027a0:	38c00215 	stw	r3,8(r7)
  8027a4:	38c00315 	stw	r3,12(r7)
  8027a8:	39c00404 	addi	r7,r7,16
  8027ac:	11bff936 	bltu	r2,r6,802794 <memset+0x58>
  8027b0:	008000c4 	movi	r2,3
  8027b4:	1180052e 	bgeu	r2,r6,8027cc <memset+0x90>
  8027b8:	31bfff04 	addi	r6,r6,-4
  8027bc:	008000c4 	movi	r2,3
  8027c0:	38c00015 	stw	r3,0(r7)
  8027c4:	39c00104 	addi	r7,r7,4
  8027c8:	11bffb36 	bltu	r2,r6,8027b8 <memset+0x7c>
  8027cc:	3807883a 	mov	r3,r7
  8027d0:	003fe006 	br	802754 <memset+0x18>

008027d4 <_open_r>:
  8027d4:	defffd04 	addi	sp,sp,-12
  8027d8:	dc000015 	stw	r16,0(sp)
  8027dc:	040020b4 	movhi	r16,130
  8027e0:	84216b04 	addi	r16,r16,-31316
  8027e4:	dc400115 	stw	r17,4(sp)
  8027e8:	80000015 	stw	zero,0(r16)
  8027ec:	2023883a 	mov	r17,r4
  8027f0:	2809883a 	mov	r4,r5
  8027f4:	300b883a 	mov	r5,r6
  8027f8:	380d883a 	mov	r6,r7
  8027fc:	dfc00215 	stw	ra,8(sp)
  802800:	08111ec0 	call	8111ec <open>
  802804:	1007883a 	mov	r3,r2
  802808:	00bfffc4 	movi	r2,-1
  80280c:	18800626 	beq	r3,r2,802828 <_open_r+0x54>
  802810:	1805883a 	mov	r2,r3
  802814:	dfc00217 	ldw	ra,8(sp)
  802818:	dc400117 	ldw	r17,4(sp)
  80281c:	dc000017 	ldw	r16,0(sp)
  802820:	dec00304 	addi	sp,sp,12
  802824:	f800283a 	ret
  802828:	80800017 	ldw	r2,0(r16)
  80282c:	103ff826 	beq	r2,zero,802810 <_open_r+0x3c>
  802830:	88800015 	stw	r2,0(r17)
  802834:	1805883a 	mov	r2,r3
  802838:	dfc00217 	ldw	ra,8(sp)
  80283c:	dc400117 	ldw	r17,4(sp)
  802840:	dc000017 	ldw	r16,0(sp)
  802844:	dec00304 	addi	sp,sp,12
  802848:	f800283a 	ret

0080284c <printf>:
  80284c:	defffb04 	addi	sp,sp,-20
  802850:	dfc00115 	stw	ra,4(sp)
  802854:	d9400215 	stw	r5,8(sp)
  802858:	d9800315 	stw	r6,12(sp)
  80285c:	d9c00415 	stw	r7,16(sp)
  802860:	00802074 	movhi	r2,129
  802864:	109a6904 	addi	r2,r2,27044
  802868:	10c00017 	ldw	r3,0(r2)
  80286c:	200b883a 	mov	r5,r4
  802870:	d8800204 	addi	r2,sp,8
  802874:	19000217 	ldw	r4,8(r3)
  802878:	100d883a 	mov	r6,r2
  80287c:	d8800015 	stw	r2,0(sp)
  802880:	0804e3c0 	call	804e3c <__vfprintf_internal>
  802884:	dfc00117 	ldw	ra,4(sp)
  802888:	dec00504 	addi	sp,sp,20
  80288c:	f800283a 	ret

00802890 <_printf_r>:
  802890:	defffc04 	addi	sp,sp,-16
  802894:	dfc00115 	stw	ra,4(sp)
  802898:	d9800215 	stw	r6,8(sp)
  80289c:	d9c00315 	stw	r7,12(sp)
  8028a0:	280d883a 	mov	r6,r5
  8028a4:	21400217 	ldw	r5,8(r4)
  8028a8:	d8c00204 	addi	r3,sp,8
  8028ac:	180f883a 	mov	r7,r3
  8028b0:	d8c00015 	stw	r3,0(sp)
  8028b4:	0802f780 	call	802f78 <___vfprintf_internal_r>
  8028b8:	dfc00117 	ldw	ra,4(sp)
  8028bc:	dec00404 	addi	sp,sp,16
  8028c0:	f800283a 	ret

008028c4 <putchar>:
  8028c4:	00802074 	movhi	r2,129
  8028c8:	109a6904 	addi	r2,r2,27044
  8028cc:	11800017 	ldw	r6,0(r2)
  8028d0:	200b883a 	mov	r5,r4
  8028d4:	3009883a 	mov	r4,r6
  8028d8:	31800217 	ldw	r6,8(r6)
  8028dc:	0809e581 	jmpi	809e58 <_putc_r>

008028e0 <_putchar_r>:
  8028e0:	21800217 	ldw	r6,8(r4)
  8028e4:	0809e581 	jmpi	809e58 <_putc_r>

008028e8 <_puts_r>:
  8028e8:	defff604 	addi	sp,sp,-40
  8028ec:	dc400715 	stw	r17,28(sp)
  8028f0:	2023883a 	mov	r17,r4
  8028f4:	2809883a 	mov	r4,r5
  8028f8:	dfc00915 	stw	ra,36(sp)
  8028fc:	dcc00815 	stw	r19,32(sp)
  802900:	2827883a 	mov	r19,r5
  802904:	0802eac0 	call	802eac <strlen>
  802908:	89400217 	ldw	r5,8(r17)
  80290c:	00c02074 	movhi	r3,129
  802910:	18d1fb04 	addi	r3,r3,18412
  802914:	01c00044 	movi	r7,1
  802918:	12000044 	addi	r8,r2,1
  80291c:	d8c00515 	stw	r3,20(sp)
  802920:	d9c00615 	stw	r7,24(sp)
  802924:	d8c00304 	addi	r3,sp,12
  802928:	01c00084 	movi	r7,2
  80292c:	8809883a 	mov	r4,r17
  802930:	d80d883a 	mov	r6,sp
  802934:	d8c00015 	stw	r3,0(sp)
  802938:	dcc00315 	stw	r19,12(sp)
  80293c:	da000215 	stw	r8,8(sp)
  802940:	d9c00115 	stw	r7,4(sp)
  802944:	d8800415 	stw	r2,16(sp)
  802948:	08082f00 	call	8082f0 <__sfvwrite_r>
  80294c:	00ffffc4 	movi	r3,-1
  802950:	10000626 	beq	r2,zero,80296c <_puts_r+0x84>
  802954:	1805883a 	mov	r2,r3
  802958:	dfc00917 	ldw	ra,36(sp)
  80295c:	dcc00817 	ldw	r19,32(sp)
  802960:	dc400717 	ldw	r17,28(sp)
  802964:	dec00a04 	addi	sp,sp,40
  802968:	f800283a 	ret
  80296c:	00c00284 	movi	r3,10
  802970:	1805883a 	mov	r2,r3
  802974:	dfc00917 	ldw	ra,36(sp)
  802978:	dcc00817 	ldw	r19,32(sp)
  80297c:	dc400717 	ldw	r17,28(sp)
  802980:	dec00a04 	addi	sp,sp,40
  802984:	f800283a 	ret

00802988 <puts>:
  802988:	00802074 	movhi	r2,129
  80298c:	109a6904 	addi	r2,r2,27044
  802990:	200b883a 	mov	r5,r4
  802994:	11000017 	ldw	r4,0(r2)
  802998:	08028e81 	jmpi	8028e8 <_puts_r>

0080299c <__srefill_r>:
  80299c:	defffd04 	addi	sp,sp,-12
  8029a0:	dc400115 	stw	r17,4(sp)
  8029a4:	dc000015 	stw	r16,0(sp)
  8029a8:	dfc00215 	stw	ra,8(sp)
  8029ac:	2023883a 	mov	r17,r4
  8029b0:	2821883a 	mov	r16,r5
  8029b4:	20000226 	beq	r4,zero,8029c0 <__srefill_r+0x24>
  8029b8:	20800e17 	ldw	r2,56(r4)
  8029bc:	10004126 	beq	r2,zero,802ac4 <__srefill_r+0x128>
  8029c0:	80c0030b 	ldhu	r3,12(r16)
  8029c4:	80000115 	stw	zero,4(r16)
  8029c8:	1880080c 	andi	r2,r3,32
  8029cc:	1000361e 	bne	r2,zero,802aa8 <__srefill_r+0x10c>
  8029d0:	1880010c 	andi	r2,r3,4
  8029d4:	1000211e 	bne	r2,zero,802a5c <__srefill_r+0xc0>
  8029d8:	1880040c 	andi	r2,r3,16
  8029dc:	10005026 	beq	r2,zero,802b20 <__srefill_r+0x184>
  8029e0:	1880020c 	andi	r2,r3,8
  8029e4:	1000541e 	bne	r2,zero,802b38 <__srefill_r+0x19c>
  8029e8:	8080030b 	ldhu	r2,12(r16)
  8029ec:	10800114 	ori	r2,r2,4
  8029f0:	8080030d 	sth	r2,12(r16)
  8029f4:	80800417 	ldw	r2,16(r16)
  8029f8:	10004526 	beq	r2,zero,802b10 <__srefill_r+0x174>
  8029fc:	8080030b 	ldhu	r2,12(r16)
  802a00:	108000cc 	andi	r2,r2,3
  802a04:	1000361e 	bne	r2,zero,802ae0 <__srefill_r+0x144>
  802a08:	81800417 	ldw	r6,16(r16)
  802a0c:	80c00817 	ldw	r3,32(r16)
  802a10:	81400717 	ldw	r5,28(r16)
  802a14:	81c00517 	ldw	r7,20(r16)
  802a18:	8809883a 	mov	r4,r17
  802a1c:	81800015 	stw	r6,0(r16)
  802a20:	183ee83a 	callr	r3
  802a24:	80c0030b 	ldhu	r3,12(r16)
  802a28:	1009883a 	mov	r4,r2
  802a2c:	80800115 	stw	r2,4(r16)
  802a30:	00b7ffc4 	movi	r2,-8193
  802a34:	1884703a 	and	r2,r3,r2
  802a38:	8080030d 	sth	r2,12(r16)
  802a3c:	0100230e 	bge	zero,r4,802acc <__srefill_r+0x130>
  802a40:	0009883a 	mov	r4,zero
  802a44:	2005883a 	mov	r2,r4
  802a48:	dfc00217 	ldw	ra,8(sp)
  802a4c:	dc400117 	ldw	r17,4(sp)
  802a50:	dc000017 	ldw	r16,0(sp)
  802a54:	dec00304 	addi	sp,sp,12
  802a58:	f800283a 	ret
  802a5c:	81400c17 	ldw	r5,48(r16)
  802a60:	283fe426 	beq	r5,zero,8029f4 <__srefill_r+0x58>
  802a64:	80801004 	addi	r2,r16,64
  802a68:	28800226 	beq	r5,r2,802a74 <__srefill_r+0xd8>
  802a6c:	8809883a 	mov	r4,r17
  802a70:	08012ec0 	call	8012ec <_free_r>
  802a74:	80800f17 	ldw	r2,60(r16)
  802a78:	80000c15 	stw	zero,48(r16)
  802a7c:	80800115 	stw	r2,4(r16)
  802a80:	103fdc26 	beq	r2,zero,8029f4 <__srefill_r+0x58>
  802a84:	80800e17 	ldw	r2,56(r16)
  802a88:	0009883a 	mov	r4,zero
  802a8c:	80800015 	stw	r2,0(r16)
  802a90:	2005883a 	mov	r2,r4
  802a94:	dfc00217 	ldw	ra,8(sp)
  802a98:	dc400117 	ldw	r17,4(sp)
  802a9c:	dc000017 	ldw	r16,0(sp)
  802aa0:	dec00304 	addi	sp,sp,12
  802aa4:	f800283a 	ret
  802aa8:	013fffc4 	movi	r4,-1
  802aac:	2005883a 	mov	r2,r4
  802ab0:	dfc00217 	ldw	ra,8(sp)
  802ab4:	dc400117 	ldw	r17,4(sp)
  802ab8:	dc000017 	ldw	r16,0(sp)
  802abc:	dec00304 	addi	sp,sp,12
  802ac0:	f800283a 	ret
  802ac4:	0800dc40 	call	800dc4 <__sinit>
  802ac8:	003fbd06 	br	8029c0 <__srefill_r+0x24>
  802acc:	20000b1e 	bne	r4,zero,802afc <__srefill_r+0x160>
  802ad0:	10800814 	ori	r2,r2,32
  802ad4:	013fffc4 	movi	r4,-1
  802ad8:	8080030d 	sth	r2,12(r16)
  802adc:	003fd906 	br	802a44 <__srefill_r+0xa8>
  802ae0:	00802074 	movhi	r2,129
  802ae4:	109a6a04 	addi	r2,r2,27048
  802ae8:	11000017 	ldw	r4,0(r2)
  802aec:	01402034 	movhi	r5,128
  802af0:	294ad804 	addi	r5,r5,11104
  802af4:	0801b9c0 	call	801b9c <_fwalk>
  802af8:	003fc306 	br	802a08 <__srefill_r+0x6c>
  802afc:	10801014 	ori	r2,r2,64
  802b00:	013fffc4 	movi	r4,-1
  802b04:	8080030d 	sth	r2,12(r16)
  802b08:	80000115 	stw	zero,4(r16)
  802b0c:	003fcd06 	br	802a44 <__srefill_r+0xa8>
  802b10:	8809883a 	mov	r4,r17
  802b14:	800b883a 	mov	r5,r16
  802b18:	0801e680 	call	801e68 <__smakebuf_r>
  802b1c:	003fb706 	br	8029fc <__srefill_r+0x60>
  802b20:	18c01014 	ori	r3,r3,64
  802b24:	00800244 	movi	r2,9
  802b28:	013fffc4 	movi	r4,-1
  802b2c:	88800015 	stw	r2,0(r17)
  802b30:	80c0030d 	sth	r3,12(r16)
  802b34:	003fc306 	br	802a44 <__srefill_r+0xa8>
  802b38:	8809883a 	mov	r4,r17
  802b3c:	800b883a 	mov	r5,r16
  802b40:	0800b2c0 	call	800b2c <_fflush_r>
  802b44:	103fd81e 	bne	r2,zero,802aa8 <__srefill_r+0x10c>
  802b48:	8080030b 	ldhu	r2,12(r16)
  802b4c:	80000215 	stw	zero,8(r16)
  802b50:	80000615 	stw	zero,24(r16)
  802b54:	10bffdcc 	andi	r2,r2,65527
  802b58:	8080030d 	sth	r2,12(r16)
  802b5c:	003fa206 	br	8029e8 <__srefill_r+0x4c>

00802b60 <lflush>:
  802b60:	20c0030b 	ldhu	r3,12(r4)
  802b64:	01400244 	movi	r5,9
  802b68:	0005883a 	mov	r2,zero
  802b6c:	18c0024c 	andi	r3,r3,9
  802b70:	19400126 	beq	r3,r5,802b78 <lflush+0x18>
  802b74:	f800283a 	ret
  802b78:	0800d281 	jmpi	800d28 <fflush>

00802b7c <__srget_r>:
  802b7c:	defffe04 	addi	sp,sp,-8
  802b80:	dc000015 	stw	r16,0(sp)
  802b84:	dfc00115 	stw	ra,4(sp)
  802b88:	2821883a 	mov	r16,r5
  802b8c:	080299c0 	call	80299c <__srefill_r>
  802b90:	013fffc4 	movi	r4,-1
  802b94:	1000071e 	bne	r2,zero,802bb4 <__srget_r+0x38>
  802b98:	80800117 	ldw	r2,4(r16)
  802b9c:	81000017 	ldw	r4,0(r16)
  802ba0:	10bfffc4 	addi	r2,r2,-1
  802ba4:	20c00044 	addi	r3,r4,1
  802ba8:	80800115 	stw	r2,4(r16)
  802bac:	21000003 	ldbu	r4,0(r4)
  802bb0:	80c00015 	stw	r3,0(r16)
  802bb4:	2005883a 	mov	r2,r4
  802bb8:	dfc00117 	ldw	ra,4(sp)
  802bbc:	dc000017 	ldw	r16,0(sp)
  802bc0:	dec00204 	addi	sp,sp,8
  802bc4:	f800283a 	ret

00802bc8 <__srget>:
  802bc8:	00802074 	movhi	r2,129
  802bcc:	109a6904 	addi	r2,r2,27044
  802bd0:	200b883a 	mov	r5,r4
  802bd4:	11000017 	ldw	r4,0(r2)
  802bd8:	0802b7c1 	jmpi	802b7c <__srget_r>

00802bdc <_sbrk_r>:
  802bdc:	defffd04 	addi	sp,sp,-12
  802be0:	dc000015 	stw	r16,0(sp)
  802be4:	040020b4 	movhi	r16,130
  802be8:	84216b04 	addi	r16,r16,-31316
  802bec:	dc400115 	stw	r17,4(sp)
  802bf0:	80000015 	stw	zero,0(r16)
  802bf4:	2023883a 	mov	r17,r4
  802bf8:	2809883a 	mov	r4,r5
  802bfc:	dfc00215 	stw	ra,8(sp)
  802c00:	08115d40 	call	8115d4 <sbrk>
  802c04:	1007883a 	mov	r3,r2
  802c08:	00bfffc4 	movi	r2,-1
  802c0c:	18800626 	beq	r3,r2,802c28 <_sbrk_r+0x4c>
  802c10:	1805883a 	mov	r2,r3
  802c14:	dfc00217 	ldw	ra,8(sp)
  802c18:	dc400117 	ldw	r17,4(sp)
  802c1c:	dc000017 	ldw	r16,0(sp)
  802c20:	dec00304 	addi	sp,sp,12
  802c24:	f800283a 	ret
  802c28:	80800017 	ldw	r2,0(r16)
  802c2c:	103ff826 	beq	r2,zero,802c10 <_sbrk_r+0x34>
  802c30:	88800015 	stw	r2,0(r17)
  802c34:	1805883a 	mov	r2,r3
  802c38:	dfc00217 	ldw	ra,8(sp)
  802c3c:	dc400117 	ldw	r17,4(sp)
  802c40:	dc000017 	ldw	r16,0(sp)
  802c44:	dec00304 	addi	sp,sp,12
  802c48:	f800283a 	ret

00802c4c <eofread>:
  802c4c:	0005883a 	mov	r2,zero
  802c50:	f800283a 	ret

00802c54 <_sscanf_r>:
  802c54:	deffe404 	addi	sp,sp,-112
  802c58:	dcc01915 	stw	r19,100(sp)
  802c5c:	2027883a 	mov	r19,r4
  802c60:	dfc01a15 	stw	ra,104(sp)
  802c64:	dc401815 	stw	r17,96(sp)
  802c68:	d9c01b15 	stw	r7,108(sp)
  802c6c:	00808104 	movi	r2,516
  802c70:	2809883a 	mov	r4,r5
  802c74:	3023883a 	mov	r17,r6
  802c78:	d9400115 	stw	r5,4(sp)
  802c7c:	d9400515 	stw	r5,20(sp)
  802c80:	d880040d 	sth	r2,16(sp)
  802c84:	0802eac0 	call	802eac <strlen>
  802c88:	d8c01b04 	addi	r3,sp,108
  802c8c:	d8c00015 	stw	r3,0(sp)
  802c90:	180f883a 	mov	r7,r3
  802c94:	023fffc4 	movi	r8,-1
  802c98:	00c02034 	movhi	r3,128
  802c9c:	18cb1304 	addi	r3,r3,11340
  802ca0:	9809883a 	mov	r4,r19
  802ca4:	880d883a 	mov	r6,r17
  802ca8:	d9400104 	addi	r5,sp,4
  802cac:	d8800615 	stw	r2,24(sp)
  802cb0:	d8c00915 	stw	r3,36(sp)
  802cb4:	da00048d 	sth	r8,18(sp)
  802cb8:	d8800215 	stw	r2,8(sp)
  802cbc:	d8000d15 	stw	zero,52(sp)
  802cc0:	d8001215 	stw	zero,72(sp)
  802cc4:	0804e600 	call	804e60 <__svfscanf_r>
  802cc8:	dfc01a17 	ldw	ra,104(sp)
  802ccc:	dcc01917 	ldw	r19,100(sp)
  802cd0:	dc401817 	ldw	r17,96(sp)
  802cd4:	dec01c04 	addi	sp,sp,112
  802cd8:	f800283a 	ret

00802cdc <sscanf>:
  802cdc:	deffe404 	addi	sp,sp,-112
  802ce0:	dfc01915 	stw	ra,100(sp)
  802ce4:	dc401815 	stw	r17,96(sp)
  802ce8:	d9801a15 	stw	r6,104(sp)
  802cec:	d9c01b15 	stw	r7,108(sp)
  802cf0:	00808104 	movi	r2,516
  802cf4:	2823883a 	mov	r17,r5
  802cf8:	d9000515 	stw	r4,20(sp)
  802cfc:	d9000115 	stw	r4,4(sp)
  802d00:	d880040d 	sth	r2,16(sp)
  802d04:	0802eac0 	call	802eac <strlen>
  802d08:	d8c01a04 	addi	r3,sp,104
  802d0c:	d8c00015 	stw	r3,0(sp)
  802d10:	00c02074 	movhi	r3,129
  802d14:	18da6904 	addi	r3,r3,27044
  802d18:	19000017 	ldw	r4,0(r3)
  802d1c:	d9c00017 	ldw	r7,0(sp)
  802d20:	00c02034 	movhi	r3,128
  802d24:	18cb1304 	addi	r3,r3,11340
  802d28:	023fffc4 	movi	r8,-1
  802d2c:	880d883a 	mov	r6,r17
  802d30:	d9400104 	addi	r5,sp,4
  802d34:	d8800615 	stw	r2,24(sp)
  802d38:	d8c00915 	stw	r3,36(sp)
  802d3c:	da00048d 	sth	r8,18(sp)
  802d40:	d8800215 	stw	r2,8(sp)
  802d44:	d8000d15 	stw	zero,52(sp)
  802d48:	d8001215 	stw	zero,72(sp)
  802d4c:	0804e600 	call	804e60 <__svfscanf_r>
  802d50:	dfc01917 	ldw	ra,100(sp)
  802d54:	dc401817 	ldw	r17,96(sp)
  802d58:	dec01c04 	addi	sp,sp,112
  802d5c:	f800283a 	ret

00802d60 <__sclose>:
  802d60:	2940038f 	ldh	r5,14(r5)
  802d64:	080679c1 	jmpi	80679c <_close_r>

00802d68 <__sseek>:
  802d68:	defffe04 	addi	sp,sp,-8
  802d6c:	dc000015 	stw	r16,0(sp)
  802d70:	2821883a 	mov	r16,r5
  802d74:	2940038f 	ldh	r5,14(r5)
  802d78:	dfc00115 	stw	ra,4(sp)
  802d7c:	08088ec0 	call	8088ec <_lseek_r>
  802d80:	1007883a 	mov	r3,r2
  802d84:	00bfffc4 	movi	r2,-1
  802d88:	18800926 	beq	r3,r2,802db0 <__sseek+0x48>
  802d8c:	8080030b 	ldhu	r2,12(r16)
  802d90:	80c01415 	stw	r3,80(r16)
  802d94:	10840014 	ori	r2,r2,4096
  802d98:	8080030d 	sth	r2,12(r16)
  802d9c:	1805883a 	mov	r2,r3
  802da0:	dfc00117 	ldw	ra,4(sp)
  802da4:	dc000017 	ldw	r16,0(sp)
  802da8:	dec00204 	addi	sp,sp,8
  802dac:	f800283a 	ret
  802db0:	8080030b 	ldhu	r2,12(r16)
  802db4:	10bbffcc 	andi	r2,r2,61439
  802db8:	8080030d 	sth	r2,12(r16)
  802dbc:	1805883a 	mov	r2,r3
  802dc0:	dfc00117 	ldw	ra,4(sp)
  802dc4:	dc000017 	ldw	r16,0(sp)
  802dc8:	dec00204 	addi	sp,sp,8
  802dcc:	f800283a 	ret

00802dd0 <__swrite>:
  802dd0:	2880030b 	ldhu	r2,12(r5)
  802dd4:	defffb04 	addi	sp,sp,-20
  802dd8:	dcc00315 	stw	r19,12(sp)
  802ddc:	1080400c 	andi	r2,r2,256
  802de0:	dc800215 	stw	r18,8(sp)
  802de4:	dc400115 	stw	r17,4(sp)
  802de8:	dc000015 	stw	r16,0(sp)
  802dec:	3027883a 	mov	r19,r6
  802df0:	3825883a 	mov	r18,r7
  802df4:	dfc00415 	stw	ra,16(sp)
  802df8:	2821883a 	mov	r16,r5
  802dfc:	000d883a 	mov	r6,zero
  802e00:	01c00084 	movi	r7,2
  802e04:	2023883a 	mov	r17,r4
  802e08:	10000226 	beq	r2,zero,802e14 <__swrite+0x44>
  802e0c:	2940038f 	ldh	r5,14(r5)
  802e10:	08088ec0 	call	8088ec <_lseek_r>
  802e14:	8080030b 	ldhu	r2,12(r16)
  802e18:	8140038f 	ldh	r5,14(r16)
  802e1c:	8809883a 	mov	r4,r17
  802e20:	10bbffcc 	andi	r2,r2,61439
  802e24:	980d883a 	mov	r6,r19
  802e28:	900f883a 	mov	r7,r18
  802e2c:	8080030d 	sth	r2,12(r16)
  802e30:	dfc00417 	ldw	ra,16(sp)
  802e34:	dcc00317 	ldw	r19,12(sp)
  802e38:	dc800217 	ldw	r18,8(sp)
  802e3c:	dc400117 	ldw	r17,4(sp)
  802e40:	dc000017 	ldw	r16,0(sp)
  802e44:	dec00504 	addi	sp,sp,20
  802e48:	08065e81 	jmpi	8065e8 <_write_r>

00802e4c <__sread>:
  802e4c:	defffe04 	addi	sp,sp,-8
  802e50:	dc000015 	stw	r16,0(sp)
  802e54:	2821883a 	mov	r16,r5
  802e58:	2940038f 	ldh	r5,14(r5)
  802e5c:	dfc00115 	stw	ra,4(sp)
  802e60:	0809f400 	call	809f40 <_read_r>
  802e64:	1007883a 	mov	r3,r2
  802e68:	10000816 	blt	r2,zero,802e8c <__sread+0x40>
  802e6c:	80801417 	ldw	r2,80(r16)
  802e70:	10c5883a 	add	r2,r2,r3
  802e74:	80801415 	stw	r2,80(r16)
  802e78:	1805883a 	mov	r2,r3
  802e7c:	dfc00117 	ldw	ra,4(sp)
  802e80:	dc000017 	ldw	r16,0(sp)
  802e84:	dec00204 	addi	sp,sp,8
  802e88:	f800283a 	ret
  802e8c:	8080030b 	ldhu	r2,12(r16)
  802e90:	10bbffcc 	andi	r2,r2,61439
  802e94:	8080030d 	sth	r2,12(r16)
  802e98:	1805883a 	mov	r2,r3
  802e9c:	dfc00117 	ldw	ra,4(sp)
  802ea0:	dc000017 	ldw	r16,0(sp)
  802ea4:	dec00204 	addi	sp,sp,8
  802ea8:	f800283a 	ret

00802eac <strlen>:
  802eac:	208000cc 	andi	r2,r4,3
  802eb0:	2011883a 	mov	r8,r4
  802eb4:	1000161e 	bne	r2,zero,802f10 <strlen+0x64>
  802eb8:	20c00017 	ldw	r3,0(r4)
  802ebc:	017fbff4 	movhi	r5,65279
  802ec0:	297fbfc4 	addi	r5,r5,-257
  802ec4:	01e02074 	movhi	r7,32897
  802ec8:	39e02004 	addi	r7,r7,-32640
  802ecc:	1945883a 	add	r2,r3,r5
  802ed0:	11c4703a 	and	r2,r2,r7
  802ed4:	00c6303a 	nor	r3,zero,r3
  802ed8:	1886703a 	and	r3,r3,r2
  802edc:	18000c1e 	bne	r3,zero,802f10 <strlen+0x64>
  802ee0:	280d883a 	mov	r6,r5
  802ee4:	380b883a 	mov	r5,r7
  802ee8:	21000104 	addi	r4,r4,4
  802eec:	20800017 	ldw	r2,0(r4)
  802ef0:	1187883a 	add	r3,r2,r6
  802ef4:	1946703a 	and	r3,r3,r5
  802ef8:	0084303a 	nor	r2,zero,r2
  802efc:	10c4703a 	and	r2,r2,r3
  802f00:	103ff926 	beq	r2,zero,802ee8 <strlen+0x3c>
  802f04:	20800007 	ldb	r2,0(r4)
  802f08:	10000326 	beq	r2,zero,802f18 <strlen+0x6c>
  802f0c:	21000044 	addi	r4,r4,1
  802f10:	20800007 	ldb	r2,0(r4)
  802f14:	103ffd1e 	bne	r2,zero,802f0c <strlen+0x60>
  802f18:	2205c83a 	sub	r2,r4,r8
  802f1c:	f800283a 	ret

00802f20 <__sprint_r>:
  802f20:	30800217 	ldw	r2,8(r6)
  802f24:	defffe04 	addi	sp,sp,-8
  802f28:	dc000015 	stw	r16,0(sp)
  802f2c:	dfc00115 	stw	ra,4(sp)
  802f30:	3021883a 	mov	r16,r6
  802f34:	0007883a 	mov	r3,zero
  802f38:	1000061e 	bne	r2,zero,802f54 <__sprint_r+0x34>
  802f3c:	1805883a 	mov	r2,r3
  802f40:	30000115 	stw	zero,4(r6)
  802f44:	dfc00117 	ldw	ra,4(sp)
  802f48:	dc000017 	ldw	r16,0(sp)
  802f4c:	dec00204 	addi	sp,sp,8
  802f50:	f800283a 	ret
  802f54:	08082f00 	call	8082f0 <__sfvwrite_r>
  802f58:	1007883a 	mov	r3,r2
  802f5c:	1805883a 	mov	r2,r3
  802f60:	80000115 	stw	zero,4(r16)
  802f64:	80000215 	stw	zero,8(r16)
  802f68:	dfc00117 	ldw	ra,4(sp)
  802f6c:	dc000017 	ldw	r16,0(sp)
  802f70:	dec00204 	addi	sp,sp,8
  802f74:	f800283a 	ret

00802f78 <___vfprintf_internal_r>:
  802f78:	defea404 	addi	sp,sp,-1392
  802f7c:	dd815815 	stw	r22,1376(sp)
  802f80:	dc015215 	stw	r16,1352(sp)
  802f84:	d9c15115 	stw	r7,1348(sp)
  802f88:	dfc15b15 	stw	ra,1388(sp)
  802f8c:	df015a15 	stw	fp,1384(sp)
  802f90:	ddc15915 	stw	r23,1380(sp)
  802f94:	dd415715 	stw	r21,1372(sp)
  802f98:	dd015615 	stw	r20,1368(sp)
  802f9c:	dcc15515 	stw	r19,1364(sp)
  802fa0:	dc815415 	stw	r18,1360(sp)
  802fa4:	dc415315 	stw	r17,1356(sp)
  802fa8:	282d883a 	mov	r22,r5
  802fac:	3021883a 	mov	r16,r6
  802fb0:	d9014f15 	stw	r4,1340(sp)
  802fb4:	08088300 	call	808830 <_localeconv_r>
  802fb8:	10800017 	ldw	r2,0(r2)
  802fbc:	d9c15117 	ldw	r7,1348(sp)
  802fc0:	d8814915 	stw	r2,1316(sp)
  802fc4:	d8814f17 	ldw	r2,1340(sp)
  802fc8:	10000226 	beq	r2,zero,802fd4 <___vfprintf_internal_r+0x5c>
  802fcc:	10800e17 	ldw	r2,56(r2)
  802fd0:	10020d26 	beq	r2,zero,803808 <___vfprintf_internal_r+0x890>
  802fd4:	b080030b 	ldhu	r2,12(r22)
  802fd8:	1080020c 	andi	r2,r2,8
  802fdc:	10020e26 	beq	r2,zero,803818 <___vfprintf_internal_r+0x8a0>
  802fe0:	b0800417 	ldw	r2,16(r22)
  802fe4:	10020c26 	beq	r2,zero,803818 <___vfprintf_internal_r+0x8a0>
  802fe8:	b200030b 	ldhu	r8,12(r22)
  802fec:	00800284 	movi	r2,10
  802ff0:	40c0068c 	andi	r3,r8,26
  802ff4:	18802f1e 	bne	r3,r2,8030b4 <___vfprintf_internal_r+0x13c>
  802ff8:	b080038f 	ldh	r2,14(r22)
  802ffc:	10002d16 	blt	r2,zero,8030b4 <___vfprintf_internal_r+0x13c>
  803000:	b240038b 	ldhu	r9,14(r22)
  803004:	b2800717 	ldw	r10,28(r22)
  803008:	b2c00917 	ldw	r11,36(r22)
  80300c:	d9014f17 	ldw	r4,1340(sp)
  803010:	dc402904 	addi	r17,sp,164
  803014:	d8804004 	addi	r2,sp,256
  803018:	00c10004 	movi	r3,1024
  80301c:	423fff4c 	andi	r8,r8,65533
  803020:	800d883a 	mov	r6,r16
  803024:	880b883a 	mov	r5,r17
  803028:	da002c0d 	sth	r8,176(sp)
  80302c:	da402c8d 	sth	r9,178(sp)
  803030:	da803015 	stw	r10,192(sp)
  803034:	dac03215 	stw	r11,200(sp)
  803038:	d8802d15 	stw	r2,180(sp)
  80303c:	d8c02e15 	stw	r3,184(sp)
  803040:	d8802915 	stw	r2,164(sp)
  803044:	d8c02b15 	stw	r3,172(sp)
  803048:	d8002f15 	stw	zero,188(sp)
  80304c:	0802f780 	call	802f78 <___vfprintf_internal_r>
  803050:	d8814b15 	stw	r2,1324(sp)
  803054:	10000416 	blt	r2,zero,803068 <___vfprintf_internal_r+0xf0>
  803058:	d9014f17 	ldw	r4,1340(sp)
  80305c:	880b883a 	mov	r5,r17
  803060:	0800b2c0 	call	800b2c <_fflush_r>
  803064:	1002321e 	bne	r2,zero,803930 <___vfprintf_internal_r+0x9b8>
  803068:	d8802c0b 	ldhu	r2,176(sp)
  80306c:	1080100c 	andi	r2,r2,64
  803070:	10000326 	beq	r2,zero,803080 <___vfprintf_internal_r+0x108>
  803074:	b080030b 	ldhu	r2,12(r22)
  803078:	10801014 	ori	r2,r2,64
  80307c:	b080030d 	sth	r2,12(r22)
  803080:	d8814b17 	ldw	r2,1324(sp)
  803084:	dfc15b17 	ldw	ra,1388(sp)
  803088:	df015a17 	ldw	fp,1384(sp)
  80308c:	ddc15917 	ldw	r23,1380(sp)
  803090:	dd815817 	ldw	r22,1376(sp)
  803094:	dd415717 	ldw	r21,1372(sp)
  803098:	dd015617 	ldw	r20,1368(sp)
  80309c:	dcc15517 	ldw	r19,1364(sp)
  8030a0:	dc815417 	ldw	r18,1360(sp)
  8030a4:	dc415317 	ldw	r17,1356(sp)
  8030a8:	dc015217 	ldw	r16,1352(sp)
  8030ac:	dec15c04 	addi	sp,sp,1392
  8030b0:	f800283a 	ret
  8030b4:	0005883a 	mov	r2,zero
  8030b8:	0007883a 	mov	r3,zero
  8030bc:	dd401904 	addi	r21,sp,100
  8030c0:	d8814215 	stw	r2,1288(sp)
  8030c4:	802f883a 	mov	r23,r16
  8030c8:	d8c14315 	stw	r3,1292(sp)
  8030cc:	d8014b15 	stw	zero,1324(sp)
  8030d0:	d8014815 	stw	zero,1312(sp)
  8030d4:	d8014415 	stw	zero,1296(sp)
  8030d8:	d8014715 	stw	zero,1308(sp)
  8030dc:	dd400c15 	stw	r21,48(sp)
  8030e0:	d8000e15 	stw	zero,56(sp)
  8030e4:	d8000d15 	stw	zero,52(sp)
  8030e8:	b8800007 	ldb	r2,0(r23)
  8030ec:	10001926 	beq	r2,zero,803154 <___vfprintf_internal_r+0x1dc>
  8030f0:	00c00944 	movi	r3,37
  8030f4:	10c01726 	beq	r2,r3,803154 <___vfprintf_internal_r+0x1dc>
  8030f8:	b821883a 	mov	r16,r23
  8030fc:	00000106 	br	803104 <___vfprintf_internal_r+0x18c>
  803100:	10c00326 	beq	r2,r3,803110 <___vfprintf_internal_r+0x198>
  803104:	84000044 	addi	r16,r16,1
  803108:	80800007 	ldb	r2,0(r16)
  80310c:	103ffc1e 	bne	r2,zero,803100 <___vfprintf_internal_r+0x188>
  803110:	85e7c83a 	sub	r19,r16,r23
  803114:	98000e26 	beq	r19,zero,803150 <___vfprintf_internal_r+0x1d8>
  803118:	dc800e17 	ldw	r18,56(sp)
  80311c:	dc400d17 	ldw	r17,52(sp)
  803120:	008001c4 	movi	r2,7
  803124:	94e5883a 	add	r18,r18,r19
  803128:	8c400044 	addi	r17,r17,1
  80312c:	adc00015 	stw	r23,0(r21)
  803130:	dc800e15 	stw	r18,56(sp)
  803134:	acc00115 	stw	r19,4(r21)
  803138:	dc400d15 	stw	r17,52(sp)
  80313c:	14428b16 	blt	r2,r17,803b6c <___vfprintf_internal_r+0xbf4>
  803140:	ad400204 	addi	r21,r21,8
  803144:	d9014b17 	ldw	r4,1324(sp)
  803148:	24c9883a 	add	r4,r4,r19
  80314c:	d9014b15 	stw	r4,1324(sp)
  803150:	802f883a 	mov	r23,r16
  803154:	b8800007 	ldb	r2,0(r23)
  803158:	10013c26 	beq	r2,zero,80364c <___vfprintf_internal_r+0x6d4>
  80315c:	bdc00044 	addi	r23,r23,1
  803160:	d8000405 	stb	zero,16(sp)
  803164:	b8c00007 	ldb	r3,0(r23)
  803168:	04ffffc4 	movi	r19,-1
  80316c:	d8014c15 	stw	zero,1328(sp)
  803170:	d8014a15 	stw	zero,1320(sp)
  803174:	d8c14d15 	stw	r3,1332(sp)
  803178:	bdc00044 	addi	r23,r23,1
  80317c:	d9414d17 	ldw	r5,1332(sp)
  803180:	00801604 	movi	r2,88
  803184:	28fff804 	addi	r3,r5,-32
  803188:	10c06036 	bltu	r2,r3,80330c <___vfprintf_internal_r+0x394>
  80318c:	18c5883a 	add	r2,r3,r3
  803190:	1085883a 	add	r2,r2,r2
  803194:	00c02034 	movhi	r3,128
  803198:	18cc6a04 	addi	r3,r3,12712
  80319c:	10c5883a 	add	r2,r2,r3
  8031a0:	11000017 	ldw	r4,0(r2)
  8031a4:	2000683a 	jmp	r4
  8031a8:	0080411c 	xori	r2,zero,260
  8031ac:	0080330c 	andi	r2,zero,204
  8031b0:	0080330c 	andi	r2,zero,204
  8031b4:	00804108 	cmpgei	r2,zero,260
  8031b8:	0080330c 	andi	r2,zero,204
  8031bc:	0080330c 	andi	r2,zero,204
  8031c0:	0080330c 	andi	r2,zero,204
  8031c4:	0080330c 	andi	r2,zero,204
  8031c8:	0080330c 	andi	r2,zero,204
  8031cc:	0080330c 	andi	r2,zero,204
  8031d0:	00803ee8 	cmpgeui	r2,zero,251
  8031d4:	008040f8 	rdprs	r2,zero,259
  8031d8:	0080330c 	andi	r2,zero,204
  8031dc:	00803f00 	call	803f0 <__reset-0x77fc10>
  8031e0:	008041a0 	cmpeqi	r2,zero,262
  8031e4:	0080330c 	andi	r2,zero,204
  8031e8:	0080418c 	andi	r2,zero,262
  8031ec:	00804148 	cmpgei	r2,zero,261
  8031f0:	00804148 	cmpgei	r2,zero,261
  8031f4:	00804148 	cmpgei	r2,zero,261
  8031f8:	00804148 	cmpgei	r2,zero,261
  8031fc:	00804148 	cmpgei	r2,zero,261
  803200:	00804148 	cmpgei	r2,zero,261
  803204:	00804148 	cmpgei	r2,zero,261
  803208:	00804148 	cmpgei	r2,zero,261
  80320c:	00804148 	cmpgei	r2,zero,261
  803210:	0080330c 	andi	r2,zero,204
  803214:	0080330c 	andi	r2,zero,204
  803218:	0080330c 	andi	r2,zero,204
  80321c:	0080330c 	andi	r2,zero,204
  803220:	0080330c 	andi	r2,zero,204
  803224:	0080330c 	andi	r2,zero,204
  803228:	0080330c 	andi	r2,zero,204
  80322c:	0080330c 	andi	r2,zero,204
  803230:	0080330c 	andi	r2,zero,204
  803234:	0080330c 	andi	r2,zero,204
  803238:	00803964 	muli	r2,zero,229
  80323c:	00803fd0 	cmplti	r2,zero,255
  803240:	0080330c 	andi	r2,zero,204
  803244:	00803fd0 	cmplti	r2,zero,255
  803248:	0080330c 	andi	r2,zero,204
  80324c:	0080330c 	andi	r2,zero,204
  803250:	0080330c 	andi	r2,zero,204
  803254:	0080330c 	andi	r2,zero,204
  803258:	00804134 	movhi	r2,260
  80325c:	0080330c 	andi	r2,zero,204
  803260:	0080330c 	andi	r2,zero,204
  803264:	00803a18 	cmpnei	r2,zero,232
  803268:	0080330c 	andi	r2,zero,204
  80326c:	0080330c 	andi	r2,zero,204
  803270:	0080330c 	andi	r2,zero,204
  803274:	0080330c 	andi	r2,zero,204
  803278:	0080330c 	andi	r2,zero,204
  80327c:	00803a64 	muli	r2,zero,233
  803280:	0080330c 	andi	r2,zero,204
  803284:	0080330c 	andi	r2,zero,204
  803288:	00804084 	movi	r2,258
  80328c:	0080330c 	andi	r2,zero,204
  803290:	0080330c 	andi	r2,zero,204
  803294:	0080330c 	andi	r2,zero,204
  803298:	0080330c 	andi	r2,zero,204
  80329c:	0080330c 	andi	r2,zero,204
  8032a0:	0080330c 	andi	r2,zero,204
  8032a4:	0080330c 	andi	r2,zero,204
  8032a8:	0080330c 	andi	r2,zero,204
  8032ac:	0080330c 	andi	r2,zero,204
  8032b0:	0080330c 	andi	r2,zero,204
  8032b4:	00804058 	cmpnei	r2,zero,257
  8032b8:	00803970 	cmpltui	r2,zero,229
  8032bc:	00803fd0 	cmplti	r2,zero,255
  8032c0:	00803fd0 	cmplti	r2,zero,255
  8032c4:	00803fd0 	cmplti	r2,zero,255
  8032c8:	00803fbc 	xorhi	r2,zero,254
  8032cc:	00803970 	cmpltui	r2,zero,229
  8032d0:	0080330c 	andi	r2,zero,204
  8032d4:	0080330c 	andi	r2,zero,204
  8032d8:	00803f44 	movi	r2,253
  8032dc:	0080330c 	andi	r2,zero,204
  8032e0:	00803f14 	movui	r2,252
  8032e4:	00803a24 	muli	r2,zero,232
  8032e8:	00803f74 	movhi	r2,253
  8032ec:	00803f60 	cmpeqi	r2,zero,253
  8032f0:	0080330c 	andi	r2,zero,204
  8032f4:	00804208 	cmpgei	r2,zero,264
  8032f8:	0080330c 	andi	r2,zero,204
  8032fc:	00803a70 	cmpltui	r2,zero,233
  803300:	0080330c 	andi	r2,zero,204
  803304:	0080330c 	andi	r2,zero,204
  803308:	008040e8 	cmpgeui	r2,zero,259
  80330c:	d9014d17 	ldw	r4,1332(sp)
  803310:	2000ce26 	beq	r4,zero,80364c <___vfprintf_internal_r+0x6d4>
  803314:	01400044 	movi	r5,1
  803318:	d9800f04 	addi	r6,sp,60
  80331c:	d9c14015 	stw	r7,1280(sp)
  803320:	d9414515 	stw	r5,1300(sp)
  803324:	d9814115 	stw	r6,1284(sp)
  803328:	280f883a 	mov	r7,r5
  80332c:	d9000f05 	stb	r4,60(sp)
  803330:	d8000405 	stb	zero,16(sp)
  803334:	d8014615 	stw	zero,1304(sp)
  803338:	d8c14c17 	ldw	r3,1328(sp)
  80333c:	1880008c 	andi	r2,r3,2
  803340:	1005003a 	cmpeq	r2,r2,zero
  803344:	d8815015 	stw	r2,1344(sp)
  803348:	1000031e 	bne	r2,zero,803358 <___vfprintf_internal_r+0x3e0>
  80334c:	d9014517 	ldw	r4,1300(sp)
  803350:	21000084 	addi	r4,r4,2
  803354:	d9014515 	stw	r4,1300(sp)
  803358:	d9414c17 	ldw	r5,1328(sp)
  80335c:	2940210c 	andi	r5,r5,132
  803360:	d9414e15 	stw	r5,1336(sp)
  803364:	28002d1e 	bne	r5,zero,80341c <___vfprintf_internal_r+0x4a4>
  803368:	d9814a17 	ldw	r6,1320(sp)
  80336c:	d8814517 	ldw	r2,1300(sp)
  803370:	30a1c83a 	sub	r16,r6,r2
  803374:	0400290e 	bge	zero,r16,80341c <___vfprintf_internal_r+0x4a4>
  803378:	00800404 	movi	r2,16
  80337c:	14045e0e 	bge	r2,r16,8044f8 <___vfprintf_internal_r+0x1580>
  803380:	dc800e17 	ldw	r18,56(sp)
  803384:	dc400d17 	ldw	r17,52(sp)
  803388:	1027883a 	mov	r19,r2
  80338c:	07002074 	movhi	fp,129
  803390:	e7121784 	addi	fp,fp,18526
  803394:	050001c4 	movi	r20,7
  803398:	00000306 	br	8033a8 <___vfprintf_internal_r+0x430>
  80339c:	843ffc04 	addi	r16,r16,-16
  8033a0:	ad400204 	addi	r21,r21,8
  8033a4:	9c00130e 	bge	r19,r16,8033f4 <___vfprintf_internal_r+0x47c>
  8033a8:	94800404 	addi	r18,r18,16
  8033ac:	8c400044 	addi	r17,r17,1
  8033b0:	af000015 	stw	fp,0(r21)
  8033b4:	acc00115 	stw	r19,4(r21)
  8033b8:	dc800e15 	stw	r18,56(sp)
  8033bc:	dc400d15 	stw	r17,52(sp)
  8033c0:	a47ff60e 	bge	r20,r17,80339c <___vfprintf_internal_r+0x424>
  8033c4:	d9014f17 	ldw	r4,1340(sp)
  8033c8:	b00b883a 	mov	r5,r22
  8033cc:	d9800c04 	addi	r6,sp,48
  8033d0:	d9c15115 	stw	r7,1348(sp)
  8033d4:	0802f200 	call	802f20 <__sprint_r>
  8033d8:	d9c15117 	ldw	r7,1348(sp)
  8033dc:	10009e1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  8033e0:	843ffc04 	addi	r16,r16,-16
  8033e4:	dc800e17 	ldw	r18,56(sp)
  8033e8:	dc400d17 	ldw	r17,52(sp)
  8033ec:	dd401904 	addi	r21,sp,100
  8033f0:	9c3fed16 	blt	r19,r16,8033a8 <___vfprintf_internal_r+0x430>
  8033f4:	9425883a 	add	r18,r18,r16
  8033f8:	8c400044 	addi	r17,r17,1
  8033fc:	008001c4 	movi	r2,7
  803400:	af000015 	stw	fp,0(r21)
  803404:	ac000115 	stw	r16,4(r21)
  803408:	dc800e15 	stw	r18,56(sp)
  80340c:	dc400d15 	stw	r17,52(sp)
  803410:	1441f516 	blt	r2,r17,803be8 <___vfprintf_internal_r+0xc70>
  803414:	ad400204 	addi	r21,r21,8
  803418:	00000206 	br	803424 <___vfprintf_internal_r+0x4ac>
  80341c:	dc800e17 	ldw	r18,56(sp)
  803420:	dc400d17 	ldw	r17,52(sp)
  803424:	d8800407 	ldb	r2,16(sp)
  803428:	10000b26 	beq	r2,zero,803458 <___vfprintf_internal_r+0x4e0>
  80342c:	00800044 	movi	r2,1
  803430:	94800044 	addi	r18,r18,1
  803434:	8c400044 	addi	r17,r17,1
  803438:	a8800115 	stw	r2,4(r21)
  80343c:	d8c00404 	addi	r3,sp,16
  803440:	008001c4 	movi	r2,7
  803444:	a8c00015 	stw	r3,0(r21)
  803448:	dc800e15 	stw	r18,56(sp)
  80344c:	dc400d15 	stw	r17,52(sp)
  803450:	1441da16 	blt	r2,r17,803bbc <___vfprintf_internal_r+0xc44>
  803454:	ad400204 	addi	r21,r21,8
  803458:	d9015017 	ldw	r4,1344(sp)
  80345c:	20000b1e 	bne	r4,zero,80348c <___vfprintf_internal_r+0x514>
  803460:	d8800444 	addi	r2,sp,17
  803464:	94800084 	addi	r18,r18,2
  803468:	8c400044 	addi	r17,r17,1
  80346c:	a8800015 	stw	r2,0(r21)
  803470:	00c00084 	movi	r3,2
  803474:	008001c4 	movi	r2,7
  803478:	a8c00115 	stw	r3,4(r21)
  80347c:	dc800e15 	stw	r18,56(sp)
  803480:	dc400d15 	stw	r17,52(sp)
  803484:	1441c216 	blt	r2,r17,803b90 <___vfprintf_internal_r+0xc18>
  803488:	ad400204 	addi	r21,r21,8
  80348c:	d9414e17 	ldw	r5,1336(sp)
  803490:	00802004 	movi	r2,128
  803494:	2880b126 	beq	r5,r2,80375c <___vfprintf_internal_r+0x7e4>
  803498:	d8c14617 	ldw	r3,1304(sp)
  80349c:	19e1c83a 	sub	r16,r3,r7
  8034a0:	0400260e 	bge	zero,r16,80353c <___vfprintf_internal_r+0x5c4>
  8034a4:	00800404 	movi	r2,16
  8034a8:	1403cf0e 	bge	r2,r16,8043e8 <___vfprintf_internal_r+0x1470>
  8034ac:	1027883a 	mov	r19,r2
  8034b0:	07002074 	movhi	fp,129
  8034b4:	e7121384 	addi	fp,fp,18510
  8034b8:	050001c4 	movi	r20,7
  8034bc:	00000306 	br	8034cc <___vfprintf_internal_r+0x554>
  8034c0:	843ffc04 	addi	r16,r16,-16
  8034c4:	ad400204 	addi	r21,r21,8
  8034c8:	9c00130e 	bge	r19,r16,803518 <___vfprintf_internal_r+0x5a0>
  8034cc:	94800404 	addi	r18,r18,16
  8034d0:	8c400044 	addi	r17,r17,1
  8034d4:	af000015 	stw	fp,0(r21)
  8034d8:	acc00115 	stw	r19,4(r21)
  8034dc:	dc800e15 	stw	r18,56(sp)
  8034e0:	dc400d15 	stw	r17,52(sp)
  8034e4:	a47ff60e 	bge	r20,r17,8034c0 <___vfprintf_internal_r+0x548>
  8034e8:	d9014f17 	ldw	r4,1340(sp)
  8034ec:	b00b883a 	mov	r5,r22
  8034f0:	d9800c04 	addi	r6,sp,48
  8034f4:	d9c15115 	stw	r7,1348(sp)
  8034f8:	0802f200 	call	802f20 <__sprint_r>
  8034fc:	d9c15117 	ldw	r7,1348(sp)
  803500:	1000551e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803504:	843ffc04 	addi	r16,r16,-16
  803508:	dc800e17 	ldw	r18,56(sp)
  80350c:	dc400d17 	ldw	r17,52(sp)
  803510:	dd401904 	addi	r21,sp,100
  803514:	9c3fed16 	blt	r19,r16,8034cc <___vfprintf_internal_r+0x554>
  803518:	9425883a 	add	r18,r18,r16
  80351c:	8c400044 	addi	r17,r17,1
  803520:	008001c4 	movi	r2,7
  803524:	af000015 	stw	fp,0(r21)
  803528:	ac000115 	stw	r16,4(r21)
  80352c:	dc800e15 	stw	r18,56(sp)
  803530:	dc400d15 	stw	r17,52(sp)
  803534:	14418216 	blt	r2,r17,803b40 <___vfprintf_internal_r+0xbc8>
  803538:	ad400204 	addi	r21,r21,8
  80353c:	d9014c17 	ldw	r4,1328(sp)
  803540:	2080400c 	andi	r2,r4,256
  803544:	10004a1e 	bne	r2,zero,803670 <___vfprintf_internal_r+0x6f8>
  803548:	d9414117 	ldw	r5,1284(sp)
  80354c:	91e5883a 	add	r18,r18,r7
  803550:	8c400044 	addi	r17,r17,1
  803554:	008001c4 	movi	r2,7
  803558:	a9400015 	stw	r5,0(r21)
  80355c:	a9c00115 	stw	r7,4(r21)
  803560:	dc800e15 	stw	r18,56(sp)
  803564:	dc400d15 	stw	r17,52(sp)
  803568:	14416716 	blt	r2,r17,803b08 <___vfprintf_internal_r+0xb90>
  80356c:	a8c00204 	addi	r3,r21,8
  803570:	d9814c17 	ldw	r6,1328(sp)
  803574:	3080010c 	andi	r2,r6,4
  803578:	10002826 	beq	r2,zero,80361c <___vfprintf_internal_r+0x6a4>
  80357c:	d8814a17 	ldw	r2,1320(sp)
  803580:	d9014517 	ldw	r4,1300(sp)
  803584:	1121c83a 	sub	r16,r2,r4
  803588:	0400240e 	bge	zero,r16,80361c <___vfprintf_internal_r+0x6a4>
  80358c:	00800404 	movi	r2,16
  803590:	1404550e 	bge	r2,r16,8046e8 <___vfprintf_internal_r+0x1770>
  803594:	dc400d17 	ldw	r17,52(sp)
  803598:	1027883a 	mov	r19,r2
  80359c:	07002074 	movhi	fp,129
  8035a0:	e7121784 	addi	fp,fp,18526
  8035a4:	050001c4 	movi	r20,7
  8035a8:	00000306 	br	8035b8 <___vfprintf_internal_r+0x640>
  8035ac:	843ffc04 	addi	r16,r16,-16
  8035b0:	18c00204 	addi	r3,r3,8
  8035b4:	9c00110e 	bge	r19,r16,8035fc <___vfprintf_internal_r+0x684>
  8035b8:	94800404 	addi	r18,r18,16
  8035bc:	8c400044 	addi	r17,r17,1
  8035c0:	1f000015 	stw	fp,0(r3)
  8035c4:	1cc00115 	stw	r19,4(r3)
  8035c8:	dc800e15 	stw	r18,56(sp)
  8035cc:	dc400d15 	stw	r17,52(sp)
  8035d0:	a47ff60e 	bge	r20,r17,8035ac <___vfprintf_internal_r+0x634>
  8035d4:	d9014f17 	ldw	r4,1340(sp)
  8035d8:	b00b883a 	mov	r5,r22
  8035dc:	d9800c04 	addi	r6,sp,48
  8035e0:	0802f200 	call	802f20 <__sprint_r>
  8035e4:	10001c1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  8035e8:	843ffc04 	addi	r16,r16,-16
  8035ec:	dc800e17 	ldw	r18,56(sp)
  8035f0:	dc400d17 	ldw	r17,52(sp)
  8035f4:	d8c01904 	addi	r3,sp,100
  8035f8:	9c3fef16 	blt	r19,r16,8035b8 <___vfprintf_internal_r+0x640>
  8035fc:	9425883a 	add	r18,r18,r16
  803600:	8c400044 	addi	r17,r17,1
  803604:	008001c4 	movi	r2,7
  803608:	1f000015 	stw	fp,0(r3)
  80360c:	1c000115 	stw	r16,4(r3)
  803610:	dc800e15 	stw	r18,56(sp)
  803614:	dc400d15 	stw	r17,52(sp)
  803618:	1440cb16 	blt	r2,r17,803948 <___vfprintf_internal_r+0x9d0>
  80361c:	d8814a17 	ldw	r2,1320(sp)
  803620:	d9414517 	ldw	r5,1300(sp)
  803624:	1140010e 	bge	r2,r5,80362c <___vfprintf_internal_r+0x6b4>
  803628:	2805883a 	mov	r2,r5
  80362c:	d9814b17 	ldw	r6,1324(sp)
  803630:	308d883a 	add	r6,r6,r2
  803634:	d9814b15 	stw	r6,1324(sp)
  803638:	90013b1e 	bne	r18,zero,803b28 <___vfprintf_internal_r+0xbb0>
  80363c:	d9c14017 	ldw	r7,1280(sp)
  803640:	dd401904 	addi	r21,sp,100
  803644:	d8000d15 	stw	zero,52(sp)
  803648:	003ea706 	br	8030e8 <___vfprintf_internal_r+0x170>
  80364c:	d8800e17 	ldw	r2,56(sp)
  803650:	1005451e 	bne	r2,zero,804b68 <___vfprintf_internal_r+0x1bf0>
  803654:	d8000d15 	stw	zero,52(sp)
  803658:	b080030b 	ldhu	r2,12(r22)
  80365c:	1080100c 	andi	r2,r2,64
  803660:	103e8726 	beq	r2,zero,803080 <___vfprintf_internal_r+0x108>
  803664:	00bfffc4 	movi	r2,-1
  803668:	d8814b15 	stw	r2,1324(sp)
  80366c:	003e8406 	br	803080 <___vfprintf_internal_r+0x108>
  803670:	d9814d17 	ldw	r6,1332(sp)
  803674:	00801944 	movi	r2,101
  803678:	11806e16 	blt	r2,r6,803834 <___vfprintf_internal_r+0x8bc>
  80367c:	d9414717 	ldw	r5,1308(sp)
  803680:	00c00044 	movi	r3,1
  803684:	1943490e 	bge	r3,r5,8043ac <___vfprintf_internal_r+0x1434>
  803688:	d8814117 	ldw	r2,1284(sp)
  80368c:	94800044 	addi	r18,r18,1
  803690:	8c400044 	addi	r17,r17,1
  803694:	a8800015 	stw	r2,0(r21)
  803698:	008001c4 	movi	r2,7
  80369c:	a8c00115 	stw	r3,4(r21)
  8036a0:	dc800e15 	stw	r18,56(sp)
  8036a4:	dc400d15 	stw	r17,52(sp)
  8036a8:	1441ca16 	blt	r2,r17,803dd4 <___vfprintf_internal_r+0xe5c>
  8036ac:	a8c00204 	addi	r3,r21,8
  8036b0:	d9014917 	ldw	r4,1316(sp)
  8036b4:	00800044 	movi	r2,1
  8036b8:	94800044 	addi	r18,r18,1
  8036bc:	8c400044 	addi	r17,r17,1
  8036c0:	18800115 	stw	r2,4(r3)
  8036c4:	008001c4 	movi	r2,7
  8036c8:	19000015 	stw	r4,0(r3)
  8036cc:	dc800e15 	stw	r18,56(sp)
  8036d0:	dc400d15 	stw	r17,52(sp)
  8036d4:	1441b616 	blt	r2,r17,803db0 <___vfprintf_internal_r+0xe38>
  8036d8:	1cc00204 	addi	r19,r3,8
  8036dc:	d9014217 	ldw	r4,1288(sp)
  8036e0:	d9414317 	ldw	r5,1292(sp)
  8036e4:	000d883a 	mov	r6,zero
  8036e8:	000f883a 	mov	r7,zero
  8036ec:	080f6c00 	call	80f6c0 <__nedf2>
  8036f0:	10017426 	beq	r2,zero,803cc4 <___vfprintf_internal_r+0xd4c>
  8036f4:	d9414717 	ldw	r5,1308(sp)
  8036f8:	d9814117 	ldw	r6,1284(sp)
  8036fc:	8c400044 	addi	r17,r17,1
  803700:	2c85883a 	add	r2,r5,r18
  803704:	14bfffc4 	addi	r18,r2,-1
  803708:	28bfffc4 	addi	r2,r5,-1
  80370c:	30c00044 	addi	r3,r6,1
  803710:	98800115 	stw	r2,4(r19)
  803714:	008001c4 	movi	r2,7
  803718:	98c00015 	stw	r3,0(r19)
  80371c:	dc800e15 	stw	r18,56(sp)
  803720:	dc400d15 	stw	r17,52(sp)
  803724:	14418e16 	blt	r2,r17,803d60 <___vfprintf_internal_r+0xde8>
  803728:	9cc00204 	addi	r19,r19,8
  80372c:	d9414817 	ldw	r5,1312(sp)
  803730:	d8800804 	addi	r2,sp,32
  803734:	8c400044 	addi	r17,r17,1
  803738:	9165883a 	add	r18,r18,r5
  80373c:	98800015 	stw	r2,0(r19)
  803740:	008001c4 	movi	r2,7
  803744:	99400115 	stw	r5,4(r19)
  803748:	dc800e15 	stw	r18,56(sp)
  80374c:	dc400d15 	stw	r17,52(sp)
  803750:	1440ed16 	blt	r2,r17,803b08 <___vfprintf_internal_r+0xb90>
  803754:	98c00204 	addi	r3,r19,8
  803758:	003f8506 	br	803570 <___vfprintf_internal_r+0x5f8>
  80375c:	d9814a17 	ldw	r6,1320(sp)
  803760:	d8814517 	ldw	r2,1300(sp)
  803764:	30a1c83a 	sub	r16,r6,r2
  803768:	043f4b0e 	bge	zero,r16,803498 <___vfprintf_internal_r+0x520>
  80376c:	00800404 	movi	r2,16
  803770:	14043a0e 	bge	r2,r16,80485c <___vfprintf_internal_r+0x18e4>
  803774:	1027883a 	mov	r19,r2
  803778:	07002074 	movhi	fp,129
  80377c:	e7121384 	addi	fp,fp,18510
  803780:	050001c4 	movi	r20,7
  803784:	00000306 	br	803794 <___vfprintf_internal_r+0x81c>
  803788:	843ffc04 	addi	r16,r16,-16
  80378c:	ad400204 	addi	r21,r21,8
  803790:	9c00130e 	bge	r19,r16,8037e0 <___vfprintf_internal_r+0x868>
  803794:	94800404 	addi	r18,r18,16
  803798:	8c400044 	addi	r17,r17,1
  80379c:	af000015 	stw	fp,0(r21)
  8037a0:	acc00115 	stw	r19,4(r21)
  8037a4:	dc800e15 	stw	r18,56(sp)
  8037a8:	dc400d15 	stw	r17,52(sp)
  8037ac:	a47ff60e 	bge	r20,r17,803788 <___vfprintf_internal_r+0x810>
  8037b0:	d9014f17 	ldw	r4,1340(sp)
  8037b4:	b00b883a 	mov	r5,r22
  8037b8:	d9800c04 	addi	r6,sp,48
  8037bc:	d9c15115 	stw	r7,1348(sp)
  8037c0:	0802f200 	call	802f20 <__sprint_r>
  8037c4:	d9c15117 	ldw	r7,1348(sp)
  8037c8:	103fa31e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  8037cc:	843ffc04 	addi	r16,r16,-16
  8037d0:	dc800e17 	ldw	r18,56(sp)
  8037d4:	dc400d17 	ldw	r17,52(sp)
  8037d8:	dd401904 	addi	r21,sp,100
  8037dc:	9c3fed16 	blt	r19,r16,803794 <___vfprintf_internal_r+0x81c>
  8037e0:	9425883a 	add	r18,r18,r16
  8037e4:	8c400044 	addi	r17,r17,1
  8037e8:	008001c4 	movi	r2,7
  8037ec:	af000015 	stw	fp,0(r21)
  8037f0:	ac000115 	stw	r16,4(r21)
  8037f4:	dc800e15 	stw	r18,56(sp)
  8037f8:	dc400d15 	stw	r17,52(sp)
  8037fc:	14416116 	blt	r2,r17,803d84 <___vfprintf_internal_r+0xe0c>
  803800:	ad400204 	addi	r21,r21,8
  803804:	003f2406 	br	803498 <___vfprintf_internal_r+0x520>
  803808:	d9014f17 	ldw	r4,1340(sp)
  80380c:	0800dc40 	call	800dc4 <__sinit>
  803810:	d9c15117 	ldw	r7,1348(sp)
  803814:	003def06 	br	802fd4 <___vfprintf_internal_r+0x5c>
  803818:	d9014f17 	ldw	r4,1340(sp)
  80381c:	b00b883a 	mov	r5,r22
  803820:	d9c15115 	stw	r7,1348(sp)
  803824:	08066600 	call	806660 <__swsetup_r>
  803828:	d9c15117 	ldw	r7,1348(sp)
  80382c:	103dee26 	beq	r2,zero,802fe8 <___vfprintf_internal_r+0x70>
  803830:	003f8c06 	br	803664 <___vfprintf_internal_r+0x6ec>
  803834:	d9014217 	ldw	r4,1288(sp)
  803838:	d9414317 	ldw	r5,1292(sp)
  80383c:	000d883a 	mov	r6,zero
  803840:	000f883a 	mov	r7,zero
  803844:	080f6380 	call	80f638 <__eqdf2>
  803848:	1000f21e 	bne	r2,zero,803c14 <___vfprintf_internal_r+0xc9c>
  80384c:	00802074 	movhi	r2,129
  803850:	10921304 	addi	r2,r2,18508
  803854:	94800044 	addi	r18,r18,1
  803858:	8c400044 	addi	r17,r17,1
  80385c:	a8800015 	stw	r2,0(r21)
  803860:	00c00044 	movi	r3,1
  803864:	008001c4 	movi	r2,7
  803868:	a8c00115 	stw	r3,4(r21)
  80386c:	dc800e15 	stw	r18,56(sp)
  803870:	dc400d15 	stw	r17,52(sp)
  803874:	14430016 	blt	r2,r17,804478 <___vfprintf_internal_r+0x1500>
  803878:	a8c00204 	addi	r3,r21,8
  80387c:	d8800517 	ldw	r2,20(sp)
  803880:	d9014717 	ldw	r4,1308(sp)
  803884:	11015c0e 	bge	r2,r4,803df8 <___vfprintf_internal_r+0xe80>
  803888:	dc400d17 	ldw	r17,52(sp)
  80388c:	d9814917 	ldw	r6,1316(sp)
  803890:	00800044 	movi	r2,1
  803894:	94800044 	addi	r18,r18,1
  803898:	8c400044 	addi	r17,r17,1
  80389c:	18800115 	stw	r2,4(r3)
  8038a0:	008001c4 	movi	r2,7
  8038a4:	19800015 	stw	r6,0(r3)
  8038a8:	dc800e15 	stw	r18,56(sp)
  8038ac:	dc400d15 	stw	r17,52(sp)
  8038b0:	14431616 	blt	r2,r17,80450c <___vfprintf_internal_r+0x1594>
  8038b4:	18c00204 	addi	r3,r3,8
  8038b8:	d8814717 	ldw	r2,1308(sp)
  8038bc:	143fffc4 	addi	r16,r2,-1
  8038c0:	043f2b0e 	bge	zero,r16,803570 <___vfprintf_internal_r+0x5f8>
  8038c4:	00800404 	movi	r2,16
  8038c8:	1402a80e 	bge	r2,r16,80436c <___vfprintf_internal_r+0x13f4>
  8038cc:	dc400d17 	ldw	r17,52(sp)
  8038d0:	1027883a 	mov	r19,r2
  8038d4:	07002074 	movhi	fp,129
  8038d8:	e7121384 	addi	fp,fp,18510
  8038dc:	050001c4 	movi	r20,7
  8038e0:	00000306 	br	8038f0 <___vfprintf_internal_r+0x978>
  8038e4:	18c00204 	addi	r3,r3,8
  8038e8:	843ffc04 	addi	r16,r16,-16
  8038ec:	9c02a20e 	bge	r19,r16,804378 <___vfprintf_internal_r+0x1400>
  8038f0:	94800404 	addi	r18,r18,16
  8038f4:	8c400044 	addi	r17,r17,1
  8038f8:	1f000015 	stw	fp,0(r3)
  8038fc:	1cc00115 	stw	r19,4(r3)
  803900:	dc800e15 	stw	r18,56(sp)
  803904:	dc400d15 	stw	r17,52(sp)
  803908:	a47ff60e 	bge	r20,r17,8038e4 <___vfprintf_internal_r+0x96c>
  80390c:	d9014f17 	ldw	r4,1340(sp)
  803910:	b00b883a 	mov	r5,r22
  803914:	d9800c04 	addi	r6,sp,48
  803918:	0802f200 	call	802f20 <__sprint_r>
  80391c:	103f4e1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803920:	dc800e17 	ldw	r18,56(sp)
  803924:	dc400d17 	ldw	r17,52(sp)
  803928:	d8c01904 	addi	r3,sp,100
  80392c:	003fee06 	br	8038e8 <___vfprintf_internal_r+0x970>
  803930:	d8802c0b 	ldhu	r2,176(sp)
  803934:	00ffffc4 	movi	r3,-1
  803938:	d8c14b15 	stw	r3,1324(sp)
  80393c:	1080100c 	andi	r2,r2,64
  803940:	103dcc1e 	bne	r2,zero,803074 <___vfprintf_internal_r+0xfc>
  803944:	003dce06 	br	803080 <___vfprintf_internal_r+0x108>
  803948:	d9014f17 	ldw	r4,1340(sp)
  80394c:	b00b883a 	mov	r5,r22
  803950:	d9800c04 	addi	r6,sp,48
  803954:	0802f200 	call	802f20 <__sprint_r>
  803958:	103f3f1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  80395c:	dc800e17 	ldw	r18,56(sp)
  803960:	003f2e06 	br	80361c <___vfprintf_internal_r+0x6a4>
  803964:	d9414c17 	ldw	r5,1328(sp)
  803968:	29400414 	ori	r5,r5,16
  80396c:	d9414c15 	stw	r5,1328(sp)
  803970:	d9814c17 	ldw	r6,1328(sp)
  803974:	3080080c 	andi	r2,r6,32
  803978:	10014f1e 	bne	r2,zero,803eb8 <___vfprintf_internal_r+0xf40>
  80397c:	d8c14c17 	ldw	r3,1328(sp)
  803980:	1880040c 	andi	r2,r3,16
  803984:	1002f01e 	bne	r2,zero,804548 <___vfprintf_internal_r+0x15d0>
  803988:	d9014c17 	ldw	r4,1328(sp)
  80398c:	2080100c 	andi	r2,r4,64
  803990:	1002ed26 	beq	r2,zero,804548 <___vfprintf_internal_r+0x15d0>
  803994:	3880000f 	ldh	r2,0(r7)
  803998:	39c00104 	addi	r7,r7,4
  80399c:	d9c14015 	stw	r7,1280(sp)
  8039a0:	1023d7fa 	srai	r17,r2,31
  8039a4:	1021883a 	mov	r16,r2
  8039a8:	88037816 	blt	r17,zero,80478c <___vfprintf_internal_r+0x1814>
  8039ac:	01000044 	movi	r4,1
  8039b0:	98000416 	blt	r19,zero,8039c4 <___vfprintf_internal_r+0xa4c>
  8039b4:	d8c14c17 	ldw	r3,1328(sp)
  8039b8:	00bfdfc4 	movi	r2,-129
  8039bc:	1886703a 	and	r3,r3,r2
  8039c0:	d8c14c15 	stw	r3,1328(sp)
  8039c4:	8444b03a 	or	r2,r16,r17
  8039c8:	10022c1e 	bne	r2,zero,80427c <___vfprintf_internal_r+0x1304>
  8039cc:	98022b1e 	bne	r19,zero,80427c <___vfprintf_internal_r+0x1304>
  8039d0:	20803fcc 	andi	r2,r4,255
  8039d4:	1002a126 	beq	r2,zero,80445c <___vfprintf_internal_r+0x14e4>
  8039d8:	d8c01904 	addi	r3,sp,100
  8039dc:	dd000f04 	addi	r20,sp,60
  8039e0:	d8c14115 	stw	r3,1284(sp)
  8039e4:	d8c14117 	ldw	r3,1284(sp)
  8039e8:	dcc14515 	stw	r19,1300(sp)
  8039ec:	a0c5c83a 	sub	r2,r20,r3
  8039f0:	11c00a04 	addi	r7,r2,40
  8039f4:	99c0010e 	bge	r19,r7,8039fc <___vfprintf_internal_r+0xa84>
  8039f8:	d9c14515 	stw	r7,1300(sp)
  8039fc:	dcc14615 	stw	r19,1304(sp)
  803a00:	d8800407 	ldb	r2,16(sp)
  803a04:	103e4c26 	beq	r2,zero,803338 <___vfprintf_internal_r+0x3c0>
  803a08:	d8814517 	ldw	r2,1300(sp)
  803a0c:	10800044 	addi	r2,r2,1
  803a10:	d8814515 	stw	r2,1300(sp)
  803a14:	003e4806 	br	803338 <___vfprintf_internal_r+0x3c0>
  803a18:	d9814c17 	ldw	r6,1328(sp)
  803a1c:	31800414 	ori	r6,r6,16
  803a20:	d9814c15 	stw	r6,1328(sp)
  803a24:	d8c14c17 	ldw	r3,1328(sp)
  803a28:	1880080c 	andi	r2,r3,32
  803a2c:	1001271e 	bne	r2,zero,803ecc <___vfprintf_internal_r+0xf54>
  803a30:	d9414c17 	ldw	r5,1328(sp)
  803a34:	2880040c 	andi	r2,r5,16
  803a38:	1002bc1e 	bne	r2,zero,80452c <___vfprintf_internal_r+0x15b4>
  803a3c:	d9814c17 	ldw	r6,1328(sp)
  803a40:	3080100c 	andi	r2,r6,64
  803a44:	1002b926 	beq	r2,zero,80452c <___vfprintf_internal_r+0x15b4>
  803a48:	3c00000b 	ldhu	r16,0(r7)
  803a4c:	0009883a 	mov	r4,zero
  803a50:	39c00104 	addi	r7,r7,4
  803a54:	0023883a 	mov	r17,zero
  803a58:	d9c14015 	stw	r7,1280(sp)
  803a5c:	d8000405 	stb	zero,16(sp)
  803a60:	003fd306 	br	8039b0 <___vfprintf_internal_r+0xa38>
  803a64:	d9014c17 	ldw	r4,1328(sp)
  803a68:	21000414 	ori	r4,r4,16
  803a6c:	d9014c15 	stw	r4,1328(sp)
  803a70:	d9414c17 	ldw	r5,1328(sp)
  803a74:	2880080c 	andi	r2,r5,32
  803a78:	1001081e 	bne	r2,zero,803e9c <___vfprintf_internal_r+0xf24>
  803a7c:	d8c14c17 	ldw	r3,1328(sp)
  803a80:	1880040c 	andi	r2,r3,16
  803a84:	1002b61e 	bne	r2,zero,804560 <___vfprintf_internal_r+0x15e8>
  803a88:	d9014c17 	ldw	r4,1328(sp)
  803a8c:	2080100c 	andi	r2,r4,64
  803a90:	1002b326 	beq	r2,zero,804560 <___vfprintf_internal_r+0x15e8>
  803a94:	3c00000b 	ldhu	r16,0(r7)
  803a98:	01000044 	movi	r4,1
  803a9c:	39c00104 	addi	r7,r7,4
  803aa0:	0023883a 	mov	r17,zero
  803aa4:	d9c14015 	stw	r7,1280(sp)
  803aa8:	d8000405 	stb	zero,16(sp)
  803aac:	003fc006 	br	8039b0 <___vfprintf_internal_r+0xa38>
  803ab0:	d9014f17 	ldw	r4,1340(sp)
  803ab4:	b00b883a 	mov	r5,r22
  803ab8:	d9800c04 	addi	r6,sp,48
  803abc:	0802f200 	call	802f20 <__sprint_r>
  803ac0:	103ee51e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803ac4:	dc800e17 	ldw	r18,56(sp)
  803ac8:	d8c01904 	addi	r3,sp,100
  803acc:	d9814c17 	ldw	r6,1328(sp)
  803ad0:	3080004c 	andi	r2,r6,1
  803ad4:	1005003a 	cmpeq	r2,r2,zero
  803ad8:	103ea51e 	bne	r2,zero,803570 <___vfprintf_internal_r+0x5f8>
  803adc:	00800044 	movi	r2,1
  803ae0:	dc400d17 	ldw	r17,52(sp)
  803ae4:	18800115 	stw	r2,4(r3)
  803ae8:	d8814917 	ldw	r2,1316(sp)
  803aec:	94800044 	addi	r18,r18,1
  803af0:	8c400044 	addi	r17,r17,1
  803af4:	18800015 	stw	r2,0(r3)
  803af8:	008001c4 	movi	r2,7
  803afc:	dc800e15 	stw	r18,56(sp)
  803b00:	dc400d15 	stw	r17,52(sp)
  803b04:	1442240e 	bge	r2,r17,804398 <___vfprintf_internal_r+0x1420>
  803b08:	d9014f17 	ldw	r4,1340(sp)
  803b0c:	b00b883a 	mov	r5,r22
  803b10:	d9800c04 	addi	r6,sp,48
  803b14:	0802f200 	call	802f20 <__sprint_r>
  803b18:	103ecf1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803b1c:	dc800e17 	ldw	r18,56(sp)
  803b20:	d8c01904 	addi	r3,sp,100
  803b24:	003e9206 	br	803570 <___vfprintf_internal_r+0x5f8>
  803b28:	d9014f17 	ldw	r4,1340(sp)
  803b2c:	b00b883a 	mov	r5,r22
  803b30:	d9800c04 	addi	r6,sp,48
  803b34:	0802f200 	call	802f20 <__sprint_r>
  803b38:	103ec026 	beq	r2,zero,80363c <___vfprintf_internal_r+0x6c4>
  803b3c:	003ec606 	br	803658 <___vfprintf_internal_r+0x6e0>
  803b40:	d9014f17 	ldw	r4,1340(sp)
  803b44:	b00b883a 	mov	r5,r22
  803b48:	d9800c04 	addi	r6,sp,48
  803b4c:	d9c15115 	stw	r7,1348(sp)
  803b50:	0802f200 	call	802f20 <__sprint_r>
  803b54:	d9c15117 	ldw	r7,1348(sp)
  803b58:	103ebf1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803b5c:	dc800e17 	ldw	r18,56(sp)
  803b60:	dc400d17 	ldw	r17,52(sp)
  803b64:	dd401904 	addi	r21,sp,100
  803b68:	003e7406 	br	80353c <___vfprintf_internal_r+0x5c4>
  803b6c:	d9014f17 	ldw	r4,1340(sp)
  803b70:	b00b883a 	mov	r5,r22
  803b74:	d9800c04 	addi	r6,sp,48
  803b78:	d9c15115 	stw	r7,1348(sp)
  803b7c:	0802f200 	call	802f20 <__sprint_r>
  803b80:	d9c15117 	ldw	r7,1348(sp)
  803b84:	103eb41e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803b88:	dd401904 	addi	r21,sp,100
  803b8c:	003d6d06 	br	803144 <___vfprintf_internal_r+0x1cc>
  803b90:	d9014f17 	ldw	r4,1340(sp)
  803b94:	b00b883a 	mov	r5,r22
  803b98:	d9800c04 	addi	r6,sp,48
  803b9c:	d9c15115 	stw	r7,1348(sp)
  803ba0:	0802f200 	call	802f20 <__sprint_r>
  803ba4:	d9c15117 	ldw	r7,1348(sp)
  803ba8:	103eab1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803bac:	dc800e17 	ldw	r18,56(sp)
  803bb0:	dc400d17 	ldw	r17,52(sp)
  803bb4:	dd401904 	addi	r21,sp,100
  803bb8:	003e3406 	br	80348c <___vfprintf_internal_r+0x514>
  803bbc:	d9014f17 	ldw	r4,1340(sp)
  803bc0:	b00b883a 	mov	r5,r22
  803bc4:	d9800c04 	addi	r6,sp,48
  803bc8:	d9c15115 	stw	r7,1348(sp)
  803bcc:	0802f200 	call	802f20 <__sprint_r>
  803bd0:	d9c15117 	ldw	r7,1348(sp)
  803bd4:	103ea01e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803bd8:	dc800e17 	ldw	r18,56(sp)
  803bdc:	dc400d17 	ldw	r17,52(sp)
  803be0:	dd401904 	addi	r21,sp,100
  803be4:	003e1c06 	br	803458 <___vfprintf_internal_r+0x4e0>
  803be8:	d9014f17 	ldw	r4,1340(sp)
  803bec:	b00b883a 	mov	r5,r22
  803bf0:	d9800c04 	addi	r6,sp,48
  803bf4:	d9c15115 	stw	r7,1348(sp)
  803bf8:	0802f200 	call	802f20 <__sprint_r>
  803bfc:	d9c15117 	ldw	r7,1348(sp)
  803c00:	103e951e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803c04:	dc800e17 	ldw	r18,56(sp)
  803c08:	dc400d17 	ldw	r17,52(sp)
  803c0c:	dd401904 	addi	r21,sp,100
  803c10:	003e0406 	br	803424 <___vfprintf_internal_r+0x4ac>
  803c14:	d9000517 	ldw	r4,20(sp)
  803c18:	0102580e 	bge	zero,r4,80457c <___vfprintf_internal_r+0x1604>
  803c1c:	d9814717 	ldw	r6,1308(sp)
  803c20:	21807a16 	blt	r4,r6,803e0c <___vfprintf_internal_r+0xe94>
  803c24:	d8814117 	ldw	r2,1284(sp)
  803c28:	91a5883a 	add	r18,r18,r6
  803c2c:	8c400044 	addi	r17,r17,1
  803c30:	a8800015 	stw	r2,0(r21)
  803c34:	008001c4 	movi	r2,7
  803c38:	a9800115 	stw	r6,4(r21)
  803c3c:	dc800e15 	stw	r18,56(sp)
  803c40:	dc400d15 	stw	r17,52(sp)
  803c44:	1442fc16 	blt	r2,r17,804838 <___vfprintf_internal_r+0x18c0>
  803c48:	a8c00204 	addi	r3,r21,8
  803c4c:	d9414717 	ldw	r5,1308(sp)
  803c50:	2161c83a 	sub	r16,r4,r5
  803c54:	043f9d0e 	bge	zero,r16,803acc <___vfprintf_internal_r+0xb54>
  803c58:	00800404 	movi	r2,16
  803c5c:	1402190e 	bge	r2,r16,8044c4 <___vfprintf_internal_r+0x154c>
  803c60:	dc400d17 	ldw	r17,52(sp)
  803c64:	1027883a 	mov	r19,r2
  803c68:	07002074 	movhi	fp,129
  803c6c:	e7121384 	addi	fp,fp,18510
  803c70:	050001c4 	movi	r20,7
  803c74:	00000306 	br	803c84 <___vfprintf_internal_r+0xd0c>
  803c78:	18c00204 	addi	r3,r3,8
  803c7c:	843ffc04 	addi	r16,r16,-16
  803c80:	9c02130e 	bge	r19,r16,8044d0 <___vfprintf_internal_r+0x1558>
  803c84:	94800404 	addi	r18,r18,16
  803c88:	8c400044 	addi	r17,r17,1
  803c8c:	1f000015 	stw	fp,0(r3)
  803c90:	1cc00115 	stw	r19,4(r3)
  803c94:	dc800e15 	stw	r18,56(sp)
  803c98:	dc400d15 	stw	r17,52(sp)
  803c9c:	a47ff60e 	bge	r20,r17,803c78 <___vfprintf_internal_r+0xd00>
  803ca0:	d9014f17 	ldw	r4,1340(sp)
  803ca4:	b00b883a 	mov	r5,r22
  803ca8:	d9800c04 	addi	r6,sp,48
  803cac:	0802f200 	call	802f20 <__sprint_r>
  803cb0:	103e691e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803cb4:	dc800e17 	ldw	r18,56(sp)
  803cb8:	dc400d17 	ldw	r17,52(sp)
  803cbc:	d8c01904 	addi	r3,sp,100
  803cc0:	003fee06 	br	803c7c <___vfprintf_internal_r+0xd04>
  803cc4:	d8814717 	ldw	r2,1308(sp)
  803cc8:	143fffc4 	addi	r16,r2,-1
  803ccc:	043e970e 	bge	zero,r16,80372c <___vfprintf_internal_r+0x7b4>
  803cd0:	00800404 	movi	r2,16
  803cd4:	1400180e 	bge	r2,r16,803d38 <___vfprintf_internal_r+0xdc0>
  803cd8:	1029883a 	mov	r20,r2
  803cdc:	07002074 	movhi	fp,129
  803ce0:	e7121384 	addi	fp,fp,18510
  803ce4:	054001c4 	movi	r21,7
  803ce8:	00000306 	br	803cf8 <___vfprintf_internal_r+0xd80>
  803cec:	9cc00204 	addi	r19,r19,8
  803cf0:	843ffc04 	addi	r16,r16,-16
  803cf4:	a400120e 	bge	r20,r16,803d40 <___vfprintf_internal_r+0xdc8>
  803cf8:	94800404 	addi	r18,r18,16
  803cfc:	8c400044 	addi	r17,r17,1
  803d00:	9f000015 	stw	fp,0(r19)
  803d04:	9d000115 	stw	r20,4(r19)
  803d08:	dc800e15 	stw	r18,56(sp)
  803d0c:	dc400d15 	stw	r17,52(sp)
  803d10:	ac7ff60e 	bge	r21,r17,803cec <___vfprintf_internal_r+0xd74>
  803d14:	d9014f17 	ldw	r4,1340(sp)
  803d18:	b00b883a 	mov	r5,r22
  803d1c:	d9800c04 	addi	r6,sp,48
  803d20:	0802f200 	call	802f20 <__sprint_r>
  803d24:	103e4c1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803d28:	dc800e17 	ldw	r18,56(sp)
  803d2c:	dc400d17 	ldw	r17,52(sp)
  803d30:	dcc01904 	addi	r19,sp,100
  803d34:	003fee06 	br	803cf0 <___vfprintf_internal_r+0xd78>
  803d38:	07002074 	movhi	fp,129
  803d3c:	e7121384 	addi	fp,fp,18510
  803d40:	9425883a 	add	r18,r18,r16
  803d44:	8c400044 	addi	r17,r17,1
  803d48:	008001c4 	movi	r2,7
  803d4c:	9f000015 	stw	fp,0(r19)
  803d50:	9c000115 	stw	r16,4(r19)
  803d54:	dc800e15 	stw	r18,56(sp)
  803d58:	dc400d15 	stw	r17,52(sp)
  803d5c:	147e720e 	bge	r2,r17,803728 <___vfprintf_internal_r+0x7b0>
  803d60:	d9014f17 	ldw	r4,1340(sp)
  803d64:	b00b883a 	mov	r5,r22
  803d68:	d9800c04 	addi	r6,sp,48
  803d6c:	0802f200 	call	802f20 <__sprint_r>
  803d70:	103e391e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803d74:	dc800e17 	ldw	r18,56(sp)
  803d78:	dc400d17 	ldw	r17,52(sp)
  803d7c:	dcc01904 	addi	r19,sp,100
  803d80:	003e6a06 	br	80372c <___vfprintf_internal_r+0x7b4>
  803d84:	d9014f17 	ldw	r4,1340(sp)
  803d88:	b00b883a 	mov	r5,r22
  803d8c:	d9800c04 	addi	r6,sp,48
  803d90:	d9c15115 	stw	r7,1348(sp)
  803d94:	0802f200 	call	802f20 <__sprint_r>
  803d98:	d9c15117 	ldw	r7,1348(sp)
  803d9c:	103e2e1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803da0:	dc800e17 	ldw	r18,56(sp)
  803da4:	dc400d17 	ldw	r17,52(sp)
  803da8:	dd401904 	addi	r21,sp,100
  803dac:	003dba06 	br	803498 <___vfprintf_internal_r+0x520>
  803db0:	d9014f17 	ldw	r4,1340(sp)
  803db4:	b00b883a 	mov	r5,r22
  803db8:	d9800c04 	addi	r6,sp,48
  803dbc:	0802f200 	call	802f20 <__sprint_r>
  803dc0:	103e251e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803dc4:	dc800e17 	ldw	r18,56(sp)
  803dc8:	dc400d17 	ldw	r17,52(sp)
  803dcc:	dcc01904 	addi	r19,sp,100
  803dd0:	003e4206 	br	8036dc <___vfprintf_internal_r+0x764>
  803dd4:	d9014f17 	ldw	r4,1340(sp)
  803dd8:	b00b883a 	mov	r5,r22
  803ddc:	d9800c04 	addi	r6,sp,48
  803de0:	0802f200 	call	802f20 <__sprint_r>
  803de4:	103e1c1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  803de8:	dc800e17 	ldw	r18,56(sp)
  803dec:	dc400d17 	ldw	r17,52(sp)
  803df0:	d8c01904 	addi	r3,sp,100
  803df4:	003e2e06 	br	8036b0 <___vfprintf_internal_r+0x738>
  803df8:	d9414c17 	ldw	r5,1328(sp)
  803dfc:	2880004c 	andi	r2,r5,1
  803e00:	1005003a 	cmpeq	r2,r2,zero
  803e04:	103dda1e 	bne	r2,zero,803570 <___vfprintf_internal_r+0x5f8>
  803e08:	003e9f06 	br	803888 <___vfprintf_internal_r+0x910>
  803e0c:	d8c14117 	ldw	r3,1284(sp)
  803e10:	9125883a 	add	r18,r18,r4
  803e14:	8c400044 	addi	r17,r17,1
  803e18:	008001c4 	movi	r2,7
  803e1c:	a8c00015 	stw	r3,0(r21)
  803e20:	a9000115 	stw	r4,4(r21)
  803e24:	dc800e15 	stw	r18,56(sp)
  803e28:	dc400d15 	stw	r17,52(sp)
  803e2c:	14426c16 	blt	r2,r17,8047e0 <___vfprintf_internal_r+0x1868>
  803e30:	a8c00204 	addi	r3,r21,8
  803e34:	d9414917 	ldw	r5,1316(sp)
  803e38:	00800044 	movi	r2,1
  803e3c:	94800044 	addi	r18,r18,1
  803e40:	8c400044 	addi	r17,r17,1
  803e44:	18800115 	stw	r2,4(r3)
  803e48:	008001c4 	movi	r2,7
  803e4c:	19400015 	stw	r5,0(r3)
  803e50:	dc800e15 	stw	r18,56(sp)
  803e54:	dc400d15 	stw	r17,52(sp)
  803e58:	2021883a 	mov	r16,r4
  803e5c:	14425616 	blt	r2,r17,8047b8 <___vfprintf_internal_r+0x1840>
  803e60:	19400204 	addi	r5,r3,8
  803e64:	d9814717 	ldw	r6,1308(sp)
  803e68:	8c400044 	addi	r17,r17,1
  803e6c:	dc400d15 	stw	r17,52(sp)
  803e70:	3107c83a 	sub	r3,r6,r4
  803e74:	d9014117 	ldw	r4,1284(sp)
  803e78:	90e5883a 	add	r18,r18,r3
  803e7c:	28c00115 	stw	r3,4(r5)
  803e80:	8105883a 	add	r2,r16,r4
  803e84:	28800015 	stw	r2,0(r5)
  803e88:	008001c4 	movi	r2,7
  803e8c:	dc800e15 	stw	r18,56(sp)
  803e90:	147f1d16 	blt	r2,r17,803b08 <___vfprintf_internal_r+0xb90>
  803e94:	28c00204 	addi	r3,r5,8
  803e98:	003db506 	br	803570 <___vfprintf_internal_r+0x5f8>
  803e9c:	3c000017 	ldw	r16,0(r7)
  803ea0:	3c400117 	ldw	r17,4(r7)
  803ea4:	39800204 	addi	r6,r7,8
  803ea8:	01000044 	movi	r4,1
  803eac:	d9814015 	stw	r6,1280(sp)
  803eb0:	d8000405 	stb	zero,16(sp)
  803eb4:	003ebe06 	br	8039b0 <___vfprintf_internal_r+0xa38>
  803eb8:	3c000017 	ldw	r16,0(r7)
  803ebc:	3c400117 	ldw	r17,4(r7)
  803ec0:	38800204 	addi	r2,r7,8
  803ec4:	d8814015 	stw	r2,1280(sp)
  803ec8:	003eb706 	br	8039a8 <___vfprintf_internal_r+0xa30>
  803ecc:	3c000017 	ldw	r16,0(r7)
  803ed0:	3c400117 	ldw	r17,4(r7)
  803ed4:	39000204 	addi	r4,r7,8
  803ed8:	d9014015 	stw	r4,1280(sp)
  803edc:	0009883a 	mov	r4,zero
  803ee0:	d8000405 	stb	zero,16(sp)
  803ee4:	003eb206 	br	8039b0 <___vfprintf_internal_r+0xa38>
  803ee8:	38c00017 	ldw	r3,0(r7)
  803eec:	39c00104 	addi	r7,r7,4
  803ef0:	d8c14a15 	stw	r3,1320(sp)
  803ef4:	1800d70e 	bge	r3,zero,804254 <___vfprintf_internal_r+0x12dc>
  803ef8:	00c7c83a 	sub	r3,zero,r3
  803efc:	d8c14a15 	stw	r3,1320(sp)
  803f00:	d9014c17 	ldw	r4,1328(sp)
  803f04:	b8c00007 	ldb	r3,0(r23)
  803f08:	21000114 	ori	r4,r4,4
  803f0c:	d9014c15 	stw	r4,1328(sp)
  803f10:	003c9806 	br	803174 <___vfprintf_internal_r+0x1fc>
  803f14:	d9814c17 	ldw	r6,1328(sp)
  803f18:	3080080c 	andi	r2,r6,32
  803f1c:	1001f626 	beq	r2,zero,8046f8 <___vfprintf_internal_r+0x1780>
  803f20:	d9014b17 	ldw	r4,1324(sp)
  803f24:	38800017 	ldw	r2,0(r7)
  803f28:	39c00104 	addi	r7,r7,4
  803f2c:	d9c14015 	stw	r7,1280(sp)
  803f30:	2007d7fa 	srai	r3,r4,31
  803f34:	d9c14017 	ldw	r7,1280(sp)
  803f38:	11000015 	stw	r4,0(r2)
  803f3c:	10c00115 	stw	r3,4(r2)
  803f40:	003c6906 	br	8030e8 <___vfprintf_internal_r+0x170>
  803f44:	b8c00007 	ldb	r3,0(r23)
  803f48:	00801b04 	movi	r2,108
  803f4c:	18825526 	beq	r3,r2,8048a4 <___vfprintf_internal_r+0x192c>
  803f50:	d9414c17 	ldw	r5,1328(sp)
  803f54:	29400414 	ori	r5,r5,16
  803f58:	d9414c15 	stw	r5,1328(sp)
  803f5c:	003c8506 	br	803174 <___vfprintf_internal_r+0x1fc>
  803f60:	d9814c17 	ldw	r6,1328(sp)
  803f64:	b8c00007 	ldb	r3,0(r23)
  803f68:	31800814 	ori	r6,r6,32
  803f6c:	d9814c15 	stw	r6,1328(sp)
  803f70:	003c8006 	br	803174 <___vfprintf_internal_r+0x1fc>
  803f74:	d8814c17 	ldw	r2,1328(sp)
  803f78:	3c000017 	ldw	r16,0(r7)
  803f7c:	00c01e04 	movi	r3,120
  803f80:	10800094 	ori	r2,r2,2
  803f84:	d8814c15 	stw	r2,1328(sp)
  803f88:	39c00104 	addi	r7,r7,4
  803f8c:	01402074 	movhi	r5,129
  803f90:	2951fc04 	addi	r5,r5,18416
  803f94:	00800c04 	movi	r2,48
  803f98:	0023883a 	mov	r17,zero
  803f9c:	01000084 	movi	r4,2
  803fa0:	d9c14015 	stw	r7,1280(sp)
  803fa4:	d8c14d15 	stw	r3,1332(sp)
  803fa8:	d9414415 	stw	r5,1296(sp)
  803fac:	d8800445 	stb	r2,17(sp)
  803fb0:	d8c00485 	stb	r3,18(sp)
  803fb4:	d8000405 	stb	zero,16(sp)
  803fb8:	003e7d06 	br	8039b0 <___vfprintf_internal_r+0xa38>
  803fbc:	d8814c17 	ldw	r2,1328(sp)
  803fc0:	b8c00007 	ldb	r3,0(r23)
  803fc4:	10801014 	ori	r2,r2,64
  803fc8:	d8814c15 	stw	r2,1328(sp)
  803fcc:	003c6906 	br	803174 <___vfprintf_internal_r+0x1fc>
  803fd0:	d9414c17 	ldw	r5,1328(sp)
  803fd4:	2880020c 	andi	r2,r5,8
  803fd8:	1001e526 	beq	r2,zero,804770 <___vfprintf_internal_r+0x17f8>
  803fdc:	39800017 	ldw	r6,0(r7)
  803fe0:	38800204 	addi	r2,r7,8
  803fe4:	d8814015 	stw	r2,1280(sp)
  803fe8:	d9814215 	stw	r6,1288(sp)
  803fec:	39c00117 	ldw	r7,4(r7)
  803ff0:	d9c14315 	stw	r7,1292(sp)
  803ff4:	d9014217 	ldw	r4,1288(sp)
  803ff8:	d9414317 	ldw	r5,1292(sp)
  803ffc:	080a5ac0 	call	80a5ac <__isinfd>
  804000:	10021d26 	beq	r2,zero,804878 <___vfprintf_internal_r+0x1900>
  804004:	d9014217 	ldw	r4,1288(sp)
  804008:	d9414317 	ldw	r5,1292(sp)
  80400c:	000d883a 	mov	r6,zero
  804010:	000f883a 	mov	r7,zero
  804014:	080f8580 	call	80f858 <__ltdf2>
  804018:	1002d016 	blt	r2,zero,804b5c <___vfprintf_internal_r+0x1be4>
  80401c:	d9414d17 	ldw	r5,1332(sp)
  804020:	008011c4 	movi	r2,71
  804024:	11421016 	blt	r2,r5,804868 <___vfprintf_internal_r+0x18f0>
  804028:	01802074 	movhi	r6,129
  80402c:	31920104 	addi	r6,r6,18436
  804030:	d9814115 	stw	r6,1284(sp)
  804034:	d9014c17 	ldw	r4,1328(sp)
  804038:	00c000c4 	movi	r3,3
  80403c:	00bfdfc4 	movi	r2,-129
  804040:	2088703a 	and	r4,r4,r2
  804044:	180f883a 	mov	r7,r3
  804048:	d8c14515 	stw	r3,1300(sp)
  80404c:	d9014c15 	stw	r4,1328(sp)
  804050:	d8014615 	stw	zero,1304(sp)
  804054:	003e6a06 	br	803a00 <___vfprintf_internal_r+0xa88>
  804058:	38800017 	ldw	r2,0(r7)
  80405c:	00c00044 	movi	r3,1
  804060:	39c00104 	addi	r7,r7,4
  804064:	d9c14015 	stw	r7,1280(sp)
  804068:	d9000f04 	addi	r4,sp,60
  80406c:	180f883a 	mov	r7,r3
  804070:	d8c14515 	stw	r3,1300(sp)
  804074:	d9014115 	stw	r4,1284(sp)
  804078:	d8800f05 	stb	r2,60(sp)
  80407c:	d8000405 	stb	zero,16(sp)
  804080:	003cac06 	br	803334 <___vfprintf_internal_r+0x3bc>
  804084:	01402074 	movhi	r5,129
  804088:	29520704 	addi	r5,r5,18460
  80408c:	d9414415 	stw	r5,1296(sp)
  804090:	d9814c17 	ldw	r6,1328(sp)
  804094:	3080080c 	andi	r2,r6,32
  804098:	1000ff26 	beq	r2,zero,804498 <___vfprintf_internal_r+0x1520>
  80409c:	3c000017 	ldw	r16,0(r7)
  8040a0:	3c400117 	ldw	r17,4(r7)
  8040a4:	38800204 	addi	r2,r7,8
  8040a8:	d8814015 	stw	r2,1280(sp)
  8040ac:	d9414c17 	ldw	r5,1328(sp)
  8040b0:	2880004c 	andi	r2,r5,1
  8040b4:	1005003a 	cmpeq	r2,r2,zero
  8040b8:	1000b91e 	bne	r2,zero,8043a0 <___vfprintf_internal_r+0x1428>
  8040bc:	8444b03a 	or	r2,r16,r17
  8040c0:	1000b726 	beq	r2,zero,8043a0 <___vfprintf_internal_r+0x1428>
  8040c4:	d9814d17 	ldw	r6,1332(sp)
  8040c8:	29400094 	ori	r5,r5,2
  8040cc:	00800c04 	movi	r2,48
  8040d0:	01000084 	movi	r4,2
  8040d4:	d9414c15 	stw	r5,1328(sp)
  8040d8:	d8800445 	stb	r2,17(sp)
  8040dc:	d9800485 	stb	r6,18(sp)
  8040e0:	d8000405 	stb	zero,16(sp)
  8040e4:	003e3206 	br	8039b0 <___vfprintf_internal_r+0xa38>
  8040e8:	01802074 	movhi	r6,129
  8040ec:	3191fc04 	addi	r6,r6,18416
  8040f0:	d9814415 	stw	r6,1296(sp)
  8040f4:	003fe606 	br	804090 <___vfprintf_internal_r+0x1118>
  8040f8:	00800ac4 	movi	r2,43
  8040fc:	d8800405 	stb	r2,16(sp)
  804100:	b8c00007 	ldb	r3,0(r23)
  804104:	003c1b06 	br	803174 <___vfprintf_internal_r+0x1fc>
  804108:	d8814c17 	ldw	r2,1328(sp)
  80410c:	b8c00007 	ldb	r3,0(r23)
  804110:	10800054 	ori	r2,r2,1
  804114:	d8814c15 	stw	r2,1328(sp)
  804118:	003c1606 	br	803174 <___vfprintf_internal_r+0x1fc>
  80411c:	d8800407 	ldb	r2,16(sp)
  804120:	10004c1e 	bne	r2,zero,804254 <___vfprintf_internal_r+0x12dc>
  804124:	00800804 	movi	r2,32
  804128:	d8800405 	stb	r2,16(sp)
  80412c:	b8c00007 	ldb	r3,0(r23)
  804130:	003c1006 	br	803174 <___vfprintf_internal_r+0x1fc>
  804134:	d9814c17 	ldw	r6,1328(sp)
  804138:	b8c00007 	ldb	r3,0(r23)
  80413c:	31800214 	ori	r6,r6,8
  804140:	d9814c15 	stw	r6,1328(sp)
  804144:	003c0b06 	br	803174 <___vfprintf_internal_r+0x1fc>
  804148:	0009883a 	mov	r4,zero
  80414c:	04000244 	movi	r16,9
  804150:	01400284 	movi	r5,10
  804154:	d9c15115 	stw	r7,1348(sp)
  804158:	080fe8c0 	call	80fe8c <__mulsi3>
  80415c:	b9000007 	ldb	r4,0(r23)
  804160:	d8c14d17 	ldw	r3,1332(sp)
  804164:	bdc00044 	addi	r23,r23,1
  804168:	d9014d15 	stw	r4,1332(sp)
  80416c:	d9414d17 	ldw	r5,1332(sp)
  804170:	1885883a 	add	r2,r3,r2
  804174:	113ff404 	addi	r4,r2,-48
  804178:	28bff404 	addi	r2,r5,-48
  80417c:	d9c15117 	ldw	r7,1348(sp)
  804180:	80bff32e 	bgeu	r16,r2,804150 <___vfprintf_internal_r+0x11d8>
  804184:	d9014a15 	stw	r4,1320(sp)
  804188:	003bfc06 	br	80317c <___vfprintf_internal_r+0x204>
  80418c:	d8814c17 	ldw	r2,1328(sp)
  804190:	b8c00007 	ldb	r3,0(r23)
  804194:	10802014 	ori	r2,r2,128
  804198:	d8814c15 	stw	r2,1328(sp)
  80419c:	003bf506 	br	803174 <___vfprintf_internal_r+0x1fc>
  8041a0:	b8c00007 	ldb	r3,0(r23)
  8041a4:	00800a84 	movi	r2,42
  8041a8:	bdc00044 	addi	r23,r23,1
  8041ac:	18831826 	beq	r3,r2,804e10 <___vfprintf_internal_r+0x1e98>
  8041b0:	d8c14d15 	stw	r3,1332(sp)
  8041b4:	18bff404 	addi	r2,r3,-48
  8041b8:	00c00244 	movi	r3,9
  8041bc:	18827b36 	bltu	r3,r2,804bac <___vfprintf_internal_r+0x1c34>
  8041c0:	1821883a 	mov	r16,r3
  8041c4:	0009883a 	mov	r4,zero
  8041c8:	01400284 	movi	r5,10
  8041cc:	d9c15115 	stw	r7,1348(sp)
  8041d0:	080fe8c0 	call	80fe8c <__mulsi3>
  8041d4:	d9414d17 	ldw	r5,1332(sp)
  8041d8:	b9800007 	ldb	r6,0(r23)
  8041dc:	d9c15117 	ldw	r7,1348(sp)
  8041e0:	1145883a 	add	r2,r2,r5
  8041e4:	113ff404 	addi	r4,r2,-48
  8041e8:	30bff404 	addi	r2,r6,-48
  8041ec:	d9814d15 	stw	r6,1332(sp)
  8041f0:	bdc00044 	addi	r23,r23,1
  8041f4:	80bff42e 	bgeu	r16,r2,8041c8 <___vfprintf_internal_r+0x1250>
  8041f8:	2027883a 	mov	r19,r4
  8041fc:	203bdf0e 	bge	r4,zero,80317c <___vfprintf_internal_r+0x204>
  804200:	04ffffc4 	movi	r19,-1
  804204:	003bdd06 	br	80317c <___vfprintf_internal_r+0x204>
  804208:	d8000405 	stb	zero,16(sp)
  80420c:	39800017 	ldw	r6,0(r7)
  804210:	39c00104 	addi	r7,r7,4
  804214:	d9c14015 	stw	r7,1280(sp)
  804218:	d9814115 	stw	r6,1284(sp)
  80421c:	3001c926 	beq	r6,zero,804944 <___vfprintf_internal_r+0x19cc>
  804220:	98000e16 	blt	r19,zero,80425c <___vfprintf_internal_r+0x12e4>
  804224:	d9014117 	ldw	r4,1284(sp)
  804228:	000b883a 	mov	r5,zero
  80422c:	980d883a 	mov	r6,r19
  804230:	0808a640 	call	808a64 <memchr>
  804234:	10025926 	beq	r2,zero,804b9c <___vfprintf_internal_r+0x1c24>
  804238:	d8c14117 	ldw	r3,1284(sp)
  80423c:	10cfc83a 	sub	r7,r2,r3
  804240:	99c19e16 	blt	r19,r7,8048bc <___vfprintf_internal_r+0x1944>
  804244:	d9c14515 	stw	r7,1300(sp)
  804248:	38000916 	blt	r7,zero,804270 <___vfprintf_internal_r+0x12f8>
  80424c:	d8014615 	stw	zero,1304(sp)
  804250:	003deb06 	br	803a00 <___vfprintf_internal_r+0xa88>
  804254:	b8c00007 	ldb	r3,0(r23)
  804258:	003bc606 	br	803174 <___vfprintf_internal_r+0x1fc>
  80425c:	d9014117 	ldw	r4,1284(sp)
  804260:	0802eac0 	call	802eac <strlen>
  804264:	d8814515 	stw	r2,1300(sp)
  804268:	100f883a 	mov	r7,r2
  80426c:	103ff70e 	bge	r2,zero,80424c <___vfprintf_internal_r+0x12d4>
  804270:	d8014515 	stw	zero,1300(sp)
  804274:	d8014615 	stw	zero,1304(sp)
  804278:	003de106 	br	803a00 <___vfprintf_internal_r+0xa88>
  80427c:	20c03fcc 	andi	r3,r4,255
  804280:	00800044 	movi	r2,1
  804284:	18802d26 	beq	r3,r2,80433c <___vfprintf_internal_r+0x13c4>
  804288:	18800e36 	bltu	r3,r2,8042c4 <___vfprintf_internal_r+0x134c>
  80428c:	00800084 	movi	r2,2
  804290:	1880fa26 	beq	r3,r2,80467c <___vfprintf_internal_r+0x1704>
  804294:	01002074 	movhi	r4,129
  804298:	21120c04 	addi	r4,r4,18480
  80429c:	0802eac0 	call	802eac <strlen>
  8042a0:	100f883a 	mov	r7,r2
  8042a4:	dcc14515 	stw	r19,1300(sp)
  8042a8:	9880010e 	bge	r19,r2,8042b0 <___vfprintf_internal_r+0x1338>
  8042ac:	d8814515 	stw	r2,1300(sp)
  8042b0:	00802074 	movhi	r2,129
  8042b4:	10920c04 	addi	r2,r2,18480
  8042b8:	dcc14615 	stw	r19,1304(sp)
  8042bc:	d8814115 	stw	r2,1284(sp)
  8042c0:	003dcf06 	br	803a00 <___vfprintf_internal_r+0xa88>
  8042c4:	d9401904 	addi	r5,sp,100
  8042c8:	dd000f04 	addi	r20,sp,60
  8042cc:	d9414115 	stw	r5,1284(sp)
  8042d0:	880a977a 	slli	r5,r17,29
  8042d4:	d9814117 	ldw	r6,1284(sp)
  8042d8:	8004d0fa 	srli	r2,r16,3
  8042dc:	8806d0fa 	srli	r3,r17,3
  8042e0:	810001cc 	andi	r4,r16,7
  8042e4:	2884b03a 	or	r2,r5,r2
  8042e8:	31bfffc4 	addi	r6,r6,-1
  8042ec:	21000c04 	addi	r4,r4,48
  8042f0:	d9814115 	stw	r6,1284(sp)
  8042f4:	10cab03a 	or	r5,r2,r3
  8042f8:	31000005 	stb	r4,0(r6)
  8042fc:	1021883a 	mov	r16,r2
  804300:	1823883a 	mov	r17,r3
  804304:	283ff21e 	bne	r5,zero,8042d0 <___vfprintf_internal_r+0x1358>
  804308:	d8c14c17 	ldw	r3,1328(sp)
  80430c:	1880004c 	andi	r2,r3,1
  804310:	1005003a 	cmpeq	r2,r2,zero
  804314:	103db31e 	bne	r2,zero,8039e4 <___vfprintf_internal_r+0xa6c>
  804318:	20803fcc 	andi	r2,r4,255
  80431c:	1080201c 	xori	r2,r2,128
  804320:	10bfe004 	addi	r2,r2,-128
  804324:	00c00c04 	movi	r3,48
  804328:	10fdae26 	beq	r2,r3,8039e4 <___vfprintf_internal_r+0xa6c>
  80432c:	31bfffc4 	addi	r6,r6,-1
  804330:	d9814115 	stw	r6,1284(sp)
  804334:	30c00005 	stb	r3,0(r6)
  804338:	003daa06 	br	8039e4 <___vfprintf_internal_r+0xa6c>
  80433c:	88800068 	cmpgeui	r2,r17,1
  804340:	10002c1e 	bne	r2,zero,8043f4 <___vfprintf_internal_r+0x147c>
  804344:	8800021e 	bne	r17,zero,804350 <___vfprintf_internal_r+0x13d8>
  804348:	00800244 	movi	r2,9
  80434c:	14002936 	bltu	r2,r16,8043f4 <___vfprintf_internal_r+0x147c>
  804350:	d90018c4 	addi	r4,sp,99
  804354:	dd000f04 	addi	r20,sp,60
  804358:	d9014115 	stw	r4,1284(sp)
  80435c:	d9014117 	ldw	r4,1284(sp)
  804360:	80800c04 	addi	r2,r16,48
  804364:	20800005 	stb	r2,0(r4)
  804368:	003d9e06 	br	8039e4 <___vfprintf_internal_r+0xa6c>
  80436c:	dc400d17 	ldw	r17,52(sp)
  804370:	07002074 	movhi	fp,129
  804374:	e7121384 	addi	fp,fp,18510
  804378:	9425883a 	add	r18,r18,r16
  80437c:	8c400044 	addi	r17,r17,1
  804380:	008001c4 	movi	r2,7
  804384:	1f000015 	stw	fp,0(r3)
  804388:	1c000115 	stw	r16,4(r3)
  80438c:	dc800e15 	stw	r18,56(sp)
  804390:	dc400d15 	stw	r17,52(sp)
  804394:	147ddc16 	blt	r2,r17,803b08 <___vfprintf_internal_r+0xb90>
  804398:	18c00204 	addi	r3,r3,8
  80439c:	003c7406 	br	803570 <___vfprintf_internal_r+0x5f8>
  8043a0:	01000084 	movi	r4,2
  8043a4:	d8000405 	stb	zero,16(sp)
  8043a8:	003d8106 	br	8039b0 <___vfprintf_internal_r+0xa38>
  8043ac:	d9814c17 	ldw	r6,1328(sp)
  8043b0:	30c4703a 	and	r2,r6,r3
  8043b4:	1005003a 	cmpeq	r2,r2,zero
  8043b8:	103cb326 	beq	r2,zero,803688 <___vfprintf_internal_r+0x710>
  8043bc:	d9014117 	ldw	r4,1284(sp)
  8043c0:	94800044 	addi	r18,r18,1
  8043c4:	8c400044 	addi	r17,r17,1
  8043c8:	008001c4 	movi	r2,7
  8043cc:	a9000015 	stw	r4,0(r21)
  8043d0:	a8c00115 	stw	r3,4(r21)
  8043d4:	dc800e15 	stw	r18,56(sp)
  8043d8:	dc400d15 	stw	r17,52(sp)
  8043dc:	147e6016 	blt	r2,r17,803d60 <___vfprintf_internal_r+0xde8>
  8043e0:	acc00204 	addi	r19,r21,8
  8043e4:	003cd106 	br	80372c <___vfprintf_internal_r+0x7b4>
  8043e8:	07002074 	movhi	fp,129
  8043ec:	e7121384 	addi	fp,fp,18510
  8043f0:	003c4906 	br	803518 <___vfprintf_internal_r+0x5a0>
  8043f4:	dd000f04 	addi	r20,sp,60
  8043f8:	dc801904 	addi	r18,sp,100
  8043fc:	8009883a 	mov	r4,r16
  804400:	880b883a 	mov	r5,r17
  804404:	01800284 	movi	r6,10
  804408:	000f883a 	mov	r7,zero
  80440c:	080e3500 	call	80e350 <__umoddi3>
  804410:	12000c04 	addi	r8,r2,48
  804414:	94bfffc4 	addi	r18,r18,-1
  804418:	8009883a 	mov	r4,r16
  80441c:	880b883a 	mov	r5,r17
  804420:	01800284 	movi	r6,10
  804424:	000f883a 	mov	r7,zero
  804428:	92000005 	stb	r8,0(r18)
  80442c:	080dce40 	call	80dce4 <__udivdi3>
  804430:	1009883a 	mov	r4,r2
  804434:	1021883a 	mov	r16,r2
  804438:	18800068 	cmpgeui	r2,r3,1
  80443c:	1823883a 	mov	r17,r3
  804440:	103fee1e 	bne	r2,zero,8043fc <___vfprintf_internal_r+0x1484>
  804444:	1800021e 	bne	r3,zero,804450 <___vfprintf_internal_r+0x14d8>
  804448:	00800244 	movi	r2,9
  80444c:	113feb36 	bltu	r2,r4,8043fc <___vfprintf_internal_r+0x1484>
  804450:	94bfffc4 	addi	r18,r18,-1
  804454:	dc814115 	stw	r18,1284(sp)
  804458:	003fc006 	br	80435c <___vfprintf_internal_r+0x13e4>
  80445c:	d9014c17 	ldw	r4,1328(sp)
  804460:	2080004c 	andi	r2,r4,1
  804464:	10009a1e 	bne	r2,zero,8046d0 <___vfprintf_internal_r+0x1758>
  804468:	d9401904 	addi	r5,sp,100
  80446c:	dd000f04 	addi	r20,sp,60
  804470:	d9414115 	stw	r5,1284(sp)
  804474:	003d5b06 	br	8039e4 <___vfprintf_internal_r+0xa6c>
  804478:	d9014f17 	ldw	r4,1340(sp)
  80447c:	b00b883a 	mov	r5,r22
  804480:	d9800c04 	addi	r6,sp,48
  804484:	0802f200 	call	802f20 <__sprint_r>
  804488:	103c731e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  80448c:	dc800e17 	ldw	r18,56(sp)
  804490:	d8c01904 	addi	r3,sp,100
  804494:	003cf906 	br	80387c <___vfprintf_internal_r+0x904>
  804498:	d8c14c17 	ldw	r3,1328(sp)
  80449c:	1880040c 	andi	r2,r3,16
  8044a0:	1000711e 	bne	r2,zero,804668 <___vfprintf_internal_r+0x16f0>
  8044a4:	d9014c17 	ldw	r4,1328(sp)
  8044a8:	2080100c 	andi	r2,r4,64
  8044ac:	10006e26 	beq	r2,zero,804668 <___vfprintf_internal_r+0x16f0>
  8044b0:	3c00000b 	ldhu	r16,0(r7)
  8044b4:	0023883a 	mov	r17,zero
  8044b8:	39c00104 	addi	r7,r7,4
  8044bc:	d9c14015 	stw	r7,1280(sp)
  8044c0:	003efa06 	br	8040ac <___vfprintf_internal_r+0x1134>
  8044c4:	dc400d17 	ldw	r17,52(sp)
  8044c8:	07002074 	movhi	fp,129
  8044cc:	e7121384 	addi	fp,fp,18510
  8044d0:	9425883a 	add	r18,r18,r16
  8044d4:	8c400044 	addi	r17,r17,1
  8044d8:	008001c4 	movi	r2,7
  8044dc:	1f000015 	stw	fp,0(r3)
  8044e0:	1c000115 	stw	r16,4(r3)
  8044e4:	dc800e15 	stw	r18,56(sp)
  8044e8:	dc400d15 	stw	r17,52(sp)
  8044ec:	147d7016 	blt	r2,r17,803ab0 <___vfprintf_internal_r+0xb38>
  8044f0:	18c00204 	addi	r3,r3,8
  8044f4:	003d7506 	br	803acc <___vfprintf_internal_r+0xb54>
  8044f8:	dc800e17 	ldw	r18,56(sp)
  8044fc:	dc400d17 	ldw	r17,52(sp)
  804500:	07002074 	movhi	fp,129
  804504:	e7121784 	addi	fp,fp,18526
  804508:	003bba06 	br	8033f4 <___vfprintf_internal_r+0x47c>
  80450c:	d9014f17 	ldw	r4,1340(sp)
  804510:	b00b883a 	mov	r5,r22
  804514:	d9800c04 	addi	r6,sp,48
  804518:	0802f200 	call	802f20 <__sprint_r>
  80451c:	103c4e1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  804520:	dc800e17 	ldw	r18,56(sp)
  804524:	d8c01904 	addi	r3,sp,100
  804528:	003ce306 	br	8038b8 <___vfprintf_internal_r+0x940>
  80452c:	3c000017 	ldw	r16,0(r7)
  804530:	0009883a 	mov	r4,zero
  804534:	39c00104 	addi	r7,r7,4
  804538:	0023883a 	mov	r17,zero
  80453c:	d9c14015 	stw	r7,1280(sp)
  804540:	d8000405 	stb	zero,16(sp)
  804544:	003d1a06 	br	8039b0 <___vfprintf_internal_r+0xa38>
  804548:	38800017 	ldw	r2,0(r7)
  80454c:	39c00104 	addi	r7,r7,4
  804550:	d9c14015 	stw	r7,1280(sp)
  804554:	1023d7fa 	srai	r17,r2,31
  804558:	1021883a 	mov	r16,r2
  80455c:	003d1206 	br	8039a8 <___vfprintf_internal_r+0xa30>
  804560:	3c000017 	ldw	r16,0(r7)
  804564:	01000044 	movi	r4,1
  804568:	39c00104 	addi	r7,r7,4
  80456c:	0023883a 	mov	r17,zero
  804570:	d9c14015 	stw	r7,1280(sp)
  804574:	d8000405 	stb	zero,16(sp)
  804578:	003d0d06 	br	8039b0 <___vfprintf_internal_r+0xa38>
  80457c:	00802074 	movhi	r2,129
  804580:	10921304 	addi	r2,r2,18508
  804584:	94800044 	addi	r18,r18,1
  804588:	8c400044 	addi	r17,r17,1
  80458c:	a8800015 	stw	r2,0(r21)
  804590:	00c00044 	movi	r3,1
  804594:	008001c4 	movi	r2,7
  804598:	a8c00115 	stw	r3,4(r21)
  80459c:	dc800e15 	stw	r18,56(sp)
  8045a0:	dc400d15 	stw	r17,52(sp)
  8045a4:	1440ca16 	blt	r2,r17,8048d0 <___vfprintf_internal_r+0x1958>
  8045a8:	a8c00204 	addi	r3,r21,8
  8045ac:	2000061e 	bne	r4,zero,8045c8 <___vfprintf_internal_r+0x1650>
  8045b0:	d9414717 	ldw	r5,1308(sp)
  8045b4:	2800041e 	bne	r5,zero,8045c8 <___vfprintf_internal_r+0x1650>
  8045b8:	d9814c17 	ldw	r6,1328(sp)
  8045bc:	3080004c 	andi	r2,r6,1
  8045c0:	1005003a 	cmpeq	r2,r2,zero
  8045c4:	103bea1e 	bne	r2,zero,803570 <___vfprintf_internal_r+0x5f8>
  8045c8:	00800044 	movi	r2,1
  8045cc:	dc400d17 	ldw	r17,52(sp)
  8045d0:	18800115 	stw	r2,4(r3)
  8045d4:	d8814917 	ldw	r2,1316(sp)
  8045d8:	94800044 	addi	r18,r18,1
  8045dc:	8c400044 	addi	r17,r17,1
  8045e0:	18800015 	stw	r2,0(r3)
  8045e4:	008001c4 	movi	r2,7
  8045e8:	dc800e15 	stw	r18,56(sp)
  8045ec:	dc400d15 	stw	r17,52(sp)
  8045f0:	1440ca16 	blt	r2,r17,80491c <___vfprintf_internal_r+0x19a4>
  8045f4:	18c00204 	addi	r3,r3,8
  8045f8:	0121c83a 	sub	r16,zero,r4
  8045fc:	0400500e 	bge	zero,r16,804740 <___vfprintf_internal_r+0x17c8>
  804600:	00800404 	movi	r2,16
  804604:	1400800e 	bge	r2,r16,804808 <___vfprintf_internal_r+0x1890>
  804608:	1027883a 	mov	r19,r2
  80460c:	07002074 	movhi	fp,129
  804610:	e7121384 	addi	fp,fp,18510
  804614:	050001c4 	movi	r20,7
  804618:	00000306 	br	804628 <___vfprintf_internal_r+0x16b0>
  80461c:	18c00204 	addi	r3,r3,8
  804620:	843ffc04 	addi	r16,r16,-16
  804624:	9c007a0e 	bge	r19,r16,804810 <___vfprintf_internal_r+0x1898>
  804628:	94800404 	addi	r18,r18,16
  80462c:	8c400044 	addi	r17,r17,1
  804630:	1f000015 	stw	fp,0(r3)
  804634:	1cc00115 	stw	r19,4(r3)
  804638:	dc800e15 	stw	r18,56(sp)
  80463c:	dc400d15 	stw	r17,52(sp)
  804640:	a47ff60e 	bge	r20,r17,80461c <___vfprintf_internal_r+0x16a4>
  804644:	d9014f17 	ldw	r4,1340(sp)
  804648:	b00b883a 	mov	r5,r22
  80464c:	d9800c04 	addi	r6,sp,48
  804650:	0802f200 	call	802f20 <__sprint_r>
  804654:	103c001e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  804658:	dc800e17 	ldw	r18,56(sp)
  80465c:	dc400d17 	ldw	r17,52(sp)
  804660:	d8c01904 	addi	r3,sp,100
  804664:	003fee06 	br	804620 <___vfprintf_internal_r+0x16a8>
  804668:	3c000017 	ldw	r16,0(r7)
  80466c:	0023883a 	mov	r17,zero
  804670:	39c00104 	addi	r7,r7,4
  804674:	d9c14015 	stw	r7,1280(sp)
  804678:	003e8c06 	br	8040ac <___vfprintf_internal_r+0x1134>
  80467c:	d9401904 	addi	r5,sp,100
  804680:	dd000f04 	addi	r20,sp,60
  804684:	d9414115 	stw	r5,1284(sp)
  804688:	d9814417 	ldw	r6,1296(sp)
  80468c:	880a973a 	slli	r5,r17,28
  804690:	8004d13a 	srli	r2,r16,4
  804694:	810003cc 	andi	r4,r16,15
  804698:	3109883a 	add	r4,r6,r4
  80469c:	2884b03a 	or	r2,r5,r2
  8046a0:	21400003 	ldbu	r5,0(r4)
  8046a4:	d9014117 	ldw	r4,1284(sp)
  8046a8:	8806d13a 	srli	r3,r17,4
  8046ac:	1021883a 	mov	r16,r2
  8046b0:	213fffc4 	addi	r4,r4,-1
  8046b4:	d9014115 	stw	r4,1284(sp)
  8046b8:	d9814117 	ldw	r6,1284(sp)
  8046bc:	10c8b03a 	or	r4,r2,r3
  8046c0:	1823883a 	mov	r17,r3
  8046c4:	31400005 	stb	r5,0(r6)
  8046c8:	203fef1e 	bne	r4,zero,804688 <___vfprintf_internal_r+0x1710>
  8046cc:	003cc506 	br	8039e4 <___vfprintf_internal_r+0xa6c>
  8046d0:	00800c04 	movi	r2,48
  8046d4:	d98018c4 	addi	r6,sp,99
  8046d8:	dd000f04 	addi	r20,sp,60
  8046dc:	d88018c5 	stb	r2,99(sp)
  8046e0:	d9814115 	stw	r6,1284(sp)
  8046e4:	003cbf06 	br	8039e4 <___vfprintf_internal_r+0xa6c>
  8046e8:	dc400d17 	ldw	r17,52(sp)
  8046ec:	07002074 	movhi	fp,129
  8046f0:	e7121784 	addi	fp,fp,18526
  8046f4:	003bc106 	br	8035fc <___vfprintf_internal_r+0x684>
  8046f8:	d9414c17 	ldw	r5,1328(sp)
  8046fc:	2880040c 	andi	r2,r5,16
  804700:	10007c26 	beq	r2,zero,8048f4 <___vfprintf_internal_r+0x197c>
  804704:	38800017 	ldw	r2,0(r7)
  804708:	39c00104 	addi	r7,r7,4
  80470c:	d9c14015 	stw	r7,1280(sp)
  804710:	d9814b17 	ldw	r6,1324(sp)
  804714:	d9c14017 	ldw	r7,1280(sp)
  804718:	11800015 	stw	r6,0(r2)
  80471c:	003a7206 	br	8030e8 <___vfprintf_internal_r+0x170>
  804720:	d9014f17 	ldw	r4,1340(sp)
  804724:	b00b883a 	mov	r5,r22
  804728:	d9800c04 	addi	r6,sp,48
  80472c:	0802f200 	call	802f20 <__sprint_r>
  804730:	103bc91e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  804734:	dc800e17 	ldw	r18,56(sp)
  804738:	dc400d17 	ldw	r17,52(sp)
  80473c:	d8c01904 	addi	r3,sp,100
  804740:	d9014717 	ldw	r4,1308(sp)
  804744:	d9414117 	ldw	r5,1284(sp)
  804748:	8c400044 	addi	r17,r17,1
  80474c:	9125883a 	add	r18,r18,r4
  804750:	008001c4 	movi	r2,7
  804754:	19400015 	stw	r5,0(r3)
  804758:	19000115 	stw	r4,4(r3)
  80475c:	dc800e15 	stw	r18,56(sp)
  804760:	dc400d15 	stw	r17,52(sp)
  804764:	147ce816 	blt	r2,r17,803b08 <___vfprintf_internal_r+0xb90>
  804768:	18c00204 	addi	r3,r3,8
  80476c:	003b8006 	br	803570 <___vfprintf_internal_r+0x5f8>
  804770:	38c00017 	ldw	r3,0(r7)
  804774:	39000204 	addi	r4,r7,8
  804778:	d9014015 	stw	r4,1280(sp)
  80477c:	d8c14215 	stw	r3,1288(sp)
  804780:	39c00117 	ldw	r7,4(r7)
  804784:	d9c14315 	stw	r7,1292(sp)
  804788:	003e1a06 	br	803ff4 <___vfprintf_internal_r+0x107c>
  80478c:	0005883a 	mov	r2,zero
  804790:	1409c83a 	sub	r4,r2,r16
  804794:	1105803a 	cmpltu	r2,r2,r4
  804798:	044bc83a 	sub	r5,zero,r17
  80479c:	2885c83a 	sub	r2,r5,r2
  8047a0:	2021883a 	mov	r16,r4
  8047a4:	1023883a 	mov	r17,r2
  8047a8:	01000044 	movi	r4,1
  8047ac:	00800b44 	movi	r2,45
  8047b0:	d8800405 	stb	r2,16(sp)
  8047b4:	003c7e06 	br	8039b0 <___vfprintf_internal_r+0xa38>
  8047b8:	d9014f17 	ldw	r4,1340(sp)
  8047bc:	b00b883a 	mov	r5,r22
  8047c0:	d9800c04 	addi	r6,sp,48
  8047c4:	0802f200 	call	802f20 <__sprint_r>
  8047c8:	103ba31e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  8047cc:	dc800e17 	ldw	r18,56(sp)
  8047d0:	dc400d17 	ldw	r17,52(sp)
  8047d4:	d9000517 	ldw	r4,20(sp)
  8047d8:	d9401904 	addi	r5,sp,100
  8047dc:	003da106 	br	803e64 <___vfprintf_internal_r+0xeec>
  8047e0:	d9014f17 	ldw	r4,1340(sp)
  8047e4:	b00b883a 	mov	r5,r22
  8047e8:	d9800c04 	addi	r6,sp,48
  8047ec:	0802f200 	call	802f20 <__sprint_r>
  8047f0:	103b991e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  8047f4:	dc800e17 	ldw	r18,56(sp)
  8047f8:	dc400d17 	ldw	r17,52(sp)
  8047fc:	d9000517 	ldw	r4,20(sp)
  804800:	d8c01904 	addi	r3,sp,100
  804804:	003d8b06 	br	803e34 <___vfprintf_internal_r+0xebc>
  804808:	07002074 	movhi	fp,129
  80480c:	e7121384 	addi	fp,fp,18510
  804810:	9425883a 	add	r18,r18,r16
  804814:	8c400044 	addi	r17,r17,1
  804818:	008001c4 	movi	r2,7
  80481c:	1f000015 	stw	fp,0(r3)
  804820:	1c000115 	stw	r16,4(r3)
  804824:	dc800e15 	stw	r18,56(sp)
  804828:	dc400d15 	stw	r17,52(sp)
  80482c:	147fbc16 	blt	r2,r17,804720 <___vfprintf_internal_r+0x17a8>
  804830:	18c00204 	addi	r3,r3,8
  804834:	003fc206 	br	804740 <___vfprintf_internal_r+0x17c8>
  804838:	d9014f17 	ldw	r4,1340(sp)
  80483c:	b00b883a 	mov	r5,r22
  804840:	d9800c04 	addi	r6,sp,48
  804844:	0802f200 	call	802f20 <__sprint_r>
  804848:	103b831e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  80484c:	dc800e17 	ldw	r18,56(sp)
  804850:	d9000517 	ldw	r4,20(sp)
  804854:	d8c01904 	addi	r3,sp,100
  804858:	003cfc06 	br	803c4c <___vfprintf_internal_r+0xcd4>
  80485c:	07002074 	movhi	fp,129
  804860:	e7121384 	addi	fp,fp,18510
  804864:	003bde06 	br	8037e0 <___vfprintf_internal_r+0x868>
  804868:	00802074 	movhi	r2,129
  80486c:	10920204 	addi	r2,r2,18440
  804870:	d8814115 	stw	r2,1284(sp)
  804874:	003def06 	br	804034 <___vfprintf_internal_r+0x10bc>
  804878:	d9014217 	ldw	r4,1288(sp)
  80487c:	d9414317 	ldw	r5,1292(sp)
  804880:	080a5ec0 	call	80a5ec <__isnand>
  804884:	10003926 	beq	r2,zero,80496c <___vfprintf_internal_r+0x19f4>
  804888:	d9414d17 	ldw	r5,1332(sp)
  80488c:	008011c4 	movi	r2,71
  804890:	1140ce16 	blt	r2,r5,804bcc <___vfprintf_internal_r+0x1c54>
  804894:	01802074 	movhi	r6,129
  804898:	31920304 	addi	r6,r6,18444
  80489c:	d9814115 	stw	r6,1284(sp)
  8048a0:	003de406 	br	804034 <___vfprintf_internal_r+0x10bc>
  8048a4:	d9014c17 	ldw	r4,1328(sp)
  8048a8:	bdc00044 	addi	r23,r23,1
  8048ac:	b8c00007 	ldb	r3,0(r23)
  8048b0:	21000814 	ori	r4,r4,32
  8048b4:	d9014c15 	stw	r4,1328(sp)
  8048b8:	003a2e06 	br	803174 <___vfprintf_internal_r+0x1fc>
  8048bc:	dcc14515 	stw	r19,1300(sp)
  8048c0:	98011016 	blt	r19,zero,804d04 <___vfprintf_internal_r+0x1d8c>
  8048c4:	980f883a 	mov	r7,r19
  8048c8:	d8014615 	stw	zero,1304(sp)
  8048cc:	003c4c06 	br	803a00 <___vfprintf_internal_r+0xa88>
  8048d0:	d9014f17 	ldw	r4,1340(sp)
  8048d4:	b00b883a 	mov	r5,r22
  8048d8:	d9800c04 	addi	r6,sp,48
  8048dc:	0802f200 	call	802f20 <__sprint_r>
  8048e0:	103b5d1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  8048e4:	dc800e17 	ldw	r18,56(sp)
  8048e8:	d9000517 	ldw	r4,20(sp)
  8048ec:	d8c01904 	addi	r3,sp,100
  8048f0:	003f2e06 	br	8045ac <___vfprintf_internal_r+0x1634>
  8048f4:	d8c14c17 	ldw	r3,1328(sp)
  8048f8:	1880100c 	andi	r2,r3,64
  8048fc:	1000a026 	beq	r2,zero,804b80 <___vfprintf_internal_r+0x1c08>
  804900:	38800017 	ldw	r2,0(r7)
  804904:	39c00104 	addi	r7,r7,4
  804908:	d9c14015 	stw	r7,1280(sp)
  80490c:	d9014b17 	ldw	r4,1324(sp)
  804910:	d9c14017 	ldw	r7,1280(sp)
  804914:	1100000d 	sth	r4,0(r2)
  804918:	0039f306 	br	8030e8 <___vfprintf_internal_r+0x170>
  80491c:	d9014f17 	ldw	r4,1340(sp)
  804920:	b00b883a 	mov	r5,r22
  804924:	d9800c04 	addi	r6,sp,48
  804928:	0802f200 	call	802f20 <__sprint_r>
  80492c:	103b4a1e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  804930:	dc800e17 	ldw	r18,56(sp)
  804934:	dc400d17 	ldw	r17,52(sp)
  804938:	d9000517 	ldw	r4,20(sp)
  80493c:	d8c01904 	addi	r3,sp,100
  804940:	003f2d06 	br	8045f8 <___vfprintf_internal_r+0x1680>
  804944:	00800184 	movi	r2,6
  804948:	14c09a36 	bltu	r2,r19,804bb4 <___vfprintf_internal_r+0x1c3c>
  80494c:	dcc14515 	stw	r19,1300(sp)
  804950:	9800010e 	bge	r19,zero,804958 <___vfprintf_internal_r+0x19e0>
  804954:	d8014515 	stw	zero,1300(sp)
  804958:	00802074 	movhi	r2,129
  80495c:	10920504 	addi	r2,r2,18452
  804960:	980f883a 	mov	r7,r19
  804964:	d8814115 	stw	r2,1284(sp)
  804968:	003a7206 	br	803334 <___vfprintf_internal_r+0x3bc>
  80496c:	00bfffc4 	movi	r2,-1
  804970:	9880e226 	beq	r19,r2,804cfc <___vfprintf_internal_r+0x1d84>
  804974:	d9414d17 	ldw	r5,1332(sp)
  804978:	008019c4 	movi	r2,103
  80497c:	2880dc26 	beq	r5,r2,804cf0 <___vfprintf_internal_r+0x1d78>
  804980:	008011c4 	movi	r2,71
  804984:	2880da26 	beq	r5,r2,804cf0 <___vfprintf_internal_r+0x1d78>
  804988:	d9414c17 	ldw	r5,1328(sp)
  80498c:	d9014317 	ldw	r4,1292(sp)
  804990:	d9814217 	ldw	r6,1288(sp)
  804994:	29404014 	ori	r5,r5,256
  804998:	d9414c15 	stw	r5,1328(sp)
  80499c:	2000cc16 	blt	r4,zero,804cd0 <___vfprintf_internal_r+0x1d58>
  8049a0:	3021883a 	mov	r16,r6
  8049a4:	2023883a 	mov	r17,r4
  8049a8:	0039883a 	mov	fp,zero
  8049ac:	d9414d17 	ldw	r5,1332(sp)
  8049b0:	00801984 	movi	r2,102
  8049b4:	2880b726 	beq	r5,r2,804c94 <___vfprintf_internal_r+0x1d1c>
  8049b8:	00801184 	movi	r2,70
  8049bc:	2880b526 	beq	r5,r2,804c94 <___vfprintf_internal_r+0x1d1c>
  8049c0:	00801944 	movi	r2,101
  8049c4:	2880c826 	beq	r5,r2,804ce8 <___vfprintf_internal_r+0x1d70>
  8049c8:	00801144 	movi	r2,69
  8049cc:	2880c626 	beq	r5,r2,804ce8 <___vfprintf_internal_r+0x1d70>
  8049d0:	9829883a 	mov	r20,r19
  8049d4:	d9014f17 	ldw	r4,1340(sp)
  8049d8:	d8800504 	addi	r2,sp,20
  8049dc:	880d883a 	mov	r6,r17
  8049e0:	d8800115 	stw	r2,4(sp)
  8049e4:	d8c00604 	addi	r3,sp,24
  8049e8:	d8800704 	addi	r2,sp,28
  8049ec:	800b883a 	mov	r5,r16
  8049f0:	01c00084 	movi	r7,2
  8049f4:	d8c00215 	stw	r3,8(sp)
  8049f8:	d8800315 	stw	r2,12(sp)
  8049fc:	dd000015 	stw	r20,0(sp)
  804a00:	0806a500 	call	806a50 <_dtoa_r>
  804a04:	d9814d17 	ldw	r6,1332(sp)
  804a08:	d8814115 	stw	r2,1284(sp)
  804a0c:	008019c4 	movi	r2,103
  804a10:	30809526 	beq	r6,r2,804c68 <___vfprintf_internal_r+0x1cf0>
  804a14:	d8c14d17 	ldw	r3,1332(sp)
  804a18:	008011c4 	movi	r2,71
  804a1c:	18809226 	beq	r3,r2,804c68 <___vfprintf_internal_r+0x1cf0>
  804a20:	d9414117 	ldw	r5,1284(sp)
  804a24:	d9814d17 	ldw	r6,1332(sp)
  804a28:	00801984 	movi	r2,102
  804a2c:	2d25883a 	add	r18,r5,r20
  804a30:	30808626 	beq	r6,r2,804c4c <___vfprintf_internal_r+0x1cd4>
  804a34:	00801184 	movi	r2,70
  804a38:	30808426 	beq	r6,r2,804c4c <___vfprintf_internal_r+0x1cd4>
  804a3c:	000d883a 	mov	r6,zero
  804a40:	000f883a 	mov	r7,zero
  804a44:	880b883a 	mov	r5,r17
  804a48:	8009883a 	mov	r4,r16
  804a4c:	080f6380 	call	80f638 <__eqdf2>
  804a50:	1000751e 	bne	r2,zero,804c28 <___vfprintf_internal_r+0x1cb0>
  804a54:	9005883a 	mov	r2,r18
  804a58:	dc800715 	stw	r18,28(sp)
  804a5c:	d9014117 	ldw	r4,1284(sp)
  804a60:	d9414d17 	ldw	r5,1332(sp)
  804a64:	00c019c4 	movi	r3,103
  804a68:	1125c83a 	sub	r18,r2,r4
  804a6c:	28c06826 	beq	r5,r3,804c10 <___vfprintf_internal_r+0x1c98>
  804a70:	008011c4 	movi	r2,71
  804a74:	28806626 	beq	r5,r2,804c10 <___vfprintf_internal_r+0x1c98>
  804a78:	d9000517 	ldw	r4,20(sp)
  804a7c:	d8c14d17 	ldw	r3,1332(sp)
  804a80:	00801944 	movi	r2,101
  804a84:	10c05516 	blt	r2,r3,804bdc <___vfprintf_internal_r+0x1c64>
  804a88:	213fffc4 	addi	r4,r4,-1
  804a8c:	d9000515 	stw	r4,20(sp)
  804a90:	d8c00805 	stb	r3,32(sp)
  804a94:	2021883a 	mov	r16,r4
  804a98:	2000c116 	blt	r4,zero,804da0 <___vfprintf_internal_r+0x1e28>
  804a9c:	00800ac4 	movi	r2,43
  804aa0:	d8800845 	stb	r2,33(sp)
  804aa4:	00800244 	movi	r2,9
  804aa8:	1400af0e 	bge	r2,r16,804d68 <___vfprintf_internal_r+0x1df0>
  804aac:	1027883a 	mov	r19,r2
  804ab0:	dc400b84 	addi	r17,sp,46
  804ab4:	8009883a 	mov	r4,r16
  804ab8:	01400284 	movi	r5,10
  804abc:	080fe1c0 	call	80fe1c <__modsi3>
  804ac0:	10800c04 	addi	r2,r2,48
  804ac4:	8c7fffc4 	addi	r17,r17,-1
  804ac8:	8009883a 	mov	r4,r16
  804acc:	01400284 	movi	r5,10
  804ad0:	88800005 	stb	r2,0(r17)
  804ad4:	080fdbc0 	call	80fdbc <__divsi3>
  804ad8:	1021883a 	mov	r16,r2
  804adc:	98bff516 	blt	r19,r2,804ab4 <___vfprintf_internal_r+0x1b3c>
  804ae0:	10c00c04 	addi	r3,r2,48
  804ae4:	d88009c4 	addi	r2,sp,39
  804ae8:	108001c4 	addi	r2,r2,7
  804aec:	897fffc4 	addi	r5,r17,-1
  804af0:	88ffffc5 	stb	r3,-1(r17)
  804af4:	2880a72e 	bgeu	r5,r2,804d94 <___vfprintf_internal_r+0x1e1c>
  804af8:	1009883a 	mov	r4,r2
  804afc:	d9800804 	addi	r6,sp,32
  804b00:	d8c00884 	addi	r3,sp,34
  804b04:	28800003 	ldbu	r2,0(r5)
  804b08:	29400044 	addi	r5,r5,1
  804b0c:	18800005 	stb	r2,0(r3)
  804b10:	18c00044 	addi	r3,r3,1
  804b14:	293ffb36 	bltu	r5,r4,804b04 <___vfprintf_internal_r+0x1b8c>
  804b18:	1987c83a 	sub	r3,r3,r6
  804b1c:	00800044 	movi	r2,1
  804b20:	d8c14815 	stw	r3,1312(sp)
  804b24:	90cf883a 	add	r7,r18,r3
  804b28:	1480960e 	bge	r2,r18,804d84 <___vfprintf_internal_r+0x1e0c>
  804b2c:	39c00044 	addi	r7,r7,1
  804b30:	d9c14515 	stw	r7,1300(sp)
  804b34:	38003416 	blt	r7,zero,804c08 <___vfprintf_internal_r+0x1c90>
  804b38:	e0803fcc 	andi	r2,fp,255
  804b3c:	1080201c 	xori	r2,r2,128
  804b40:	10bfe004 	addi	r2,r2,-128
  804b44:	10004e26 	beq	r2,zero,804c80 <___vfprintf_internal_r+0x1d08>
  804b48:	00800b44 	movi	r2,45
  804b4c:	dc814715 	stw	r18,1308(sp)
  804b50:	d8014615 	stw	zero,1304(sp)
  804b54:	d8800405 	stb	r2,16(sp)
  804b58:	003bab06 	br	803a08 <___vfprintf_internal_r+0xa90>
  804b5c:	00800b44 	movi	r2,45
  804b60:	d8800405 	stb	r2,16(sp)
  804b64:	003d2d06 	br	80401c <___vfprintf_internal_r+0x10a4>
  804b68:	d9014f17 	ldw	r4,1340(sp)
  804b6c:	b00b883a 	mov	r5,r22
  804b70:	d9800c04 	addi	r6,sp,48
  804b74:	0802f200 	call	802f20 <__sprint_r>
  804b78:	103ab71e 	bne	r2,zero,803658 <___vfprintf_internal_r+0x6e0>
  804b7c:	003ab506 	br	803654 <___vfprintf_internal_r+0x6dc>
  804b80:	38800017 	ldw	r2,0(r7)
  804b84:	39c00104 	addi	r7,r7,4
  804b88:	d9c14015 	stw	r7,1280(sp)
  804b8c:	d9414b17 	ldw	r5,1324(sp)
  804b90:	d9c14017 	ldw	r7,1280(sp)
  804b94:	11400015 	stw	r5,0(r2)
  804b98:	00395306 	br	8030e8 <___vfprintf_internal_r+0x170>
  804b9c:	980f883a 	mov	r7,r19
  804ba0:	dcc14515 	stw	r19,1300(sp)
  804ba4:	d8014615 	stw	zero,1304(sp)
  804ba8:	003b9506 	br	803a00 <___vfprintf_internal_r+0xa88>
  804bac:	0027883a 	mov	r19,zero
  804bb0:	00397206 	br	80317c <___vfprintf_internal_r+0x204>
  804bb4:	00c02074 	movhi	r3,129
  804bb8:	18d20504 	addi	r3,r3,18452
  804bbc:	100f883a 	mov	r7,r2
  804bc0:	d8814515 	stw	r2,1300(sp)
  804bc4:	d8c14115 	stw	r3,1284(sp)
  804bc8:	0039da06 	br	803334 <___vfprintf_internal_r+0x3bc>
  804bcc:	00802074 	movhi	r2,129
  804bd0:	10920404 	addi	r2,r2,18448
  804bd4:	d8814115 	stw	r2,1284(sp)
  804bd8:	003d1606 	br	804034 <___vfprintf_internal_r+0x10bc>
  804bdc:	d9414d17 	ldw	r5,1332(sp)
  804be0:	00801984 	movi	r2,102
  804be4:	28804926 	beq	r5,r2,804d0c <___vfprintf_internal_r+0x1d94>
  804be8:	200f883a 	mov	r7,r4
  804bec:	24805716 	blt	r4,r18,804d4c <___vfprintf_internal_r+0x1dd4>
  804bf0:	d9414c17 	ldw	r5,1328(sp)
  804bf4:	2880004c 	andi	r2,r5,1
  804bf8:	10000126 	beq	r2,zero,804c00 <___vfprintf_internal_r+0x1c88>
  804bfc:	21c00044 	addi	r7,r4,1
  804c00:	d9c14515 	stw	r7,1300(sp)
  804c04:	383fcc0e 	bge	r7,zero,804b38 <___vfprintf_internal_r+0x1bc0>
  804c08:	d8014515 	stw	zero,1300(sp)
  804c0c:	003fca06 	br	804b38 <___vfprintf_internal_r+0x1bc0>
  804c10:	d9000517 	ldw	r4,20(sp)
  804c14:	00bfff04 	movi	r2,-4
  804c18:	1100480e 	bge	r2,r4,804d3c <___vfprintf_internal_r+0x1dc4>
  804c1c:	99004716 	blt	r19,r4,804d3c <___vfprintf_internal_r+0x1dc4>
  804c20:	d8c14d15 	stw	r3,1332(sp)
  804c24:	003ff006 	br	804be8 <___vfprintf_internal_r+0x1c70>
  804c28:	d8800717 	ldw	r2,28(sp)
  804c2c:	14bf8b2e 	bgeu	r2,r18,804a5c <___vfprintf_internal_r+0x1ae4>
  804c30:	9007883a 	mov	r3,r18
  804c34:	01000c04 	movi	r4,48
  804c38:	11000005 	stb	r4,0(r2)
  804c3c:	10800044 	addi	r2,r2,1
  804c40:	d8800715 	stw	r2,28(sp)
  804c44:	18bffc1e 	bne	r3,r2,804c38 <___vfprintf_internal_r+0x1cc0>
  804c48:	003f8406 	br	804a5c <___vfprintf_internal_r+0x1ae4>
  804c4c:	d8814117 	ldw	r2,1284(sp)
  804c50:	10c00007 	ldb	r3,0(r2)
  804c54:	00800c04 	movi	r2,48
  804c58:	18805b26 	beq	r3,r2,804dc8 <___vfprintf_internal_r+0x1e50>
  804c5c:	d9000517 	ldw	r4,20(sp)
  804c60:	9125883a 	add	r18,r18,r4
  804c64:	003f7506 	br	804a3c <___vfprintf_internal_r+0x1ac4>
  804c68:	d9014c17 	ldw	r4,1328(sp)
  804c6c:	2080004c 	andi	r2,r4,1
  804c70:	1005003a 	cmpeq	r2,r2,zero
  804c74:	103f6a26 	beq	r2,zero,804a20 <___vfprintf_internal_r+0x1aa8>
  804c78:	d8800717 	ldw	r2,28(sp)
  804c7c:	003f7706 	br	804a5c <___vfprintf_internal_r+0x1ae4>
  804c80:	d9c14515 	stw	r7,1300(sp)
  804c84:	38004d16 	blt	r7,zero,804dbc <___vfprintf_internal_r+0x1e44>
  804c88:	dc814715 	stw	r18,1308(sp)
  804c8c:	d8014615 	stw	zero,1304(sp)
  804c90:	003b5b06 	br	803a00 <___vfprintf_internal_r+0xa88>
  804c94:	d9014f17 	ldw	r4,1340(sp)
  804c98:	d8800504 	addi	r2,sp,20
  804c9c:	d8800115 	stw	r2,4(sp)
  804ca0:	d8c00604 	addi	r3,sp,24
  804ca4:	d8800704 	addi	r2,sp,28
  804ca8:	800b883a 	mov	r5,r16
  804cac:	880d883a 	mov	r6,r17
  804cb0:	01c000c4 	movi	r7,3
  804cb4:	d8c00215 	stw	r3,8(sp)
  804cb8:	d8800315 	stw	r2,12(sp)
  804cbc:	dcc00015 	stw	r19,0(sp)
  804cc0:	9829883a 	mov	r20,r19
  804cc4:	0806a500 	call	806a50 <_dtoa_r>
  804cc8:	d8814115 	stw	r2,1284(sp)
  804ccc:	003f5106 	br	804a14 <___vfprintf_internal_r+0x1a9c>
  804cd0:	d8c14217 	ldw	r3,1288(sp)
  804cd4:	d9014317 	ldw	r4,1292(sp)
  804cd8:	07000b44 	movi	fp,45
  804cdc:	1821883a 	mov	r16,r3
  804ce0:	2460003c 	xorhi	r17,r4,32768
  804ce4:	003f3106 	br	8049ac <___vfprintf_internal_r+0x1a34>
  804ce8:	9d000044 	addi	r20,r19,1
  804cec:	003f3906 	br	8049d4 <___vfprintf_internal_r+0x1a5c>
  804cf0:	983f251e 	bne	r19,zero,804988 <___vfprintf_internal_r+0x1a10>
  804cf4:	04c00044 	movi	r19,1
  804cf8:	003f2306 	br	804988 <___vfprintf_internal_r+0x1a10>
  804cfc:	04c00184 	movi	r19,6
  804d00:	003f2106 	br	804988 <___vfprintf_internal_r+0x1a10>
  804d04:	d8014515 	stw	zero,1300(sp)
  804d08:	003eee06 	br	8048c4 <___vfprintf_internal_r+0x194c>
  804d0c:	200f883a 	mov	r7,r4
  804d10:	0100370e 	bge	zero,r4,804df0 <___vfprintf_internal_r+0x1e78>
  804d14:	9800031e 	bne	r19,zero,804d24 <___vfprintf_internal_r+0x1dac>
  804d18:	d9814c17 	ldw	r6,1328(sp)
  804d1c:	3080004c 	andi	r2,r6,1
  804d20:	103fb726 	beq	r2,zero,804c00 <___vfprintf_internal_r+0x1c88>
  804d24:	20800044 	addi	r2,r4,1
  804d28:	98a7883a 	add	r19,r19,r2
  804d2c:	dcc14515 	stw	r19,1300(sp)
  804d30:	980f883a 	mov	r7,r19
  804d34:	983f800e 	bge	r19,zero,804b38 <___vfprintf_internal_r+0x1bc0>
  804d38:	003fb306 	br	804c08 <___vfprintf_internal_r+0x1c90>
  804d3c:	d9814d17 	ldw	r6,1332(sp)
  804d40:	31bfff84 	addi	r6,r6,-2
  804d44:	d9814d15 	stw	r6,1332(sp)
  804d48:	003f4c06 	br	804a7c <___vfprintf_internal_r+0x1b04>
  804d4c:	0100180e 	bge	zero,r4,804db0 <___vfprintf_internal_r+0x1e38>
  804d50:	00800044 	movi	r2,1
  804d54:	1485883a 	add	r2,r2,r18
  804d58:	d8814515 	stw	r2,1300(sp)
  804d5c:	100f883a 	mov	r7,r2
  804d60:	103f750e 	bge	r2,zero,804b38 <___vfprintf_internal_r+0x1bc0>
  804d64:	003fa806 	br	804c08 <___vfprintf_internal_r+0x1c90>
  804d68:	80c00c04 	addi	r3,r16,48
  804d6c:	00800c04 	movi	r2,48
  804d70:	d8c008c5 	stb	r3,35(sp)
  804d74:	d9800804 	addi	r6,sp,32
  804d78:	d8c00904 	addi	r3,sp,36
  804d7c:	d8800885 	stb	r2,34(sp)
  804d80:	003f6506 	br	804b18 <___vfprintf_internal_r+0x1ba0>
  804d84:	d9014c17 	ldw	r4,1328(sp)
  804d88:	2084703a 	and	r2,r4,r2
  804d8c:	103f9c26 	beq	r2,zero,804c00 <___vfprintf_internal_r+0x1c88>
  804d90:	003f6606 	br	804b2c <___vfprintf_internal_r+0x1bb4>
  804d94:	d9800804 	addi	r6,sp,32
  804d98:	d8c00884 	addi	r3,sp,34
  804d9c:	003f5e06 	br	804b18 <___vfprintf_internal_r+0x1ba0>
  804da0:	00800b44 	movi	r2,45
  804da4:	0121c83a 	sub	r16,zero,r4
  804da8:	d8800845 	stb	r2,33(sp)
  804dac:	003f3d06 	br	804aa4 <___vfprintf_internal_r+0x1b2c>
  804db0:	00800084 	movi	r2,2
  804db4:	1105c83a 	sub	r2,r2,r4
  804db8:	003fe606 	br	804d54 <___vfprintf_internal_r+0x1ddc>
  804dbc:	d8014515 	stw	zero,1300(sp)
  804dc0:	dc814715 	stw	r18,1308(sp)
  804dc4:	003fb106 	br	804c8c <___vfprintf_internal_r+0x1d14>
  804dc8:	000d883a 	mov	r6,zero
  804dcc:	000f883a 	mov	r7,zero
  804dd0:	8009883a 	mov	r4,r16
  804dd4:	880b883a 	mov	r5,r17
  804dd8:	080f6c00 	call	80f6c0 <__nedf2>
  804ddc:	103f9f26 	beq	r2,zero,804c5c <___vfprintf_internal_r+0x1ce4>
  804de0:	00800044 	movi	r2,1
  804de4:	1509c83a 	sub	r4,r2,r20
  804de8:	d9000515 	stw	r4,20(sp)
  804dec:	003f9b06 	br	804c5c <___vfprintf_internal_r+0x1ce4>
  804df0:	98000d1e 	bne	r19,zero,804e28 <___vfprintf_internal_r+0x1eb0>
  804df4:	d8c14c17 	ldw	r3,1328(sp)
  804df8:	1880004c 	andi	r2,r3,1
  804dfc:	10000a1e 	bne	r2,zero,804e28 <___vfprintf_internal_r+0x1eb0>
  804e00:	01000044 	movi	r4,1
  804e04:	200f883a 	mov	r7,r4
  804e08:	d9014515 	stw	r4,1300(sp)
  804e0c:	003f4a06 	br	804b38 <___vfprintf_internal_r+0x1bc0>
  804e10:	3cc00017 	ldw	r19,0(r7)
  804e14:	39c00104 	addi	r7,r7,4
  804e18:	983d0e0e 	bge	r19,zero,804254 <___vfprintf_internal_r+0x12dc>
  804e1c:	b8c00007 	ldb	r3,0(r23)
  804e20:	04ffffc4 	movi	r19,-1
  804e24:	0038d306 	br	803174 <___vfprintf_internal_r+0x1fc>
  804e28:	9cc00084 	addi	r19,r19,2
  804e2c:	dcc14515 	stw	r19,1300(sp)
  804e30:	980f883a 	mov	r7,r19
  804e34:	983f400e 	bge	r19,zero,804b38 <___vfprintf_internal_r+0x1bc0>
  804e38:	003f7306 	br	804c08 <___vfprintf_internal_r+0x1c90>

00804e3c <__vfprintf_internal>:
  804e3c:	00802074 	movhi	r2,129
  804e40:	109a6904 	addi	r2,r2,27044
  804e44:	2013883a 	mov	r9,r4
  804e48:	11000017 	ldw	r4,0(r2)
  804e4c:	2805883a 	mov	r2,r5
  804e50:	300f883a 	mov	r7,r6
  804e54:	480b883a 	mov	r5,r9
  804e58:	100d883a 	mov	r6,r2
  804e5c:	0802f781 	jmpi	802f78 <___vfprintf_internal_r>

00804e60 <__svfscanf_r>:
  804e60:	deff4e04 	addi	sp,sp,-712
  804e64:	dd80ae15 	stw	r22,696(sp)
  804e68:	dd00ac15 	stw	r20,688(sp)
  804e6c:	dc40a915 	stw	r17,676(sp)
  804e70:	dc00a815 	stw	r16,672(sp)
  804e74:	dfc0b115 	stw	ra,708(sp)
  804e78:	df00b015 	stw	fp,704(sp)
  804e7c:	ddc0af15 	stw	r23,700(sp)
  804e80:	dd40ad15 	stw	r21,692(sp)
  804e84:	dcc0ab15 	stw	r19,684(sp)
  804e88:	dc80aa15 	stw	r18,680(sp)
  804e8c:	202d883a 	mov	r22,r4
  804e90:	2821883a 	mov	r16,r5
  804e94:	d9c0a415 	stw	r7,656(sp)
  804e98:	3029883a 	mov	r20,r6
  804e9c:	d800a215 	stw	zero,648(sp)
  804ea0:	0023883a 	mov	r17,zero
  804ea4:	d800a115 	stw	zero,644(sp)
  804ea8:	d800a015 	stw	zero,640(sp)
  804eac:	a1000007 	ldb	r4,0(r20)
  804eb0:	d9000115 	stw	r4,4(sp)
  804eb4:	20001f26 	beq	r4,zero,804f34 <__svfscanf_r+0xd4>
  804eb8:	04c02074 	movhi	r19,129
  804ebc:	9cda6d04 	addi	r19,r19,27060
  804ec0:	9c800017 	ldw	r18,0(r19)
  804ec4:	a5000044 	addi	r20,r20,1
  804ec8:	9107883a 	add	r3,r18,r4
  804ecc:	18800003 	ldbu	r2,0(r3)
  804ed0:	1080020c 	andi	r2,r2,8
  804ed4:	10002426 	beq	r2,zero,804f68 <__svfscanf_r+0x108>
  804ed8:	80c00117 	ldw	r3,4(r16)
  804edc:	00c00e0e 	bge	zero,r3,804f18 <__svfscanf_r+0xb8>
  804ee0:	81400017 	ldw	r5,0(r16)
  804ee4:	98800017 	ldw	r2,0(r19)
  804ee8:	28c00003 	ldbu	r3,0(r5)
  804eec:	1887883a 	add	r3,r3,r2
  804ef0:	19000003 	ldbu	r4,0(r3)
  804ef4:	2100020c 	andi	r4,r4,8
  804ef8:	203fec26 	beq	r4,zero,804eac <__svfscanf_r+0x4c>
  804efc:	80c00117 	ldw	r3,4(r16)
  804f00:	29800044 	addi	r6,r5,1
  804f04:	8c400044 	addi	r17,r17,1
  804f08:	18ffffc4 	addi	r3,r3,-1
  804f0c:	81800015 	stw	r6,0(r16)
  804f10:	80c00115 	stw	r3,4(r16)
  804f14:	00fff216 	blt	zero,r3,804ee0 <__svfscanf_r+0x80>
  804f18:	b009883a 	mov	r4,r22
  804f1c:	800b883a 	mov	r5,r16
  804f20:	080299c0 	call	80299c <__srefill_r>
  804f24:	103fee26 	beq	r2,zero,804ee0 <__svfscanf_r+0x80>
  804f28:	a1000007 	ldb	r4,0(r20)
  804f2c:	d9000115 	stw	r4,4(sp)
  804f30:	203fe11e 	bne	r4,zero,804eb8 <__svfscanf_r+0x58>
  804f34:	d880a217 	ldw	r2,648(sp)
  804f38:	dfc0b117 	ldw	ra,708(sp)
  804f3c:	df00b017 	ldw	fp,704(sp)
  804f40:	ddc0af17 	ldw	r23,700(sp)
  804f44:	dd80ae17 	ldw	r22,696(sp)
  804f48:	dd40ad17 	ldw	r21,692(sp)
  804f4c:	dd00ac17 	ldw	r20,688(sp)
  804f50:	dcc0ab17 	ldw	r19,684(sp)
  804f54:	dc80aa17 	ldw	r18,680(sp)
  804f58:	dc40a917 	ldw	r17,676(sp)
  804f5c:	dc00a817 	ldw	r16,672(sp)
  804f60:	dec0b204 	addi	sp,sp,712
  804f64:	f800283a 	ret
  804f68:	00800944 	movi	r2,37
  804f6c:	20801626 	beq	r4,r2,804fc8 <__svfscanf_r+0x168>
  804f70:	80800117 	ldw	r2,4(r16)
  804f74:	00800b0e 	bge	zero,r2,804fa4 <__svfscanf_r+0x144>
  804f78:	81000017 	ldw	r4,0(r16)
  804f7c:	a0ffffc7 	ldb	r3,-1(r20)
  804f80:	20800003 	ldbu	r2,0(r4)
  804f84:	10ffeb1e 	bne	r2,r3,804f34 <__svfscanf_r+0xd4>
  804f88:	80c00117 	ldw	r3,4(r16)
  804f8c:	21800044 	addi	r6,r4,1
  804f90:	8c400044 	addi	r17,r17,1
  804f94:	18ffffc4 	addi	r3,r3,-1
  804f98:	80c00115 	stw	r3,4(r16)
  804f9c:	81800015 	stw	r6,0(r16)
  804fa0:	003fc206 	br	804eac <__svfscanf_r+0x4c>
  804fa4:	b009883a 	mov	r4,r22
  804fa8:	800b883a 	mov	r5,r16
  804fac:	080299c0 	call	80299c <__srefill_r>
  804fb0:	103ff126 	beq	r2,zero,804f78 <__svfscanf_r+0x118>
  804fb4:	d900a217 	ldw	r4,648(sp)
  804fb8:	2004981e 	bne	r4,zero,80621c <__svfscanf_r+0x13bc>
  804fbc:	00bfffc4 	movi	r2,-1
  804fc0:	d880a215 	stw	r2,648(sp)
  804fc4:	003fdb06 	br	804f34 <__svfscanf_r+0xd4>
  804fc8:	d800a315 	stw	zero,652(sp)
  804fcc:	002b883a 	mov	r21,zero
  804fd0:	a0c00003 	ldbu	r3,0(r20)
  804fd4:	00801e04 	movi	r2,120
  804fd8:	a5000044 	addi	r20,r20,1
  804fdc:	1dc03fcc 	andi	r23,r3,255
  804fe0:	bdc0201c 	xori	r23,r23,128
  804fe4:	bdffe004 	addi	r23,r23,-128
  804fe8:	10c08036 	bltu	r2,r3,8051ec <__svfscanf_r+0x38c>
  804fec:	18c5883a 	add	r2,r3,r3
  804ff0:	1085883a 	add	r2,r2,r2
  804ff4:	00c02034 	movhi	r3,128
  804ff8:	18d40204 	addi	r3,r3,20488
  804ffc:	10c5883a 	add	r2,r2,r3
  805000:	11000017 	ldw	r4,0(r2)
  805004:	2000683a 	jmp	r4
  805008:	00804fbc 	xorhi	r2,zero,318
  80500c:	008051ec 	andhi	r2,zero,327
  805010:	008051ec 	andhi	r2,zero,327
  805014:	008051ec 	andhi	r2,zero,327
  805018:	008051ec 	andhi	r2,zero,327
  80501c:	008051ec 	andhi	r2,zero,327
  805020:	008051ec 	andhi	r2,zero,327
  805024:	008051ec 	andhi	r2,zero,327
  805028:	008051ec 	andhi	r2,zero,327
  80502c:	008051ec 	andhi	r2,zero,327
  805030:	008051ec 	andhi	r2,zero,327
  805034:	008051ec 	andhi	r2,zero,327
  805038:	008051ec 	andhi	r2,zero,327
  80503c:	008051ec 	andhi	r2,zero,327
  805040:	008051ec 	andhi	r2,zero,327
  805044:	008051ec 	andhi	r2,zero,327
  805048:	008051ec 	andhi	r2,zero,327
  80504c:	008051ec 	andhi	r2,zero,327
  805050:	008051ec 	andhi	r2,zero,327
  805054:	008051ec 	andhi	r2,zero,327
  805058:	008051ec 	andhi	r2,zero,327
  80505c:	008051ec 	andhi	r2,zero,327
  805060:	008051ec 	andhi	r2,zero,327
  805064:	008051ec 	andhi	r2,zero,327
  805068:	008051ec 	andhi	r2,zero,327
  80506c:	008051ec 	andhi	r2,zero,327
  805070:	008051ec 	andhi	r2,zero,327
  805074:	008051ec 	andhi	r2,zero,327
  805078:	008051ec 	andhi	r2,zero,327
  80507c:	008051ec 	andhi	r2,zero,327
  805080:	008051ec 	andhi	r2,zero,327
  805084:	008051ec 	andhi	r2,zero,327
  805088:	008051ec 	andhi	r2,zero,327
  80508c:	008051ec 	andhi	r2,zero,327
  805090:	008051ec 	andhi	r2,zero,327
  805094:	008051ec 	andhi	r2,zero,327
  805098:	008051ec 	andhi	r2,zero,327
  80509c:	00804f70 	cmpltui	r2,zero,317
  8050a0:	008051ec 	andhi	r2,zero,327
  8050a4:	008051ec 	andhi	r2,zero,327
  8050a8:	008051ec 	andhi	r2,zero,327
  8050ac:	008051ec 	andhi	r2,zero,327
  8050b0:	0080608c 	andi	r2,zero,386
  8050b4:	008051ec 	andhi	r2,zero,327
  8050b8:	008051ec 	andhi	r2,zero,327
  8050bc:	008051ec 	andhi	r2,zero,327
  8050c0:	008051ec 	andhi	r2,zero,327
  8050c4:	008051ec 	andhi	r2,zero,327
  8050c8:	00806070 	cmpltui	r2,zero,385
  8050cc:	00806070 	cmpltui	r2,zero,385
  8050d0:	00806070 	cmpltui	r2,zero,385
  8050d4:	00806070 	cmpltui	r2,zero,385
  8050d8:	00806070 	cmpltui	r2,zero,385
  8050dc:	00806070 	cmpltui	r2,zero,385
  8050e0:	00806070 	cmpltui	r2,zero,385
  8050e4:	00806070 	cmpltui	r2,zero,385
  8050e8:	00806070 	cmpltui	r2,zero,385
  8050ec:	00806070 	cmpltui	r2,zero,385
  8050f0:	008051ec 	andhi	r2,zero,327
  8050f4:	008051ec 	andhi	r2,zero,327
  8050f8:	008051ec 	andhi	r2,zero,327
  8050fc:	008051ec 	andhi	r2,zero,327
  805100:	008051ec 	andhi	r2,zero,327
  805104:	008051ec 	andhi	r2,zero,327
  805108:	008051ec 	andhi	r2,zero,327
  80510c:	008051ec 	andhi	r2,zero,327
  805110:	008051ec 	andhi	r2,zero,327
  805114:	008051ec 	andhi	r2,zero,327
  805118:	00805200 	call	80520 <__reset-0x77fae0>
  80511c:	00806174 	movhi	r2,389
  805120:	008051ec 	andhi	r2,zero,327
  805124:	00806174 	movhi	r2,389
  805128:	008051ec 	andhi	r2,zero,327
  80512c:	008051ec 	andhi	r2,zero,327
  805130:	008051ec 	andhi	r2,zero,327
  805134:	008051ec 	andhi	r2,zero,327
  805138:	00806068 	cmpgeui	r2,zero,385
  80513c:	008051ec 	andhi	r2,zero,327
  805140:	008051ec 	andhi	r2,zero,327
  805144:	00806048 	cmpgei	r2,zero,385
  805148:	008051ec 	andhi	r2,zero,327
  80514c:	008051ec 	andhi	r2,zero,327
  805150:	008051ec 	andhi	r2,zero,327
  805154:	008051ec 	andhi	r2,zero,327
  805158:	008051ec 	andhi	r2,zero,327
  80515c:	008051ec 	andhi	r2,zero,327
  805160:	008051ec 	andhi	r2,zero,327
  805164:	008051ec 	andhi	r2,zero,327
  805168:	00806094 	movui	r2,386
  80516c:	008051ec 	andhi	r2,zero,327
  805170:	008051ec 	andhi	r2,zero,327
  805174:	0080602c 	andhi	r2,zero,384
  805178:	008051ec 	andhi	r2,zero,327
  80517c:	008051ec 	andhi	r2,zero,327
  805180:	008051ec 	andhi	r2,zero,327
  805184:	008051ec 	andhi	r2,zero,327
  805188:	008051ec 	andhi	r2,zero,327
  80518c:	008051ec 	andhi	r2,zero,327
  805190:	008051ec 	andhi	r2,zero,327
  805194:	0080617c 	xorhi	r2,zero,389
  805198:	00805204 	movi	r2,328
  80519c:	00806174 	movhi	r2,389
  8051a0:	00806174 	movhi	r2,389
  8051a4:	00806174 	movhi	r2,389
  8051a8:	00806188 	cmpgei	r2,zero,390
  8051ac:	008060d0 	cmplti	r2,zero,387
  8051b0:	008051ec 	andhi	r2,zero,327
  8051b4:	008051ec 	andhi	r2,zero,327
  8051b8:	00805798 	cmpnei	r2,zero,350
  8051bc:	008051ec 	andhi	r2,zero,327
  8051c0:	00806284 	movi	r2,394
  8051c4:	00806240 	call	80624 <__reset-0x77f9dc>
  8051c8:	00806264 	muli	r2,zero,393
  8051cc:	008051ec 	andhi	r2,zero,327
  8051d0:	008051ec 	andhi	r2,zero,327
  8051d4:	0080625c 	xori	r2,zero,393
  8051d8:	008051ec 	andhi	r2,zero,327
  8051dc:	008060b4 	movhi	r2,386
  8051e0:	008051ec 	andhi	r2,zero,327
  8051e4:	008051ec 	andhi	r2,zero,327
  8051e8:	00806094 	movui	r2,386
  8051ec:	bc87883a 	add	r3,r23,r18
  8051f0:	18800003 	ldbu	r2,0(r3)
  8051f4:	1080004c 	andi	r2,r2,1
  8051f8:	1005003a 	cmpeq	r2,r2,zero
  8051fc:	1000011e 	bne	r2,zero,805204 <__svfscanf_r+0x3a4>
  805200:	ad400054 	ori	r21,r21,1
  805204:	01002074 	movhi	r4,129
  805208:	212ff204 	addi	r4,r4,-16440
  80520c:	00800284 	movi	r2,10
  805210:	d900a015 	stw	r4,640(sp)
  805214:	048000c4 	movi	r18,3
  805218:	d880a115 	stw	r2,644(sp)
  80521c:	80c00117 	ldw	r3,4(r16)
  805220:	00c13f0e 	bge	zero,r3,805720 <__svfscanf_r+0x8c0>
  805224:	a880100c 	andi	r2,r21,64
  805228:	10001326 	beq	r2,zero,805278 <__svfscanf_r+0x418>
  80522c:	00800104 	movi	r2,4
  805230:	14bf1e36 	bltu	r2,r18,804eac <__svfscanf_r+0x4c>
  805234:	9485883a 	add	r2,r18,r18
  805238:	1085883a 	add	r2,r2,r2
  80523c:	00c02034 	movhi	r3,128
  805240:	18d49404 	addi	r3,r3,21072
  805244:	10c5883a 	add	r2,r2,r3
  805248:	11000017 	ldw	r4,0(r2)
  80524c:	2000683a 	jmp	r4
  805250:	008052b4 	movhi	r2,330
  805254:	008053b4 	movhi	r2,334
  805258:	008055c4 	movi	r2,343
  80525c:	00805428 	cmpgeui	r2,zero,336
  805260:	008056fc 	xorhi	r2,zero,347
  805264:	b009883a 	mov	r4,r22
  805268:	800b883a 	mov	r5,r16
  80526c:	080299c0 	call	80299c <__srefill_r>
  805270:	103f501e 	bne	r2,zero,804fb4 <__svfscanf_r+0x154>
  805274:	8c400044 	addi	r17,r17,1
  805278:	81400017 	ldw	r5,0(r16)
  80527c:	98800017 	ldw	r2,0(r19)
  805280:	28c00003 	ldbu	r3,0(r5)
  805284:	1887883a 	add	r3,r3,r2
  805288:	19000003 	ldbu	r4,0(r3)
  80528c:	2100020c 	andi	r4,r4,8
  805290:	203fe626 	beq	r4,zero,80522c <__svfscanf_r+0x3cc>
  805294:	80c00117 	ldw	r3,4(r16)
  805298:	18ffffc4 	addi	r3,r3,-1
  80529c:	80c00115 	stw	r3,4(r16)
  8052a0:	00fff00e 	bge	zero,r3,805264 <__svfscanf_r+0x404>
  8052a4:	29800044 	addi	r6,r5,1
  8052a8:	8c400044 	addi	r17,r17,1
  8052ac:	81800015 	stw	r6,0(r16)
  8052b0:	003ff106 	br	805278 <__svfscanf_r+0x418>
  8052b4:	d8c0a317 	ldw	r3,652(sp)
  8052b8:	1800021e 	bne	r3,zero,8052c4 <__svfscanf_r+0x464>
  8052bc:	01000044 	movi	r4,1
  8052c0:	d900a315 	stw	r4,652(sp)
  8052c4:	a880004c 	andi	r2,r21,1
  8052c8:	1005003a 	cmpeq	r2,r2,zero
  8052cc:	1002811e 	bne	r2,zero,805cd4 <__svfscanf_r+0xe74>
  8052d0:	ad40040c 	andi	r21,r21,16
  8052d4:	a805003a 	cmpeq	r2,r21,zero
  8052d8:	d880a615 	stw	r2,664(sp)
  8052dc:	1003d31e 	bne	r2,zero,80622c <__svfscanf_r+0x13cc>
  8052e0:	0027883a 	mov	r19,zero
  8052e4:	d900a317 	ldw	r4,652(sp)
  8052e8:	2003c726 	beq	r4,zero,806208 <__svfscanf_r+0x13a8>
  8052ec:	07002074 	movhi	fp,129
  8052f0:	e71a6e04 	addi	fp,fp,27064
  8052f4:	e0800017 	ldw	r2,0(fp)
  8052f8:	103f2e26 	beq	r2,zero,804fb4 <__svfscanf_r+0x154>
  8052fc:	d8804404 	addi	r2,sp,272
  805300:	0025883a 	mov	r18,zero
  805304:	d880a515 	stw	r2,660(sp)
  805308:	05ffffc4 	movi	r23,-1
  80530c:	80800017 	ldw	r2,0(r16)
  805310:	80c00117 	ldw	r3,4(r16)
  805314:	d900a517 	ldw	r4,660(sp)
  805318:	12000003 	ldbu	r8,0(r2)
  80531c:	18ffffc4 	addi	r3,r3,-1
  805320:	11800044 	addi	r6,r2,1
  805324:	248f883a 	add	r7,r4,r18
  805328:	80c00115 	stw	r3,4(r16)
  80532c:	81800015 	stw	r6,0(r16)
  805330:	3a000005 	stb	r8,0(r7)
  805334:	d9000204 	addi	r4,sp,8
  805338:	000b883a 	mov	r5,zero
  80533c:	01800204 	movi	r6,8
  805340:	080273c0 	call	80273c <memset>
  805344:	d980a517 	ldw	r6,660(sp)
  805348:	94800044 	addi	r18,r18,1
  80534c:	d8800204 	addi	r2,sp,8
  805350:	b009883a 	mov	r4,r22
  805354:	980b883a 	mov	r5,r19
  805358:	900f883a 	mov	r7,r18
  80535c:	d8800015 	stw	r2,0(sp)
  805360:	08089640 	call	808964 <_mbrtowc_r>
  805364:	1007883a 	mov	r3,r2
  805368:	15ff1226 	beq	r2,r23,804fb4 <__svfscanf_r+0x154>
  80536c:	10039e1e 	bne	r2,zero,8061e8 <__svfscanf_r+0x1388>
  805370:	a800011e 	bne	r21,zero,805378 <__svfscanf_r+0x518>
  805374:	98000015 	stw	zero,0(r19)
  805378:	d8c0a317 	ldw	r3,652(sp)
  80537c:	d900a617 	ldw	r4,664(sp)
  805380:	8ca3883a 	add	r17,r17,r18
  805384:	18ffffc4 	addi	r3,r3,-1
  805388:	d8c0a315 	stw	r3,652(sp)
  80538c:	20000126 	beq	r4,zero,805394 <__svfscanf_r+0x534>
  805390:	9cc00104 	addi	r19,r19,4
  805394:	0025883a 	mov	r18,zero
  805398:	80c00117 	ldw	r3,4(r16)
  80539c:	00c3950e 	bge	zero,r3,8061f4 <__svfscanf_r+0x1394>
  8053a0:	d880a317 	ldw	r2,652(sp)
  8053a4:	10039826 	beq	r2,zero,806208 <__svfscanf_r+0x13a8>
  8053a8:	e0800017 	ldw	r2,0(fp)
  8053ac:	90bfd71e 	bne	r18,r2,80530c <__svfscanf_r+0x4ac>
  8053b0:	003f0006 	br	804fb4 <__svfscanf_r+0x154>
  8053b4:	d880a317 	ldw	r2,652(sp)
  8053b8:	1000021e 	bne	r2,zero,8053c4 <__svfscanf_r+0x564>
  8053bc:	00ffffc4 	movi	r3,-1
  8053c0:	d8c0a315 	stw	r3,652(sp)
  8053c4:	a880040c 	andi	r2,r21,16
  8053c8:	1003b826 	beq	r2,zero,8062ac <__svfscanf_r+0x144c>
  8053cc:	0027883a 	mov	r19,zero
  8053d0:	dd400404 	addi	r21,sp,16
  8053d4:	81000017 	ldw	r4,0(r16)
  8053d8:	20800003 	ldbu	r2,0(r4)
  8053dc:	a885883a 	add	r2,r21,r2
  8053e0:	10c00007 	ldb	r3,0(r2)
  8053e4:	18037d26 	beq	r3,zero,8061dc <__svfscanf_r+0x137c>
  8053e8:	80c00117 	ldw	r3,4(r16)
  8053ec:	21800044 	addi	r6,r4,1
  8053f0:	d900a317 	ldw	r4,652(sp)
  8053f4:	18ffffc4 	addi	r3,r3,-1
  8053f8:	9cc00044 	addi	r19,r19,1
  8053fc:	81800015 	stw	r6,0(r16)
  805400:	80c00115 	stw	r3,4(r16)
  805404:	24c37526 	beq	r4,r19,8061dc <__svfscanf_r+0x137c>
  805408:	00fff216 	blt	zero,r3,8053d4 <__svfscanf_r+0x574>
  80540c:	b009883a 	mov	r4,r22
  805410:	800b883a 	mov	r5,r16
  805414:	080299c0 	call	80299c <__srefill_r>
  805418:	103fee26 	beq	r2,zero,8053d4 <__svfscanf_r+0x574>
  80541c:	983ee526 	beq	r19,zero,804fb4 <__svfscanf_r+0x154>
  805420:	8ce3883a 	add	r17,r17,r19
  805424:	003ea106 	br	804eac <__svfscanf_r+0x4c>
  805428:	d900a317 	ldw	r4,652(sp)
  80542c:	00805704 	movi	r2,348
  805430:	20ffffc4 	addi	r3,r4,-1
  805434:	10c0bf2e 	bgeu	r2,r3,805734 <__svfscanf_r+0x8d4>
  805438:	00805744 	movi	r2,349
  80543c:	24ffa8c4 	addi	r19,r4,-349
  805440:	ac836014 	ori	r18,r21,3456
  805444:	d880a315 	stw	r2,652(sp)
  805448:	d8c04404 	addi	r3,sp,272
  80544c:	d8c0a515 	stw	r3,660(sp)
  805450:	002f883a 	mov	r23,zero
  805454:	182b883a 	mov	r21,r3
  805458:	81800017 	ldw	r6,0(r16)
  80545c:	00c01344 	movi	r3,77
  805460:	31400003 	ldbu	r5,0(r6)
  805464:	28bff544 	addi	r2,r5,-43
  805468:	10803fcc 	andi	r2,r2,255
  80546c:	1880b836 	bltu	r3,r2,805750 <__svfscanf_r+0x8f0>
  805470:	1085883a 	add	r2,r2,r2
  805474:	1085883a 	add	r2,r2,r2
  805478:	00c02034 	movhi	r3,128
  80547c:	18d52304 	addi	r3,r3,21644
  805480:	10c5883a 	add	r2,r2,r3
  805484:	11000017 	ldw	r4,0(r2)
  805488:	2000683a 	jmp	r4
  80548c:	008058a0 	cmpeqi	r2,zero,354
  805490:	00805750 	cmplti	r2,zero,349
  805494:	008058a0 	cmpeqi	r2,zero,354
  805498:	00805750 	cmplti	r2,zero,349
  80549c:	00805750 	cmplti	r2,zero,349
  8054a0:	008058e4 	muli	r2,zero,355
  8054a4:	008060e8 	cmpgeui	r2,zero,387
  8054a8:	008060e8 	cmpgeui	r2,zero,387
  8054ac:	008060e8 	cmpgeui	r2,zero,387
  8054b0:	008060e8 	cmpgeui	r2,zero,387
  8054b4:	008060e8 	cmpgeui	r2,zero,387
  8054b8:	008060e8 	cmpgeui	r2,zero,387
  8054bc:	008060e8 	cmpgeui	r2,zero,387
  8054c0:	00806110 	cmplti	r2,zero,388
  8054c4:	00806110 	cmplti	r2,zero,388
  8054c8:	00805750 	cmplti	r2,zero,349
  8054cc:	00805750 	cmplti	r2,zero,349
  8054d0:	00805750 	cmplti	r2,zero,349
  8054d4:	00805750 	cmplti	r2,zero,349
  8054d8:	00805750 	cmplti	r2,zero,349
  8054dc:	00805750 	cmplti	r2,zero,349
  8054e0:	00805750 	cmplti	r2,zero,349
  8054e4:	00806140 	call	80614 <__reset-0x77f9ec>
  8054e8:	00806140 	call	80614 <__reset-0x77f9ec>
  8054ec:	00806140 	call	80614 <__reset-0x77f9ec>
  8054f0:	00806140 	call	80614 <__reset-0x77f9ec>
  8054f4:	00806140 	call	80614 <__reset-0x77f9ec>
  8054f8:	00806140 	call	80614 <__reset-0x77f9ec>
  8054fc:	00805750 	cmplti	r2,zero,349
  805500:	00805750 	cmplti	r2,zero,349
  805504:	00805750 	cmplti	r2,zero,349
  805508:	00805750 	cmplti	r2,zero,349
  80550c:	00805750 	cmplti	r2,zero,349
  805510:	00805750 	cmplti	r2,zero,349
  805514:	00805750 	cmplti	r2,zero,349
  805518:	00805750 	cmplti	r2,zero,349
  80551c:	00805750 	cmplti	r2,zero,349
  805520:	00805750 	cmplti	r2,zero,349
  805524:	00805750 	cmplti	r2,zero,349
  805528:	00805750 	cmplti	r2,zero,349
  80552c:	00805750 	cmplti	r2,zero,349
  805530:	00805750 	cmplti	r2,zero,349
  805534:	00805750 	cmplti	r2,zero,349
  805538:	00805750 	cmplti	r2,zero,349
  80553c:	00805750 	cmplti	r2,zero,349
  805540:	00806150 	cmplti	r2,zero,389
  805544:	00805750 	cmplti	r2,zero,349
  805548:	00805750 	cmplti	r2,zero,349
  80554c:	00805750 	cmplti	r2,zero,349
  805550:	00805750 	cmplti	r2,zero,349
  805554:	00805750 	cmplti	r2,zero,349
  805558:	00805750 	cmplti	r2,zero,349
  80555c:	00805750 	cmplti	r2,zero,349
  805560:	00805750 	cmplti	r2,zero,349
  805564:	00806140 	call	80614 <__reset-0x77f9ec>
  805568:	00806140 	call	80614 <__reset-0x77f9ec>
  80556c:	00806140 	call	80614 <__reset-0x77f9ec>
  805570:	00806140 	call	80614 <__reset-0x77f9ec>
  805574:	00806140 	call	80614 <__reset-0x77f9ec>
  805578:	00806140 	call	80614 <__reset-0x77f9ec>
  80557c:	00805750 	cmplti	r2,zero,349
  805580:	00805750 	cmplti	r2,zero,349
  805584:	00805750 	cmplti	r2,zero,349
  805588:	00805750 	cmplti	r2,zero,349
  80558c:	00805750 	cmplti	r2,zero,349
  805590:	00805750 	cmplti	r2,zero,349
  805594:	00805750 	cmplti	r2,zero,349
  805598:	00805750 	cmplti	r2,zero,349
  80559c:	00805750 	cmplti	r2,zero,349
  8055a0:	00805750 	cmplti	r2,zero,349
  8055a4:	00805750 	cmplti	r2,zero,349
  8055a8:	00805750 	cmplti	r2,zero,349
  8055ac:	00805750 	cmplti	r2,zero,349
  8055b0:	00805750 	cmplti	r2,zero,349
  8055b4:	00805750 	cmplti	r2,zero,349
  8055b8:	00805750 	cmplti	r2,zero,349
  8055bc:	00805750 	cmplti	r2,zero,349
  8055c0:	00806150 	cmplti	r2,zero,389
  8055c4:	d900a317 	ldw	r4,652(sp)
  8055c8:	2000021e 	bne	r4,zero,8055d4 <__svfscanf_r+0x774>
  8055cc:	00bfffc4 	movi	r2,-1
  8055d0:	d880a315 	stw	r2,652(sp)
  8055d4:	a880004c 	andi	r2,r21,1
  8055d8:	1005003a 	cmpeq	r2,r2,zero
  8055dc:	1003651e 	bne	r2,zero,806374 <__svfscanf_r+0x1514>
  8055e0:	adc0040c 	andi	r23,r21,16
  8055e4:	b807003a 	cmpeq	r3,r23,zero
  8055e8:	d8c0a715 	stw	r3,668(sp)
  8055ec:	1802f61e 	bne	r3,zero,8061c8 <__svfscanf_r+0x1368>
  8055f0:	dd400104 	addi	r21,sp,4
  8055f4:	0025883a 	mov	r18,zero
  8055f8:	073fffc4 	movi	fp,-1
  8055fc:	81400017 	ldw	r5,0(r16)
  805600:	98800017 	ldw	r2,0(r19)
  805604:	29c00003 	ldbu	r7,0(r5)
  805608:	38c03fcc 	andi	r3,r7,255
  80560c:	1887883a 	add	r3,r3,r2
  805610:	19000003 	ldbu	r4,0(r3)
  805614:	2100020c 	andi	r4,r4,8
  805618:	2000321e 	bne	r4,zero,8056e4 <__svfscanf_r+0x884>
  80561c:	d8c0a317 	ldw	r3,652(sp)
  805620:	18003026 	beq	r3,zero,8056e4 <__svfscanf_r+0x884>
  805624:	00802074 	movhi	r2,129
  805628:	109a6e04 	addi	r2,r2,27064
  80562c:	10c00017 	ldw	r3,0(r2)
  805630:	90fe6026 	beq	r18,r3,804fb4 <__svfscanf_r+0x154>
  805634:	d8c04404 	addi	r3,sp,272
  805638:	80800117 	ldw	r2,4(r16)
  80563c:	d8c0a515 	stw	r3,660(sp)
  805640:	d900a517 	ldw	r4,660(sp)
  805644:	10ffffc4 	addi	r3,r2,-1
  805648:	29800044 	addi	r6,r5,1
  80564c:	80c00115 	stw	r3,4(r16)
  805650:	2485883a 	add	r2,r4,r18
  805654:	81800015 	stw	r6,0(r16)
  805658:	d9000204 	addi	r4,sp,8
  80565c:	000b883a 	mov	r5,zero
  805660:	01800204 	movi	r6,8
  805664:	11c00005 	stb	r7,0(r2)
  805668:	080273c0 	call	80273c <memset>
  80566c:	d980a517 	ldw	r6,660(sp)
  805670:	94800044 	addi	r18,r18,1
  805674:	d8800204 	addi	r2,sp,8
  805678:	b009883a 	mov	r4,r22
  80567c:	a80b883a 	mov	r5,r21
  805680:	900f883a 	mov	r7,r18
  805684:	d8800015 	stw	r2,0(sp)
  805688:	08089640 	call	808964 <_mbrtowc_r>
  80568c:	1007883a 	mov	r3,r2
  805690:	173e4826 	beq	r2,fp,804fb4 <__svfscanf_r+0x154>
  805694:	1002c91e 	bne	r2,zero,8061bc <__svfscanf_r+0x135c>
  805698:	a8000015 	stw	zero,0(r21)
  80569c:	a9000017 	ldw	r4,0(r21)
  8056a0:	08087fc0 	call	8087fc <iswspace>
  8056a4:	1002bc1e 	bne	r2,zero,806198 <__svfscanf_r+0x1338>
  8056a8:	d900a317 	ldw	r4,652(sp)
  8056ac:	d880a717 	ldw	r2,668(sp)
  8056b0:	8ca3883a 	add	r17,r17,r18
  8056b4:	213fffc4 	addi	r4,r4,-1
  8056b8:	d900a315 	stw	r4,652(sp)
  8056bc:	10000126 	beq	r2,zero,8056c4 <__svfscanf_r+0x864>
  8056c0:	ad400104 	addi	r21,r21,4
  8056c4:	0025883a 	mov	r18,zero
  8056c8:	80c00117 	ldw	r3,4(r16)
  8056cc:	00ffcb16 	blt	zero,r3,8055fc <__svfscanf_r+0x79c>
  8056d0:	b009883a 	mov	r4,r22
  8056d4:	800b883a 	mov	r5,r16
  8056d8:	080299c0 	call	80299c <__srefill_r>
  8056dc:	103fc726 	beq	r2,zero,8055fc <__svfscanf_r+0x79c>
  8056e0:	903e341e 	bne	r18,zero,804fb4 <__svfscanf_r+0x154>
  8056e4:	b83df11e 	bne	r23,zero,804eac <__svfscanf_r+0x4c>
  8056e8:	d900a217 	ldw	r4,648(sp)
  8056ec:	a8000015 	stw	zero,0(r21)
  8056f0:	21000044 	addi	r4,r4,1
  8056f4:	d900a215 	stw	r4,648(sp)
  8056f8:	003dec06 	br	804eac <__svfscanf_r+0x4c>
  8056fc:	d900a317 	ldw	r4,652(sp)
  805700:	00805704 	movi	r2,348
  805704:	20ffffc4 	addi	r3,r4,-1
  805708:	10c0902e 	bgeu	r2,r3,80594c <__svfscanf_r+0xaec>
  80570c:	00805744 	movi	r2,349
  805710:	24ffa8c4 	addi	r19,r4,-349
  805714:	ad41e014 	ori	r21,r21,1920
  805718:	d880a315 	stw	r2,652(sp)
  80571c:	00010806 	br	805b40 <__svfscanf_r+0xce0>
  805720:	b009883a 	mov	r4,r22
  805724:	800b883a 	mov	r5,r16
  805728:	080299c0 	call	80299c <__srefill_r>
  80572c:	103ebd26 	beq	r2,zero,805224 <__svfscanf_r+0x3c4>
  805730:	003e2006 	br	804fb4 <__svfscanf_r+0x154>
  805734:	d900a317 	ldw	r4,652(sp)
  805738:	ac836014 	ori	r18,r21,3456
  80573c:	2002941e 	bne	r4,zero,806190 <__svfscanf_r+0x1330>
  805740:	d8804404 	addi	r2,sp,272
  805744:	d880a515 	stw	r2,660(sp)
  805748:	002f883a 	mov	r23,zero
  80574c:	102b883a 	mov	r21,r2
  805750:	9080400c 	andi	r2,r18,256
  805754:	10000926 	beq	r2,zero,80577c <__svfscanf_r+0x91c>
  805758:	d8c0a517 	ldw	r3,660(sp)
  80575c:	1d40052e 	bgeu	r3,r21,805774 <__svfscanf_r+0x914>
  805760:	ad7fffc4 	addi	r21,r21,-1
  805764:	a9400007 	ldb	r5,0(r21)
  805768:	b009883a 	mov	r4,r22
  80576c:	800d883a 	mov	r6,r16
  805770:	080cb840 	call	80cb84 <_ungetc_r>
  805774:	d900a517 	ldw	r4,660(sp)
  805778:	257dee26 	beq	r4,r21,804f34 <__svfscanf_r+0xd4>
  80577c:	9080040c 	andi	r2,r18,16
  805780:	10000a26 	beq	r2,zero,8057ac <__svfscanf_r+0x94c>
  805784:	d8c0a517 	ldw	r3,660(sp)
  805788:	a8c5c83a 	sub	r2,r21,r3
  80578c:	b885883a 	add	r2,r23,r2
  805790:	88a3883a 	add	r17,r17,r2
  805794:	003dc506 	br	804eac <__svfscanf_r+0x4c>
  805798:	a0c00007 	ldb	r3,0(r20)
  80579c:	00801b04 	movi	r2,108
  8057a0:	18801726 	beq	r3,r2,805800 <__svfscanf_r+0x9a0>
  8057a4:	ad400054 	ori	r21,r21,1
  8057a8:	003e0906 	br	804fd0 <__svfscanf_r+0x170>
  8057ac:	a8000005 	stb	zero,0(r21)
  8057b0:	d8c0a017 	ldw	r3,640(sp)
  8057b4:	d940a517 	ldw	r5,660(sp)
  8057b8:	d9c0a117 	ldw	r7,644(sp)
  8057bc:	b009883a 	mov	r4,r22
  8057c0:	000d883a 	mov	r6,zero
  8057c4:	183ee83a 	callr	r3
  8057c8:	1007883a 	mov	r3,r2
  8057cc:	9080080c 	andi	r2,r18,32
  8057d0:	1000251e 	bne	r2,zero,805868 <__svfscanf_r+0xa08>
  8057d4:	9080010c 	andi	r2,r18,4
  8057d8:	10000c26 	beq	r2,zero,80580c <__svfscanf_r+0x9ac>
  8057dc:	d900a417 	ldw	r4,656(sp)
  8057e0:	20800017 	ldw	r2,0(r4)
  8057e4:	21000104 	addi	r4,r4,4
  8057e8:	d900a415 	stw	r4,656(sp)
  8057ec:	10c0000d 	sth	r3,0(r2)
  8057f0:	d880a217 	ldw	r2,648(sp)
  8057f4:	10800044 	addi	r2,r2,1
  8057f8:	d880a215 	stw	r2,648(sp)
  8057fc:	003fe106 	br	805784 <__svfscanf_r+0x924>
  805800:	a5000044 	addi	r20,r20,1
  805804:	ad400094 	ori	r21,r21,2
  805808:	003df106 	br	804fd0 <__svfscanf_r+0x170>
  80580c:	9080004c 	andi	r2,r18,1
  805810:	1005003a 	cmpeq	r2,r2,zero
  805814:	10001426 	beq	r2,zero,805868 <__svfscanf_r+0xa08>
  805818:	9080008c 	andi	r2,r18,2
  80581c:	10001226 	beq	r2,zero,805868 <__svfscanf_r+0xa08>
  805820:	d8c0a017 	ldw	r3,640(sp)
  805824:	00802074 	movhi	r2,129
  805828:	10b15504 	addi	r2,r2,-15020
  80582c:	18801426 	beq	r3,r2,805880 <__svfscanf_r+0xa20>
  805830:	d9c0a117 	ldw	r7,644(sp)
  805834:	d940a517 	ldw	r5,660(sp)
  805838:	000d883a 	mov	r6,zero
  80583c:	b009883a 	mov	r4,r22
  805840:	080c23c0 	call	80c23c <_strtoll_r>
  805844:	100d883a 	mov	r6,r2
  805848:	180f883a 	mov	r7,r3
  80584c:	d900a417 	ldw	r4,656(sp)
  805850:	20800017 	ldw	r2,0(r4)
  805854:	21000104 	addi	r4,r4,4
  805858:	d900a415 	stw	r4,656(sp)
  80585c:	11c00115 	stw	r7,4(r2)
  805860:	11800015 	stw	r6,0(r2)
  805864:	003fe206 	br	8057f0 <__svfscanf_r+0x990>
  805868:	d900a417 	ldw	r4,656(sp)
  80586c:	20800017 	ldw	r2,0(r4)
  805870:	21000104 	addi	r4,r4,4
  805874:	d900a415 	stw	r4,656(sp)
  805878:	10c00015 	stw	r3,0(r2)
  80587c:	003fdc06 	br	8057f0 <__svfscanf_r+0x990>
  805880:	d9c0a117 	ldw	r7,644(sp)
  805884:	d940a517 	ldw	r5,660(sp)
  805888:	000d883a 	mov	r6,zero
  80588c:	b009883a 	mov	r4,r22
  805890:	080c7b80 	call	80c7b8 <_strtoull_r>
  805894:	100d883a 	mov	r6,r2
  805898:	180f883a 	mov	r7,r3
  80589c:	003feb06 	br	80584c <__svfscanf_r+0x9ec>
  8058a0:	9080200c 	andi	r2,r18,128
  8058a4:	103faa26 	beq	r2,zero,805750 <__svfscanf_r+0x8f0>
  8058a8:	00bfdfc4 	movi	r2,-129
  8058ac:	90a4703a 	and	r18,r18,r2
  8058b0:	a9400005 	stb	r5,0(r21)
  8058b4:	ad400044 	addi	r21,r21,1
  8058b8:	80c00117 	ldw	r3,4(r16)
  8058bc:	18ffffc4 	addi	r3,r3,-1
  8058c0:	80c00115 	stw	r3,4(r16)
  8058c4:	00c0130e 	bge	zero,r3,805914 <__svfscanf_r+0xab4>
  8058c8:	31800044 	addi	r6,r6,1
  8058cc:	81800015 	stw	r6,0(r16)
  8058d0:	d880a317 	ldw	r2,652(sp)
  8058d4:	10bfffc4 	addi	r2,r2,-1
  8058d8:	d880a315 	stw	r2,652(sp)
  8058dc:	103ede1e 	bne	r2,zero,805458 <__svfscanf_r+0x5f8>
  8058e0:	003f9b06 	br	805750 <__svfscanf_r+0x8f0>
  8058e4:	9082000c 	andi	r2,r18,2048
  8058e8:	103ff126 	beq	r2,zero,8058b0 <__svfscanf_r+0xa50>
  8058ec:	d8c0a117 	ldw	r3,644(sp)
  8058f0:	1800031e 	bne	r3,zero,805900 <__svfscanf_r+0xaa0>
  8058f4:	01000204 	movi	r4,8
  8058f8:	94808014 	ori	r18,r18,512
  8058fc:	d900a115 	stw	r4,644(sp)
  805900:	9081000c 	andi	r2,r18,1024
  805904:	10000826 	beq	r2,zero,805928 <__svfscanf_r+0xac8>
  805908:	00be9fc4 	movi	r2,-1409
  80590c:	90a4703a 	and	r18,r18,r2
  805910:	003fe706 	br	8058b0 <__svfscanf_r+0xa50>
  805914:	b009883a 	mov	r4,r22
  805918:	800b883a 	mov	r5,r16
  80591c:	080299c0 	call	80299c <__srefill_r>
  805920:	103feb26 	beq	r2,zero,8058d0 <__svfscanf_r+0xa70>
  805924:	003f8a06 	br	805750 <__svfscanf_r+0x8f0>
  805928:	98000426 	beq	r19,zero,80593c <__svfscanf_r+0xadc>
  80592c:	d880a317 	ldw	r2,652(sp)
  805930:	9cffffc4 	addi	r19,r19,-1
  805934:	10800044 	addi	r2,r2,1
  805938:	d880a315 	stw	r2,652(sp)
  80593c:	00bf1fc4 	movi	r2,-897
  805940:	90a4703a 	and	r18,r18,r2
  805944:	bdc00044 	addi	r23,r23,1
  805948:	003fdb06 	br	8058b8 <__svfscanf_r+0xa58>
  80594c:	d900a317 	ldw	r4,652(sp)
  805950:	ad41e014 	ori	r21,r21,1920
  805954:	2000791e 	bne	r4,zero,805b3c <__svfscanf_r+0xcdc>
  805958:	d8c04404 	addi	r3,sp,272
  80595c:	d8c0a515 	stw	r3,660(sp)
  805960:	182f883a 	mov	r23,r3
  805964:	d8009c15 	stw	zero,624(sp)
  805968:	d8009d15 	stw	zero,628(sp)
  80596c:	d8009f15 	stw	zero,636(sp)
  805970:	d8009e15 	stw	zero,632(sp)
  805974:	0039883a 	mov	fp,zero
  805978:	e1003fcc 	andi	r4,fp,255
  80597c:	2100201c 	xori	r4,r4,128
  805980:	213fe004 	addi	r4,r4,-128
  805984:	20ffffc4 	addi	r3,r4,-1
  805988:	00800184 	movi	r2,6
  80598c:	10c01736 	bltu	r2,r3,8059ec <__svfscanf_r+0xb8c>
  805990:	00c00084 	movi	r3,2
  805994:	19026d0e 	bge	r3,r4,80634c <__svfscanf_r+0x14ec>
  805998:	008000c4 	movi	r2,3
  80599c:	1100130e 	bge	r2,r4,8059ec <__svfscanf_r+0xb8c>
  8059a0:	e4ffffc4 	addi	r19,fp,-1
  8059a4:	b825883a 	mov	r18,r23
  8059a8:	94bfffc4 	addi	r18,r18,-1
  8059ac:	91400007 	ldb	r5,0(r18)
  8059b0:	b009883a 	mov	r4,r22
  8059b4:	800d883a 	mov	r6,r16
  8059b8:	080cb840 	call	80cb84 <_ungetc_r>
  8059bc:	9cffffc4 	addi	r19,r19,-1
  8059c0:	98c03fcc 	andi	r3,r19,255
  8059c4:	18c0201c 	xori	r3,r3,128
  8059c8:	18ffe004 	addi	r3,r3,-128
  8059cc:	00800084 	movi	r2,2
  8059d0:	18bff51e 	bne	r3,r2,8059a8 <__svfscanf_r+0xb48>
  8059d4:	e0bfff04 	addi	r2,fp,-4
  8059d8:	10803fcc 	andi	r2,r2,255
  8059dc:	b887c83a 	sub	r3,r23,r2
  8059e0:	8885c83a 	sub	r2,r17,r2
  8059e4:	147fffc4 	addi	r17,r2,-1
  8059e8:	1dffffc4 	addi	r23,r3,-1
  8059ec:	a880400c 	andi	r2,r21,256
  8059f0:	10001226 	beq	r2,zero,805a3c <__svfscanf_r+0xbdc>
  8059f4:	a881000c 	andi	r2,r21,1024
  8059f8:	10002b1e 	bne	r2,zero,805aa8 <__svfscanf_r+0xc48>
  8059fc:	bdffffc4 	addi	r23,r23,-1
  805a00:	b9400007 	ldb	r5,0(r23)
  805a04:	00801944 	movi	r2,101
  805a08:	8c7fffc4 	addi	r17,r17,-1
  805a0c:	28800826 	beq	r5,r2,805a30 <__svfscanf_r+0xbd0>
  805a10:	00801144 	movi	r2,69
  805a14:	28800626 	beq	r5,r2,805a30 <__svfscanf_r+0xbd0>
  805a18:	bdffffc4 	addi	r23,r23,-1
  805a1c:	b009883a 	mov	r4,r22
  805a20:	800d883a 	mov	r6,r16
  805a24:	080cb840 	call	80cb84 <_ungetc_r>
  805a28:	b9400007 	ldb	r5,0(r23)
  805a2c:	8c7fffc4 	addi	r17,r17,-1
  805a30:	b009883a 	mov	r4,r22
  805a34:	800d883a 	mov	r6,r16
  805a38:	080cb840 	call	80cb84 <_ungetc_r>
  805a3c:	a880040c 	andi	r2,r21,16
  805a40:	103d1a1e 	bne	r2,zero,804eac <__svfscanf_r+0x4c>
  805a44:	a8c1800c 	andi	r3,r21,1536
  805a48:	00810004 	movi	r2,1024
  805a4c:	b8000005 	stb	zero,0(r23)
  805a50:	18813326 	beq	r3,r2,805f20 <__svfscanf_r+0x10c0>
  805a54:	d8809d17 	ldw	r2,628(sp)
  805a58:	1000251e 	bne	r2,zero,805af0 <__svfscanf_r+0xc90>
  805a5c:	d940a517 	ldw	r5,660(sp)
  805a60:	b009883a 	mov	r4,r22
  805a64:	000d883a 	mov	r6,zero
  805a68:	080a8bc0 	call	80a8bc <_strtod_r>
  805a6c:	a900004c 	andi	r4,r21,1
  805a70:	2009003a 	cmpeq	r4,r4,zero
  805a74:	1025883a 	mov	r18,r2
  805a78:	1827883a 	mov	r19,r3
  805a7c:	2000141e 	bne	r4,zero,805ad0 <__svfscanf_r+0xc70>
  805a80:	d8c0a417 	ldw	r3,656(sp)
  805a84:	18800017 	ldw	r2,0(r3)
  805a88:	1d400104 	addi	r21,r3,4
  805a8c:	14c00115 	stw	r19,4(r2)
  805a90:	14800015 	stw	r18,0(r2)
  805a94:	d8c0a217 	ldw	r3,648(sp)
  805a98:	dd40a415 	stw	r21,656(sp)
  805a9c:	18c00044 	addi	r3,r3,1
  805aa0:	d8c0a215 	stw	r3,648(sp)
  805aa4:	003d0106 	br	804eac <__svfscanf_r+0x4c>
  805aa8:	d900a517 	ldw	r4,660(sp)
  805aac:	25fd212e 	bgeu	r4,r23,804f34 <__svfscanf_r+0xd4>
  805ab0:	bdffffc4 	addi	r23,r23,-1
  805ab4:	b9400007 	ldb	r5,0(r23)
  805ab8:	b009883a 	mov	r4,r22
  805abc:	800d883a 	mov	r6,r16
  805ac0:	080cb840 	call	80cb84 <_ungetc_r>
  805ac4:	d880a517 	ldw	r2,660(sp)
  805ac8:	15fff936 	bltu	r2,r23,805ab0 <__svfscanf_r+0xc50>
  805acc:	003d1906 	br	804f34 <__svfscanf_r+0xd4>
  805ad0:	a880008c 	andi	r2,r21,2
  805ad4:	10011926 	beq	r2,zero,805f3c <__svfscanf_r+0x10dc>
  805ad8:	d900a417 	ldw	r4,656(sp)
  805adc:	20800017 	ldw	r2,0(r4)
  805ae0:	25400104 	addi	r21,r4,4
  805ae4:	10c00115 	stw	r3,4(r2)
  805ae8:	14800015 	stw	r18,0(r2)
  805aec:	003fe906 	br	805a94 <__svfscanf_r+0xc34>
  805af0:	d8c09c17 	ldw	r3,624(sp)
  805af4:	b009883a 	mov	r4,r22
  805af8:	000d883a 	mov	r6,zero
  805afc:	19400044 	addi	r5,r3,1
  805b00:	01c00284 	movi	r7,10
  805b04:	080bfc80 	call	80bfc8 <_strtol_r>
  805b08:	d9009d17 	ldw	r4,628(sp)
  805b0c:	110dc83a 	sub	r6,r2,r4
  805b10:	d8c0a517 	ldw	r3,660(sp)
  805b14:	d9009c17 	ldw	r4,624(sp)
  805b18:	188054c4 	addi	r2,r3,339
  805b1c:	20800236 	bltu	r4,r2,805b28 <__svfscanf_r+0xcc8>
  805b20:	18805484 	addi	r2,r3,338
  805b24:	d8809c15 	stw	r2,624(sp)
  805b28:	d9009c17 	ldw	r4,624(sp)
  805b2c:	01402074 	movhi	r5,129
  805b30:	29521c04 	addi	r5,r5,18544
  805b34:	080a6e40 	call	80a6e4 <sprintf>
  805b38:	003fc806 	br	805a5c <__svfscanf_r+0xbfc>
  805b3c:	0027883a 	mov	r19,zero
  805b40:	d8c04404 	addi	r3,sp,272
  805b44:	d8c0a515 	stw	r3,660(sp)
  805b48:	182f883a 	mov	r23,r3
  805b4c:	d8009f15 	stw	zero,636(sp)
  805b50:	d8009e15 	stw	zero,632(sp)
  805b54:	d8009d15 	stw	zero,628(sp)
  805b58:	d8009c15 	stw	zero,624(sp)
  805b5c:	0039883a 	mov	fp,zero
  805b60:	0025883a 	mov	r18,zero
  805b64:	80800017 	ldw	r2,0(r16)
  805b68:	11400003 	ldbu	r5,0(r2)
  805b6c:	00801384 	movi	r2,78
  805b70:	28fff544 	addi	r3,r5,-43
  805b74:	18c03fcc 	andi	r3,r3,255
  805b78:	10c08336 	bltu	r2,r3,805d88 <__svfscanf_r+0xf28>
  805b7c:	18c5883a 	add	r2,r3,r3
  805b80:	1085883a 	add	r2,r2,r2
  805b84:	00c02034 	movhi	r3,128
  805b88:	18d6e604 	addi	r3,r3,23448
  805b8c:	10c5883a 	add	r2,r2,r3
  805b90:	11000017 	ldw	r4,0(r2)
  805b94:	2000683a 	jmp	r4
  805b98:	00805d40 	call	805d4 <__reset-0x77fa2c>
  805b9c:	00805d88 	cmpgei	r2,zero,374
  805ba0:	00805d40 	call	805d4 <__reset-0x77fa2c>
  805ba4:	00805dcc 	andi	r2,zero,375
  805ba8:	00805d88 	cmpgei	r2,zero,374
  805bac:	00805e38 	rdprs	r2,zero,376
  805bb0:	00805e6c 	andhi	r2,zero,377
  805bb4:	00805e6c 	andhi	r2,zero,377
  805bb8:	00805e6c 	andhi	r2,zero,377
  805bbc:	00805e6c 	andhi	r2,zero,377
  805bc0:	00805e6c 	andhi	r2,zero,377
  805bc4:	00805e6c 	andhi	r2,zero,377
  805bc8:	00805e6c 	andhi	r2,zero,377
  805bcc:	00805e6c 	andhi	r2,zero,377
  805bd0:	00805e6c 	andhi	r2,zero,377
  805bd4:	00805d88 	cmpgei	r2,zero,374
  805bd8:	00805d88 	cmpgei	r2,zero,374
  805bdc:	00805d88 	cmpgei	r2,zero,374
  805be0:	00805d88 	cmpgei	r2,zero,374
  805be4:	00805d88 	cmpgei	r2,zero,374
  805be8:	00805d88 	cmpgei	r2,zero,374
  805bec:	00805d88 	cmpgei	r2,zero,374
  805bf0:	00805e8c 	andi	r2,zero,378
  805bf4:	00805d88 	cmpgei	r2,zero,374
  805bf8:	00805d88 	cmpgei	r2,zero,374
  805bfc:	00805d88 	cmpgei	r2,zero,374
  805c00:	00805e9c 	xori	r2,zero,378
  805c04:	00805ee8 	cmpgeui	r2,zero,379
  805c08:	00805d88 	cmpgei	r2,zero,374
  805c0c:	00805d88 	cmpgei	r2,zero,374
  805c10:	00805fc0 	call	805fc <__reset-0x77fa04>
  805c14:	00805d88 	cmpgei	r2,zero,374
  805c18:	00805d88 	cmpgei	r2,zero,374
  805c1c:	00805d88 	cmpgei	r2,zero,374
  805c20:	00805d88 	cmpgei	r2,zero,374
  805c24:	00805f6c 	andhi	r2,zero,381
  805c28:	00805d88 	cmpgei	r2,zero,374
  805c2c:	00805d88 	cmpgei	r2,zero,374
  805c30:	00805d88 	cmpgei	r2,zero,374
  805c34:	00805d88 	cmpgei	r2,zero,374
  805c38:	00805d88 	cmpgei	r2,zero,374
  805c3c:	00806000 	call	80600 <__reset-0x77fa00>
  805c40:	00805d88 	cmpgei	r2,zero,374
  805c44:	00805d88 	cmpgei	r2,zero,374
  805c48:	00805d88 	cmpgei	r2,zero,374
  805c4c:	00805d88 	cmpgei	r2,zero,374
  805c50:	00805f04 	movi	r2,380
  805c54:	00805d88 	cmpgei	r2,zero,374
  805c58:	00805d88 	cmpgei	r2,zero,374
  805c5c:	00805d88 	cmpgei	r2,zero,374
  805c60:	00805d88 	cmpgei	r2,zero,374
  805c64:	00805d88 	cmpgei	r2,zero,374
  805c68:	00805d88 	cmpgei	r2,zero,374
  805c6c:	00805d88 	cmpgei	r2,zero,374
  805c70:	00805e8c 	andi	r2,zero,378
  805c74:	00805d88 	cmpgei	r2,zero,374
  805c78:	00805d88 	cmpgei	r2,zero,374
  805c7c:	00805d88 	cmpgei	r2,zero,374
  805c80:	00805e9c 	xori	r2,zero,378
  805c84:	00805ee8 	cmpgeui	r2,zero,379
  805c88:	00805d88 	cmpgei	r2,zero,374
  805c8c:	00805d88 	cmpgei	r2,zero,374
  805c90:	00805fc0 	call	805fc <__reset-0x77fa04>
  805c94:	00805d88 	cmpgei	r2,zero,374
  805c98:	00805d88 	cmpgei	r2,zero,374
  805c9c:	00805d88 	cmpgei	r2,zero,374
  805ca0:	00805d88 	cmpgei	r2,zero,374
  805ca4:	00805f6c 	andhi	r2,zero,381
  805ca8:	00805d88 	cmpgei	r2,zero,374
  805cac:	00805d88 	cmpgei	r2,zero,374
  805cb0:	00805d88 	cmpgei	r2,zero,374
  805cb4:	00805d88 	cmpgei	r2,zero,374
  805cb8:	00805d88 	cmpgei	r2,zero,374
  805cbc:	00806000 	call	80600 <__reset-0x77fa00>
  805cc0:	00805d88 	cmpgei	r2,zero,374
  805cc4:	00805d88 	cmpgei	r2,zero,374
  805cc8:	00805d88 	cmpgei	r2,zero,374
  805ccc:	00805d88 	cmpgei	r2,zero,374
  805cd0:	00805f04 	movi	r2,380
  805cd4:	a880040c 	andi	r2,r21,16
  805cd8:	10004826 	beq	r2,zero,805dfc <__svfscanf_r+0xf9c>
  805cdc:	0027883a 	mov	r19,zero
  805ce0:	00000b06 	br	805d10 <__svfscanf_r+0xeb0>
  805ce4:	80800017 	ldw	r2,0(r16)
  805ce8:	b009883a 	mov	r4,r22
  805cec:	800b883a 	mov	r5,r16
  805cf0:	148d883a 	add	r6,r2,r18
  805cf4:	81800015 	stw	r6,0(r16)
  805cf8:	9ca7883a 	add	r19,r19,r18
  805cfc:	080299c0 	call	80299c <__srefill_r>
  805d00:	103dc61e 	bne	r2,zero,80541c <__svfscanf_r+0x5bc>
  805d04:	d880a317 	ldw	r2,652(sp)
  805d08:	1485c83a 	sub	r2,r2,r18
  805d0c:	d880a315 	stw	r2,652(sp)
  805d10:	84800117 	ldw	r18,4(r16)
  805d14:	d900a317 	ldw	r4,652(sp)
  805d18:	913ff216 	blt	r18,r4,805ce4 <__svfscanf_r+0xe84>
  805d1c:	d900a317 	ldw	r4,652(sp)
  805d20:	80800017 	ldw	r2,0(r16)
  805d24:	9927883a 	add	r19,r19,r4
  805d28:	9107c83a 	sub	r3,r18,r4
  805d2c:	110d883a 	add	r6,r2,r4
  805d30:	8ce3883a 	add	r17,r17,r19
  805d34:	80c00115 	stw	r3,4(r16)
  805d38:	81800015 	stw	r6,0(r16)
  805d3c:	003c5b06 	br	804eac <__svfscanf_r+0x4c>
  805d40:	a880200c 	andi	r2,r21,128
  805d44:	10001026 	beq	r2,zero,805d88 <__svfscanf_r+0xf28>
  805d48:	00bfdfc4 	movi	r2,-129
  805d4c:	a8aa703a 	and	r21,r21,r2
  805d50:	b9400005 	stb	r5,0(r23)
  805d54:	bdc00044 	addi	r23,r23,1
  805d58:	80c00117 	ldw	r3,4(r16)
  805d5c:	8c400044 	addi	r17,r17,1
  805d60:	18bfffc4 	addi	r2,r3,-1
  805d64:	80800115 	stw	r2,4(r16)
  805d68:	00801f0e 	bge	zero,r2,805de8 <__svfscanf_r+0xf88>
  805d6c:	80800017 	ldw	r2,0(r16)
  805d70:	10800044 	addi	r2,r2,1
  805d74:	80800015 	stw	r2,0(r16)
  805d78:	d880a317 	ldw	r2,652(sp)
  805d7c:	10bfffc4 	addi	r2,r2,-1
  805d80:	d880a315 	stw	r2,652(sp)
  805d84:	103f771e 	bne	r2,zero,805b64 <__svfscanf_r+0xd04>
  805d88:	d8c09e17 	ldw	r3,632(sp)
  805d8c:	18000226 	beq	r3,zero,805d98 <__svfscanf_r+0xf38>
  805d90:	00bfbfc4 	movi	r2,-257
  805d94:	a8aa703a 	and	r21,r21,r2
  805d98:	90ffffc4 	addi	r3,r18,-1
  805d9c:	00800044 	movi	r2,1
  805da0:	10fef536 	bltu	r2,r3,805978 <__svfscanf_r+0xb18>
  805da4:	d900a517 	ldw	r4,660(sp)
  805da8:	25fc622e 	bgeu	r4,r23,804f34 <__svfscanf_r+0xd4>
  805dac:	bdffffc4 	addi	r23,r23,-1
  805db0:	b9400007 	ldb	r5,0(r23)
  805db4:	b009883a 	mov	r4,r22
  805db8:	800d883a 	mov	r6,r16
  805dbc:	080cb840 	call	80cb84 <_ungetc_r>
  805dc0:	d880a517 	ldw	r2,660(sp)
  805dc4:	15fff936 	bltu	r2,r23,805dac <__svfscanf_r+0xf4c>
  805dc8:	003c5a06 	br	804f34 <__svfscanf_r+0xd4>
  805dcc:	a880800c 	andi	r2,r21,512
  805dd0:	103fed26 	beq	r2,zero,805d88 <__svfscanf_r+0xf28>
  805dd4:	d9009e17 	ldw	r4,632(sp)
  805dd8:	00bf5fc4 	movi	r2,-641
  805ddc:	a8aa703a 	and	r21,r21,r2
  805de0:	d9009f15 	stw	r4,636(sp)
  805de4:	003fda06 	br	805d50 <__svfscanf_r+0xef0>
  805de8:	b009883a 	mov	r4,r22
  805dec:	800b883a 	mov	r5,r16
  805df0:	080299c0 	call	80299c <__srefill_r>
  805df4:	103fe026 	beq	r2,zero,805d78 <__svfscanf_r+0xf18>
  805df8:	003fe306 	br	805d88 <__svfscanf_r+0xf28>
  805dfc:	d880a417 	ldw	r2,656(sp)
  805e00:	d980a317 	ldw	r6,652(sp)
  805e04:	01400044 	movi	r5,1
  805e08:	11000017 	ldw	r4,0(r2)
  805e0c:	800f883a 	mov	r7,r16
  805e10:	08082b00 	call	8082b0 <fread>
  805e14:	103c6726 	beq	r2,zero,804fb4 <__svfscanf_r+0x154>
  805e18:	d8c0a417 	ldw	r3,656(sp)
  805e1c:	d900a217 	ldw	r4,648(sp)
  805e20:	88a3883a 	add	r17,r17,r2
  805e24:	18c00104 	addi	r3,r3,4
  805e28:	21000044 	addi	r4,r4,1
  805e2c:	d8c0a415 	stw	r3,656(sp)
  805e30:	d900a215 	stw	r4,648(sp)
  805e34:	003c1d06 	br	804eac <__svfscanf_r+0x4c>
  805e38:	a880400c 	andi	r2,r21,256
  805e3c:	10000b26 	beq	r2,zero,805e6c <__svfscanf_r+0x100c>
  805e40:	00bfdfc4 	movi	r2,-129
  805e44:	a8aa703a 	and	r21,r21,r2
  805e48:	d8809e17 	ldw	r2,632(sp)
  805e4c:	10800044 	addi	r2,r2,1
  805e50:	d8809e15 	stw	r2,632(sp)
  805e54:	983fc026 	beq	r19,zero,805d58 <__svfscanf_r+0xef8>
  805e58:	d8c0a317 	ldw	r3,652(sp)
  805e5c:	9cffffc4 	addi	r19,r19,-1
  805e60:	18c00044 	addi	r3,r3,1
  805e64:	d8c0a315 	stw	r3,652(sp)
  805e68:	003fbb06 	br	805d58 <__svfscanf_r+0xef8>
  805e6c:	e0803fcc 	andi	r2,fp,255
  805e70:	1080201c 	xori	r2,r2,128
  805e74:	10bfe004 	addi	r2,r2,-128
  805e78:	9085883a 	add	r2,r18,r2
  805e7c:	103fc21e 	bne	r2,zero,805d88 <__svfscanf_r+0xf28>
  805e80:	00bf9fc4 	movi	r2,-385
  805e84:	a8aa703a 	and	r21,r21,r2
  805e88:	003fb106 	br	805d50 <__svfscanf_r+0xef0>
  805e8c:	00800044 	movi	r2,1
  805e90:	90bfbd1e 	bne	r18,r2,805d88 <__svfscanf_r+0xf28>
  805e94:	04800084 	movi	r18,2
  805e98:	003fad06 	br	805d50 <__svfscanf_r+0xef0>
  805e9c:	a8c1400c 	andi	r3,r21,1280
  805ea0:	00810004 	movi	r2,1024
  805ea4:	18800426 	beq	r3,r2,805eb8 <__svfscanf_r+0x1058>
  805ea8:	a884703a 	and	r2,r21,r2
  805eac:	103fb626 	beq	r2,zero,805d88 <__svfscanf_r+0xf28>
  805eb0:	d8809e17 	ldw	r2,632(sp)
  805eb4:	103fb826 	beq	r2,zero,805d98 <__svfscanf_r+0xf38>
  805eb8:	a880800c 	andi	r2,r21,512
  805ebc:	1000051e 	bne	r2,zero,805ed4 <__svfscanf_r+0x1074>
  805ec0:	d8c09e17 	ldw	r3,632(sp)
  805ec4:	d9009f17 	ldw	r4,636(sp)
  805ec8:	ddc09c15 	stw	r23,624(sp)
  805ecc:	1907c83a 	sub	r3,r3,r4
  805ed0:	d8c09d15 	stw	r3,628(sp)
  805ed4:	00be7fc4 	movi	r2,-1537
  805ed8:	a884703a 	and	r2,r21,r2
  805edc:	15406014 	ori	r21,r2,384
  805ee0:	d8009e15 	stw	zero,632(sp)
  805ee4:	003f9a06 	br	805d50 <__svfscanf_r+0xef0>
  805ee8:	e0c03fcc 	andi	r3,fp,255
  805eec:	18c0201c 	xori	r3,r3,128
  805ef0:	18ffe004 	addi	r3,r3,-128
  805ef4:	00800084 	movi	r2,2
  805ef8:	18bfa31e 	bne	r3,r2,805d88 <__svfscanf_r+0xf28>
  805efc:	070000c4 	movi	fp,3
  805f00:	003f9306 	br	805d50 <__svfscanf_r+0xef0>
  805f04:	e0c03fcc 	andi	r3,fp,255
  805f08:	18c0201c 	xori	r3,r3,128
  805f0c:	18ffe004 	addi	r3,r3,-128
  805f10:	008001c4 	movi	r2,7
  805f14:	18bf9c1e 	bne	r3,r2,805d88 <__svfscanf_r+0xf28>
  805f18:	07000204 	movi	fp,8
  805f1c:	003f8c06 	br	805d50 <__svfscanf_r+0xef0>
  805f20:	d8c09e17 	ldw	r3,632(sp)
  805f24:	d9009f17 	ldw	r4,636(sp)
  805f28:	1905c83a 	sub	r2,r3,r4
  805f2c:	103ecb26 	beq	r2,zero,805a5c <__svfscanf_r+0xbfc>
  805f30:	008dc83a 	sub	r6,zero,r2
  805f34:	ddc09c15 	stw	r23,624(sp)
  805f38:	003ef506 	br	805b10 <__svfscanf_r+0xcb0>
  805f3c:	d880a417 	ldw	r2,656(sp)
  805f40:	9009883a 	mov	r4,r18
  805f44:	180b883a 	mov	r5,r3
  805f48:	15c00017 	ldw	r23,0(r2)
  805f4c:	15400104 	addi	r21,r2,4
  805f50:	080a5ec0 	call	80a5ec <__isnand>
  805f54:	1000311e 	bne	r2,zero,80601c <__svfscanf_r+0x11bc>
  805f58:	980b883a 	mov	r5,r19
  805f5c:	9009883a 	mov	r4,r18
  805f60:	080fb380 	call	80fb38 <__truncdfsf2>
  805f64:	b8800015 	stw	r2,0(r23)
  805f68:	003eca06 	br	805a94 <__svfscanf_r+0xc34>
  805f6c:	9000101e 	bne	r18,zero,805fb0 <__svfscanf_r+0x1150>
  805f70:	a8c1c00c 	andi	r3,r21,1792
  805f74:	0081c004 	movi	r2,1792
  805f78:	18800926 	beq	r3,r2,805fa0 <__svfscanf_r+0x1140>
  805f7c:	e0c03fcc 	andi	r3,fp,255
  805f80:	18c0201c 	xori	r3,r3,128
  805f84:	18ffe004 	addi	r3,r3,-128
  805f88:	00800044 	movi	r2,1
  805f8c:	18800226 	beq	r3,r2,805f98 <__svfscanf_r+0x1138>
  805f90:	00800104 	movi	r2,4
  805f94:	18bf7c1e 	bne	r3,r2,805d88 <__svfscanf_r+0xf28>
  805f98:	e7000044 	addi	fp,fp,1
  805f9c:	003f6c06 	br	805d50 <__svfscanf_r+0xef0>
  805fa0:	00be1fc4 	movi	r2,-1921
  805fa4:	a8aa703a 	and	r21,r21,r2
  805fa8:	04800044 	movi	r18,1
  805fac:	003f6806 	br	805d50 <__svfscanf_r+0xef0>
  805fb0:	00800084 	movi	r2,2
  805fb4:	90bff11e 	bne	r18,r2,805f7c <__svfscanf_r+0x111c>
  805fb8:	048000c4 	movi	r18,3
  805fbc:	003f6406 	br	805d50 <__svfscanf_r+0xef0>
  805fc0:	e0c03fcc 	andi	r3,fp,255
  805fc4:	18c0201c 	xori	r3,r3,128
  805fc8:	18ffe004 	addi	r3,r3,-128
  805fcc:	1800071e 	bne	r3,zero,805fec <__svfscanf_r+0x118c>
  805fd0:	a8c1c00c 	andi	r3,r21,1792
  805fd4:	0081c004 	movi	r2,1792
  805fd8:	18bf6b1e 	bne	r3,r2,805d88 <__svfscanf_r+0xf28>
  805fdc:	00be1fc4 	movi	r2,-1921
  805fe0:	a8aa703a 	and	r21,r21,r2
  805fe4:	07000044 	movi	fp,1
  805fe8:	003f5906 	br	805d50 <__svfscanf_r+0xef0>
  805fec:	008000c4 	movi	r2,3
  805ff0:	18bfe926 	beq	r3,r2,805f98 <__svfscanf_r+0x1138>
  805ff4:	00800144 	movi	r2,5
  805ff8:	18bfe726 	beq	r3,r2,805f98 <__svfscanf_r+0x1138>
  805ffc:	003f6206 	br	805d88 <__svfscanf_r+0xf28>
  806000:	e0c03fcc 	andi	r3,fp,255
  806004:	18c0201c 	xori	r3,r3,128
  806008:	18ffe004 	addi	r3,r3,-128
  80600c:	00800184 	movi	r2,6
  806010:	18bf5d1e 	bne	r3,r2,805d88 <__svfscanf_r+0xf28>
  806014:	070001c4 	movi	fp,7
  806018:	003f4d06 	br	805d50 <__svfscanf_r+0xef0>
  80601c:	0009883a 	mov	r4,zero
  806020:	080a6dc0 	call	80a6dc <nanf>
  806024:	b8800015 	stw	r2,0(r23)
  806028:	003e9a06 	br	805a94 <__svfscanf_r+0xc34>
  80602c:	a00b883a 	mov	r5,r20
  806030:	d9000404 	addi	r4,sp,16
  806034:	080a61c0 	call	80a61c <__sccl>
  806038:	1029883a 	mov	r20,r2
  80603c:	ad401014 	ori	r21,r21,64
  806040:	04800044 	movi	r18,1
  806044:	003c7506 	br	80521c <__svfscanf_r+0x3bc>
  806048:	01000204 	movi	r4,8
  80604c:	00802074 	movhi	r2,129
  806050:	10b15504 	addi	r2,r2,-15020
  806054:	ad400054 	ori	r21,r21,1
  806058:	048000c4 	movi	r18,3
  80605c:	d900a115 	stw	r4,644(sp)
  806060:	d880a015 	stw	r2,640(sp)
  806064:	003c6d06 	br	80521c <__svfscanf_r+0x3bc>
  806068:	ad400094 	ori	r21,r21,2
  80606c:	003bd806 	br	804fd0 <__svfscanf_r+0x170>
  806070:	d900a317 	ldw	r4,652(sp)
  806074:	01400284 	movi	r5,10
  806078:	080fe8c0 	call	80fe8c <__mulsi3>
  80607c:	15c5883a 	add	r2,r2,r23
  806080:	10bff404 	addi	r2,r2,-48
  806084:	d880a315 	stw	r2,652(sp)
  806088:	003bd106 	br	804fd0 <__svfscanf_r+0x170>
  80608c:	ad400414 	ori	r21,r21,16
  806090:	003bcf06 	br	804fd0 <__svfscanf_r+0x170>
  806094:	00800404 	movi	r2,16
  806098:	00c02074 	movhi	r3,129
  80609c:	18f15504 	addi	r3,r3,-15020
  8060a0:	ad408014 	ori	r21,r21,512
  8060a4:	048000c4 	movi	r18,3
  8060a8:	d880a115 	stw	r2,644(sp)
  8060ac:	d8c0a015 	stw	r3,640(sp)
  8060b0:	003c5a06 	br	80521c <__svfscanf_r+0x3bc>
  8060b4:	00c00284 	movi	r3,10
  8060b8:	01002074 	movhi	r4,129
  8060bc:	21315504 	addi	r4,r4,-15020
  8060c0:	048000c4 	movi	r18,3
  8060c4:	d8c0a115 	stw	r3,644(sp)
  8060c8:	d900a015 	stw	r4,640(sp)
  8060cc:	003c5306 	br	80521c <__svfscanf_r+0x3bc>
  8060d0:	00c02074 	movhi	r3,129
  8060d4:	18eff204 	addi	r3,r3,-16440
  8060d8:	048000c4 	movi	r18,3
  8060dc:	d8c0a015 	stw	r3,640(sp)
  8060e0:	d800a115 	stw	zero,644(sp)
  8060e4:	003c4d06 	br	80521c <__svfscanf_r+0x3bc>
  8060e8:	d8c0a117 	ldw	r3,644(sp)
  8060ec:	18c5883a 	add	r2,r3,r3
  8060f0:	00c02074 	movhi	r3,129
  8060f4:	18d21d84 	addi	r3,r3,18550
  8060f8:	10c5883a 	add	r2,r2,r3
  8060fc:	1080000f 	ldh	r2,0(r2)
  806100:	00fd1fc4 	movi	r3,-2945
  806104:	90e4703a 	and	r18,r18,r3
  806108:	d880a115 	stw	r2,644(sp)
  80610c:	003de806 	br	8058b0 <__svfscanf_r+0xa50>
  806110:	d900a117 	ldw	r4,644(sp)
  806114:	00c02074 	movhi	r3,129
  806118:	18d21d84 	addi	r3,r3,18550
  80611c:	2105883a 	add	r2,r4,r4
  806120:	10c5883a 	add	r2,r2,r3
  806124:	1080000f 	ldh	r2,0(r2)
  806128:	00c00204 	movi	r3,8
  80612c:	d880a115 	stw	r2,644(sp)
  806130:	18bd870e 	bge	r3,r2,805750 <__svfscanf_r+0x8f0>
  806134:	00bd1fc4 	movi	r2,-2945
  806138:	90a4703a 	and	r18,r18,r2
  80613c:	003ddc06 	br	8058b0 <__svfscanf_r+0xa50>
  806140:	d8c0a117 	ldw	r3,644(sp)
  806144:	00800284 	movi	r2,10
  806148:	10fffa16 	blt	r2,r3,806134 <__svfscanf_r+0x12d4>
  80614c:	003d8006 	br	805750 <__svfscanf_r+0x8f0>
  806150:	90c1800c 	andi	r3,r18,1536
  806154:	00808004 	movi	r2,512
  806158:	18bd7d1e 	bne	r3,r2,805750 <__svfscanf_r+0x8f0>
  80615c:	00bf7fc4 	movi	r2,-513
  806160:	9084703a 	and	r2,r18,r2
  806164:	01000404 	movi	r4,16
  806168:	14814014 	ori	r18,r2,1280
  80616c:	d900a115 	stw	r4,644(sp)
  806170:	003dcf06 	br	8058b0 <__svfscanf_r+0xa50>
  806174:	04800104 	movi	r18,4
  806178:	003c2806 	br	80521c <__svfscanf_r+0x3bc>
  80617c:	ad401014 	ori	r21,r21,64
  806180:	0025883a 	mov	r18,zero
  806184:	003c2506 	br	80521c <__svfscanf_r+0x3bc>
  806188:	ad400114 	ori	r21,r21,4
  80618c:	003b9006 	br	804fd0 <__svfscanf_r+0x170>
  806190:	0027883a 	mov	r19,zero
  806194:	003cac06 	br	805448 <__svfscanf_r+0x5e8>
  806198:	903d5226 	beq	r18,zero,8056e4 <__svfscanf_r+0x884>
  80619c:	94bfffc4 	addi	r18,r18,-1
  8061a0:	d8c04404 	addi	r3,sp,272
  8061a4:	1c85883a 	add	r2,r3,r18
  8061a8:	11400003 	ldbu	r5,0(r2)
  8061ac:	b009883a 	mov	r4,r22
  8061b0:	800d883a 	mov	r6,r16
  8061b4:	080cb840 	call	80cb84 <_ungetc_r>
  8061b8:	003ff706 	br	806198 <__svfscanf_r+0x1338>
  8061bc:	00bfff84 	movi	r2,-2
  8061c0:	18bd361e 	bne	r3,r2,80569c <__svfscanf_r+0x83c>
  8061c4:	003d4006 	br	8056c8 <__svfscanf_r+0x868>
  8061c8:	d900a417 	ldw	r4,656(sp)
  8061cc:	25400017 	ldw	r21,0(r4)
  8061d0:	21000104 	addi	r4,r4,4
  8061d4:	d900a415 	stw	r4,656(sp)
  8061d8:	003d0606 	br	8055f4 <__svfscanf_r+0x794>
  8061dc:	983b5526 	beq	r19,zero,804f34 <__svfscanf_r+0xd4>
  8061e0:	8ce3883a 	add	r17,r17,r19
  8061e4:	003b3106 	br	804eac <__svfscanf_r+0x4c>
  8061e8:	00bfff84 	movi	r2,-2
  8061ec:	18bc621e 	bne	r3,r2,805378 <__svfscanf_r+0x518>
  8061f0:	003c6906 	br	805398 <__svfscanf_r+0x538>
  8061f4:	b009883a 	mov	r4,r22
  8061f8:	800b883a 	mov	r5,r16
  8061fc:	080299c0 	call	80299c <__srefill_r>
  806200:	103c6726 	beq	r2,zero,8053a0 <__svfscanf_r+0x540>
  806204:	903b6b1e 	bne	r18,zero,804fb4 <__svfscanf_r+0x154>
  806208:	a83b281e 	bne	r21,zero,804eac <__svfscanf_r+0x4c>
  80620c:	d8c0a217 	ldw	r3,648(sp)
  806210:	18c00044 	addi	r3,r3,1
  806214:	d8c0a215 	stw	r3,648(sp)
  806218:	003b2406 	br	804eac <__svfscanf_r+0x4c>
  80621c:	8080030b 	ldhu	r2,12(r16)
  806220:	1080100c 	andi	r2,r2,64
  806224:	103b4326 	beq	r2,zero,804f34 <__svfscanf_r+0xd4>
  806228:	003b6406 	br	804fbc <__svfscanf_r+0x15c>
  80622c:	d8c0a417 	ldw	r3,656(sp)
  806230:	1cc00017 	ldw	r19,0(r3)
  806234:	18c00104 	addi	r3,r3,4
  806238:	d8c0a415 	stw	r3,656(sp)
  80623c:	003c2906 	br	8052e4 <__svfscanf_r+0x484>
  806240:	00800204 	movi	r2,8
  806244:	00c02074 	movhi	r3,129
  806248:	18f15504 	addi	r3,r3,-15020
  80624c:	048000c4 	movi	r18,3
  806250:	d880a115 	stw	r2,644(sp)
  806254:	d8c0a015 	stw	r3,640(sp)
  806258:	003bf006 	br	80521c <__svfscanf_r+0x3bc>
  80625c:	04800084 	movi	r18,2
  806260:	003bee06 	br	80521c <__svfscanf_r+0x3bc>
  806264:	01000404 	movi	r4,16
  806268:	00802074 	movhi	r2,129
  80626c:	10b15504 	addi	r2,r2,-15020
  806270:	ad408814 	ori	r21,r21,544
  806274:	048000c4 	movi	r18,3
  806278:	d900a115 	stw	r4,644(sp)
  80627c:	d880a015 	stw	r2,640(sp)
  806280:	003be606 	br	80521c <__svfscanf_r+0x3bc>
  806284:	a880040c 	andi	r2,r21,16
  806288:	103b081e 	bne	r2,zero,804eac <__svfscanf_r+0x4c>
  80628c:	a880010c 	andi	r2,r21,4
  806290:	10004e26 	beq	r2,zero,8063cc <__svfscanf_r+0x156c>
  806294:	d8c0a417 	ldw	r3,656(sp)
  806298:	18800017 	ldw	r2,0(r3)
  80629c:	18c00104 	addi	r3,r3,4
  8062a0:	d8c0a415 	stw	r3,656(sp)
  8062a4:	1440000d 	sth	r17,0(r2)
  8062a8:	003b0006 	br	804eac <__svfscanf_r+0x4c>
  8062ac:	d880a417 	ldw	r2,656(sp)
  8062b0:	dd400404 	addi	r21,sp,16
  8062b4:	14800017 	ldw	r18,0(r2)
  8062b8:	9027883a 	mov	r19,r18
  8062bc:	81000017 	ldw	r4,0(r16)
  8062c0:	20800003 	ldbu	r2,0(r4)
  8062c4:	a885883a 	add	r2,r21,r2
  8062c8:	10c00007 	ldb	r3,0(r2)
  8062cc:	18001426 	beq	r3,zero,806320 <__svfscanf_r+0x14c0>
  8062d0:	d8c0a317 	ldw	r3,652(sp)
  8062d4:	80800117 	ldw	r2,4(r16)
  8062d8:	21800044 	addi	r6,r4,1
  8062dc:	18ffffc4 	addi	r3,r3,-1
  8062e0:	d8c0a315 	stw	r3,652(sp)
  8062e4:	10ffffc4 	addi	r3,r2,-1
  8062e8:	80c00115 	stw	r3,4(r16)
  8062ec:	20800003 	ldbu	r2,0(r4)
  8062f0:	90800005 	stb	r2,0(r18)
  8062f4:	d900a317 	ldw	r4,652(sp)
  8062f8:	81800015 	stw	r6,0(r16)
  8062fc:	94800044 	addi	r18,r18,1
  806300:	20000726 	beq	r4,zero,806320 <__svfscanf_r+0x14c0>
  806304:	80800117 	ldw	r2,4(r16)
  806308:	00bfec16 	blt	zero,r2,8062bc <__svfscanf_r+0x145c>
  80630c:	b009883a 	mov	r4,r22
  806310:	800b883a 	mov	r5,r16
  806314:	080299c0 	call	80299c <__srefill_r>
  806318:	103fe826 	beq	r2,zero,8062bc <__svfscanf_r+0x145c>
  80631c:	9cbb2526 	beq	r19,r18,804fb4 <__svfscanf_r+0x154>
  806320:	94e7c83a 	sub	r19,r18,r19
  806324:	983b0326 	beq	r19,zero,804f34 <__svfscanf_r+0xd4>
  806328:	90000005 	stb	zero,0(r18)
  80632c:	d880a417 	ldw	r2,656(sp)
  806330:	d8c0a217 	ldw	r3,648(sp)
  806334:	8ce3883a 	add	r17,r17,r19
  806338:	10800104 	addi	r2,r2,4
  80633c:	18c00044 	addi	r3,r3,1
  806340:	d880a415 	stw	r2,656(sp)
  806344:	d8c0a215 	stw	r3,648(sp)
  806348:	003ad806 	br	804eac <__svfscanf_r+0x4c>
  80634c:	d900a517 	ldw	r4,660(sp)
  806350:	25faf82e 	bgeu	r4,r23,804f34 <__svfscanf_r+0xd4>
  806354:	bdffffc4 	addi	r23,r23,-1
  806358:	b9400007 	ldb	r5,0(r23)
  80635c:	b009883a 	mov	r4,r22
  806360:	800d883a 	mov	r6,r16
  806364:	080cb840 	call	80cb84 <_ungetc_r>
  806368:	d8c0a517 	ldw	r3,660(sp)
  80636c:	1dfff936 	bltu	r3,r23,806354 <__svfscanf_r+0x14f4>
  806370:	003af006 	br	804f34 <__svfscanf_r+0xd4>
  806374:	a880040c 	andi	r2,r21,16
  806378:	10002d26 	beq	r2,zero,806430 <__svfscanf_r+0x15d0>
  80637c:	0025883a 	mov	r18,zero
  806380:	00000906 	br	8063a8 <__svfscanf_r+0x1548>
  806384:	80c00117 	ldw	r3,4(r16)
  806388:	d880a317 	ldw	r2,652(sp)
  80638c:	29800044 	addi	r6,r5,1
  806390:	18ffffc4 	addi	r3,r3,-1
  806394:	94800044 	addi	r18,r18,1
  806398:	81800015 	stw	r6,0(r16)
  80639c:	80c00115 	stw	r3,4(r16)
  8063a0:	14800826 	beq	r2,r18,8063c4 <__svfscanf_r+0x1564>
  8063a4:	00c0120e 	bge	zero,r3,8063f0 <__svfscanf_r+0x1590>
  8063a8:	81400017 	ldw	r5,0(r16)
  8063ac:	98800017 	ldw	r2,0(r19)
  8063b0:	28c00003 	ldbu	r3,0(r5)
  8063b4:	1887883a 	add	r3,r3,r2
  8063b8:	19000003 	ldbu	r4,0(r3)
  8063bc:	2100020c 	andi	r4,r4,8
  8063c0:	203ff026 	beq	r4,zero,806384 <__svfscanf_r+0x1524>
  8063c4:	8ca3883a 	add	r17,r17,r18
  8063c8:	003ab806 	br	804eac <__svfscanf_r+0x4c>
  8063cc:	a880004c 	andi	r2,r21,1
  8063d0:	1005003a 	cmpeq	r2,r2,zero
  8063d4:	10000b1e 	bne	r2,zero,806404 <__svfscanf_r+0x15a4>
  8063d8:	d900a417 	ldw	r4,656(sp)
  8063dc:	20800017 	ldw	r2,0(r4)
  8063e0:	21000104 	addi	r4,r4,4
  8063e4:	d900a415 	stw	r4,656(sp)
  8063e8:	14400015 	stw	r17,0(r2)
  8063ec:	003aaf06 	br	804eac <__svfscanf_r+0x4c>
  8063f0:	b009883a 	mov	r4,r22
  8063f4:	800b883a 	mov	r5,r16
  8063f8:	080299c0 	call	80299c <__srefill_r>
  8063fc:	103fea26 	beq	r2,zero,8063a8 <__svfscanf_r+0x1548>
  806400:	003ff006 	br	8063c4 <__svfscanf_r+0x1564>
  806404:	a880008c 	andi	r2,r21,2
  806408:	10002c26 	beq	r2,zero,8064bc <__svfscanf_r+0x165c>
  80640c:	d8c0a417 	ldw	r3,656(sp)
  806410:	d900a417 	ldw	r4,656(sp)
  806414:	18800017 	ldw	r2,0(r3)
  806418:	8807d7fa 	srai	r3,r17,31
  80641c:	21000104 	addi	r4,r4,4
  806420:	d900a415 	stw	r4,656(sp)
  806424:	14400015 	stw	r17,0(r2)
  806428:	10c00115 	stw	r3,4(r2)
  80642c:	003a9f06 	br	804eac <__svfscanf_r+0x4c>
  806430:	d8c0a417 	ldw	r3,656(sp)
  806434:	1d400017 	ldw	r21,0(r3)
  806438:	a825883a 	mov	r18,r21
  80643c:	00000e06 	br	806478 <__svfscanf_r+0x1618>
  806440:	80800117 	ldw	r2,4(r16)
  806444:	d900a317 	ldw	r4,652(sp)
  806448:	29800044 	addi	r6,r5,1
  80644c:	10ffffc4 	addi	r3,r2,-1
  806450:	213fffc4 	addi	r4,r4,-1
  806454:	d900a315 	stw	r4,652(sp)
  806458:	80c00115 	stw	r3,4(r16)
  80645c:	28800003 	ldbu	r2,0(r5)
  806460:	90800005 	stb	r2,0(r18)
  806464:	81800015 	stw	r6,0(r16)
  806468:	94800044 	addi	r18,r18,1
  80646c:	20000926 	beq	r4,zero,806494 <__svfscanf_r+0x1634>
  806470:	80800117 	ldw	r2,4(r16)
  806474:	0080170e 	bge	zero,r2,8064d4 <__svfscanf_r+0x1674>
  806478:	81400017 	ldw	r5,0(r16)
  80647c:	98800017 	ldw	r2,0(r19)
  806480:	28c00003 	ldbu	r3,0(r5)
  806484:	1887883a 	add	r3,r3,r2
  806488:	19000003 	ldbu	r4,0(r3)
  80648c:	2100020c 	andi	r4,r4,8
  806490:	203feb26 	beq	r4,zero,806440 <__svfscanf_r+0x15e0>
  806494:	9545c83a 	sub	r2,r18,r21
  806498:	d8c0a217 	ldw	r3,648(sp)
  80649c:	88a3883a 	add	r17,r17,r2
  8064a0:	d880a417 	ldw	r2,656(sp)
  8064a4:	18c00044 	addi	r3,r3,1
  8064a8:	d8c0a215 	stw	r3,648(sp)
  8064ac:	10800104 	addi	r2,r2,4
  8064b0:	d880a415 	stw	r2,656(sp)
  8064b4:	90000005 	stb	zero,0(r18)
  8064b8:	003a7c06 	br	804eac <__svfscanf_r+0x4c>
  8064bc:	d8c0a417 	ldw	r3,656(sp)
  8064c0:	18800017 	ldw	r2,0(r3)
  8064c4:	18c00104 	addi	r3,r3,4
  8064c8:	d8c0a415 	stw	r3,656(sp)
  8064cc:	14400015 	stw	r17,0(r2)
  8064d0:	003a7606 	br	804eac <__svfscanf_r+0x4c>
  8064d4:	b009883a 	mov	r4,r22
  8064d8:	800b883a 	mov	r5,r16
  8064dc:	080299c0 	call	80299c <__srefill_r>
  8064e0:	103fe526 	beq	r2,zero,806478 <__svfscanf_r+0x1618>
  8064e4:	003feb06 	br	806494 <__svfscanf_r+0x1634>

008064e8 <__svfscanf>:
  8064e8:	00802074 	movhi	r2,129
  8064ec:	109a6904 	addi	r2,r2,27044
  8064f0:	2013883a 	mov	r9,r4
  8064f4:	11000017 	ldw	r4,0(r2)
  8064f8:	2805883a 	mov	r2,r5
  8064fc:	300f883a 	mov	r7,r6
  806500:	480b883a 	mov	r5,r9
  806504:	100d883a 	mov	r6,r2
  806508:	0804e601 	jmpi	804e60 <__svfscanf_r>

0080650c <_vfscanf_r>:
  80650c:	defffb04 	addi	sp,sp,-20
  806510:	dcc00315 	stw	r19,12(sp)
  806514:	dc800215 	stw	r18,8(sp)
  806518:	dc400115 	stw	r17,4(sp)
  80651c:	dc000015 	stw	r16,0(sp)
  806520:	dfc00415 	stw	ra,16(sp)
  806524:	2021883a 	mov	r16,r4
  806528:	2823883a 	mov	r17,r5
  80652c:	3025883a 	mov	r18,r6
  806530:	3827883a 	mov	r19,r7
  806534:	20000226 	beq	r4,zero,806540 <_vfscanf_r+0x34>
  806538:	20800e17 	ldw	r2,56(r4)
  80653c:	10000b26 	beq	r2,zero,80656c <_vfscanf_r+0x60>
  806540:	8009883a 	mov	r4,r16
  806544:	880b883a 	mov	r5,r17
  806548:	900d883a 	mov	r6,r18
  80654c:	980f883a 	mov	r7,r19
  806550:	dfc00417 	ldw	ra,16(sp)
  806554:	dcc00317 	ldw	r19,12(sp)
  806558:	dc800217 	ldw	r18,8(sp)
  80655c:	dc400117 	ldw	r17,4(sp)
  806560:	dc000017 	ldw	r16,0(sp)
  806564:	dec00504 	addi	sp,sp,20
  806568:	0804e601 	jmpi	804e60 <__svfscanf_r>
  80656c:	0800dc40 	call	800dc4 <__sinit>
  806570:	003ff306 	br	806540 <_vfscanf_r+0x34>

00806574 <vfscanf>:
  806574:	defffb04 	addi	sp,sp,-20
  806578:	dcc00315 	stw	r19,12(sp)
  80657c:	04c02074 	movhi	r19,129
  806580:	9cda6904 	addi	r19,r19,27044
  806584:	98c00017 	ldw	r3,0(r19)
  806588:	dc800215 	stw	r18,8(sp)
  80658c:	dc400115 	stw	r17,4(sp)
  806590:	dc000015 	stw	r16,0(sp)
  806594:	dfc00415 	stw	ra,16(sp)
  806598:	2021883a 	mov	r16,r4
  80659c:	2823883a 	mov	r17,r5
  8065a0:	3025883a 	mov	r18,r6
  8065a4:	18000326 	beq	r3,zero,8065b4 <vfscanf+0x40>
  8065a8:	18800e17 	ldw	r2,56(r3)
  8065ac:	1809883a 	mov	r4,r3
  8065b0:	10000b26 	beq	r2,zero,8065e0 <vfscanf+0x6c>
  8065b4:	99000017 	ldw	r4,0(r19)
  8065b8:	800b883a 	mov	r5,r16
  8065bc:	880d883a 	mov	r6,r17
  8065c0:	900f883a 	mov	r7,r18
  8065c4:	dfc00417 	ldw	ra,16(sp)
  8065c8:	dcc00317 	ldw	r19,12(sp)
  8065cc:	dc800217 	ldw	r18,8(sp)
  8065d0:	dc400117 	ldw	r17,4(sp)
  8065d4:	dc000017 	ldw	r16,0(sp)
  8065d8:	dec00504 	addi	sp,sp,20
  8065dc:	0804e601 	jmpi	804e60 <__svfscanf_r>
  8065e0:	0800dc40 	call	800dc4 <__sinit>
  8065e4:	003ff306 	br	8065b4 <vfscanf+0x40>

008065e8 <_write_r>:
  8065e8:	defffd04 	addi	sp,sp,-12
  8065ec:	dc000015 	stw	r16,0(sp)
  8065f0:	040020b4 	movhi	r16,130
  8065f4:	84216b04 	addi	r16,r16,-31316
  8065f8:	dc400115 	stw	r17,4(sp)
  8065fc:	80000015 	stw	zero,0(r16)
  806600:	2023883a 	mov	r17,r4
  806604:	2809883a 	mov	r4,r5
  806608:	300b883a 	mov	r5,r6
  80660c:	380d883a 	mov	r6,r7
  806610:	dfc00215 	stw	ra,8(sp)
  806614:	08116c00 	call	8116c0 <write>
  806618:	1007883a 	mov	r3,r2
  80661c:	00bfffc4 	movi	r2,-1
  806620:	18800626 	beq	r3,r2,80663c <_write_r+0x54>
  806624:	1805883a 	mov	r2,r3
  806628:	dfc00217 	ldw	ra,8(sp)
  80662c:	dc400117 	ldw	r17,4(sp)
  806630:	dc000017 	ldw	r16,0(sp)
  806634:	dec00304 	addi	sp,sp,12
  806638:	f800283a 	ret
  80663c:	80800017 	ldw	r2,0(r16)
  806640:	103ff826 	beq	r2,zero,806624 <_write_r+0x3c>
  806644:	88800015 	stw	r2,0(r17)
  806648:	1805883a 	mov	r2,r3
  80664c:	dfc00217 	ldw	ra,8(sp)
  806650:	dc400117 	ldw	r17,4(sp)
  806654:	dc000017 	ldw	r16,0(sp)
  806658:	dec00304 	addi	sp,sp,12
  80665c:	f800283a 	ret

00806660 <__swsetup_r>:
  806660:	00802074 	movhi	r2,129
  806664:	109a6904 	addi	r2,r2,27044
  806668:	10c00017 	ldw	r3,0(r2)
  80666c:	defffd04 	addi	sp,sp,-12
  806670:	dc400115 	stw	r17,4(sp)
  806674:	dc000015 	stw	r16,0(sp)
  806678:	dfc00215 	stw	ra,8(sp)
  80667c:	2023883a 	mov	r17,r4
  806680:	2821883a 	mov	r16,r5
  806684:	18000226 	beq	r3,zero,806690 <__swsetup_r+0x30>
  806688:	18800e17 	ldw	r2,56(r3)
  80668c:	10001f26 	beq	r2,zero,80670c <__swsetup_r+0xac>
  806690:	8100030b 	ldhu	r4,12(r16)
  806694:	2080020c 	andi	r2,r4,8
  806698:	10002826 	beq	r2,zero,80673c <__swsetup_r+0xdc>
  80669c:	81400417 	ldw	r5,16(r16)
  8066a0:	28001d26 	beq	r5,zero,806718 <__swsetup_r+0xb8>
  8066a4:	2080004c 	andi	r2,r4,1
  8066a8:	1005003a 	cmpeq	r2,r2,zero
  8066ac:	10000b26 	beq	r2,zero,8066dc <__swsetup_r+0x7c>
  8066b0:	2080008c 	andi	r2,r4,2
  8066b4:	10001226 	beq	r2,zero,806700 <__swsetup_r+0xa0>
  8066b8:	0005883a 	mov	r2,zero
  8066bc:	80800215 	stw	r2,8(r16)
  8066c0:	28000b26 	beq	r5,zero,8066f0 <__swsetup_r+0x90>
  8066c4:	0005883a 	mov	r2,zero
  8066c8:	dfc00217 	ldw	ra,8(sp)
  8066cc:	dc400117 	ldw	r17,4(sp)
  8066d0:	dc000017 	ldw	r16,0(sp)
  8066d4:	dec00304 	addi	sp,sp,12
  8066d8:	f800283a 	ret
  8066dc:	80800517 	ldw	r2,20(r16)
  8066e0:	80000215 	stw	zero,8(r16)
  8066e4:	0085c83a 	sub	r2,zero,r2
  8066e8:	80800615 	stw	r2,24(r16)
  8066ec:	283ff51e 	bne	r5,zero,8066c4 <__swsetup_r+0x64>
  8066f0:	2080200c 	andi	r2,r4,128
  8066f4:	103ff326 	beq	r2,zero,8066c4 <__swsetup_r+0x64>
  8066f8:	00bfffc4 	movi	r2,-1
  8066fc:	003ff206 	br	8066c8 <__swsetup_r+0x68>
  806700:	80800517 	ldw	r2,20(r16)
  806704:	80800215 	stw	r2,8(r16)
  806708:	003fed06 	br	8066c0 <__swsetup_r+0x60>
  80670c:	1809883a 	mov	r4,r3
  806710:	0800dc40 	call	800dc4 <__sinit>
  806714:	003fde06 	br	806690 <__swsetup_r+0x30>
  806718:	20c0a00c 	andi	r3,r4,640
  80671c:	00808004 	movi	r2,512
  806720:	18bfe026 	beq	r3,r2,8066a4 <__swsetup_r+0x44>
  806724:	8809883a 	mov	r4,r17
  806728:	800b883a 	mov	r5,r16
  80672c:	0801e680 	call	801e68 <__smakebuf_r>
  806730:	8100030b 	ldhu	r4,12(r16)
  806734:	81400417 	ldw	r5,16(r16)
  806738:	003fda06 	br	8066a4 <__swsetup_r+0x44>
  80673c:	2080040c 	andi	r2,r4,16
  806740:	103fed26 	beq	r2,zero,8066f8 <__swsetup_r+0x98>
  806744:	2080010c 	andi	r2,r4,4
  806748:	10001226 	beq	r2,zero,806794 <__swsetup_r+0x134>
  80674c:	81400c17 	ldw	r5,48(r16)
  806750:	28000526 	beq	r5,zero,806768 <__swsetup_r+0x108>
  806754:	80801004 	addi	r2,r16,64
  806758:	28800226 	beq	r5,r2,806764 <__swsetup_r+0x104>
  80675c:	8809883a 	mov	r4,r17
  806760:	08012ec0 	call	8012ec <_free_r>
  806764:	80000c15 	stw	zero,48(r16)
  806768:	8080030b 	ldhu	r2,12(r16)
  80676c:	81400417 	ldw	r5,16(r16)
  806770:	80000115 	stw	zero,4(r16)
  806774:	10bff6cc 	andi	r2,r2,65499
  806778:	8080030d 	sth	r2,12(r16)
  80677c:	81400015 	stw	r5,0(r16)
  806780:	8080030b 	ldhu	r2,12(r16)
  806784:	10800214 	ori	r2,r2,8
  806788:	113fffcc 	andi	r4,r2,65535
  80678c:	8080030d 	sth	r2,12(r16)
  806790:	003fc306 	br	8066a0 <__swsetup_r+0x40>
  806794:	81400417 	ldw	r5,16(r16)
  806798:	003ff906 	br	806780 <__swsetup_r+0x120>

0080679c <_close_r>:
  80679c:	defffd04 	addi	sp,sp,-12
  8067a0:	dc000015 	stw	r16,0(sp)
  8067a4:	040020b4 	movhi	r16,130
  8067a8:	84216b04 	addi	r16,r16,-31316
  8067ac:	dc400115 	stw	r17,4(sp)
  8067b0:	80000015 	stw	zero,0(r16)
  8067b4:	2023883a 	mov	r17,r4
  8067b8:	2809883a 	mov	r4,r5
  8067bc:	dfc00215 	stw	ra,8(sp)
  8067c0:	08107540 	call	810754 <close>
  8067c4:	1007883a 	mov	r3,r2
  8067c8:	00bfffc4 	movi	r2,-1
  8067cc:	18800626 	beq	r3,r2,8067e8 <_close_r+0x4c>
  8067d0:	1805883a 	mov	r2,r3
  8067d4:	dfc00217 	ldw	ra,8(sp)
  8067d8:	dc400117 	ldw	r17,4(sp)
  8067dc:	dc000017 	ldw	r16,0(sp)
  8067e0:	dec00304 	addi	sp,sp,12
  8067e4:	f800283a 	ret
  8067e8:	80800017 	ldw	r2,0(r16)
  8067ec:	103ff826 	beq	r2,zero,8067d0 <_close_r+0x34>
  8067f0:	88800015 	stw	r2,0(r17)
  8067f4:	1805883a 	mov	r2,r3
  8067f8:	dfc00217 	ldw	ra,8(sp)
  8067fc:	dc400117 	ldw	r17,4(sp)
  806800:	dc000017 	ldw	r16,0(sp)
  806804:	dec00304 	addi	sp,sp,12
  806808:	f800283a 	ret

0080680c <quorem>:
  80680c:	28c00417 	ldw	r3,16(r5)
  806810:	20800417 	ldw	r2,16(r4)
  806814:	defff104 	addi	sp,sp,-60
  806818:	dfc00e15 	stw	ra,56(sp)
  80681c:	df000d15 	stw	fp,52(sp)
  806820:	ddc00c15 	stw	r23,48(sp)
  806824:	dd800b15 	stw	r22,44(sp)
  806828:	dd400a15 	stw	r21,40(sp)
  80682c:	dd000915 	stw	r20,36(sp)
  806830:	dcc00815 	stw	r19,32(sp)
  806834:	dc800715 	stw	r18,28(sp)
  806838:	dc400615 	stw	r17,24(sp)
  80683c:	dc000515 	stw	r16,20(sp)
  806840:	d9000315 	stw	r4,12(sp)
  806844:	d9400415 	stw	r5,16(sp)
  806848:	10c07f16 	blt	r2,r3,806a48 <quorem+0x23c>
  80684c:	1d3fffc4 	addi	r20,r3,-1
  806850:	d8c00417 	ldw	r3,16(sp)
  806854:	d9000317 	ldw	r4,12(sp)
  806858:	a505883a 	add	r2,r20,r20
  80685c:	1085883a 	add	r2,r2,r2
  806860:	1cc00504 	addi	r19,r3,20
  806864:	25c00504 	addi	r23,r4,20
  806868:	98ad883a 	add	r22,r19,r2
  80686c:	15c7883a 	add	r3,r2,r23
  806870:	b1400017 	ldw	r5,0(r22)
  806874:	19000017 	ldw	r4,0(r3)
  806878:	d8c00015 	stw	r3,0(sp)
  80687c:	29400044 	addi	r5,r5,1
  806880:	d9000215 	stw	r4,8(sp)
  806884:	080fe7c0 	call	80fe7c <__udivsi3>
  806888:	1039883a 	mov	fp,r2
  80688c:	10003d1e 	bne	r2,zero,806984 <quorem+0x178>
  806890:	d9400417 	ldw	r5,16(sp)
  806894:	d9000317 	ldw	r4,12(sp)
  806898:	0808e240 	call	808e24 <__mcmp>
  80689c:	10002c16 	blt	r2,zero,806950 <quorem+0x144>
  8068a0:	e7000044 	addi	fp,fp,1
  8068a4:	b80f883a 	mov	r7,r23
  8068a8:	0011883a 	mov	r8,zero
  8068ac:	0009883a 	mov	r4,zero
  8068b0:	99400017 	ldw	r5,0(r19)
  8068b4:	38c00017 	ldw	r3,0(r7)
  8068b8:	9cc00104 	addi	r19,r19,4
  8068bc:	28bfffcc 	andi	r2,r5,65535
  8068c0:	2085883a 	add	r2,r4,r2
  8068c4:	11bfffcc 	andi	r6,r2,65535
  8068c8:	193fffcc 	andi	r4,r3,65535
  8068cc:	1004d43a 	srli	r2,r2,16
  8068d0:	280ad43a 	srli	r5,r5,16
  8068d4:	2189c83a 	sub	r4,r4,r6
  8068d8:	2209883a 	add	r4,r4,r8
  8068dc:	1806d43a 	srli	r3,r3,16
  8068e0:	288b883a 	add	r5,r5,r2
  8068e4:	200dd43a 	srai	r6,r4,16
  8068e8:	28bfffcc 	andi	r2,r5,65535
  8068ec:	1887c83a 	sub	r3,r3,r2
  8068f0:	1987883a 	add	r3,r3,r6
  8068f4:	3900000d 	sth	r4,0(r7)
  8068f8:	38c0008d 	sth	r3,2(r7)
  8068fc:	2808d43a 	srli	r4,r5,16
  806900:	39c00104 	addi	r7,r7,4
  806904:	1811d43a 	srai	r8,r3,16
  806908:	b4ffe92e 	bgeu	r22,r19,8068b0 <quorem+0xa4>
  80690c:	a505883a 	add	r2,r20,r20
  806910:	1085883a 	add	r2,r2,r2
  806914:	b885883a 	add	r2,r23,r2
  806918:	10c00017 	ldw	r3,0(r2)
  80691c:	18000c1e 	bne	r3,zero,806950 <quorem+0x144>
  806920:	113fff04 	addi	r4,r2,-4
  806924:	b900082e 	bgeu	r23,r4,806948 <quorem+0x13c>
  806928:	10bfff17 	ldw	r2,-4(r2)
  80692c:	10000326 	beq	r2,zero,80693c <quorem+0x130>
  806930:	00000506 	br	806948 <quorem+0x13c>
  806934:	20800017 	ldw	r2,0(r4)
  806938:	1000031e 	bne	r2,zero,806948 <quorem+0x13c>
  80693c:	213fff04 	addi	r4,r4,-4
  806940:	a53fffc4 	addi	r20,r20,-1
  806944:	b93ffb36 	bltu	r23,r4,806934 <quorem+0x128>
  806948:	d9000317 	ldw	r4,12(sp)
  80694c:	25000415 	stw	r20,16(r4)
  806950:	e005883a 	mov	r2,fp
  806954:	dfc00e17 	ldw	ra,56(sp)
  806958:	df000d17 	ldw	fp,52(sp)
  80695c:	ddc00c17 	ldw	r23,48(sp)
  806960:	dd800b17 	ldw	r22,44(sp)
  806964:	dd400a17 	ldw	r21,40(sp)
  806968:	dd000917 	ldw	r20,36(sp)
  80696c:	dcc00817 	ldw	r19,32(sp)
  806970:	dc800717 	ldw	r18,28(sp)
  806974:	dc400617 	ldw	r17,24(sp)
  806978:	dc000517 	ldw	r16,20(sp)
  80697c:	dec00f04 	addi	sp,sp,60
  806980:	f800283a 	ret
  806984:	b823883a 	mov	r17,r23
  806988:	9825883a 	mov	r18,r19
  80698c:	d8000115 	stw	zero,4(sp)
  806990:	002b883a 	mov	r21,zero
  806994:	94000017 	ldw	r16,0(r18)
  806998:	e009883a 	mov	r4,fp
  80699c:	94800104 	addi	r18,r18,4
  8069a0:	817fffcc 	andi	r5,r16,65535
  8069a4:	080fe8c0 	call	80fe8c <__mulsi3>
  8069a8:	800ad43a 	srli	r5,r16,16
  8069ac:	e009883a 	mov	r4,fp
  8069b0:	a8a1883a 	add	r16,r21,r2
  8069b4:	080fe8c0 	call	80fe8c <__mulsi3>
  8069b8:	89000017 	ldw	r4,0(r17)
  8069bc:	80ffffcc 	andi	r3,r16,65535
  8069c0:	8020d43a 	srli	r16,r16,16
  8069c4:	217fffcc 	andi	r5,r4,65535
  8069c8:	28cbc83a 	sub	r5,r5,r3
  8069cc:	d8c00117 	ldw	r3,4(sp)
  8069d0:	2008d43a 	srli	r4,r4,16
  8069d4:	1405883a 	add	r2,r2,r16
  8069d8:	28cb883a 	add	r5,r5,r3
  8069dc:	280dd43a 	srai	r6,r5,16
  8069e0:	10ffffcc 	andi	r3,r2,65535
  8069e4:	20c9c83a 	sub	r4,r4,r3
  8069e8:	2189883a 	add	r4,r4,r6
  8069ec:	8900008d 	sth	r4,2(r17)
  8069f0:	2009d43a 	srai	r4,r4,16
  8069f4:	8940000d 	sth	r5,0(r17)
  8069f8:	102ad43a 	srli	r21,r2,16
  8069fc:	8c400104 	addi	r17,r17,4
  806a00:	d9000115 	stw	r4,4(sp)
  806a04:	b4bfe32e 	bgeu	r22,r18,806994 <quorem+0x188>
  806a08:	d9000217 	ldw	r4,8(sp)
  806a0c:	203fa01e 	bne	r4,zero,806890 <quorem+0x84>
  806a10:	d8800017 	ldw	r2,0(sp)
  806a14:	10ffff04 	addi	r3,r2,-4
  806a18:	b8c0082e 	bgeu	r23,r3,806a3c <quorem+0x230>
  806a1c:	10bfff17 	ldw	r2,-4(r2)
  806a20:	10000326 	beq	r2,zero,806a30 <quorem+0x224>
  806a24:	00000506 	br	806a3c <quorem+0x230>
  806a28:	18800017 	ldw	r2,0(r3)
  806a2c:	1000031e 	bne	r2,zero,806a3c <quorem+0x230>
  806a30:	18ffff04 	addi	r3,r3,-4
  806a34:	a53fffc4 	addi	r20,r20,-1
  806a38:	b8fffb36 	bltu	r23,r3,806a28 <quorem+0x21c>
  806a3c:	d8c00317 	ldw	r3,12(sp)
  806a40:	1d000415 	stw	r20,16(r3)
  806a44:	003f9206 	br	806890 <quorem+0x84>
  806a48:	0005883a 	mov	r2,zero
  806a4c:	003fc106 	br	806954 <quorem+0x148>

00806a50 <_dtoa_r>:
  806a50:	22001017 	ldw	r8,64(r4)
  806a54:	deffda04 	addi	sp,sp,-152
  806a58:	dd402115 	stw	r21,132(sp)
  806a5c:	dd002015 	stw	r20,128(sp)
  806a60:	dc801e15 	stw	r18,120(sp)
  806a64:	dc401d15 	stw	r17,116(sp)
  806a68:	dfc02515 	stw	ra,148(sp)
  806a6c:	df002415 	stw	fp,144(sp)
  806a70:	ddc02315 	stw	r23,140(sp)
  806a74:	dd802215 	stw	r22,136(sp)
  806a78:	dcc01f15 	stw	r19,124(sp)
  806a7c:	dc001c15 	stw	r16,112(sp)
  806a80:	d9001615 	stw	r4,88(sp)
  806a84:	3023883a 	mov	r17,r6
  806a88:	2829883a 	mov	r20,r5
  806a8c:	d9c01715 	stw	r7,92(sp)
  806a90:	dc802817 	ldw	r18,160(sp)
  806a94:	302b883a 	mov	r21,r6
  806a98:	40000a26 	beq	r8,zero,806ac4 <_dtoa_r+0x74>
  806a9c:	20801117 	ldw	r2,68(r4)
  806aa0:	400b883a 	mov	r5,r8
  806aa4:	40800115 	stw	r2,4(r8)
  806aa8:	20c01117 	ldw	r3,68(r4)
  806aac:	00800044 	movi	r2,1
  806ab0:	10c4983a 	sll	r2,r2,r3
  806ab4:	40800215 	stw	r2,8(r8)
  806ab8:	0808cc80 	call	808cc8 <_Bfree>
  806abc:	d8c01617 	ldw	r3,88(sp)
  806ac0:	18001015 	stw	zero,64(r3)
  806ac4:	8800a316 	blt	r17,zero,806d54 <_dtoa_r+0x304>
  806ac8:	90000015 	stw	zero,0(r18)
  806acc:	a8dffc2c 	andhi	r3,r21,32752
  806ad0:	009ffc34 	movhi	r2,32752
  806ad4:	18809126 	beq	r3,r2,806d1c <_dtoa_r+0x2cc>
  806ad8:	000d883a 	mov	r6,zero
  806adc:	000f883a 	mov	r7,zero
  806ae0:	a009883a 	mov	r4,r20
  806ae4:	a80b883a 	mov	r5,r21
  806ae8:	dd001215 	stw	r20,72(sp)
  806aec:	dd401315 	stw	r21,76(sp)
  806af0:	080f6c00 	call	80f6c0 <__nedf2>
  806af4:	1000171e 	bne	r2,zero,806b54 <_dtoa_r+0x104>
  806af8:	d9802717 	ldw	r6,156(sp)
  806afc:	00800044 	movi	r2,1
  806b00:	30800015 	stw	r2,0(r6)
  806b04:	d8802917 	ldw	r2,164(sp)
  806b08:	10029b26 	beq	r2,zero,807578 <_dtoa_r+0xb28>
  806b0c:	d9002917 	ldw	r4,164(sp)
  806b10:	00802074 	movhi	r2,129
  806b14:	10921344 	addi	r2,r2,18509
  806b18:	10ffffc4 	addi	r3,r2,-1
  806b1c:	20800015 	stw	r2,0(r4)
  806b20:	1805883a 	mov	r2,r3
  806b24:	dfc02517 	ldw	ra,148(sp)
  806b28:	df002417 	ldw	fp,144(sp)
  806b2c:	ddc02317 	ldw	r23,140(sp)
  806b30:	dd802217 	ldw	r22,136(sp)
  806b34:	dd402117 	ldw	r21,132(sp)
  806b38:	dd002017 	ldw	r20,128(sp)
  806b3c:	dcc01f17 	ldw	r19,124(sp)
  806b40:	dc801e17 	ldw	r18,120(sp)
  806b44:	dc401d17 	ldw	r17,116(sp)
  806b48:	dc001c17 	ldw	r16,112(sp)
  806b4c:	dec02604 	addi	sp,sp,152
  806b50:	f800283a 	ret
  806b54:	d9001617 	ldw	r4,88(sp)
  806b58:	d9401217 	ldw	r5,72(sp)
  806b5c:	d8800104 	addi	r2,sp,4
  806b60:	a80d883a 	mov	r6,r21
  806b64:	d9c00204 	addi	r7,sp,8
  806b68:	d8800015 	stw	r2,0(sp)
  806b6c:	08093040 	call	809304 <__d2b>
  806b70:	d8800715 	stw	r2,28(sp)
  806b74:	a804d53a 	srli	r2,r21,20
  806b78:	1101ffcc 	andi	r4,r2,2047
  806b7c:	20008626 	beq	r4,zero,806d98 <_dtoa_r+0x348>
  806b80:	d8c01217 	ldw	r3,72(sp)
  806b84:	00800434 	movhi	r2,16
  806b88:	10bfffc4 	addi	r2,r2,-1
  806b8c:	ddc00117 	ldw	r23,4(sp)
  806b90:	a884703a 	and	r2,r21,r2
  806b94:	1811883a 	mov	r8,r3
  806b98:	124ffc34 	orhi	r9,r2,16368
  806b9c:	25bf0044 	addi	r22,r4,-1023
  806ba0:	d8000815 	stw	zero,32(sp)
  806ba4:	0005883a 	mov	r2,zero
  806ba8:	00cffe34 	movhi	r3,16376
  806bac:	480b883a 	mov	r5,r9
  806bb0:	4009883a 	mov	r4,r8
  806bb4:	180f883a 	mov	r7,r3
  806bb8:	100d883a 	mov	r6,r2
  806bbc:	080ef280 	call	80ef28 <__subdf3>
  806bc0:	0218dbf4 	movhi	r8,25455
  806bc4:	4210d844 	addi	r8,r8,17249
  806bc8:	024ff4f4 	movhi	r9,16339
  806bcc:	4a61e9c4 	addi	r9,r9,-30809
  806bd0:	480f883a 	mov	r7,r9
  806bd4:	400d883a 	mov	r6,r8
  806bd8:	180b883a 	mov	r5,r3
  806bdc:	1009883a 	mov	r4,r2
  806be0:	080f01c0 	call	80f01c <__muldf3>
  806be4:	0222d874 	movhi	r8,35681
  806be8:	42322cc4 	addi	r8,r8,-14157
  806bec:	024ff1f4 	movhi	r9,16327
  806bf0:	4a628a04 	addi	r9,r9,-30168
  806bf4:	480f883a 	mov	r7,r9
  806bf8:	400d883a 	mov	r6,r8
  806bfc:	180b883a 	mov	r5,r3
  806c00:	1009883a 	mov	r4,r2
  806c04:	080efa80 	call	80efa8 <__adddf3>
  806c08:	b009883a 	mov	r4,r22
  806c0c:	1021883a 	mov	r16,r2
  806c10:	1823883a 	mov	r17,r3
  806c14:	080f9680 	call	80f968 <__floatsidf>
  806c18:	021427f4 	movhi	r8,20639
  806c1c:	421e7ec4 	addi	r8,r8,31227
  806c20:	024ff4f4 	movhi	r9,16339
  806c24:	4a5104c4 	addi	r9,r9,17427
  806c28:	480f883a 	mov	r7,r9
  806c2c:	400d883a 	mov	r6,r8
  806c30:	180b883a 	mov	r5,r3
  806c34:	1009883a 	mov	r4,r2
  806c38:	080f01c0 	call	80f01c <__muldf3>
  806c3c:	180f883a 	mov	r7,r3
  806c40:	880b883a 	mov	r5,r17
  806c44:	100d883a 	mov	r6,r2
  806c48:	8009883a 	mov	r4,r16
  806c4c:	080efa80 	call	80efa8 <__adddf3>
  806c50:	1009883a 	mov	r4,r2
  806c54:	180b883a 	mov	r5,r3
  806c58:	1021883a 	mov	r16,r2
  806c5c:	1823883a 	mov	r17,r3
  806c60:	080fa600 	call	80fa60 <__fixdfsi>
  806c64:	000d883a 	mov	r6,zero
  806c68:	000f883a 	mov	r7,zero
  806c6c:	8009883a 	mov	r4,r16
  806c70:	880b883a 	mov	r5,r17
  806c74:	d8800d15 	stw	r2,52(sp)
  806c78:	080f8580 	call	80f858 <__ltdf2>
  806c7c:	10031716 	blt	r2,zero,8078dc <_dtoa_r+0xe8c>
  806c80:	d8c00d17 	ldw	r3,52(sp)
  806c84:	00800584 	movi	r2,22
  806c88:	10c1482e 	bgeu	r2,r3,8071ac <_dtoa_r+0x75c>
  806c8c:	01000044 	movi	r4,1
  806c90:	d9000c15 	stw	r4,48(sp)
  806c94:	bd85c83a 	sub	r2,r23,r22
  806c98:	11bfffc4 	addi	r6,r2,-1
  806c9c:	30030b16 	blt	r6,zero,8078cc <_dtoa_r+0xe7c>
  806ca0:	d9800a15 	stw	r6,40(sp)
  806ca4:	d8001115 	stw	zero,68(sp)
  806ca8:	d8c00d17 	ldw	r3,52(sp)
  806cac:	1802ff16 	blt	r3,zero,8078ac <_dtoa_r+0xe5c>
  806cb0:	d9000a17 	ldw	r4,40(sp)
  806cb4:	d8c00915 	stw	r3,36(sp)
  806cb8:	d8001015 	stw	zero,64(sp)
  806cbc:	20c9883a 	add	r4,r4,r3
  806cc0:	d9000a15 	stw	r4,40(sp)
  806cc4:	d9001717 	ldw	r4,92(sp)
  806cc8:	00800244 	movi	r2,9
  806ccc:	11004636 	bltu	r2,r4,806de8 <_dtoa_r+0x398>
  806cd0:	00800144 	movi	r2,5
  806cd4:	11020416 	blt	r2,r4,8074e8 <_dtoa_r+0xa98>
  806cd8:	04400044 	movi	r17,1
  806cdc:	d8c01717 	ldw	r3,92(sp)
  806ce0:	00800144 	movi	r2,5
  806ce4:	10c1ed36 	bltu	r2,r3,80749c <_dtoa_r+0xa4c>
  806ce8:	18c5883a 	add	r2,r3,r3
  806cec:	1085883a 	add	r2,r2,r2
  806cf0:	00c02034 	movhi	r3,128
  806cf4:	18db4104 	addi	r3,r3,27908
  806cf8:	10c5883a 	add	r2,r2,r3
  806cfc:	11000017 	ldw	r4,0(r2)
  806d00:	2000683a 	jmp	r4
  806d04:	00806df0 	cmpltui	r2,zero,439
  806d08:	00806df0 	cmpltui	r2,zero,439
  806d0c:	008077f0 	cmpltui	r2,zero,479
  806d10:	008077c8 	cmpgei	r2,zero,479
  806d14:	0080780c 	andi	r2,zero,480
  806d18:	00807818 	cmpnei	r2,zero,480
  806d1c:	d9002717 	ldw	r4,156(sp)
  806d20:	0089c3c4 	movi	r2,9999
  806d24:	20800015 	stw	r2,0(r4)
  806d28:	a0001026 	beq	r20,zero,806d6c <_dtoa_r+0x31c>
  806d2c:	00c02074 	movhi	r3,129
  806d30:	18d2ca04 	addi	r3,r3,19240
  806d34:	d9802917 	ldw	r6,164(sp)
  806d38:	303f7926 	beq	r6,zero,806b20 <_dtoa_r+0xd0>
  806d3c:	188000c7 	ldb	r2,3(r3)
  806d40:	190000c4 	addi	r4,r3,3
  806d44:	1000101e 	bne	r2,zero,806d88 <_dtoa_r+0x338>
  806d48:	d8802917 	ldw	r2,164(sp)
  806d4c:	11000015 	stw	r4,0(r2)
  806d50:	003f7306 	br	806b20 <_dtoa_r+0xd0>
  806d54:	00a00034 	movhi	r2,32768
  806d58:	10bfffc4 	addi	r2,r2,-1
  806d5c:	00c00044 	movi	r3,1
  806d60:	88aa703a 	and	r21,r17,r2
  806d64:	90c00015 	stw	r3,0(r18)
  806d68:	003f5806 	br	806acc <_dtoa_r+0x7c>
  806d6c:	00800434 	movhi	r2,16
  806d70:	10bfffc4 	addi	r2,r2,-1
  806d74:	a884703a 	and	r2,r21,r2
  806d78:	103fec1e 	bne	r2,zero,806d2c <_dtoa_r+0x2dc>
  806d7c:	00c02074 	movhi	r3,129
  806d80:	18d2c704 	addi	r3,r3,19228
  806d84:	003feb06 	br	806d34 <_dtoa_r+0x2e4>
  806d88:	d8802917 	ldw	r2,164(sp)
  806d8c:	19000204 	addi	r4,r3,8
  806d90:	11000015 	stw	r4,0(r2)
  806d94:	003f6206 	br	806b20 <_dtoa_r+0xd0>
  806d98:	ddc00117 	ldw	r23,4(sp)
  806d9c:	d8800217 	ldw	r2,8(sp)
  806da0:	01000804 	movi	r4,32
  806da4:	b8c10c84 	addi	r3,r23,1074
  806da8:	18a3883a 	add	r17,r3,r2
  806dac:	2441b80e 	bge	r4,r17,807490 <_dtoa_r+0xa40>
  806db0:	00c01004 	movi	r3,64
  806db4:	1c47c83a 	sub	r3,r3,r17
  806db8:	88bff804 	addi	r2,r17,-32
  806dbc:	a8c6983a 	sll	r3,r21,r3
  806dc0:	a084d83a 	srl	r2,r20,r2
  806dc4:	1888b03a 	or	r4,r3,r2
  806dc8:	080fbac0 	call	80fbac <__floatunsidf>
  806dcc:	1011883a 	mov	r8,r2
  806dd0:	00bf8434 	movhi	r2,65040
  806dd4:	01000044 	movi	r4,1
  806dd8:	10d3883a 	add	r9,r2,r3
  806ddc:	8dbef344 	addi	r22,r17,-1075
  806de0:	d9000815 	stw	r4,32(sp)
  806de4:	003f6f06 	br	806ba4 <_dtoa_r+0x154>
  806de8:	d8001715 	stw	zero,92(sp)
  806dec:	04400044 	movi	r17,1
  806df0:	00bfffc4 	movi	r2,-1
  806df4:	00c00044 	movi	r3,1
  806df8:	d8800e15 	stw	r2,56(sp)
  806dfc:	d8002615 	stw	zero,152(sp)
  806e00:	d8800f15 	stw	r2,60(sp)
  806e04:	d8c00b15 	stw	r3,44(sp)
  806e08:	1021883a 	mov	r16,r2
  806e0c:	d8801617 	ldw	r2,88(sp)
  806e10:	10001115 	stw	zero,68(r2)
  806e14:	d8801617 	ldw	r2,88(sp)
  806e18:	11401117 	ldw	r5,68(r2)
  806e1c:	1009883a 	mov	r4,r2
  806e20:	08092480 	call	809248 <_Balloc>
  806e24:	d8c01617 	ldw	r3,88(sp)
  806e28:	d8800515 	stw	r2,20(sp)
  806e2c:	18801015 	stw	r2,64(r3)
  806e30:	00800384 	movi	r2,14
  806e34:	14006836 	bltu	r2,r16,806fd8 <_dtoa_r+0x588>
  806e38:	8805003a 	cmpeq	r2,r17,zero
  806e3c:	1000661e 	bne	r2,zero,806fd8 <_dtoa_r+0x588>
  806e40:	d9000d17 	ldw	r4,52(sp)
  806e44:	0102300e 	bge	zero,r4,807708 <_dtoa_r+0xcb8>
  806e48:	208003cc 	andi	r2,r4,15
  806e4c:	100490fa 	slli	r2,r2,3
  806e50:	2025d13a 	srai	r18,r4,4
  806e54:	00c02074 	movhi	r3,129
  806e58:	18d2db04 	addi	r3,r3,19308
  806e5c:	10c5883a 	add	r2,r2,r3
  806e60:	90c0040c 	andi	r3,r18,16
  806e64:	14000017 	ldw	r16,0(r2)
  806e68:	14400117 	ldw	r17,4(r2)
  806e6c:	18036a1e 	bne	r3,zero,807c18 <_dtoa_r+0x11c8>
  806e70:	05800084 	movi	r22,2
  806e74:	90001026 	beq	r18,zero,806eb8 <_dtoa_r+0x468>
  806e78:	04c02074 	movhi	r19,129
  806e7c:	9cd30d04 	addi	r19,r19,19508
  806e80:	9080004c 	andi	r2,r18,1
  806e84:	1005003a 	cmpeq	r2,r2,zero
  806e88:	1000081e 	bne	r2,zero,806eac <_dtoa_r+0x45c>
  806e8c:	99800017 	ldw	r6,0(r19)
  806e90:	99c00117 	ldw	r7,4(r19)
  806e94:	880b883a 	mov	r5,r17
  806e98:	8009883a 	mov	r4,r16
  806e9c:	080f01c0 	call	80f01c <__muldf3>
  806ea0:	1021883a 	mov	r16,r2
  806ea4:	b5800044 	addi	r22,r22,1
  806ea8:	1823883a 	mov	r17,r3
  806eac:	9025d07a 	srai	r18,r18,1
  806eb0:	9cc00204 	addi	r19,r19,8
  806eb4:	903ff21e 	bne	r18,zero,806e80 <_dtoa_r+0x430>
  806eb8:	a80b883a 	mov	r5,r21
  806ebc:	a009883a 	mov	r4,r20
  806ec0:	880f883a 	mov	r7,r17
  806ec4:	800d883a 	mov	r6,r16
  806ec8:	080f3e00 	call	80f3e0 <__divdf3>
  806ecc:	1029883a 	mov	r20,r2
  806ed0:	182b883a 	mov	r21,r3
  806ed4:	d8c00c17 	ldw	r3,48(sp)
  806ed8:	1805003a 	cmpeq	r2,r3,zero
  806edc:	1000081e 	bne	r2,zero,806f00 <_dtoa_r+0x4b0>
  806ee0:	0005883a 	mov	r2,zero
  806ee4:	00cffc34 	movhi	r3,16368
  806ee8:	180f883a 	mov	r7,r3
  806eec:	a009883a 	mov	r4,r20
  806ef0:	a80b883a 	mov	r5,r21
  806ef4:	100d883a 	mov	r6,r2
  806ef8:	080f8580 	call	80f858 <__ltdf2>
  806efc:	1003fe16 	blt	r2,zero,807ef8 <_dtoa_r+0x14a8>
  806f00:	b009883a 	mov	r4,r22
  806f04:	080f9680 	call	80f968 <__floatsidf>
  806f08:	180b883a 	mov	r5,r3
  806f0c:	1009883a 	mov	r4,r2
  806f10:	a00d883a 	mov	r6,r20
  806f14:	a80f883a 	mov	r7,r21
  806f18:	080f01c0 	call	80f01c <__muldf3>
  806f1c:	0011883a 	mov	r8,zero
  806f20:	02500734 	movhi	r9,16412
  806f24:	1009883a 	mov	r4,r2
  806f28:	180b883a 	mov	r5,r3
  806f2c:	480f883a 	mov	r7,r9
  806f30:	400d883a 	mov	r6,r8
  806f34:	080efa80 	call	80efa8 <__adddf3>
  806f38:	d9000f17 	ldw	r4,60(sp)
  806f3c:	102d883a 	mov	r22,r2
  806f40:	00bf3034 	movhi	r2,64704
  806f44:	18b9883a 	add	fp,r3,r2
  806f48:	e02f883a 	mov	r23,fp
  806f4c:	20028f1e 	bne	r4,zero,80798c <_dtoa_r+0xf3c>
  806f50:	0005883a 	mov	r2,zero
  806f54:	00d00534 	movhi	r3,16404
  806f58:	a009883a 	mov	r4,r20
  806f5c:	a80b883a 	mov	r5,r21
  806f60:	180f883a 	mov	r7,r3
  806f64:	100d883a 	mov	r6,r2
  806f68:	080ef280 	call	80ef28 <__subdf3>
  806f6c:	1009883a 	mov	r4,r2
  806f70:	e00f883a 	mov	r7,fp
  806f74:	180b883a 	mov	r5,r3
  806f78:	b00d883a 	mov	r6,r22
  806f7c:	1025883a 	mov	r18,r2
  806f80:	1827883a 	mov	r19,r3
  806f84:	080f7480 	call	80f748 <__gtdf2>
  806f88:	00834f16 	blt	zero,r2,807cc8 <_dtoa_r+0x1278>
  806f8c:	e0e0003c 	xorhi	r3,fp,32768
  806f90:	9009883a 	mov	r4,r18
  806f94:	980b883a 	mov	r5,r19
  806f98:	180f883a 	mov	r7,r3
  806f9c:	b00d883a 	mov	r6,r22
  806fa0:	080f8580 	call	80f858 <__ltdf2>
  806fa4:	1000080e 	bge	r2,zero,806fc8 <_dtoa_r+0x578>
  806fa8:	0027883a 	mov	r19,zero
  806fac:	0025883a 	mov	r18,zero
  806fb0:	d8802617 	ldw	r2,152(sp)
  806fb4:	df000517 	ldw	fp,20(sp)
  806fb8:	d8000615 	stw	zero,24(sp)
  806fbc:	0084303a 	nor	r2,zero,r2
  806fc0:	d8800d15 	stw	r2,52(sp)
  806fc4:	00019b06 	br	807634 <_dtoa_r+0xbe4>
  806fc8:	d9801217 	ldw	r6,72(sp)
  806fcc:	d8801317 	ldw	r2,76(sp)
  806fd0:	3029883a 	mov	r20,r6
  806fd4:	102b883a 	mov	r21,r2
  806fd8:	d8c00217 	ldw	r3,8(sp)
  806fdc:	18008516 	blt	r3,zero,8071f4 <_dtoa_r+0x7a4>
  806fe0:	d9000d17 	ldw	r4,52(sp)
  806fe4:	00800384 	movi	r2,14
  806fe8:	11008216 	blt	r2,r4,8071f4 <_dtoa_r+0x7a4>
  806fec:	200490fa 	slli	r2,r4,3
  806ff0:	d9802617 	ldw	r6,152(sp)
  806ff4:	00c02074 	movhi	r3,129
  806ff8:	18d2db04 	addi	r3,r3,19308
  806ffc:	10c5883a 	add	r2,r2,r3
  807000:	14800017 	ldw	r18,0(r2)
  807004:	14c00117 	ldw	r19,4(r2)
  807008:	30031e16 	blt	r6,zero,807c84 <_dtoa_r+0x1234>
  80700c:	d9000517 	ldw	r4,20(sp)
  807010:	d8c00f17 	ldw	r3,60(sp)
  807014:	a823883a 	mov	r17,r21
  807018:	a021883a 	mov	r16,r20
  80701c:	192b883a 	add	r21,r3,r4
  807020:	2039883a 	mov	fp,r4
  807024:	00000f06 	br	807064 <_dtoa_r+0x614>
  807028:	0005883a 	mov	r2,zero
  80702c:	00d00934 	movhi	r3,16420
  807030:	5009883a 	mov	r4,r10
  807034:	580b883a 	mov	r5,r11
  807038:	180f883a 	mov	r7,r3
  80703c:	100d883a 	mov	r6,r2
  807040:	080f01c0 	call	80f01c <__muldf3>
  807044:	180b883a 	mov	r5,r3
  807048:	000d883a 	mov	r6,zero
  80704c:	000f883a 	mov	r7,zero
  807050:	1009883a 	mov	r4,r2
  807054:	1021883a 	mov	r16,r2
  807058:	1823883a 	mov	r17,r3
  80705c:	080f6c00 	call	80f6c0 <__nedf2>
  807060:	10004526 	beq	r2,zero,807178 <_dtoa_r+0x728>
  807064:	900d883a 	mov	r6,r18
  807068:	980f883a 	mov	r7,r19
  80706c:	8009883a 	mov	r4,r16
  807070:	880b883a 	mov	r5,r17
  807074:	080f3e00 	call	80f3e0 <__divdf3>
  807078:	180b883a 	mov	r5,r3
  80707c:	1009883a 	mov	r4,r2
  807080:	080fa600 	call	80fa60 <__fixdfsi>
  807084:	1009883a 	mov	r4,r2
  807088:	1029883a 	mov	r20,r2
  80708c:	080f9680 	call	80f968 <__floatsidf>
  807090:	180f883a 	mov	r7,r3
  807094:	9009883a 	mov	r4,r18
  807098:	980b883a 	mov	r5,r19
  80709c:	100d883a 	mov	r6,r2
  8070a0:	080f01c0 	call	80f01c <__muldf3>
  8070a4:	180f883a 	mov	r7,r3
  8070a8:	880b883a 	mov	r5,r17
  8070ac:	8009883a 	mov	r4,r16
  8070b0:	100d883a 	mov	r6,r2
  8070b4:	080ef280 	call	80ef28 <__subdf3>
  8070b8:	1015883a 	mov	r10,r2
  8070bc:	a0800c04 	addi	r2,r20,48
  8070c0:	e0800005 	stb	r2,0(fp)
  8070c4:	e7000044 	addi	fp,fp,1
  8070c8:	1817883a 	mov	r11,r3
  8070cc:	e57fd61e 	bne	fp,r21,807028 <_dtoa_r+0x5d8>
  8070d0:	500d883a 	mov	r6,r10
  8070d4:	180f883a 	mov	r7,r3
  8070d8:	5009883a 	mov	r4,r10
  8070dc:	180b883a 	mov	r5,r3
  8070e0:	080efa80 	call	80efa8 <__adddf3>
  8070e4:	100d883a 	mov	r6,r2
  8070e8:	9009883a 	mov	r4,r18
  8070ec:	980b883a 	mov	r5,r19
  8070f0:	180f883a 	mov	r7,r3
  8070f4:	1021883a 	mov	r16,r2
  8070f8:	1823883a 	mov	r17,r3
  8070fc:	080f8580 	call	80f858 <__ltdf2>
  807100:	10000816 	blt	r2,zero,807124 <_dtoa_r+0x6d4>
  807104:	980b883a 	mov	r5,r19
  807108:	800d883a 	mov	r6,r16
  80710c:	880f883a 	mov	r7,r17
  807110:	9009883a 	mov	r4,r18
  807114:	080f6380 	call	80f638 <__eqdf2>
  807118:	1000171e 	bne	r2,zero,807178 <_dtoa_r+0x728>
  80711c:	a080004c 	andi	r2,r20,1
  807120:	10001526 	beq	r2,zero,807178 <_dtoa_r+0x728>
  807124:	d8800d17 	ldw	r2,52(sp)
  807128:	d8800415 	stw	r2,16(sp)
  80712c:	e009883a 	mov	r4,fp
  807130:	213fffc4 	addi	r4,r4,-1
  807134:	20c00007 	ldb	r3,0(r4)
  807138:	00800e44 	movi	r2,57
  80713c:	1880081e 	bne	r3,r2,807160 <_dtoa_r+0x710>
  807140:	d8800517 	ldw	r2,20(sp)
  807144:	113ffa1e 	bne	r2,r4,807130 <_dtoa_r+0x6e0>
  807148:	d8c00417 	ldw	r3,16(sp)
  80714c:	d9800517 	ldw	r6,20(sp)
  807150:	00800c04 	movi	r2,48
  807154:	18c00044 	addi	r3,r3,1
  807158:	d8c00415 	stw	r3,16(sp)
  80715c:	30800005 	stb	r2,0(r6)
  807160:	20800003 	ldbu	r2,0(r4)
  807164:	d8c00417 	ldw	r3,16(sp)
  807168:	27000044 	addi	fp,r4,1
  80716c:	10800044 	addi	r2,r2,1
  807170:	d8c00d15 	stw	r3,52(sp)
  807174:	20800005 	stb	r2,0(r4)
  807178:	d9001617 	ldw	r4,88(sp)
  80717c:	d9400717 	ldw	r5,28(sp)
  807180:	0808cc80 	call	808cc8 <_Bfree>
  807184:	e0000005 	stb	zero,0(fp)
  807188:	d9800d17 	ldw	r6,52(sp)
  80718c:	d8c02717 	ldw	r3,156(sp)
  807190:	d9002917 	ldw	r4,164(sp)
  807194:	30800044 	addi	r2,r6,1
  807198:	18800015 	stw	r2,0(r3)
  80719c:	20029c26 	beq	r4,zero,807c10 <_dtoa_r+0x11c0>
  8071a0:	d8c00517 	ldw	r3,20(sp)
  8071a4:	27000015 	stw	fp,0(r4)
  8071a8:	003e5d06 	br	806b20 <_dtoa_r+0xd0>
  8071ac:	d9800d17 	ldw	r6,52(sp)
  8071b0:	00c02074 	movhi	r3,129
  8071b4:	18d2db04 	addi	r3,r3,19308
  8071b8:	d9001217 	ldw	r4,72(sp)
  8071bc:	300490fa 	slli	r2,r6,3
  8071c0:	d9401317 	ldw	r5,76(sp)
  8071c4:	10c5883a 	add	r2,r2,r3
  8071c8:	12000017 	ldw	r8,0(r2)
  8071cc:	12400117 	ldw	r9,4(r2)
  8071d0:	400d883a 	mov	r6,r8
  8071d4:	480f883a 	mov	r7,r9
  8071d8:	080f8580 	call	80f858 <__ltdf2>
  8071dc:	1000030e 	bge	r2,zero,8071ec <_dtoa_r+0x79c>
  8071e0:	d8800d17 	ldw	r2,52(sp)
  8071e4:	10bfffc4 	addi	r2,r2,-1
  8071e8:	d8800d15 	stw	r2,52(sp)
  8071ec:	d8000c15 	stw	zero,48(sp)
  8071f0:	003ea806 	br	806c94 <_dtoa_r+0x244>
  8071f4:	d9000b17 	ldw	r4,44(sp)
  8071f8:	202cc03a 	cmpne	r22,r4,zero
  8071fc:	b000c71e 	bne	r22,zero,80751c <_dtoa_r+0xacc>
  807200:	dc001117 	ldw	r16,68(sp)
  807204:	dc801017 	ldw	r18,64(sp)
  807208:	0027883a 	mov	r19,zero
  80720c:	04000b0e 	bge	zero,r16,80723c <_dtoa_r+0x7ec>
  807210:	d8c00a17 	ldw	r3,40(sp)
  807214:	00c0090e 	bge	zero,r3,80723c <_dtoa_r+0x7ec>
  807218:	8005883a 	mov	r2,r16
  80721c:	1c011316 	blt	r3,r16,80766c <_dtoa_r+0xc1c>
  807220:	d9000a17 	ldw	r4,40(sp)
  807224:	d9801117 	ldw	r6,68(sp)
  807228:	80a1c83a 	sub	r16,r16,r2
  80722c:	2089c83a 	sub	r4,r4,r2
  807230:	308dc83a 	sub	r6,r6,r2
  807234:	d9000a15 	stw	r4,40(sp)
  807238:	d9801115 	stw	r6,68(sp)
  80723c:	d8801017 	ldw	r2,64(sp)
  807240:	0080150e 	bge	zero,r2,807298 <_dtoa_r+0x848>
  807244:	d8c00b17 	ldw	r3,44(sp)
  807248:	1805003a 	cmpeq	r2,r3,zero
  80724c:	1001c91e 	bne	r2,zero,807974 <_dtoa_r+0xf24>
  807250:	04800e0e 	bge	zero,r18,80728c <_dtoa_r+0x83c>
  807254:	d9001617 	ldw	r4,88(sp)
  807258:	980b883a 	mov	r5,r19
  80725c:	900d883a 	mov	r6,r18
  807260:	0809b140 	call	809b14 <__pow5mult>
  807264:	d9001617 	ldw	r4,88(sp)
  807268:	d9800717 	ldw	r6,28(sp)
  80726c:	100b883a 	mov	r5,r2
  807270:	1027883a 	mov	r19,r2
  807274:	08097580 	call	809758 <__multiply>
  807278:	d9001617 	ldw	r4,88(sp)
  80727c:	d9400717 	ldw	r5,28(sp)
  807280:	1023883a 	mov	r17,r2
  807284:	0808cc80 	call	808cc8 <_Bfree>
  807288:	dc400715 	stw	r17,28(sp)
  80728c:	d9001017 	ldw	r4,64(sp)
  807290:	248dc83a 	sub	r6,r4,r18
  807294:	30010e1e 	bne	r6,zero,8076d0 <_dtoa_r+0xc80>
  807298:	d9001617 	ldw	r4,88(sp)
  80729c:	04400044 	movi	r17,1
  8072a0:	880b883a 	mov	r5,r17
  8072a4:	08099ac0 	call	8099ac <__i2b>
  8072a8:	d9800917 	ldw	r6,36(sp)
  8072ac:	1025883a 	mov	r18,r2
  8072b0:	0180040e 	bge	zero,r6,8072c4 <_dtoa_r+0x874>
  8072b4:	d9001617 	ldw	r4,88(sp)
  8072b8:	100b883a 	mov	r5,r2
  8072bc:	0809b140 	call	809b14 <__pow5mult>
  8072c0:	1025883a 	mov	r18,r2
  8072c4:	d8801717 	ldw	r2,92(sp)
  8072c8:	8880f30e 	bge	r17,r2,807698 <_dtoa_r+0xc48>
  8072cc:	0023883a 	mov	r17,zero
  8072d0:	d9800917 	ldw	r6,36(sp)
  8072d4:	30019e1e 	bne	r6,zero,807950 <_dtoa_r+0xf00>
  8072d8:	00c00044 	movi	r3,1
  8072dc:	d9000a17 	ldw	r4,40(sp)
  8072e0:	20c5883a 	add	r2,r4,r3
  8072e4:	10c007cc 	andi	r3,r2,31
  8072e8:	1800841e 	bne	r3,zero,8074fc <_dtoa_r+0xaac>
  8072ec:	00800704 	movi	r2,28
  8072f0:	d9000a17 	ldw	r4,40(sp)
  8072f4:	d9801117 	ldw	r6,68(sp)
  8072f8:	80a1883a 	add	r16,r16,r2
  8072fc:	2089883a 	add	r4,r4,r2
  807300:	308d883a 	add	r6,r6,r2
  807304:	d9000a15 	stw	r4,40(sp)
  807308:	d9801115 	stw	r6,68(sp)
  80730c:	d8801117 	ldw	r2,68(sp)
  807310:	0080050e 	bge	zero,r2,807328 <_dtoa_r+0x8d8>
  807314:	d9400717 	ldw	r5,28(sp)
  807318:	d9001617 	ldw	r4,88(sp)
  80731c:	100d883a 	mov	r6,r2
  807320:	080960c0 	call	80960c <__lshift>
  807324:	d8800715 	stw	r2,28(sp)
  807328:	d8c00a17 	ldw	r3,40(sp)
  80732c:	00c0050e 	bge	zero,r3,807344 <_dtoa_r+0x8f4>
  807330:	d9001617 	ldw	r4,88(sp)
  807334:	900b883a 	mov	r5,r18
  807338:	180d883a 	mov	r6,r3
  80733c:	080960c0 	call	80960c <__lshift>
  807340:	1025883a 	mov	r18,r2
  807344:	d9000c17 	ldw	r4,48(sp)
  807348:	2005003a 	cmpeq	r2,r4,zero
  80734c:	10016f26 	beq	r2,zero,80790c <_dtoa_r+0xebc>
  807350:	d9000f17 	ldw	r4,60(sp)
  807354:	0102170e 	bge	zero,r4,807bb4 <_dtoa_r+0x1164>
  807358:	d9800b17 	ldw	r6,44(sp)
  80735c:	3005003a 	cmpeq	r2,r6,zero
  807360:	1000881e 	bne	r2,zero,807584 <_dtoa_r+0xb34>
  807364:	0400050e 	bge	zero,r16,80737c <_dtoa_r+0x92c>
  807368:	d9001617 	ldw	r4,88(sp)
  80736c:	980b883a 	mov	r5,r19
  807370:	800d883a 	mov	r6,r16
  807374:	080960c0 	call	80960c <__lshift>
  807378:	1027883a 	mov	r19,r2
  80737c:	8804c03a 	cmpne	r2,r17,zero
  807380:	1002541e 	bne	r2,zero,807cd4 <_dtoa_r+0x1284>
  807384:	980b883a 	mov	r5,r19
  807388:	dd800517 	ldw	r22,20(sp)
  80738c:	dcc00615 	stw	r19,24(sp)
  807390:	a700004c 	andi	fp,r20,1
  807394:	2827883a 	mov	r19,r5
  807398:	d9000717 	ldw	r4,28(sp)
  80739c:	900b883a 	mov	r5,r18
  8073a0:	080680c0 	call	80680c <quorem>
  8073a4:	d9000717 	ldw	r4,28(sp)
  8073a8:	d9400617 	ldw	r5,24(sp)
  8073ac:	1023883a 	mov	r17,r2
  8073b0:	8dc00c04 	addi	r23,r17,48
  8073b4:	0808e240 	call	808e24 <__mcmp>
  8073b8:	d9001617 	ldw	r4,88(sp)
  8073bc:	900b883a 	mov	r5,r18
  8073c0:	980d883a 	mov	r6,r19
  8073c4:	1029883a 	mov	r20,r2
  8073c8:	08094800 	call	809480 <__mdiff>
  8073cc:	102b883a 	mov	r21,r2
  8073d0:	10800317 	ldw	r2,12(r2)
  8073d4:	1001281e 	bne	r2,zero,807878 <_dtoa_r+0xe28>
  8073d8:	d9000717 	ldw	r4,28(sp)
  8073dc:	a80b883a 	mov	r5,r21
  8073e0:	0808e240 	call	808e24 <__mcmp>
  8073e4:	d9001617 	ldw	r4,88(sp)
  8073e8:	1021883a 	mov	r16,r2
  8073ec:	a80b883a 	mov	r5,r21
  8073f0:	0808cc80 	call	808cc8 <_Bfree>
  8073f4:	8000041e 	bne	r16,zero,807408 <_dtoa_r+0x9b8>
  8073f8:	d8801717 	ldw	r2,92(sp)
  8073fc:	1000021e 	bne	r2,zero,807408 <_dtoa_r+0x9b8>
  807400:	e004c03a 	cmpne	r2,fp,zero
  807404:	10011726 	beq	r2,zero,807864 <_dtoa_r+0xe14>
  807408:	a0010616 	blt	r20,zero,807824 <_dtoa_r+0xdd4>
  80740c:	a000041e 	bne	r20,zero,807420 <_dtoa_r+0x9d0>
  807410:	d8c01717 	ldw	r3,92(sp)
  807414:	1800021e 	bne	r3,zero,807420 <_dtoa_r+0x9d0>
  807418:	e004c03a 	cmpne	r2,fp,zero
  80741c:	10010126 	beq	r2,zero,807824 <_dtoa_r+0xdd4>
  807420:	04023d16 	blt	zero,r16,807d18 <_dtoa_r+0x12c8>
  807424:	b5c00005 	stb	r23,0(r22)
  807428:	d9800517 	ldw	r6,20(sp)
  80742c:	d9000f17 	ldw	r4,60(sp)
  807430:	b5800044 	addi	r22,r22,1
  807434:	3105883a 	add	r2,r6,r4
  807438:	b0806526 	beq	r22,r2,8075d0 <_dtoa_r+0xb80>
  80743c:	d9400717 	ldw	r5,28(sp)
  807440:	d9001617 	ldw	r4,88(sp)
  807444:	01800284 	movi	r6,10
  807448:	000f883a 	mov	r7,zero
  80744c:	08099e80 	call	8099e8 <__multadd>
  807450:	d8800715 	stw	r2,28(sp)
  807454:	d8800617 	ldw	r2,24(sp)
  807458:	14c10c26 	beq	r2,r19,80788c <_dtoa_r+0xe3c>
  80745c:	d9400617 	ldw	r5,24(sp)
  807460:	d9001617 	ldw	r4,88(sp)
  807464:	01800284 	movi	r6,10
  807468:	000f883a 	mov	r7,zero
  80746c:	08099e80 	call	8099e8 <__multadd>
  807470:	d9001617 	ldw	r4,88(sp)
  807474:	980b883a 	mov	r5,r19
  807478:	01800284 	movi	r6,10
  80747c:	000f883a 	mov	r7,zero
  807480:	d8800615 	stw	r2,24(sp)
  807484:	08099e80 	call	8099e8 <__multadd>
  807488:	1027883a 	mov	r19,r2
  80748c:	003fc206 	br	807398 <_dtoa_r+0x948>
  807490:	2445c83a 	sub	r2,r4,r17
  807494:	a088983a 	sll	r4,r20,r2
  807498:	003e4b06 	br	806dc8 <_dtoa_r+0x378>
  80749c:	01bfffc4 	movi	r6,-1
  8074a0:	00800044 	movi	r2,1
  8074a4:	d9800e15 	stw	r6,56(sp)
  8074a8:	d9800f15 	stw	r6,60(sp)
  8074ac:	d8800b15 	stw	r2,44(sp)
  8074b0:	d8c01617 	ldw	r3,88(sp)
  8074b4:	008005c4 	movi	r2,23
  8074b8:	18001115 	stw	zero,68(r3)
  8074bc:	1580082e 	bgeu	r2,r22,8074e0 <_dtoa_r+0xa90>
  8074c0:	00c00104 	movi	r3,4
  8074c4:	0009883a 	mov	r4,zero
  8074c8:	18c7883a 	add	r3,r3,r3
  8074cc:	18800504 	addi	r2,r3,20
  8074d0:	21000044 	addi	r4,r4,1
  8074d4:	b0bffc2e 	bgeu	r22,r2,8074c8 <_dtoa_r+0xa78>
  8074d8:	d9801617 	ldw	r6,88(sp)
  8074dc:	31001115 	stw	r4,68(r6)
  8074e0:	dc000f17 	ldw	r16,60(sp)
  8074e4:	003e4b06 	br	806e14 <_dtoa_r+0x3c4>
  8074e8:	d9801717 	ldw	r6,92(sp)
  8074ec:	0023883a 	mov	r17,zero
  8074f0:	31bfff04 	addi	r6,r6,-4
  8074f4:	d9801715 	stw	r6,92(sp)
  8074f8:	003df806 	br	806cdc <_dtoa_r+0x28c>
  8074fc:	00800804 	movi	r2,32
  807500:	10c9c83a 	sub	r4,r2,r3
  807504:	00c00104 	movi	r3,4
  807508:	19005a16 	blt	r3,r4,807674 <_dtoa_r+0xc24>
  80750c:	008000c4 	movi	r2,3
  807510:	113f7e16 	blt	r2,r4,80730c <_dtoa_r+0x8bc>
  807514:	20800704 	addi	r2,r4,28
  807518:	003f7506 	br	8072f0 <_dtoa_r+0x8a0>
  80751c:	d9801717 	ldw	r6,92(sp)
  807520:	00800044 	movi	r2,1
  807524:	1180a10e 	bge	r2,r6,8077ac <_dtoa_r+0xd5c>
  807528:	d9800f17 	ldw	r6,60(sp)
  80752c:	d8c01017 	ldw	r3,64(sp)
  807530:	30bfffc4 	addi	r2,r6,-1
  807534:	1881c616 	blt	r3,r2,807c50 <_dtoa_r+0x1200>
  807538:	18a5c83a 	sub	r18,r3,r2
  80753c:	d8800f17 	ldw	r2,60(sp)
  807540:	10026216 	blt	r2,zero,807ecc <_dtoa_r+0x147c>
  807544:	dc001117 	ldw	r16,68(sp)
  807548:	1007883a 	mov	r3,r2
  80754c:	d9800a17 	ldw	r6,40(sp)
  807550:	d8801117 	ldw	r2,68(sp)
  807554:	d9001617 	ldw	r4,88(sp)
  807558:	30cd883a 	add	r6,r6,r3
  80755c:	10c5883a 	add	r2,r2,r3
  807560:	01400044 	movi	r5,1
  807564:	d9800a15 	stw	r6,40(sp)
  807568:	d8801115 	stw	r2,68(sp)
  80756c:	08099ac0 	call	8099ac <__i2b>
  807570:	1027883a 	mov	r19,r2
  807574:	003f2506 	br	80720c <_dtoa_r+0x7bc>
  807578:	00c02074 	movhi	r3,129
  80757c:	18d21304 	addi	r3,r3,18508
  807580:	003d6706 	br	806b20 <_dtoa_r+0xd0>
  807584:	dd800517 	ldw	r22,20(sp)
  807588:	04000044 	movi	r16,1
  80758c:	00000706 	br	8075ac <_dtoa_r+0xb5c>
  807590:	d9400717 	ldw	r5,28(sp)
  807594:	d9001617 	ldw	r4,88(sp)
  807598:	01800284 	movi	r6,10
  80759c:	000f883a 	mov	r7,zero
  8075a0:	08099e80 	call	8099e8 <__multadd>
  8075a4:	d8800715 	stw	r2,28(sp)
  8075a8:	84000044 	addi	r16,r16,1
  8075ac:	d9000717 	ldw	r4,28(sp)
  8075b0:	900b883a 	mov	r5,r18
  8075b4:	080680c0 	call	80680c <quorem>
  8075b8:	15c00c04 	addi	r23,r2,48
  8075bc:	b5c00005 	stb	r23,0(r22)
  8075c0:	d8c00f17 	ldw	r3,60(sp)
  8075c4:	b5800044 	addi	r22,r22,1
  8075c8:	80fff116 	blt	r16,r3,807590 <_dtoa_r+0xb40>
  8075cc:	d8000615 	stw	zero,24(sp)
  8075d0:	d9400717 	ldw	r5,28(sp)
  8075d4:	d9001617 	ldw	r4,88(sp)
  8075d8:	01800044 	movi	r6,1
  8075dc:	080960c0 	call	80960c <__lshift>
  8075e0:	1009883a 	mov	r4,r2
  8075e4:	900b883a 	mov	r5,r18
  8075e8:	d8800715 	stw	r2,28(sp)
  8075ec:	0808e240 	call	808e24 <__mcmp>
  8075f0:	00803c0e 	bge	zero,r2,8076e4 <_dtoa_r+0xc94>
  8075f4:	b009883a 	mov	r4,r22
  8075f8:	213fffc4 	addi	r4,r4,-1
  8075fc:	21400003 	ldbu	r5,0(r4)
  807600:	00800e44 	movi	r2,57
  807604:	28c03fcc 	andi	r3,r5,255
  807608:	18c0201c 	xori	r3,r3,128
  80760c:	18ffe004 	addi	r3,r3,-128
  807610:	1881981e 	bne	r3,r2,807c74 <_dtoa_r+0x1224>
  807614:	d9800517 	ldw	r6,20(sp)
  807618:	21bff71e 	bne	r4,r6,8075f8 <_dtoa_r+0xba8>
  80761c:	d8800d17 	ldw	r2,52(sp)
  807620:	37000044 	addi	fp,r6,1
  807624:	10800044 	addi	r2,r2,1
  807628:	d8800d15 	stw	r2,52(sp)
  80762c:	00800c44 	movi	r2,49
  807630:	30800005 	stb	r2,0(r6)
  807634:	d9001617 	ldw	r4,88(sp)
  807638:	900b883a 	mov	r5,r18
  80763c:	0808cc80 	call	808cc8 <_Bfree>
  807640:	983ecd26 	beq	r19,zero,807178 <_dtoa_r+0x728>
  807644:	d8c00617 	ldw	r3,24(sp)
  807648:	18000426 	beq	r3,zero,80765c <_dtoa_r+0xc0c>
  80764c:	1cc00326 	beq	r3,r19,80765c <_dtoa_r+0xc0c>
  807650:	d9001617 	ldw	r4,88(sp)
  807654:	180b883a 	mov	r5,r3
  807658:	0808cc80 	call	808cc8 <_Bfree>
  80765c:	d9001617 	ldw	r4,88(sp)
  807660:	980b883a 	mov	r5,r19
  807664:	0808cc80 	call	808cc8 <_Bfree>
  807668:	003ec306 	br	807178 <_dtoa_r+0x728>
  80766c:	1805883a 	mov	r2,r3
  807670:	003eeb06 	br	807220 <_dtoa_r+0x7d0>
  807674:	d9800a17 	ldw	r6,40(sp)
  807678:	d8c01117 	ldw	r3,68(sp)
  80767c:	20bfff04 	addi	r2,r4,-4
  807680:	308d883a 	add	r6,r6,r2
  807684:	1887883a 	add	r3,r3,r2
  807688:	80a1883a 	add	r16,r16,r2
  80768c:	d9800a15 	stw	r6,40(sp)
  807690:	d8c01115 	stw	r3,68(sp)
  807694:	003f1d06 	br	80730c <_dtoa_r+0x8bc>
  807698:	a03f0c1e 	bne	r20,zero,8072cc <_dtoa_r+0x87c>
  80769c:	00800434 	movhi	r2,16
  8076a0:	10bfffc4 	addi	r2,r2,-1
  8076a4:	a884703a 	and	r2,r21,r2
  8076a8:	103f081e 	bne	r2,zero,8072cc <_dtoa_r+0x87c>
  8076ac:	a89ffc2c 	andhi	r2,r21,32752
  8076b0:	103f0626 	beq	r2,zero,8072cc <_dtoa_r+0x87c>
  8076b4:	d8c01117 	ldw	r3,68(sp)
  8076b8:	d9000a17 	ldw	r4,40(sp)
  8076bc:	18c00044 	addi	r3,r3,1
  8076c0:	21000044 	addi	r4,r4,1
  8076c4:	d8c01115 	stw	r3,68(sp)
  8076c8:	d9000a15 	stw	r4,40(sp)
  8076cc:	003f0006 	br	8072d0 <_dtoa_r+0x880>
  8076d0:	d9400717 	ldw	r5,28(sp)
  8076d4:	d9001617 	ldw	r4,88(sp)
  8076d8:	0809b140 	call	809b14 <__pow5mult>
  8076dc:	d8800715 	stw	r2,28(sp)
  8076e0:	003eed06 	br	807298 <_dtoa_r+0x848>
  8076e4:	1000021e 	bne	r2,zero,8076f0 <_dtoa_r+0xca0>
  8076e8:	b880004c 	andi	r2,r23,1
  8076ec:	103fc11e 	bne	r2,zero,8075f4 <_dtoa_r+0xba4>
  8076f0:	b5bfffc4 	addi	r22,r22,-1
  8076f4:	b0c00007 	ldb	r3,0(r22)
  8076f8:	00800c04 	movi	r2,48
  8076fc:	18bffc26 	beq	r3,r2,8076f0 <_dtoa_r+0xca0>
  807700:	b7000044 	addi	fp,r22,1
  807704:	003fcb06 	br	807634 <_dtoa_r+0xbe4>
  807708:	d9800d17 	ldw	r6,52(sp)
  80770c:	018fc83a 	sub	r7,zero,r6
  807710:	3801f726 	beq	r7,zero,807ef0 <_dtoa_r+0x14a0>
  807714:	398003cc 	andi	r6,r7,15
  807718:	300c90fa 	slli	r6,r6,3
  80771c:	01402074 	movhi	r5,129
  807720:	2952db04 	addi	r5,r5,19308
  807724:	d9001217 	ldw	r4,72(sp)
  807728:	314d883a 	add	r6,r6,r5
  80772c:	30c00117 	ldw	r3,4(r6)
  807730:	30800017 	ldw	r2,0(r6)
  807734:	d9401317 	ldw	r5,76(sp)
  807738:	3821d13a 	srai	r16,r7,4
  80773c:	100d883a 	mov	r6,r2
  807740:	180f883a 	mov	r7,r3
  807744:	080f01c0 	call	80f01c <__muldf3>
  807748:	1011883a 	mov	r8,r2
  80774c:	1813883a 	mov	r9,r3
  807750:	1029883a 	mov	r20,r2
  807754:	182b883a 	mov	r21,r3
  807758:	8001e526 	beq	r16,zero,807ef0 <_dtoa_r+0x14a0>
  80775c:	05800084 	movi	r22,2
  807760:	04402074 	movhi	r17,129
  807764:	8c530d04 	addi	r17,r17,19508
  807768:	8080004c 	andi	r2,r16,1
  80776c:	1005003a 	cmpeq	r2,r2,zero
  807770:	1000081e 	bne	r2,zero,807794 <_dtoa_r+0xd44>
  807774:	89800017 	ldw	r6,0(r17)
  807778:	89c00117 	ldw	r7,4(r17)
  80777c:	480b883a 	mov	r5,r9
  807780:	4009883a 	mov	r4,r8
  807784:	080f01c0 	call	80f01c <__muldf3>
  807788:	1011883a 	mov	r8,r2
  80778c:	b5800044 	addi	r22,r22,1
  807790:	1813883a 	mov	r9,r3
  807794:	8021d07a 	srai	r16,r16,1
  807798:	8c400204 	addi	r17,r17,8
  80779c:	803ff21e 	bne	r16,zero,807768 <_dtoa_r+0xd18>
  8077a0:	4029883a 	mov	r20,r8
  8077a4:	482b883a 	mov	r21,r9
  8077a8:	003dca06 	br	806ed4 <_dtoa_r+0x484>
  8077ac:	d9000817 	ldw	r4,32(sp)
  8077b0:	2005003a 	cmpeq	r2,r4,zero
  8077b4:	1001f61e 	bne	r2,zero,807f90 <_dtoa_r+0x1540>
  8077b8:	dc001117 	ldw	r16,68(sp)
  8077bc:	dc801017 	ldw	r18,64(sp)
  8077c0:	18c10cc4 	addi	r3,r3,1075
  8077c4:	003f6106 	br	80754c <_dtoa_r+0xafc>
  8077c8:	d8000b15 	stw	zero,44(sp)
  8077cc:	d9802617 	ldw	r6,152(sp)
  8077d0:	d8c00d17 	ldw	r3,52(sp)
  8077d4:	30800044 	addi	r2,r6,1
  8077d8:	18ad883a 	add	r22,r3,r2
  8077dc:	b13fffc4 	addi	r4,r22,-1
  8077e0:	d9000e15 	stw	r4,56(sp)
  8077e4:	0581f60e 	bge	zero,r22,807fc0 <_dtoa_r+0x1570>
  8077e8:	dd800f15 	stw	r22,60(sp)
  8077ec:	003f3006 	br	8074b0 <_dtoa_r+0xa60>
  8077f0:	d8000b15 	stw	zero,44(sp)
  8077f4:	d9002617 	ldw	r4,152(sp)
  8077f8:	0101eb0e 	bge	zero,r4,807fa8 <_dtoa_r+0x1558>
  8077fc:	202d883a 	mov	r22,r4
  807800:	d9000e15 	stw	r4,56(sp)
  807804:	d9000f15 	stw	r4,60(sp)
  807808:	003f2906 	br	8074b0 <_dtoa_r+0xa60>
  80780c:	01800044 	movi	r6,1
  807810:	d9800b15 	stw	r6,44(sp)
  807814:	003ff706 	br	8077f4 <_dtoa_r+0xda4>
  807818:	01000044 	movi	r4,1
  80781c:	d9000b15 	stw	r4,44(sp)
  807820:	003fea06 	br	8077cc <_dtoa_r+0xd7c>
  807824:	04000c0e 	bge	zero,r16,807858 <_dtoa_r+0xe08>
  807828:	d9400717 	ldw	r5,28(sp)
  80782c:	d9001617 	ldw	r4,88(sp)
  807830:	01800044 	movi	r6,1
  807834:	080960c0 	call	80960c <__lshift>
  807838:	1009883a 	mov	r4,r2
  80783c:	900b883a 	mov	r5,r18
  807840:	d8800715 	stw	r2,28(sp)
  807844:	0808e240 	call	808e24 <__mcmp>
  807848:	0081e00e 	bge	zero,r2,807fcc <_dtoa_r+0x157c>
  80784c:	bdc00044 	addi	r23,r23,1
  807850:	00800e84 	movi	r2,58
  807854:	b881a226 	beq	r23,r2,807ee0 <_dtoa_r+0x1490>
  807858:	b7000044 	addi	fp,r22,1
  80785c:	b5c00005 	stb	r23,0(r22)
  807860:	003f7406 	br	807634 <_dtoa_r+0xbe4>
  807864:	00800e44 	movi	r2,57
  807868:	b8819d26 	beq	r23,r2,807ee0 <_dtoa_r+0x1490>
  80786c:	053ffa0e 	bge	zero,r20,807858 <_dtoa_r+0xe08>
  807870:	8dc00c44 	addi	r23,r17,49
  807874:	003ff806 	br	807858 <_dtoa_r+0xe08>
  807878:	d9001617 	ldw	r4,88(sp)
  80787c:	a80b883a 	mov	r5,r21
  807880:	04000044 	movi	r16,1
  807884:	0808cc80 	call	808cc8 <_Bfree>
  807888:	003edf06 	br	807408 <_dtoa_r+0x9b8>
  80788c:	d9001617 	ldw	r4,88(sp)
  807890:	980b883a 	mov	r5,r19
  807894:	01800284 	movi	r6,10
  807898:	000f883a 	mov	r7,zero
  80789c:	08099e80 	call	8099e8 <__multadd>
  8078a0:	1027883a 	mov	r19,r2
  8078a4:	d8800615 	stw	r2,24(sp)
  8078a8:	003ebb06 	br	807398 <_dtoa_r+0x948>
  8078ac:	d9801117 	ldw	r6,68(sp)
  8078b0:	d8800d17 	ldw	r2,52(sp)
  8078b4:	d8000915 	stw	zero,36(sp)
  8078b8:	308dc83a 	sub	r6,r6,r2
  8078bc:	0087c83a 	sub	r3,zero,r2
  8078c0:	d9801115 	stw	r6,68(sp)
  8078c4:	d8c01015 	stw	r3,64(sp)
  8078c8:	003cfe06 	br	806cc4 <_dtoa_r+0x274>
  8078cc:	018dc83a 	sub	r6,zero,r6
  8078d0:	d9801115 	stw	r6,68(sp)
  8078d4:	d8000a15 	stw	zero,40(sp)
  8078d8:	003cf306 	br	806ca8 <_dtoa_r+0x258>
  8078dc:	d9000d17 	ldw	r4,52(sp)
  8078e0:	080f9680 	call	80f968 <__floatsidf>
  8078e4:	880b883a 	mov	r5,r17
  8078e8:	8009883a 	mov	r4,r16
  8078ec:	180f883a 	mov	r7,r3
  8078f0:	100d883a 	mov	r6,r2
  8078f4:	080f6c00 	call	80f6c0 <__nedf2>
  8078f8:	103ce126 	beq	r2,zero,806c80 <_dtoa_r+0x230>
  8078fc:	d9800d17 	ldw	r6,52(sp)
  807900:	31bfffc4 	addi	r6,r6,-1
  807904:	d9800d15 	stw	r6,52(sp)
  807908:	003cdd06 	br	806c80 <_dtoa_r+0x230>
  80790c:	d9000717 	ldw	r4,28(sp)
  807910:	900b883a 	mov	r5,r18
  807914:	0808e240 	call	808e24 <__mcmp>
  807918:	103e8d0e 	bge	r2,zero,807350 <_dtoa_r+0x900>
  80791c:	d9400717 	ldw	r5,28(sp)
  807920:	d9001617 	ldw	r4,88(sp)
  807924:	01800284 	movi	r6,10
  807928:	000f883a 	mov	r7,zero
  80792c:	08099e80 	call	8099e8 <__multadd>
  807930:	d9800d17 	ldw	r6,52(sp)
  807934:	d8800715 	stw	r2,28(sp)
  807938:	31bfffc4 	addi	r6,r6,-1
  80793c:	d9800d15 	stw	r6,52(sp)
  807940:	b001a71e 	bne	r22,zero,807fe0 <_dtoa_r+0x1590>
  807944:	d8800e17 	ldw	r2,56(sp)
  807948:	d8800f15 	stw	r2,60(sp)
  80794c:	003e8006 	br	807350 <_dtoa_r+0x900>
  807950:	90800417 	ldw	r2,16(r18)
  807954:	1085883a 	add	r2,r2,r2
  807958:	1085883a 	add	r2,r2,r2
  80795c:	1485883a 	add	r2,r2,r18
  807960:	11000417 	ldw	r4,16(r2)
  807964:	0808cf00 	call	808cf0 <__hi0bits>
  807968:	00c00804 	movi	r3,32
  80796c:	1887c83a 	sub	r3,r3,r2
  807970:	003e5a06 	br	8072dc <_dtoa_r+0x88c>
  807974:	d9400717 	ldw	r5,28(sp)
  807978:	d9801017 	ldw	r6,64(sp)
  80797c:	d9001617 	ldw	r4,88(sp)
  807980:	0809b140 	call	809b14 <__pow5mult>
  807984:	d8800715 	stw	r2,28(sp)
  807988:	003e4306 	br	807298 <_dtoa_r+0x848>
  80798c:	d9800f17 	ldw	r6,60(sp)
  807990:	d8800d17 	ldw	r2,52(sp)
  807994:	d9800315 	stw	r6,12(sp)
  807998:	d8800415 	stw	r2,16(sp)
  80799c:	d8c00b17 	ldw	r3,44(sp)
  8079a0:	1805003a 	cmpeq	r2,r3,zero
  8079a4:	1000e21e 	bne	r2,zero,807d30 <_dtoa_r+0x12e0>
  8079a8:	d9000317 	ldw	r4,12(sp)
  8079ac:	0005883a 	mov	r2,zero
  8079b0:	00cff834 	movhi	r3,16352
  8079b4:	200c90fa 	slli	r6,r4,3
  8079b8:	01002074 	movhi	r4,129
  8079bc:	2112db04 	addi	r4,r4,19308
  8079c0:	180b883a 	mov	r5,r3
  8079c4:	310d883a 	add	r6,r6,r4
  8079c8:	327fff17 	ldw	r9,-4(r6)
  8079cc:	323ffe17 	ldw	r8,-8(r6)
  8079d0:	1009883a 	mov	r4,r2
  8079d4:	480f883a 	mov	r7,r9
  8079d8:	400d883a 	mov	r6,r8
  8079dc:	080f3e00 	call	80f3e0 <__divdf3>
  8079e0:	180b883a 	mov	r5,r3
  8079e4:	b00d883a 	mov	r6,r22
  8079e8:	b80f883a 	mov	r7,r23
  8079ec:	1009883a 	mov	r4,r2
  8079f0:	080ef280 	call	80ef28 <__subdf3>
  8079f4:	a80b883a 	mov	r5,r21
  8079f8:	a009883a 	mov	r4,r20
  8079fc:	d8c01915 	stw	r3,100(sp)
  807a00:	d8801815 	stw	r2,96(sp)
  807a04:	080fa600 	call	80fa60 <__fixdfsi>
  807a08:	1009883a 	mov	r4,r2
  807a0c:	1027883a 	mov	r19,r2
  807a10:	080f9680 	call	80f968 <__floatsidf>
  807a14:	a80b883a 	mov	r5,r21
  807a18:	a009883a 	mov	r4,r20
  807a1c:	180f883a 	mov	r7,r3
  807a20:	100d883a 	mov	r6,r2
  807a24:	080ef280 	call	80ef28 <__subdf3>
  807a28:	d9801817 	ldw	r6,96(sp)
  807a2c:	1823883a 	mov	r17,r3
  807a30:	d8801415 	stw	r2,80(sp)
  807a34:	302d883a 	mov	r22,r6
  807a38:	d9800517 	ldw	r6,20(sp)
  807a3c:	9cc00c04 	addi	r19,r19,48
  807a40:	dc401515 	stw	r17,84(sp)
  807a44:	d8c01917 	ldw	r3,100(sp)
  807a48:	34c00005 	stb	r19,0(r6)
  807a4c:	d8800517 	ldw	r2,20(sp)
  807a50:	d9401917 	ldw	r5,100(sp)
  807a54:	d9801417 	ldw	r6,80(sp)
  807a58:	b009883a 	mov	r4,r22
  807a5c:	880f883a 	mov	r7,r17
  807a60:	182f883a 	mov	r23,r3
  807a64:	17000044 	addi	fp,r2,1
  807a68:	080f7480 	call	80f748 <__gtdf2>
  807a6c:	00804e16 	blt	zero,r2,807ba8 <_dtoa_r+0x1158>
  807a70:	d9801417 	ldw	r6,80(sp)
  807a74:	0005883a 	mov	r2,zero
  807a78:	00cffc34 	movhi	r3,16368
  807a7c:	180b883a 	mov	r5,r3
  807a80:	880f883a 	mov	r7,r17
  807a84:	1009883a 	mov	r4,r2
  807a88:	080ef280 	call	80ef28 <__subdf3>
  807a8c:	d9401917 	ldw	r5,100(sp)
  807a90:	180f883a 	mov	r7,r3
  807a94:	b009883a 	mov	r4,r22
  807a98:	100d883a 	mov	r6,r2
  807a9c:	080f7480 	call	80f748 <__gtdf2>
  807aa0:	00bda216 	blt	zero,r2,80712c <_dtoa_r+0x6dc>
  807aa4:	d8c00317 	ldw	r3,12(sp)
  807aa8:	00800044 	movi	r2,1
  807aac:	10c01216 	blt	r2,r3,807af8 <_dtoa_r+0x10a8>
  807ab0:	003d4506 	br	806fc8 <_dtoa_r+0x578>
  807ab4:	d9801417 	ldw	r6,80(sp)
  807ab8:	0005883a 	mov	r2,zero
  807abc:	00cffc34 	movhi	r3,16368
  807ac0:	180b883a 	mov	r5,r3
  807ac4:	880f883a 	mov	r7,r17
  807ac8:	1009883a 	mov	r4,r2
  807acc:	080ef280 	call	80ef28 <__subdf3>
  807ad0:	d9c01b17 	ldw	r7,108(sp)
  807ad4:	180b883a 	mov	r5,r3
  807ad8:	1009883a 	mov	r4,r2
  807adc:	b00d883a 	mov	r6,r22
  807ae0:	080f8580 	call	80f858 <__ltdf2>
  807ae4:	103d9116 	blt	r2,zero,80712c <_dtoa_r+0x6dc>
  807ae8:	d9800517 	ldw	r6,20(sp)
  807aec:	d9000317 	ldw	r4,12(sp)
  807af0:	3105883a 	add	r2,r6,r4
  807af4:	e0bd3426 	beq	fp,r2,806fc8 <_dtoa_r+0x578>
  807af8:	04500934 	movhi	r17,16420
  807afc:	0021883a 	mov	r16,zero
  807b00:	b80b883a 	mov	r5,r23
  807b04:	b009883a 	mov	r4,r22
  807b08:	800d883a 	mov	r6,r16
  807b0c:	880f883a 	mov	r7,r17
  807b10:	080f01c0 	call	80f01c <__muldf3>
  807b14:	d9401517 	ldw	r5,84(sp)
  807b18:	d9001417 	ldw	r4,80(sp)
  807b1c:	880f883a 	mov	r7,r17
  807b20:	000d883a 	mov	r6,zero
  807b24:	d8801a15 	stw	r2,104(sp)
  807b28:	d8c01b15 	stw	r3,108(sp)
  807b2c:	080f01c0 	call	80f01c <__muldf3>
  807b30:	180b883a 	mov	r5,r3
  807b34:	1009883a 	mov	r4,r2
  807b38:	1823883a 	mov	r17,r3
  807b3c:	1021883a 	mov	r16,r2
  807b40:	080fa600 	call	80fa60 <__fixdfsi>
  807b44:	1009883a 	mov	r4,r2
  807b48:	102b883a 	mov	r21,r2
  807b4c:	080f9680 	call	80f968 <__floatsidf>
  807b50:	880b883a 	mov	r5,r17
  807b54:	8009883a 	mov	r4,r16
  807b58:	180f883a 	mov	r7,r3
  807b5c:	100d883a 	mov	r6,r2
  807b60:	080ef280 	call	80ef28 <__subdf3>
  807b64:	1021883a 	mov	r16,r2
  807b68:	d9001b17 	ldw	r4,108(sp)
  807b6c:	1823883a 	mov	r17,r3
  807b70:	dc001415 	stw	r16,80(sp)
  807b74:	ad400c04 	addi	r21,r21,48
  807b78:	dc401515 	stw	r17,84(sp)
  807b7c:	d8801a17 	ldw	r2,104(sp)
  807b80:	e5400005 	stb	r21,0(fp)
  807b84:	202f883a 	mov	r23,r4
  807b88:	d9c01b17 	ldw	r7,108(sp)
  807b8c:	d9001417 	ldw	r4,80(sp)
  807b90:	880b883a 	mov	r5,r17
  807b94:	100d883a 	mov	r6,r2
  807b98:	102d883a 	mov	r22,r2
  807b9c:	e7000044 	addi	fp,fp,1
  807ba0:	080f8580 	call	80f858 <__ltdf2>
  807ba4:	103fc30e 	bge	r2,zero,807ab4 <_dtoa_r+0x1064>
  807ba8:	d9000417 	ldw	r4,16(sp)
  807bac:	d9000d15 	stw	r4,52(sp)
  807bb0:	003d7106 	br	807178 <_dtoa_r+0x728>
  807bb4:	d9801717 	ldw	r6,92(sp)
  807bb8:	00800084 	movi	r2,2
  807bbc:	11bde60e 	bge	r2,r6,807358 <_dtoa_r+0x908>
  807bc0:	203cfb1e 	bne	r4,zero,806fb0 <_dtoa_r+0x560>
  807bc4:	d9001617 	ldw	r4,88(sp)
  807bc8:	900b883a 	mov	r5,r18
  807bcc:	01800144 	movi	r6,5
  807bd0:	000f883a 	mov	r7,zero
  807bd4:	08099e80 	call	8099e8 <__multadd>
  807bd8:	d9000717 	ldw	r4,28(sp)
  807bdc:	100b883a 	mov	r5,r2
  807be0:	1025883a 	mov	r18,r2
  807be4:	0808e240 	call	808e24 <__mcmp>
  807be8:	00bcf10e 	bge	zero,r2,806fb0 <_dtoa_r+0x560>
  807bec:	d8c00d17 	ldw	r3,52(sp)
  807bf0:	d9000517 	ldw	r4,20(sp)
  807bf4:	d8000615 	stw	zero,24(sp)
  807bf8:	18c00044 	addi	r3,r3,1
  807bfc:	d8c00d15 	stw	r3,52(sp)
  807c00:	00800c44 	movi	r2,49
  807c04:	27000044 	addi	fp,r4,1
  807c08:	20800005 	stb	r2,0(r4)
  807c0c:	003e8906 	br	807634 <_dtoa_r+0xbe4>
  807c10:	d8c00517 	ldw	r3,20(sp)
  807c14:	003bc206 	br	806b20 <_dtoa_r+0xd0>
  807c18:	01802074 	movhi	r6,129
  807c1c:	31930d04 	addi	r6,r6,19508
  807c20:	30c00917 	ldw	r3,36(r6)
  807c24:	30800817 	ldw	r2,32(r6)
  807c28:	d9001217 	ldw	r4,72(sp)
  807c2c:	d9401317 	ldw	r5,76(sp)
  807c30:	180f883a 	mov	r7,r3
  807c34:	100d883a 	mov	r6,r2
  807c38:	080f3e00 	call	80f3e0 <__divdf3>
  807c3c:	948003cc 	andi	r18,r18,15
  807c40:	058000c4 	movi	r22,3
  807c44:	1029883a 	mov	r20,r2
  807c48:	182b883a 	mov	r21,r3
  807c4c:	003c8906 	br	806e74 <_dtoa_r+0x424>
  807c50:	d9001017 	ldw	r4,64(sp)
  807c54:	d9800917 	ldw	r6,36(sp)
  807c58:	0025883a 	mov	r18,zero
  807c5c:	1105c83a 	sub	r2,r2,r4
  807c60:	2089883a 	add	r4,r4,r2
  807c64:	308d883a 	add	r6,r6,r2
  807c68:	d9001015 	stw	r4,64(sp)
  807c6c:	d9800915 	stw	r6,36(sp)
  807c70:	003e3206 	br	80753c <_dtoa_r+0xaec>
  807c74:	28800044 	addi	r2,r5,1
  807c78:	27000044 	addi	fp,r4,1
  807c7c:	20800005 	stb	r2,0(r4)
  807c80:	003e6c06 	br	807634 <_dtoa_r+0xbe4>
  807c84:	d8800f17 	ldw	r2,60(sp)
  807c88:	00bce016 	blt	zero,r2,80700c <_dtoa_r+0x5bc>
  807c8c:	d9800f17 	ldw	r6,60(sp)
  807c90:	303cc51e 	bne	r6,zero,806fa8 <_dtoa_r+0x558>
  807c94:	0005883a 	mov	r2,zero
  807c98:	00d00534 	movhi	r3,16404
  807c9c:	980b883a 	mov	r5,r19
  807ca0:	180f883a 	mov	r7,r3
  807ca4:	9009883a 	mov	r4,r18
  807ca8:	100d883a 	mov	r6,r2
  807cac:	080f01c0 	call	80f01c <__muldf3>
  807cb0:	180b883a 	mov	r5,r3
  807cb4:	a80f883a 	mov	r7,r21
  807cb8:	1009883a 	mov	r4,r2
  807cbc:	a00d883a 	mov	r6,r20
  807cc0:	080f7d00 	call	80f7d0 <__gedf2>
  807cc4:	103cb80e 	bge	r2,zero,806fa8 <_dtoa_r+0x558>
  807cc8:	0027883a 	mov	r19,zero
  807ccc:	0025883a 	mov	r18,zero
  807cd0:	003fc606 	br	807bec <_dtoa_r+0x119c>
  807cd4:	99400117 	ldw	r5,4(r19)
  807cd8:	d9001617 	ldw	r4,88(sp)
  807cdc:	08092480 	call	809248 <_Balloc>
  807ce0:	99800417 	ldw	r6,16(r19)
  807ce4:	11000304 	addi	r4,r2,12
  807ce8:	99400304 	addi	r5,r19,12
  807cec:	318d883a 	add	r6,r6,r6
  807cf0:	318d883a 	add	r6,r6,r6
  807cf4:	31800204 	addi	r6,r6,8
  807cf8:	1023883a 	mov	r17,r2
  807cfc:	0808b480 	call	808b48 <memcpy>
  807d00:	d9001617 	ldw	r4,88(sp)
  807d04:	880b883a 	mov	r5,r17
  807d08:	01800044 	movi	r6,1
  807d0c:	080960c0 	call	80960c <__lshift>
  807d10:	100b883a 	mov	r5,r2
  807d14:	003d9c06 	br	807388 <_dtoa_r+0x938>
  807d18:	00800e44 	movi	r2,57
  807d1c:	b8807026 	beq	r23,r2,807ee0 <_dtoa_r+0x1490>
  807d20:	b8800044 	addi	r2,r23,1
  807d24:	b7000044 	addi	fp,r22,1
  807d28:	b0800005 	stb	r2,0(r22)
  807d2c:	003e4106 	br	807634 <_dtoa_r+0xbe4>
  807d30:	d8800317 	ldw	r2,12(sp)
  807d34:	01802074 	movhi	r6,129
  807d38:	3192db04 	addi	r6,r6,19308
  807d3c:	b009883a 	mov	r4,r22
  807d40:	100e90fa 	slli	r7,r2,3
  807d44:	b80b883a 	mov	r5,r23
  807d48:	398f883a 	add	r7,r7,r6
  807d4c:	38bffe17 	ldw	r2,-8(r7)
  807d50:	d9800517 	ldw	r6,20(sp)
  807d54:	38ffff17 	ldw	r3,-4(r7)
  807d58:	37000044 	addi	fp,r6,1
  807d5c:	180f883a 	mov	r7,r3
  807d60:	100d883a 	mov	r6,r2
  807d64:	080f01c0 	call	80f01c <__muldf3>
  807d68:	a80b883a 	mov	r5,r21
  807d6c:	a009883a 	mov	r4,r20
  807d70:	182f883a 	mov	r23,r3
  807d74:	102d883a 	mov	r22,r2
  807d78:	080fa600 	call	80fa60 <__fixdfsi>
  807d7c:	1009883a 	mov	r4,r2
  807d80:	1027883a 	mov	r19,r2
  807d84:	080f9680 	call	80f968 <__floatsidf>
  807d88:	a80b883a 	mov	r5,r21
  807d8c:	a009883a 	mov	r4,r20
  807d90:	180f883a 	mov	r7,r3
  807d94:	100d883a 	mov	r6,r2
  807d98:	080ef280 	call	80ef28 <__subdf3>
  807d9c:	180b883a 	mov	r5,r3
  807da0:	d8c00517 	ldw	r3,20(sp)
  807da4:	9cc00c04 	addi	r19,r19,48
  807da8:	1009883a 	mov	r4,r2
  807dac:	1cc00005 	stb	r19,0(r3)
  807db0:	2021883a 	mov	r16,r4
  807db4:	d9000317 	ldw	r4,12(sp)
  807db8:	00800044 	movi	r2,1
  807dbc:	2823883a 	mov	r17,r5
  807dc0:	20802226 	beq	r4,r2,807e4c <_dtoa_r+0x13fc>
  807dc4:	1029883a 	mov	r20,r2
  807dc8:	0005883a 	mov	r2,zero
  807dcc:	00d00934 	movhi	r3,16420
  807dd0:	180f883a 	mov	r7,r3
  807dd4:	100d883a 	mov	r6,r2
  807dd8:	880b883a 	mov	r5,r17
  807ddc:	8009883a 	mov	r4,r16
  807de0:	080f01c0 	call	80f01c <__muldf3>
  807de4:	180b883a 	mov	r5,r3
  807de8:	1009883a 	mov	r4,r2
  807dec:	1823883a 	mov	r17,r3
  807df0:	1021883a 	mov	r16,r2
  807df4:	080fa600 	call	80fa60 <__fixdfsi>
  807df8:	1009883a 	mov	r4,r2
  807dfc:	102b883a 	mov	r21,r2
  807e00:	080f9680 	call	80f968 <__floatsidf>
  807e04:	880b883a 	mov	r5,r17
  807e08:	8009883a 	mov	r4,r16
  807e0c:	180f883a 	mov	r7,r3
  807e10:	100d883a 	mov	r6,r2
  807e14:	080ef280 	call	80ef28 <__subdf3>
  807e18:	180b883a 	mov	r5,r3
  807e1c:	d8c00517 	ldw	r3,20(sp)
  807e20:	1009883a 	mov	r4,r2
  807e24:	ad400c04 	addi	r21,r21,48
  807e28:	1d05883a 	add	r2,r3,r20
  807e2c:	15400005 	stb	r21,0(r2)
  807e30:	2021883a 	mov	r16,r4
  807e34:	d9000317 	ldw	r4,12(sp)
  807e38:	a5000044 	addi	r20,r20,1
  807e3c:	2823883a 	mov	r17,r5
  807e40:	a13fe11e 	bne	r20,r4,807dc8 <_dtoa_r+0x1378>
  807e44:	e505883a 	add	r2,fp,r20
  807e48:	173fffc4 	addi	fp,r2,-1
  807e4c:	0025883a 	mov	r18,zero
  807e50:	04cff834 	movhi	r19,16352
  807e54:	b009883a 	mov	r4,r22
  807e58:	b80b883a 	mov	r5,r23
  807e5c:	900d883a 	mov	r6,r18
  807e60:	980f883a 	mov	r7,r19
  807e64:	080efa80 	call	80efa8 <__adddf3>
  807e68:	180b883a 	mov	r5,r3
  807e6c:	1009883a 	mov	r4,r2
  807e70:	800d883a 	mov	r6,r16
  807e74:	880f883a 	mov	r7,r17
  807e78:	080f8580 	call	80f858 <__ltdf2>
  807e7c:	103cab16 	blt	r2,zero,80712c <_dtoa_r+0x6dc>
  807e80:	0009883a 	mov	r4,zero
  807e84:	980b883a 	mov	r5,r19
  807e88:	b80f883a 	mov	r7,r23
  807e8c:	b00d883a 	mov	r6,r22
  807e90:	080ef280 	call	80ef28 <__subdf3>
  807e94:	180b883a 	mov	r5,r3
  807e98:	880f883a 	mov	r7,r17
  807e9c:	1009883a 	mov	r4,r2
  807ea0:	800d883a 	mov	r6,r16
  807ea4:	080f7480 	call	80f748 <__gtdf2>
  807ea8:	00bc470e 	bge	zero,r2,806fc8 <_dtoa_r+0x578>
  807eac:	00c00c04 	movi	r3,48
  807eb0:	e73fffc4 	addi	fp,fp,-1
  807eb4:	e0800007 	ldb	r2,0(fp)
  807eb8:	10fffd26 	beq	r2,r3,807eb0 <_dtoa_r+0x1460>
  807ebc:	d9800417 	ldw	r6,16(sp)
  807ec0:	e7000044 	addi	fp,fp,1
  807ec4:	d9800d15 	stw	r6,52(sp)
  807ec8:	003cab06 	br	807178 <_dtoa_r+0x728>
  807ecc:	d8c00f17 	ldw	r3,60(sp)
  807ed0:	d9001117 	ldw	r4,68(sp)
  807ed4:	20e1c83a 	sub	r16,r4,r3
  807ed8:	0007883a 	mov	r3,zero
  807edc:	003d9b06 	br	80754c <_dtoa_r+0xafc>
  807ee0:	00800e44 	movi	r2,57
  807ee4:	b0800005 	stb	r2,0(r22)
  807ee8:	b5800044 	addi	r22,r22,1
  807eec:	003dc106 	br	8075f4 <_dtoa_r+0xba4>
  807ef0:	05800084 	movi	r22,2
  807ef4:	003bf706 	br	806ed4 <_dtoa_r+0x484>
  807ef8:	d9000f17 	ldw	r4,60(sp)
  807efc:	013c000e 	bge	zero,r4,806f00 <_dtoa_r+0x4b0>
  807f00:	d9800e17 	ldw	r6,56(sp)
  807f04:	01bc300e 	bge	zero,r6,806fc8 <_dtoa_r+0x578>
  807f08:	0005883a 	mov	r2,zero
  807f0c:	00d00934 	movhi	r3,16420
  807f10:	a80b883a 	mov	r5,r21
  807f14:	180f883a 	mov	r7,r3
  807f18:	a009883a 	mov	r4,r20
  807f1c:	100d883a 	mov	r6,r2
  807f20:	080f01c0 	call	80f01c <__muldf3>
  807f24:	b1000044 	addi	r4,r22,1
  807f28:	1021883a 	mov	r16,r2
  807f2c:	1823883a 	mov	r17,r3
  807f30:	080f9680 	call	80f968 <__floatsidf>
  807f34:	880b883a 	mov	r5,r17
  807f38:	8009883a 	mov	r4,r16
  807f3c:	180f883a 	mov	r7,r3
  807f40:	100d883a 	mov	r6,r2
  807f44:	080f01c0 	call	80f01c <__muldf3>
  807f48:	0011883a 	mov	r8,zero
  807f4c:	02500734 	movhi	r9,16412
  807f50:	180b883a 	mov	r5,r3
  807f54:	480f883a 	mov	r7,r9
  807f58:	1009883a 	mov	r4,r2
  807f5c:	400d883a 	mov	r6,r8
  807f60:	080efa80 	call	80efa8 <__adddf3>
  807f64:	102d883a 	mov	r22,r2
  807f68:	00bf3034 	movhi	r2,64704
  807f6c:	10ef883a 	add	r23,r2,r3
  807f70:	d8800d17 	ldw	r2,52(sp)
  807f74:	d8c00e17 	ldw	r3,56(sp)
  807f78:	8029883a 	mov	r20,r16
  807f7c:	10bfffc4 	addi	r2,r2,-1
  807f80:	882b883a 	mov	r21,r17
  807f84:	d8800415 	stw	r2,16(sp)
  807f88:	d8c00315 	stw	r3,12(sp)
  807f8c:	003e8306 	br	80799c <_dtoa_r+0xf4c>
  807f90:	d8800117 	ldw	r2,4(sp)
  807f94:	dc001117 	ldw	r16,68(sp)
  807f98:	dc801017 	ldw	r18,64(sp)
  807f9c:	00c00d84 	movi	r3,54
  807fa0:	1887c83a 	sub	r3,r3,r2
  807fa4:	003d6906 	br	80754c <_dtoa_r+0xafc>
  807fa8:	01800044 	movi	r6,1
  807fac:	3021883a 	mov	r16,r6
  807fb0:	d9800f15 	stw	r6,60(sp)
  807fb4:	d9802615 	stw	r6,152(sp)
  807fb8:	d9800e15 	stw	r6,56(sp)
  807fbc:	003b9306 	br	806e0c <_dtoa_r+0x3bc>
  807fc0:	b021883a 	mov	r16,r22
  807fc4:	dd800f15 	stw	r22,60(sp)
  807fc8:	003b9006 	br	806e0c <_dtoa_r+0x3bc>
  807fcc:	103e221e 	bne	r2,zero,807858 <_dtoa_r+0xe08>
  807fd0:	b880004c 	andi	r2,r23,1
  807fd4:	1005003a 	cmpeq	r2,r2,zero
  807fd8:	103e1f1e 	bne	r2,zero,807858 <_dtoa_r+0xe08>
  807fdc:	003e1b06 	br	80784c <_dtoa_r+0xdfc>
  807fe0:	d9001617 	ldw	r4,88(sp)
  807fe4:	980b883a 	mov	r5,r19
  807fe8:	01800284 	movi	r6,10
  807fec:	000f883a 	mov	r7,zero
  807ff0:	08099e80 	call	8099e8 <__multadd>
  807ff4:	d8c00e17 	ldw	r3,56(sp)
  807ff8:	1027883a 	mov	r19,r2
  807ffc:	d8c00f15 	stw	r3,60(sp)
  808000:	003cd306 	br	807350 <_dtoa_r+0x900>

00808004 <__sflags>:
  808004:	28c00007 	ldb	r3,0(r5)
  808008:	00801c84 	movi	r2,114
  80800c:	18800926 	beq	r3,r2,808034 <__sflags+0x30>
  808010:	00801dc4 	movi	r2,119
  808014:	18801426 	beq	r3,r2,808068 <__sflags+0x64>
  808018:	00801844 	movi	r2,97
  80801c:	18801626 	beq	r3,r2,808078 <__sflags+0x74>
  808020:	0007883a 	mov	r3,zero
  808024:	00800584 	movi	r2,22
  808028:	20800015 	stw	r2,0(r4)
  80802c:	1805883a 	mov	r2,r3
  808030:	f800283a 	ret
  808034:	000f883a 	mov	r7,zero
  808038:	0011883a 	mov	r8,zero
  80803c:	00c00104 	movi	r3,4
  808040:	28800047 	ldb	r2,1(r5)
  808044:	10000426 	beq	r2,zero,808058 <__sflags+0x54>
  808048:	01000ac4 	movi	r4,43
  80804c:	11000e26 	beq	r2,r4,808088 <__sflags+0x84>
  808050:	28800087 	ldb	r2,2(r5)
  808054:	11000c26 	beq	r2,r4,808088 <__sflags+0x84>
  808058:	3a04b03a 	or	r2,r7,r8
  80805c:	30800015 	stw	r2,0(r6)
  808060:	1805883a 	mov	r2,r3
  808064:	f800283a 	ret
  808068:	01c00044 	movi	r7,1
  80806c:	02018004 	movi	r8,1536
  808070:	00c00204 	movi	r3,8
  808074:	003ff206 	br	808040 <__sflags+0x3c>
  808078:	01c00044 	movi	r7,1
  80807c:	02008204 	movi	r8,520
  808080:	00c04204 	movi	r3,264
  808084:	003fee06 	br	808040 <__sflags+0x3c>
  808088:	00bffcc4 	movi	r2,-13
  80808c:	1884703a 	and	r2,r3,r2
  808090:	01c00084 	movi	r7,2
  808094:	10c00414 	ori	r3,r2,16
  808098:	3a04b03a 	or	r2,r7,r8
  80809c:	30800015 	stw	r2,0(r6)
  8080a0:	003fef06 	br	808060 <__sflags+0x5c>

008080a4 <_fread_r>:
  8080a4:	defff504 	addi	sp,sp,-44
  8080a8:	dd800715 	stw	r22,28(sp)
  8080ac:	dc000115 	stw	r16,4(sp)
  8080b0:	202d883a 	mov	r22,r4
  8080b4:	2821883a 	mov	r16,r5
  8080b8:	3809883a 	mov	r4,r7
  8080bc:	300b883a 	mov	r5,r6
  8080c0:	df000915 	stw	fp,36(sp)
  8080c4:	ddc00815 	stw	r23,32(sp)
  8080c8:	dcc00415 	stw	r19,16(sp)
  8080cc:	dfc00a15 	stw	ra,40(sp)
  8080d0:	dd400615 	stw	r21,24(sp)
  8080d4:	dd000515 	stw	r20,20(sp)
  8080d8:	dc800315 	stw	r18,12(sp)
  8080dc:	dc400215 	stw	r17,8(sp)
  8080e0:	d9800015 	stw	r6,0(sp)
  8080e4:	3839883a 	mov	fp,r7
  8080e8:	080fe8c0 	call	80fe8c <__mulsi3>
  8080ec:	102f883a 	mov	r23,r2
  8080f0:	dcc00b17 	ldw	r19,44(sp)
  8080f4:	10005926 	beq	r2,zero,80825c <_fread_r+0x1b8>
  8080f8:	b0000226 	beq	r22,zero,808104 <_fread_r+0x60>
  8080fc:	b0800e17 	ldw	r2,56(r22)
  808100:	10005826 	beq	r2,zero,808264 <_fread_r+0x1c0>
  808104:	9c400117 	ldw	r17,4(r19)
  808108:	88005a16 	blt	r17,zero,808274 <_fread_r+0x1d0>
  80810c:	9880030b 	ldhu	r2,12(r19)
  808110:	8029883a 	mov	r20,r16
  808114:	1080008c 	andi	r2,r2,2
  808118:	1000221e 	bne	r2,zero,8081a4 <_fread_r+0x100>
  80811c:	b825883a 	mov	r18,r23
  808120:	00000106 	br	808128 <_fread_r+0x84>
  808124:	9c400117 	ldw	r17,4(r19)
  808128:	a009883a 	mov	r4,r20
  80812c:	880d883a 	mov	r6,r17
  808130:	8c80552e 	bgeu	r17,r18,808288 <_fread_r+0x1e4>
  808134:	99400017 	ldw	r5,0(r19)
  808138:	a469883a 	add	r20,r20,r17
  80813c:	9465c83a 	sub	r18,r18,r17
  808140:	0808b480 	call	808b48 <memcpy>
  808144:	98800017 	ldw	r2,0(r19)
  808148:	b009883a 	mov	r4,r22
  80814c:	980b883a 	mov	r5,r19
  808150:	1461883a 	add	r16,r2,r17
  808154:	9c000015 	stw	r16,0(r19)
  808158:	080299c0 	call	80299c <__srefill_r>
  80815c:	103ff126 	beq	r2,zero,808124 <_fread_r+0x80>
  808160:	d9400017 	ldw	r5,0(sp)
  808164:	bc89c83a 	sub	r4,r23,r18
  808168:	080fe7c0 	call	80fe7c <__udivsi3>
  80816c:	1039883a 	mov	fp,r2
  808170:	e005883a 	mov	r2,fp
  808174:	dfc00a17 	ldw	ra,40(sp)
  808178:	df000917 	ldw	fp,36(sp)
  80817c:	ddc00817 	ldw	r23,32(sp)
  808180:	dd800717 	ldw	r22,28(sp)
  808184:	dd400617 	ldw	r21,24(sp)
  808188:	dd000517 	ldw	r20,20(sp)
  80818c:	dcc00417 	ldw	r19,16(sp)
  808190:	dc800317 	ldw	r18,12(sp)
  808194:	dc400217 	ldw	r17,8(sp)
  808198:	dc000117 	ldw	r16,4(sp)
  80819c:	dec00b04 	addi	sp,sp,44
  8081a0:	f800283a 	ret
  8081a4:	b825883a 	mov	r18,r23
  8081a8:	8dc03536 	bltu	r17,r23,808280 <_fread_r+0x1dc>
  8081ac:	99400017 	ldw	r5,0(r19)
  8081b0:	a009883a 	mov	r4,r20
  8081b4:	900d883a 	mov	r6,r18
  8081b8:	0808b480 	call	808b48 <memcpy>
  8081bc:	9c000017 	ldw	r16,0(r19)
  8081c0:	98800117 	ldw	r2,4(r19)
  8081c4:	99400c17 	ldw	r5,48(r19)
  8081c8:	84a1883a 	add	r16,r16,r18
  8081cc:	14a3c83a 	sub	r17,r2,r18
  8081d0:	a4ab883a 	add	r21,r20,r18
  8081d4:	9c400115 	stw	r17,4(r19)
  8081d8:	9c000015 	stw	r16,0(r19)
  8081dc:	bca9c83a 	sub	r20,r23,r18
  8081e0:	28000826 	beq	r5,zero,808204 <_fread_r+0x160>
  8081e4:	a03fe226 	beq	r20,zero,808170 <_fread_r+0xcc>
  8081e8:	98801004 	addi	r2,r19,64
  8081ec:	28800326 	beq	r5,r2,8081fc <_fread_r+0x158>
  8081f0:	b009883a 	mov	r4,r22
  8081f4:	08012ec0 	call	8012ec <_free_r>
  8081f8:	9c000017 	ldw	r16,0(r19)
  8081fc:	98000c15 	stw	zero,48(r19)
  808200:	00000106 	br	808208 <_fread_r+0x164>
  808204:	a03fda26 	beq	r20,zero,808170 <_fread_r+0xcc>
  808208:	9c800417 	ldw	r18,16(r19)
  80820c:	9c400517 	ldw	r17,20(r19)
  808210:	9d400015 	stw	r21,0(r19)
  808214:	9d400415 	stw	r21,16(r19)
  808218:	9d000515 	stw	r20,20(r19)
  80821c:	b009883a 	mov	r4,r22
  808220:	980b883a 	mov	r5,r19
  808224:	080299c0 	call	80299c <__srefill_r>
  808228:	98c00117 	ldw	r3,4(r19)
  80822c:	9c800415 	stw	r18,16(r19)
  808230:	9c400515 	stw	r17,20(r19)
  808234:	a8eb883a 	add	r21,r21,r3
  808238:	9c000015 	stw	r16,0(r19)
  80823c:	a0e9c83a 	sub	r20,r20,r3
  808240:	98000115 	stw	zero,4(r19)
  808244:	103fef26 	beq	r2,zero,808204 <_fread_r+0x160>
  808248:	d9400017 	ldw	r5,0(sp)
  80824c:	bd09c83a 	sub	r4,r23,r20
  808250:	080fe7c0 	call	80fe7c <__udivsi3>
  808254:	1039883a 	mov	fp,r2
  808258:	003fc506 	br	808170 <_fread_r+0xcc>
  80825c:	0039883a 	mov	fp,zero
  808260:	003fc306 	br	808170 <_fread_r+0xcc>
  808264:	b009883a 	mov	r4,r22
  808268:	0800dc40 	call	800dc4 <__sinit>
  80826c:	9c400117 	ldw	r17,4(r19)
  808270:	883fa60e 	bge	r17,zero,80810c <_fread_r+0x68>
  808274:	0023883a 	mov	r17,zero
  808278:	98000115 	stw	zero,4(r19)
  80827c:	003fa306 	br	80810c <_fread_r+0x68>
  808280:	8825883a 	mov	r18,r17
  808284:	003fc906 	br	8081ac <_fread_r+0x108>
  808288:	99400017 	ldw	r5,0(r19)
  80828c:	900d883a 	mov	r6,r18
  808290:	0808b480 	call	808b48 <memcpy>
  808294:	98c00117 	ldw	r3,4(r19)
  808298:	98800017 	ldw	r2,0(r19)
  80829c:	1c87c83a 	sub	r3,r3,r18
  8082a0:	1485883a 	add	r2,r2,r18
  8082a4:	98800015 	stw	r2,0(r19)
  8082a8:	98c00115 	stw	r3,4(r19)
  8082ac:	003fb006 	br	808170 <_fread_r+0xcc>

008082b0 <fread>:
  8082b0:	00802074 	movhi	r2,129
  8082b4:	109a6904 	addi	r2,r2,27044
  8082b8:	2017883a 	mov	r11,r4
  8082bc:	11000017 	ldw	r4,0(r2)
  8082c0:	defffe04 	addi	sp,sp,-8
  8082c4:	3013883a 	mov	r9,r6
  8082c8:	2805883a 	mov	r2,r5
  8082cc:	d9c00015 	stw	r7,0(sp)
  8082d0:	580b883a 	mov	r5,r11
  8082d4:	100d883a 	mov	r6,r2
  8082d8:	480f883a 	mov	r7,r9
  8082dc:	dfc00115 	stw	ra,4(sp)
  8082e0:	08080a40 	call	8080a4 <_fread_r>
  8082e4:	dfc00117 	ldw	ra,4(sp)
  8082e8:	dec00204 	addi	sp,sp,8
  8082ec:	f800283a 	ret

008082f0 <__sfvwrite_r>:
  8082f0:	30800217 	ldw	r2,8(r6)
  8082f4:	defff504 	addi	sp,sp,-44
  8082f8:	df000915 	stw	fp,36(sp)
  8082fc:	dd800715 	stw	r22,28(sp)
  808300:	dc800315 	stw	r18,12(sp)
  808304:	dfc00a15 	stw	ra,40(sp)
  808308:	ddc00815 	stw	r23,32(sp)
  80830c:	dd400615 	stw	r21,24(sp)
  808310:	dd000515 	stw	r20,20(sp)
  808314:	dcc00415 	stw	r19,16(sp)
  808318:	dc400215 	stw	r17,8(sp)
  80831c:	dc000115 	stw	r16,4(sp)
  808320:	302d883a 	mov	r22,r6
  808324:	2039883a 	mov	fp,r4
  808328:	2825883a 	mov	r18,r5
  80832c:	10001c26 	beq	r2,zero,8083a0 <__sfvwrite_r+0xb0>
  808330:	29c0030b 	ldhu	r7,12(r5)
  808334:	3880020c 	andi	r2,r7,8
  808338:	10002726 	beq	r2,zero,8083d8 <__sfvwrite_r+0xe8>
  80833c:	28800417 	ldw	r2,16(r5)
  808340:	10002526 	beq	r2,zero,8083d8 <__sfvwrite_r+0xe8>
  808344:	3880008c 	andi	r2,r7,2
  808348:	b5400017 	ldw	r21,0(r22)
  80834c:	10002826 	beq	r2,zero,8083f0 <__sfvwrite_r+0x100>
  808350:	0021883a 	mov	r16,zero
  808354:	0023883a 	mov	r17,zero
  808358:	880d883a 	mov	r6,r17
  80835c:	e009883a 	mov	r4,fp
  808360:	00810004 	movi	r2,1024
  808364:	80006e26 	beq	r16,zero,808520 <__sfvwrite_r+0x230>
  808368:	800f883a 	mov	r7,r16
  80836c:	91400717 	ldw	r5,28(r18)
  808370:	1400012e 	bgeu	r2,r16,808378 <__sfvwrite_r+0x88>
  808374:	100f883a 	mov	r7,r2
  808378:	90c00917 	ldw	r3,36(r18)
  80837c:	183ee83a 	callr	r3
  808380:	1007883a 	mov	r3,r2
  808384:	80a1c83a 	sub	r16,r16,r2
  808388:	88a3883a 	add	r17,r17,r2
  80838c:	00806d0e 	bge	zero,r2,808544 <__sfvwrite_r+0x254>
  808390:	b0800217 	ldw	r2,8(r22)
  808394:	10c5c83a 	sub	r2,r2,r3
  808398:	b0800215 	stw	r2,8(r22)
  80839c:	103fee1e 	bne	r2,zero,808358 <__sfvwrite_r+0x68>
  8083a0:	0009883a 	mov	r4,zero
  8083a4:	2005883a 	mov	r2,r4
  8083a8:	dfc00a17 	ldw	ra,40(sp)
  8083ac:	df000917 	ldw	fp,36(sp)
  8083b0:	ddc00817 	ldw	r23,32(sp)
  8083b4:	dd800717 	ldw	r22,28(sp)
  8083b8:	dd400617 	ldw	r21,24(sp)
  8083bc:	dd000517 	ldw	r20,20(sp)
  8083c0:	dcc00417 	ldw	r19,16(sp)
  8083c4:	dc800317 	ldw	r18,12(sp)
  8083c8:	dc400217 	ldw	r17,8(sp)
  8083cc:	dc000117 	ldw	r16,4(sp)
  8083d0:	dec00b04 	addi	sp,sp,44
  8083d4:	f800283a 	ret
  8083d8:	08066600 	call	806660 <__swsetup_r>
  8083dc:	1000e41e 	bne	r2,zero,808770 <__sfvwrite_r+0x480>
  8083e0:	91c0030b 	ldhu	r7,12(r18)
  8083e4:	b5400017 	ldw	r21,0(r22)
  8083e8:	3880008c 	andi	r2,r7,2
  8083ec:	103fd81e 	bne	r2,zero,808350 <__sfvwrite_r+0x60>
  8083f0:	3880004c 	andi	r2,r7,1
  8083f4:	1005003a 	cmpeq	r2,r2,zero
  8083f8:	10005726 	beq	r2,zero,808558 <__sfvwrite_r+0x268>
  8083fc:	0029883a 	mov	r20,zero
  808400:	002f883a 	mov	r23,zero
  808404:	a0004226 	beq	r20,zero,808510 <__sfvwrite_r+0x220>
  808408:	3880800c 	andi	r2,r7,512
  80840c:	94000217 	ldw	r16,8(r18)
  808410:	10008b26 	beq	r2,zero,808640 <__sfvwrite_r+0x350>
  808414:	800d883a 	mov	r6,r16
  808418:	a400a536 	bltu	r20,r16,8086b0 <__sfvwrite_r+0x3c0>
  80841c:	3881200c 	andi	r2,r7,1152
  808420:	10002726 	beq	r2,zero,8084c0 <__sfvwrite_r+0x1d0>
  808424:	90800517 	ldw	r2,20(r18)
  808428:	92000417 	ldw	r8,16(r18)
  80842c:	91400017 	ldw	r5,0(r18)
  808430:	1087883a 	add	r3,r2,r2
  808434:	1887883a 	add	r3,r3,r2
  808438:	1808d7fa 	srli	r4,r3,31
  80843c:	2a21c83a 	sub	r16,r5,r8
  808440:	80800044 	addi	r2,r16,1
  808444:	20c9883a 	add	r4,r4,r3
  808448:	2027d07a 	srai	r19,r4,1
  80844c:	a085883a 	add	r2,r20,r2
  808450:	980d883a 	mov	r6,r19
  808454:	9880022e 	bgeu	r19,r2,808460 <__sfvwrite_r+0x170>
  808458:	1027883a 	mov	r19,r2
  80845c:	100d883a 	mov	r6,r2
  808460:	3881000c 	andi	r2,r7,1024
  808464:	1000b826 	beq	r2,zero,808748 <__sfvwrite_r+0x458>
  808468:	300b883a 	mov	r5,r6
  80846c:	e009883a 	mov	r4,fp
  808470:	0801ffc0 	call	801ffc <_malloc_r>
  808474:	10003126 	beq	r2,zero,80853c <__sfvwrite_r+0x24c>
  808478:	91400417 	ldw	r5,16(r18)
  80847c:	1009883a 	mov	r4,r2
  808480:	800d883a 	mov	r6,r16
  808484:	1023883a 	mov	r17,r2
  808488:	0808b480 	call	808b48 <memcpy>
  80848c:	90c0030b 	ldhu	r3,12(r18)
  808490:	00beffc4 	movi	r2,-1025
  808494:	1886703a 	and	r3,r3,r2
  808498:	18c02014 	ori	r3,r3,128
  80849c:	90c0030d 	sth	r3,12(r18)
  8084a0:	9c07c83a 	sub	r3,r19,r16
  8084a4:	8c05883a 	add	r2,r17,r16
  8084a8:	a00d883a 	mov	r6,r20
  8084ac:	a021883a 	mov	r16,r20
  8084b0:	90800015 	stw	r2,0(r18)
  8084b4:	90c00215 	stw	r3,8(r18)
  8084b8:	94400415 	stw	r17,16(r18)
  8084bc:	94c00515 	stw	r19,20(r18)
  8084c0:	91000017 	ldw	r4,0(r18)
  8084c4:	b80b883a 	mov	r5,r23
  8084c8:	a023883a 	mov	r17,r20
  8084cc:	0808be80 	call	808be8 <memmove>
  8084d0:	90c00217 	ldw	r3,8(r18)
  8084d4:	90800017 	ldw	r2,0(r18)
  8084d8:	a027883a 	mov	r19,r20
  8084dc:	1c07c83a 	sub	r3,r3,r16
  8084e0:	1405883a 	add	r2,r2,r16
  8084e4:	90c00215 	stw	r3,8(r18)
  8084e8:	a021883a 	mov	r16,r20
  8084ec:	90800015 	stw	r2,0(r18)
  8084f0:	b0800217 	ldw	r2,8(r22)
  8084f4:	1405c83a 	sub	r2,r2,r16
  8084f8:	b0800215 	stw	r2,8(r22)
  8084fc:	103fa826 	beq	r2,zero,8083a0 <__sfvwrite_r+0xb0>
  808500:	a469c83a 	sub	r20,r20,r17
  808504:	91c0030b 	ldhu	r7,12(r18)
  808508:	bcef883a 	add	r23,r23,r19
  80850c:	a03fbe1e 	bne	r20,zero,808408 <__sfvwrite_r+0x118>
  808510:	adc00017 	ldw	r23,0(r21)
  808514:	ad000117 	ldw	r20,4(r21)
  808518:	ad400204 	addi	r21,r21,8
  80851c:	003fb906 	br	808404 <__sfvwrite_r+0x114>
  808520:	ac400017 	ldw	r17,0(r21)
  808524:	ac000117 	ldw	r16,4(r21)
  808528:	ad400204 	addi	r21,r21,8
  80852c:	003f8a06 	br	808358 <__sfvwrite_r+0x68>
  808530:	91400417 	ldw	r5,16(r18)
  808534:	e009883a 	mov	r4,fp
  808538:	08012ec0 	call	8012ec <_free_r>
  80853c:	00800304 	movi	r2,12
  808540:	e0800015 	stw	r2,0(fp)
  808544:	9080030b 	ldhu	r2,12(r18)
  808548:	013fffc4 	movi	r4,-1
  80854c:	10801014 	ori	r2,r2,64
  808550:	9080030d 	sth	r2,12(r18)
  808554:	003f9306 	br	8083a4 <__sfvwrite_r+0xb4>
  808558:	0027883a 	mov	r19,zero
  80855c:	002f883a 	mov	r23,zero
  808560:	d8000015 	stw	zero,0(sp)
  808564:	0029883a 	mov	r20,zero
  808568:	98001e26 	beq	r19,zero,8085e4 <__sfvwrite_r+0x2f4>
  80856c:	d8c00017 	ldw	r3,0(sp)
  808570:	1804c03a 	cmpne	r2,r3,zero
  808574:	10005e26 	beq	r2,zero,8086f0 <__sfvwrite_r+0x400>
  808578:	9821883a 	mov	r16,r19
  80857c:	a4c0012e 	bgeu	r20,r19,808584 <__sfvwrite_r+0x294>
  808580:	a021883a 	mov	r16,r20
  808584:	91000017 	ldw	r4,0(r18)
  808588:	90800417 	ldw	r2,16(r18)
  80858c:	91800217 	ldw	r6,8(r18)
  808590:	91c00517 	ldw	r7,20(r18)
  808594:	1100022e 	bgeu	r2,r4,8085a0 <__sfvwrite_r+0x2b0>
  808598:	31e3883a 	add	r17,r6,r7
  80859c:	8c001616 	blt	r17,r16,8085f8 <__sfvwrite_r+0x308>
  8085a0:	81c03816 	blt	r16,r7,808684 <__sfvwrite_r+0x394>
  8085a4:	90c00917 	ldw	r3,36(r18)
  8085a8:	91400717 	ldw	r5,28(r18)
  8085ac:	e009883a 	mov	r4,fp
  8085b0:	b80d883a 	mov	r6,r23
  8085b4:	183ee83a 	callr	r3
  8085b8:	1023883a 	mov	r17,r2
  8085bc:	00bfe10e 	bge	zero,r2,808544 <__sfvwrite_r+0x254>
  8085c0:	a469c83a 	sub	r20,r20,r17
  8085c4:	a0001826 	beq	r20,zero,808628 <__sfvwrite_r+0x338>
  8085c8:	b0800217 	ldw	r2,8(r22)
  8085cc:	1445c83a 	sub	r2,r2,r17
  8085d0:	b0800215 	stw	r2,8(r22)
  8085d4:	103f7226 	beq	r2,zero,8083a0 <__sfvwrite_r+0xb0>
  8085d8:	9c67c83a 	sub	r19,r19,r17
  8085dc:	bc6f883a 	add	r23,r23,r17
  8085e0:	983fe21e 	bne	r19,zero,80856c <__sfvwrite_r+0x27c>
  8085e4:	adc00017 	ldw	r23,0(r21)
  8085e8:	acc00117 	ldw	r19,4(r21)
  8085ec:	ad400204 	addi	r21,r21,8
  8085f0:	d8000015 	stw	zero,0(sp)
  8085f4:	003fdc06 	br	808568 <__sfvwrite_r+0x278>
  8085f8:	b80b883a 	mov	r5,r23
  8085fc:	880d883a 	mov	r6,r17
  808600:	0808be80 	call	808be8 <memmove>
  808604:	90c00017 	ldw	r3,0(r18)
  808608:	e009883a 	mov	r4,fp
  80860c:	900b883a 	mov	r5,r18
  808610:	1c47883a 	add	r3,r3,r17
  808614:	90c00015 	stw	r3,0(r18)
  808618:	0800b2c0 	call	800b2c <_fflush_r>
  80861c:	103fc91e 	bne	r2,zero,808544 <__sfvwrite_r+0x254>
  808620:	a469c83a 	sub	r20,r20,r17
  808624:	a03fe81e 	bne	r20,zero,8085c8 <__sfvwrite_r+0x2d8>
  808628:	e009883a 	mov	r4,fp
  80862c:	900b883a 	mov	r5,r18
  808630:	0800b2c0 	call	800b2c <_fflush_r>
  808634:	103fc31e 	bne	r2,zero,808544 <__sfvwrite_r+0x254>
  808638:	d8000015 	stw	zero,0(sp)
  80863c:	003fe206 	br	8085c8 <__sfvwrite_r+0x2d8>
  808640:	91000017 	ldw	r4,0(r18)
  808644:	90800417 	ldw	r2,16(r18)
  808648:	1100022e 	bgeu	r2,r4,808654 <__sfvwrite_r+0x364>
  80864c:	8023883a 	mov	r17,r16
  808650:	85003136 	bltu	r16,r20,808718 <__sfvwrite_r+0x428>
  808654:	91c00517 	ldw	r7,20(r18)
  808658:	a1c01836 	bltu	r20,r7,8086bc <__sfvwrite_r+0x3cc>
  80865c:	90c00917 	ldw	r3,36(r18)
  808660:	91400717 	ldw	r5,28(r18)
  808664:	e009883a 	mov	r4,fp
  808668:	b80d883a 	mov	r6,r23
  80866c:	183ee83a 	callr	r3
  808670:	1021883a 	mov	r16,r2
  808674:	00bfb30e 	bge	zero,r2,808544 <__sfvwrite_r+0x254>
  808678:	1023883a 	mov	r17,r2
  80867c:	1027883a 	mov	r19,r2
  808680:	003f9b06 	br	8084f0 <__sfvwrite_r+0x200>
  808684:	b80b883a 	mov	r5,r23
  808688:	800d883a 	mov	r6,r16
  80868c:	0808be80 	call	808be8 <memmove>
  808690:	90c00217 	ldw	r3,8(r18)
  808694:	90800017 	ldw	r2,0(r18)
  808698:	8023883a 	mov	r17,r16
  80869c:	1c07c83a 	sub	r3,r3,r16
  8086a0:	1405883a 	add	r2,r2,r16
  8086a4:	90c00215 	stw	r3,8(r18)
  8086a8:	90800015 	stw	r2,0(r18)
  8086ac:	003fc406 	br	8085c0 <__sfvwrite_r+0x2d0>
  8086b0:	a00d883a 	mov	r6,r20
  8086b4:	a021883a 	mov	r16,r20
  8086b8:	003f8106 	br	8084c0 <__sfvwrite_r+0x1d0>
  8086bc:	b80b883a 	mov	r5,r23
  8086c0:	a00d883a 	mov	r6,r20
  8086c4:	0808be80 	call	808be8 <memmove>
  8086c8:	90c00217 	ldw	r3,8(r18)
  8086cc:	90800017 	ldw	r2,0(r18)
  8086d0:	a021883a 	mov	r16,r20
  8086d4:	1d07c83a 	sub	r3,r3,r20
  8086d8:	1505883a 	add	r2,r2,r20
  8086dc:	a023883a 	mov	r17,r20
  8086e0:	a027883a 	mov	r19,r20
  8086e4:	90c00215 	stw	r3,8(r18)
  8086e8:	90800015 	stw	r2,0(r18)
  8086ec:	003f8006 	br	8084f0 <__sfvwrite_r+0x200>
  8086f0:	b809883a 	mov	r4,r23
  8086f4:	01400284 	movi	r5,10
  8086f8:	980d883a 	mov	r6,r19
  8086fc:	0808a640 	call	808a64 <memchr>
  808700:	10001726 	beq	r2,zero,808760 <__sfvwrite_r+0x470>
  808704:	15c5c83a 	sub	r2,r2,r23
  808708:	15000044 	addi	r20,r2,1
  80870c:	00800044 	movi	r2,1
  808710:	d8800015 	stw	r2,0(sp)
  808714:	003f9806 	br	808578 <__sfvwrite_r+0x288>
  808718:	b80b883a 	mov	r5,r23
  80871c:	800d883a 	mov	r6,r16
  808720:	0808be80 	call	808be8 <memmove>
  808724:	90c00017 	ldw	r3,0(r18)
  808728:	e009883a 	mov	r4,fp
  80872c:	900b883a 	mov	r5,r18
  808730:	1c07883a 	add	r3,r3,r16
  808734:	90c00015 	stw	r3,0(r18)
  808738:	8027883a 	mov	r19,r16
  80873c:	0800b2c0 	call	800b2c <_fflush_r>
  808740:	103f6b26 	beq	r2,zero,8084f0 <__sfvwrite_r+0x200>
  808744:	003f7f06 	br	808544 <__sfvwrite_r+0x254>
  808748:	400b883a 	mov	r5,r8
  80874c:	e009883a 	mov	r4,fp
  808750:	0809fb80 	call	809fb8 <_realloc_r>
  808754:	103f7626 	beq	r2,zero,808530 <__sfvwrite_r+0x240>
  808758:	1023883a 	mov	r17,r2
  80875c:	003f5006 	br	8084a0 <__sfvwrite_r+0x1b0>
  808760:	00c00044 	movi	r3,1
  808764:	9d000044 	addi	r20,r19,1
  808768:	d8c00015 	stw	r3,0(sp)
  80876c:	003f8206 	br	808578 <__sfvwrite_r+0x288>
  808770:	9080030b 	ldhu	r2,12(r18)
  808774:	00c00244 	movi	r3,9
  808778:	013fffc4 	movi	r4,-1
  80877c:	10801014 	ori	r2,r2,64
  808780:	9080030d 	sth	r2,12(r18)
  808784:	e0c00015 	stw	r3,0(fp)
  808788:	003f0606 	br	8083a4 <__sfvwrite_r+0xb4>

0080878c <_isatty_r>:
  80878c:	defffd04 	addi	sp,sp,-12
  808790:	dc000015 	stw	r16,0(sp)
  808794:	040020b4 	movhi	r16,130
  808798:	84216b04 	addi	r16,r16,-31316
  80879c:	dc400115 	stw	r17,4(sp)
  8087a0:	80000015 	stw	zero,0(r16)
  8087a4:	2023883a 	mov	r17,r4
  8087a8:	2809883a 	mov	r4,r5
  8087ac:	dfc00215 	stw	ra,8(sp)
  8087b0:	0810ce40 	call	810ce4 <isatty>
  8087b4:	1007883a 	mov	r3,r2
  8087b8:	00bfffc4 	movi	r2,-1
  8087bc:	18800626 	beq	r3,r2,8087d8 <_isatty_r+0x4c>
  8087c0:	1805883a 	mov	r2,r3
  8087c4:	dfc00217 	ldw	ra,8(sp)
  8087c8:	dc400117 	ldw	r17,4(sp)
  8087cc:	dc000017 	ldw	r16,0(sp)
  8087d0:	dec00304 	addi	sp,sp,12
  8087d4:	f800283a 	ret
  8087d8:	80800017 	ldw	r2,0(r16)
  8087dc:	103ff826 	beq	r2,zero,8087c0 <_isatty_r+0x34>
  8087e0:	88800015 	stw	r2,0(r17)
  8087e4:	1805883a 	mov	r2,r3
  8087e8:	dfc00217 	ldw	ra,8(sp)
  8087ec:	dc400117 	ldw	r17,4(sp)
  8087f0:	dc000017 	ldw	r16,0(sp)
  8087f4:	dec00304 	addi	sp,sp,12
  8087f8:	f800283a 	ret

008087fc <iswspace>:
  8087fc:	00803fc4 	movi	r2,255
  808800:	0007883a 	mov	r3,zero
  808804:	11000636 	bltu	r2,r4,808820 <iswspace+0x24>
  808808:	00802074 	movhi	r2,129
  80880c:	109a6d04 	addi	r2,r2,27060
  808810:	10c00017 	ldw	r3,0(r2)
  808814:	1907883a 	add	r3,r3,r4
  808818:	18800003 	ldbu	r2,0(r3)
  80881c:	10c0020c 	andi	r3,r2,8
  808820:	1805883a 	mov	r2,r3
  808824:	f800283a 	ret

00808828 <__locale_charset>:
  808828:	d0a00617 	ldw	r2,-32744(gp)
  80882c:	f800283a 	ret

00808830 <_localeconv_r>:
  808830:	00802074 	movhi	r2,129
  808834:	1092cf04 	addi	r2,r2,19260
  808838:	f800283a 	ret

0080883c <localeconv>:
  80883c:	00802074 	movhi	r2,129
  808840:	109a6904 	addi	r2,r2,27044
  808844:	11000017 	ldw	r4,0(r2)
  808848:	08088301 	jmpi	808830 <_localeconv_r>

0080884c <_setlocale_r>:
  80884c:	defffc04 	addi	sp,sp,-16
  808850:	00c02074 	movhi	r3,129
  808854:	18d1fa04 	addi	r3,r3,18408
  808858:	dc800215 	stw	r18,8(sp)
  80885c:	dc400115 	stw	r17,4(sp)
  808860:	dc000015 	stw	r16,0(sp)
  808864:	2023883a 	mov	r17,r4
  808868:	2825883a 	mov	r18,r5
  80886c:	dfc00315 	stw	ra,12(sp)
  808870:	3021883a 	mov	r16,r6
  808874:	3009883a 	mov	r4,r6
  808878:	180b883a 	mov	r5,r3
  80887c:	30000926 	beq	r6,zero,8088a4 <_setlocale_r+0x58>
  808880:	080a7b80 	call	80a7b8 <strcmp>
  808884:	8009883a 	mov	r4,r16
  808888:	01402074 	movhi	r5,129
  80888c:	29520b04 	addi	r5,r5,18476
  808890:	10000b1e 	bne	r2,zero,8088c0 <_setlocale_r+0x74>
  808894:	8c000d15 	stw	r16,52(r17)
  808898:	8c800c15 	stw	r18,48(r17)
  80889c:	00c02074 	movhi	r3,129
  8088a0:	18d1fa04 	addi	r3,r3,18408
  8088a4:	1805883a 	mov	r2,r3
  8088a8:	dfc00317 	ldw	ra,12(sp)
  8088ac:	dc800217 	ldw	r18,8(sp)
  8088b0:	dc400117 	ldw	r17,4(sp)
  8088b4:	dc000017 	ldw	r16,0(sp)
  8088b8:	dec00404 	addi	sp,sp,16
  8088bc:	f800283a 	ret
  8088c0:	080a7b80 	call	80a7b8 <strcmp>
  8088c4:	0007883a 	mov	r3,zero
  8088c8:	103ff226 	beq	r2,zero,808894 <_setlocale_r+0x48>
  8088cc:	003ff506 	br	8088a4 <_setlocale_r+0x58>

008088d0 <setlocale>:
  8088d0:	01802074 	movhi	r6,129
  8088d4:	319a6904 	addi	r6,r6,27044
  8088d8:	2007883a 	mov	r3,r4
  8088dc:	31000017 	ldw	r4,0(r6)
  8088e0:	280d883a 	mov	r6,r5
  8088e4:	180b883a 	mov	r5,r3
  8088e8:	080884c1 	jmpi	80884c <_setlocale_r>

008088ec <_lseek_r>:
  8088ec:	defffd04 	addi	sp,sp,-12
  8088f0:	dc000015 	stw	r16,0(sp)
  8088f4:	040020b4 	movhi	r16,130
  8088f8:	84216b04 	addi	r16,r16,-31316
  8088fc:	dc400115 	stw	r17,4(sp)
  808900:	80000015 	stw	zero,0(r16)
  808904:	2023883a 	mov	r17,r4
  808908:	2809883a 	mov	r4,r5
  80890c:	300b883a 	mov	r5,r6
  808910:	380d883a 	mov	r6,r7
  808914:	dfc00215 	stw	ra,8(sp)
  808918:	0810ef40 	call	810ef4 <lseek>
  80891c:	1007883a 	mov	r3,r2
  808920:	00bfffc4 	movi	r2,-1
  808924:	18800626 	beq	r3,r2,808940 <_lseek_r+0x54>
  808928:	1805883a 	mov	r2,r3
  80892c:	dfc00217 	ldw	ra,8(sp)
  808930:	dc400117 	ldw	r17,4(sp)
  808934:	dc000017 	ldw	r16,0(sp)
  808938:	dec00304 	addi	sp,sp,12
  80893c:	f800283a 	ret
  808940:	80800017 	ldw	r2,0(r16)
  808944:	103ff826 	beq	r2,zero,808928 <_lseek_r+0x3c>
  808948:	88800015 	stw	r2,0(r17)
  80894c:	1805883a 	mov	r2,r3
  808950:	dfc00217 	ldw	ra,8(sp)
  808954:	dc400117 	ldw	r17,4(sp)
  808958:	dc000017 	ldw	r16,0(sp)
  80895c:	dec00304 	addi	sp,sp,12
  808960:	f800283a 	ret

00808964 <_mbrtowc_r>:
  808964:	defffc04 	addi	sp,sp,-16
  808968:	dc400215 	stw	r17,8(sp)
  80896c:	dc000115 	stw	r16,4(sp)
  808970:	dfc00315 	stw	ra,12(sp)
  808974:	dc000417 	ldw	r16,16(sp)
  808978:	2023883a 	mov	r17,r4
  80897c:	30000f26 	beq	r6,zero,8089bc <_mbrtowc_r+0x58>
  808980:	dc000015 	stw	r16,0(sp)
  808984:	0808a240 	call	808a24 <_mbtowc_r>
  808988:	1007883a 	mov	r3,r2
  80898c:	00bfffc4 	movi	r2,-1
  808990:	1809883a 	mov	r4,r3
  808994:	1880111e 	bne	r3,r2,8089dc <_mbrtowc_r+0x78>
  808998:	80000015 	stw	zero,0(r16)
  80899c:	00802284 	movi	r2,138
  8089a0:	88800015 	stw	r2,0(r17)
  8089a4:	2005883a 	mov	r2,r4
  8089a8:	dfc00317 	ldw	ra,12(sp)
  8089ac:	dc400217 	ldw	r17,8(sp)
  8089b0:	dc000117 	ldw	r16,4(sp)
  8089b4:	dec00404 	addi	sp,sp,16
  8089b8:	f800283a 	ret
  8089bc:	000b883a 	mov	r5,zero
  8089c0:	01802074 	movhi	r6,129
  8089c4:	31920b04 	addi	r6,r6,18476
  8089c8:	01c00044 	movi	r7,1
  8089cc:	dc000015 	stw	r16,0(sp)
  8089d0:	0808a240 	call	808a24 <_mbtowc_r>
  8089d4:	1007883a 	mov	r3,r2
  8089d8:	003fec06 	br	80898c <_mbrtowc_r+0x28>
  8089dc:	1809883a 	mov	r4,r3
  8089e0:	003ff006 	br	8089a4 <_mbrtowc_r+0x40>

008089e4 <mbrtowc>:
  8089e4:	00802074 	movhi	r2,129
  8089e8:	109a6904 	addi	r2,r2,27044
  8089ec:	2017883a 	mov	r11,r4
  8089f0:	11000017 	ldw	r4,0(r2)
  8089f4:	defffe04 	addi	sp,sp,-8
  8089f8:	3013883a 	mov	r9,r6
  8089fc:	2805883a 	mov	r2,r5
  808a00:	d9c00015 	stw	r7,0(sp)
  808a04:	580b883a 	mov	r5,r11
  808a08:	100d883a 	mov	r6,r2
  808a0c:	480f883a 	mov	r7,r9
  808a10:	dfc00115 	stw	ra,4(sp)
  808a14:	08089640 	call	808964 <_mbrtowc_r>
  808a18:	dfc00117 	ldw	ra,4(sp)
  808a1c:	dec00204 	addi	sp,sp,8
  808a20:	f800283a 	ret

00808a24 <_mbtowc_r>:
  808a24:	deffff04 	addi	sp,sp,-4
  808a28:	0005883a 	mov	r2,zero
  808a2c:	28000326 	beq	r5,zero,808a3c <_mbtowc_r+0x18>
  808a30:	3000041e 	bne	r6,zero,808a44 <_mbtowc_r+0x20>
  808a34:	dec00104 	addi	sp,sp,4
  808a38:	f800283a 	ret
  808a3c:	d80b883a 	mov	r5,sp
  808a40:	303ffc26 	beq	r6,zero,808a34 <_mbtowc_r+0x10>
  808a44:	00bfff84 	movi	r2,-2
  808a48:	383ffa26 	beq	r7,zero,808a34 <_mbtowc_r+0x10>
  808a4c:	30800003 	ldbu	r2,0(r6)
  808a50:	28800015 	stw	r2,0(r5)
  808a54:	30c00003 	ldbu	r3,0(r6)
  808a58:	1804c03a 	cmpne	r2,r3,zero
  808a5c:	dec00104 	addi	sp,sp,4
  808a60:	f800283a 	ret

00808a64 <memchr>:
  808a64:	008000c4 	movi	r2,3
  808a68:	29403fcc 	andi	r5,r5,255
  808a6c:	2007883a 	mov	r3,r4
  808a70:	1180022e 	bgeu	r2,r6,808a7c <memchr+0x18>
  808a74:	2084703a 	and	r2,r4,r2
  808a78:	10000b26 	beq	r2,zero,808aa8 <memchr+0x44>
  808a7c:	313fffc4 	addi	r4,r6,-1
  808a80:	3000051e 	bne	r6,zero,808a98 <memchr+0x34>
  808a84:	00002c06 	br	808b38 <memchr+0xd4>
  808a88:	213fffc4 	addi	r4,r4,-1
  808a8c:	00bfffc4 	movi	r2,-1
  808a90:	18c00044 	addi	r3,r3,1
  808a94:	20802826 	beq	r4,r2,808b38 <memchr+0xd4>
  808a98:	18800003 	ldbu	r2,0(r3)
  808a9c:	28bffa1e 	bne	r5,r2,808a88 <memchr+0x24>
  808aa0:	1805883a 	mov	r2,r3
  808aa4:	f800283a 	ret
  808aa8:	0011883a 	mov	r8,zero
  808aac:	0007883a 	mov	r3,zero
  808ab0:	01c00104 	movi	r7,4
  808ab4:	4004923a 	slli	r2,r8,8
  808ab8:	18c00044 	addi	r3,r3,1
  808abc:	1151883a 	add	r8,r2,r5
  808ac0:	19fffc1e 	bne	r3,r7,808ab4 <memchr+0x50>
  808ac4:	02bfbff4 	movhi	r10,65279
  808ac8:	52bfbfc4 	addi	r10,r10,-257
  808acc:	02602074 	movhi	r9,32897
  808ad0:	4a602004 	addi	r9,r9,-32640
  808ad4:	02c000c4 	movi	r11,3
  808ad8:	20800017 	ldw	r2,0(r4)
  808adc:	31bfff04 	addi	r6,r6,-4
  808ae0:	200f883a 	mov	r7,r4
  808ae4:	1204f03a 	xor	r2,r2,r8
  808ae8:	1287883a 	add	r3,r2,r10
  808aec:	1a46703a 	and	r3,r3,r9
  808af0:	0084303a 	nor	r2,zero,r2
  808af4:	10c4703a 	and	r2,r2,r3
  808af8:	10000b26 	beq	r2,zero,808b28 <memchr+0xc4>
  808afc:	20800003 	ldbu	r2,0(r4)
  808b00:	28800f26 	beq	r5,r2,808b40 <memchr+0xdc>
  808b04:	20800043 	ldbu	r2,1(r4)
  808b08:	21c00044 	addi	r7,r4,1
  808b0c:	28800c26 	beq	r5,r2,808b40 <memchr+0xdc>
  808b10:	20800083 	ldbu	r2,2(r4)
  808b14:	21c00084 	addi	r7,r4,2
  808b18:	28800926 	beq	r5,r2,808b40 <memchr+0xdc>
  808b1c:	208000c3 	ldbu	r2,3(r4)
  808b20:	21c000c4 	addi	r7,r4,3
  808b24:	28800626 	beq	r5,r2,808b40 <memchr+0xdc>
  808b28:	21000104 	addi	r4,r4,4
  808b2c:	59bfea36 	bltu	r11,r6,808ad8 <memchr+0x74>
  808b30:	2007883a 	mov	r3,r4
  808b34:	003fd106 	br	808a7c <memchr+0x18>
  808b38:	0005883a 	mov	r2,zero
  808b3c:	f800283a 	ret
  808b40:	3805883a 	mov	r2,r7
  808b44:	f800283a 	ret

00808b48 <memcpy>:
  808b48:	01c003c4 	movi	r7,15
  808b4c:	2007883a 	mov	r3,r4
  808b50:	3980032e 	bgeu	r7,r6,808b60 <memcpy+0x18>
  808b54:	2904b03a 	or	r2,r5,r4
  808b58:	108000cc 	andi	r2,r2,3
  808b5c:	10000926 	beq	r2,zero,808b84 <memcpy+0x3c>
  808b60:	30000626 	beq	r6,zero,808b7c <memcpy+0x34>
  808b64:	30cd883a 	add	r6,r6,r3
  808b68:	28800003 	ldbu	r2,0(r5)
  808b6c:	29400044 	addi	r5,r5,1
  808b70:	18800005 	stb	r2,0(r3)
  808b74:	18c00044 	addi	r3,r3,1
  808b78:	30fffb1e 	bne	r6,r3,808b68 <memcpy+0x20>
  808b7c:	2005883a 	mov	r2,r4
  808b80:	f800283a 	ret
  808b84:	3811883a 	mov	r8,r7
  808b88:	200f883a 	mov	r7,r4
  808b8c:	28c00017 	ldw	r3,0(r5)
  808b90:	31bffc04 	addi	r6,r6,-16
  808b94:	38c00015 	stw	r3,0(r7)
  808b98:	28800117 	ldw	r2,4(r5)
  808b9c:	38800115 	stw	r2,4(r7)
  808ba0:	28c00217 	ldw	r3,8(r5)
  808ba4:	38c00215 	stw	r3,8(r7)
  808ba8:	28800317 	ldw	r2,12(r5)
  808bac:	29400404 	addi	r5,r5,16
  808bb0:	38800315 	stw	r2,12(r7)
  808bb4:	39c00404 	addi	r7,r7,16
  808bb8:	41bff436 	bltu	r8,r6,808b8c <memcpy+0x44>
  808bbc:	008000c4 	movi	r2,3
  808bc0:	1180072e 	bgeu	r2,r6,808be0 <memcpy+0x98>
  808bc4:	1007883a 	mov	r3,r2
  808bc8:	28800017 	ldw	r2,0(r5)
  808bcc:	31bfff04 	addi	r6,r6,-4
  808bd0:	29400104 	addi	r5,r5,4
  808bd4:	38800015 	stw	r2,0(r7)
  808bd8:	39c00104 	addi	r7,r7,4
  808bdc:	19bffa36 	bltu	r3,r6,808bc8 <memcpy+0x80>
  808be0:	3807883a 	mov	r3,r7
  808be4:	003fde06 	br	808b60 <memcpy+0x18>

00808be8 <memmove>:
  808be8:	2807883a 	mov	r3,r5
  808bec:	2011883a 	mov	r8,r4
  808bf0:	29000c2e 	bgeu	r5,r4,808c24 <memmove+0x3c>
  808bf4:	298f883a 	add	r7,r5,r6
  808bf8:	21c00a2e 	bgeu	r4,r7,808c24 <memmove+0x3c>
  808bfc:	30000726 	beq	r6,zero,808c1c <memmove+0x34>
  808c00:	2187883a 	add	r3,r4,r6
  808c04:	198dc83a 	sub	r6,r3,r6
  808c08:	39ffffc4 	addi	r7,r7,-1
  808c0c:	38800003 	ldbu	r2,0(r7)
  808c10:	18ffffc4 	addi	r3,r3,-1
  808c14:	18800005 	stb	r2,0(r3)
  808c18:	19bffb1e 	bne	r3,r6,808c08 <memmove+0x20>
  808c1c:	2005883a 	mov	r2,r4
  808c20:	f800283a 	ret
  808c24:	01c003c4 	movi	r7,15
  808c28:	39800a36 	bltu	r7,r6,808c54 <memmove+0x6c>
  808c2c:	303ffb26 	beq	r6,zero,808c1c <memmove+0x34>
  808c30:	400f883a 	mov	r7,r8
  808c34:	320d883a 	add	r6,r6,r8
  808c38:	28800003 	ldbu	r2,0(r5)
  808c3c:	29400044 	addi	r5,r5,1
  808c40:	38800005 	stb	r2,0(r7)
  808c44:	39c00044 	addi	r7,r7,1
  808c48:	39bffb1e 	bne	r7,r6,808c38 <memmove+0x50>
  808c4c:	2005883a 	mov	r2,r4
  808c50:	f800283a 	ret
  808c54:	1904b03a 	or	r2,r3,r4
  808c58:	108000cc 	andi	r2,r2,3
  808c5c:	103ff31e 	bne	r2,zero,808c2c <memmove+0x44>
  808c60:	3811883a 	mov	r8,r7
  808c64:	180b883a 	mov	r5,r3
  808c68:	200f883a 	mov	r7,r4
  808c6c:	28c00017 	ldw	r3,0(r5)
  808c70:	31bffc04 	addi	r6,r6,-16
  808c74:	38c00015 	stw	r3,0(r7)
  808c78:	28800117 	ldw	r2,4(r5)
  808c7c:	38800115 	stw	r2,4(r7)
  808c80:	28c00217 	ldw	r3,8(r5)
  808c84:	38c00215 	stw	r3,8(r7)
  808c88:	28800317 	ldw	r2,12(r5)
  808c8c:	29400404 	addi	r5,r5,16
  808c90:	38800315 	stw	r2,12(r7)
  808c94:	39c00404 	addi	r7,r7,16
  808c98:	41bff436 	bltu	r8,r6,808c6c <memmove+0x84>
  808c9c:	008000c4 	movi	r2,3
  808ca0:	1180072e 	bgeu	r2,r6,808cc0 <memmove+0xd8>
  808ca4:	1007883a 	mov	r3,r2
  808ca8:	28800017 	ldw	r2,0(r5)
  808cac:	31bfff04 	addi	r6,r6,-4
  808cb0:	29400104 	addi	r5,r5,4
  808cb4:	38800015 	stw	r2,0(r7)
  808cb8:	39c00104 	addi	r7,r7,4
  808cbc:	19bffa36 	bltu	r3,r6,808ca8 <memmove+0xc0>
  808cc0:	3811883a 	mov	r8,r7
  808cc4:	003fd906 	br	808c2c <memmove+0x44>

00808cc8 <_Bfree>:
  808cc8:	28000826 	beq	r5,zero,808cec <_Bfree+0x24>
  808ccc:	28800117 	ldw	r2,4(r5)
  808cd0:	21001317 	ldw	r4,76(r4)
  808cd4:	1085883a 	add	r2,r2,r2
  808cd8:	1085883a 	add	r2,r2,r2
  808cdc:	1105883a 	add	r2,r2,r4
  808ce0:	10c00017 	ldw	r3,0(r2)
  808ce4:	28c00015 	stw	r3,0(r5)
  808ce8:	11400015 	stw	r5,0(r2)
  808cec:	f800283a 	ret

00808cf0 <__hi0bits>:
  808cf0:	20bfffec 	andhi	r2,r4,65535
  808cf4:	10001426 	beq	r2,zero,808d48 <__hi0bits+0x58>
  808cf8:	0007883a 	mov	r3,zero
  808cfc:	20bfc02c 	andhi	r2,r4,65280
  808d00:	1000021e 	bne	r2,zero,808d0c <__hi0bits+0x1c>
  808d04:	2008923a 	slli	r4,r4,8
  808d08:	18c00204 	addi	r3,r3,8
  808d0c:	20bc002c 	andhi	r2,r4,61440
  808d10:	1000021e 	bne	r2,zero,808d1c <__hi0bits+0x2c>
  808d14:	2008913a 	slli	r4,r4,4
  808d18:	18c00104 	addi	r3,r3,4
  808d1c:	20b0002c 	andhi	r2,r4,49152
  808d20:	1000031e 	bne	r2,zero,808d30 <__hi0bits+0x40>
  808d24:	2105883a 	add	r2,r4,r4
  808d28:	18c00084 	addi	r3,r3,2
  808d2c:	1089883a 	add	r4,r2,r2
  808d30:	20000316 	blt	r4,zero,808d40 <__hi0bits+0x50>
  808d34:	2090002c 	andhi	r2,r4,16384
  808d38:	10000626 	beq	r2,zero,808d54 <__hi0bits+0x64>
  808d3c:	18c00044 	addi	r3,r3,1
  808d40:	1805883a 	mov	r2,r3
  808d44:	f800283a 	ret
  808d48:	2008943a 	slli	r4,r4,16
  808d4c:	00c00404 	movi	r3,16
  808d50:	003fea06 	br	808cfc <__hi0bits+0xc>
  808d54:	00c00804 	movi	r3,32
  808d58:	1805883a 	mov	r2,r3
  808d5c:	f800283a 	ret

00808d60 <__lo0bits>:
  808d60:	20c00017 	ldw	r3,0(r4)
  808d64:	188001cc 	andi	r2,r3,7
  808d68:	10000a26 	beq	r2,zero,808d94 <__lo0bits+0x34>
  808d6c:	1880004c 	andi	r2,r3,1
  808d70:	1005003a 	cmpeq	r2,r2,zero
  808d74:	10002126 	beq	r2,zero,808dfc <__lo0bits+0x9c>
  808d78:	1880008c 	andi	r2,r3,2
  808d7c:	1000251e 	bne	r2,zero,808e14 <__lo0bits+0xb4>
  808d80:	1804d0ba 	srli	r2,r3,2
  808d84:	01400084 	movi	r5,2
  808d88:	20800015 	stw	r2,0(r4)
  808d8c:	2805883a 	mov	r2,r5
  808d90:	f800283a 	ret
  808d94:	18bfffcc 	andi	r2,r3,65535
  808d98:	10001526 	beq	r2,zero,808df0 <__lo0bits+0x90>
  808d9c:	000b883a 	mov	r5,zero
  808da0:	18803fcc 	andi	r2,r3,255
  808da4:	1000021e 	bne	r2,zero,808db0 <__lo0bits+0x50>
  808da8:	1806d23a 	srli	r3,r3,8
  808dac:	29400204 	addi	r5,r5,8
  808db0:	188003cc 	andi	r2,r3,15
  808db4:	1000021e 	bne	r2,zero,808dc0 <__lo0bits+0x60>
  808db8:	1806d13a 	srli	r3,r3,4
  808dbc:	29400104 	addi	r5,r5,4
  808dc0:	188000cc 	andi	r2,r3,3
  808dc4:	1000021e 	bne	r2,zero,808dd0 <__lo0bits+0x70>
  808dc8:	1806d0ba 	srli	r3,r3,2
  808dcc:	29400084 	addi	r5,r5,2
  808dd0:	1880004c 	andi	r2,r3,1
  808dd4:	1000031e 	bne	r2,zero,808de4 <__lo0bits+0x84>
  808dd8:	1806d07a 	srli	r3,r3,1
  808ddc:	18000a26 	beq	r3,zero,808e08 <__lo0bits+0xa8>
  808de0:	29400044 	addi	r5,r5,1
  808de4:	2805883a 	mov	r2,r5
  808de8:	20c00015 	stw	r3,0(r4)
  808dec:	f800283a 	ret
  808df0:	1806d43a 	srli	r3,r3,16
  808df4:	01400404 	movi	r5,16
  808df8:	003fe906 	br	808da0 <__lo0bits+0x40>
  808dfc:	000b883a 	mov	r5,zero
  808e00:	2805883a 	mov	r2,r5
  808e04:	f800283a 	ret
  808e08:	01400804 	movi	r5,32
  808e0c:	2805883a 	mov	r2,r5
  808e10:	f800283a 	ret
  808e14:	1804d07a 	srli	r2,r3,1
  808e18:	01400044 	movi	r5,1
  808e1c:	20800015 	stw	r2,0(r4)
  808e20:	003fda06 	br	808d8c <__lo0bits+0x2c>

00808e24 <__mcmp>:
  808e24:	20800417 	ldw	r2,16(r4)
  808e28:	28c00417 	ldw	r3,16(r5)
  808e2c:	10cfc83a 	sub	r7,r2,r3
  808e30:	38000c1e 	bne	r7,zero,808e64 <__mcmp+0x40>
  808e34:	18c5883a 	add	r2,r3,r3
  808e38:	1085883a 	add	r2,r2,r2
  808e3c:	10c00504 	addi	r3,r2,20
  808e40:	21000504 	addi	r4,r4,20
  808e44:	28cb883a 	add	r5,r5,r3
  808e48:	2085883a 	add	r2,r4,r2
  808e4c:	10bfff04 	addi	r2,r2,-4
  808e50:	297fff04 	addi	r5,r5,-4
  808e54:	11800017 	ldw	r6,0(r2)
  808e58:	28c00017 	ldw	r3,0(r5)
  808e5c:	30c0031e 	bne	r6,r3,808e6c <__mcmp+0x48>
  808e60:	20bffa36 	bltu	r4,r2,808e4c <__mcmp+0x28>
  808e64:	3805883a 	mov	r2,r7
  808e68:	f800283a 	ret
  808e6c:	30c00336 	bltu	r6,r3,808e7c <__mcmp+0x58>
  808e70:	01c00044 	movi	r7,1
  808e74:	3805883a 	mov	r2,r7
  808e78:	f800283a 	ret
  808e7c:	01ffffc4 	movi	r7,-1
  808e80:	003ff806 	br	808e64 <__mcmp+0x40>

00808e84 <__ulp>:
  808e84:	295ffc2c 	andhi	r5,r5,32752
  808e88:	013f3034 	movhi	r4,64704
  808e8c:	290b883a 	add	r5,r5,r4
  808e90:	0145c83a 	sub	r2,zero,r5
  808e94:	1007d53a 	srai	r3,r2,20
  808e98:	000d883a 	mov	r6,zero
  808e9c:	0140040e 	bge	zero,r5,808eb0 <__ulp+0x2c>
  808ea0:	280f883a 	mov	r7,r5
  808ea4:	3807883a 	mov	r3,r7
  808ea8:	3005883a 	mov	r2,r6
  808eac:	f800283a 	ret
  808eb0:	008004c4 	movi	r2,19
  808eb4:	193ffb04 	addi	r4,r3,-20
  808eb8:	10c00c0e 	bge	r2,r3,808eec <__ulp+0x68>
  808ebc:	008007c4 	movi	r2,31
  808ec0:	1107c83a 	sub	r3,r2,r4
  808ec4:	00800784 	movi	r2,30
  808ec8:	01400044 	movi	r5,1
  808ecc:	11000216 	blt	r2,r4,808ed8 <__ulp+0x54>
  808ed0:	00800044 	movi	r2,1
  808ed4:	10ca983a 	sll	r5,r2,r3
  808ed8:	000f883a 	mov	r7,zero
  808edc:	280d883a 	mov	r6,r5
  808ee0:	3807883a 	mov	r3,r7
  808ee4:	3005883a 	mov	r2,r6
  808ee8:	f800283a 	ret
  808eec:	00800234 	movhi	r2,8
  808ef0:	10cfd83a 	sra	r7,r2,r3
  808ef4:	000d883a 	mov	r6,zero
  808ef8:	3005883a 	mov	r2,r6
  808efc:	3807883a 	mov	r3,r7
  808f00:	f800283a 	ret

00808f04 <__b2d>:
  808f04:	20800417 	ldw	r2,16(r4)
  808f08:	defff904 	addi	sp,sp,-28
  808f0c:	dd000415 	stw	r20,16(sp)
  808f10:	1085883a 	add	r2,r2,r2
  808f14:	25000504 	addi	r20,r4,20
  808f18:	1085883a 	add	r2,r2,r2
  808f1c:	dc000015 	stw	r16,0(sp)
  808f20:	a0a1883a 	add	r16,r20,r2
  808f24:	dd400515 	stw	r21,20(sp)
  808f28:	857fff17 	ldw	r21,-4(r16)
  808f2c:	dc400115 	stw	r17,4(sp)
  808f30:	dfc00615 	stw	ra,24(sp)
  808f34:	a809883a 	mov	r4,r21
  808f38:	2823883a 	mov	r17,r5
  808f3c:	dcc00315 	stw	r19,12(sp)
  808f40:	dc800215 	stw	r18,8(sp)
  808f44:	0808cf00 	call	808cf0 <__hi0bits>
  808f48:	100b883a 	mov	r5,r2
  808f4c:	00800804 	movi	r2,32
  808f50:	1145c83a 	sub	r2,r2,r5
  808f54:	88800015 	stw	r2,0(r17)
  808f58:	00800284 	movi	r2,10
  808f5c:	80ffff04 	addi	r3,r16,-4
  808f60:	11401416 	blt	r2,r5,808fb4 <__b2d+0xb0>
  808f64:	008002c4 	movi	r2,11
  808f68:	1149c83a 	sub	r4,r2,r5
  808f6c:	a0c02736 	bltu	r20,r3,80900c <__b2d+0x108>
  808f70:	000d883a 	mov	r6,zero
  808f74:	28800544 	addi	r2,r5,21
  808f78:	a906d83a 	srl	r3,r21,r4
  808f7c:	a884983a 	sll	r2,r21,r2
  808f80:	1ccffc34 	orhi	r19,r3,16368
  808f84:	11a4b03a 	or	r18,r2,r6
  808f88:	9005883a 	mov	r2,r18
  808f8c:	9807883a 	mov	r3,r19
  808f90:	dfc00617 	ldw	ra,24(sp)
  808f94:	dd400517 	ldw	r21,20(sp)
  808f98:	dd000417 	ldw	r20,16(sp)
  808f9c:	dcc00317 	ldw	r19,12(sp)
  808fa0:	dc800217 	ldw	r18,8(sp)
  808fa4:	dc400117 	ldw	r17,4(sp)
  808fa8:	dc000017 	ldw	r16,0(sp)
  808fac:	dec00704 	addi	sp,sp,28
  808fb0:	f800283a 	ret
  808fb4:	a0c00e36 	bltu	r20,r3,808ff0 <__b2d+0xec>
  808fb8:	293ffd44 	addi	r4,r5,-11
  808fbc:	000d883a 	mov	r6,zero
  808fc0:	20000f26 	beq	r4,zero,809000 <__b2d+0xfc>
  808fc4:	00800804 	movi	r2,32
  808fc8:	110bc83a 	sub	r5,r2,r4
  808fcc:	a0c01236 	bltu	r20,r3,809018 <__b2d+0x114>
  808fd0:	000f883a 	mov	r7,zero
  808fd4:	a904983a 	sll	r2,r21,r4
  808fd8:	3146d83a 	srl	r3,r6,r5
  808fdc:	3108983a 	sll	r4,r6,r4
  808fe0:	108ffc34 	orhi	r2,r2,16368
  808fe4:	18a6b03a 	or	r19,r3,r2
  808fe8:	3924b03a 	or	r18,r7,r4
  808fec:	003fe606 	br	808f88 <__b2d+0x84>
  808ff0:	293ffd44 	addi	r4,r5,-11
  808ff4:	81bffe17 	ldw	r6,-8(r16)
  808ff8:	80fffe04 	addi	r3,r16,-8
  808ffc:	203ff11e 	bne	r4,zero,808fc4 <__b2d+0xc0>
  809000:	accffc34 	orhi	r19,r21,16368
  809004:	3025883a 	mov	r18,r6
  809008:	003fdf06 	br	808f88 <__b2d+0x84>
  80900c:	18bfff17 	ldw	r2,-4(r3)
  809010:	110cd83a 	srl	r6,r2,r4
  809014:	003fd706 	br	808f74 <__b2d+0x70>
  809018:	18bfff17 	ldw	r2,-4(r3)
  80901c:	114ed83a 	srl	r7,r2,r5
  809020:	003fec06 	br	808fd4 <__b2d+0xd0>

00809024 <__ratio>:
  809024:	defff904 	addi	sp,sp,-28
  809028:	dc400215 	stw	r17,8(sp)
  80902c:	2823883a 	mov	r17,r5
  809030:	d80b883a 	mov	r5,sp
  809034:	dfc00615 	stw	ra,24(sp)
  809038:	dd000515 	stw	r20,20(sp)
  80903c:	dcc00415 	stw	r19,16(sp)
  809040:	dc800315 	stw	r18,12(sp)
  809044:	2025883a 	mov	r18,r4
  809048:	0808f040 	call	808f04 <__b2d>
  80904c:	8809883a 	mov	r4,r17
  809050:	d9400104 	addi	r5,sp,4
  809054:	1027883a 	mov	r19,r2
  809058:	1829883a 	mov	r20,r3
  80905c:	0808f040 	call	808f04 <__b2d>
  809060:	89000417 	ldw	r4,16(r17)
  809064:	91c00417 	ldw	r7,16(r18)
  809068:	d9800117 	ldw	r6,4(sp)
  80906c:	180b883a 	mov	r5,r3
  809070:	390fc83a 	sub	r7,r7,r4
  809074:	1009883a 	mov	r4,r2
  809078:	d8800017 	ldw	r2,0(sp)
  80907c:	380e917a 	slli	r7,r7,5
  809080:	2011883a 	mov	r8,r4
  809084:	1185c83a 	sub	r2,r2,r6
  809088:	11c5883a 	add	r2,r2,r7
  80908c:	1006953a 	slli	r3,r2,20
  809090:	2813883a 	mov	r9,r5
  809094:	00800d0e 	bge	zero,r2,8090cc <__ratio+0xa8>
  809098:	1d29883a 	add	r20,r3,r20
  80909c:	a00b883a 	mov	r5,r20
  8090a0:	480f883a 	mov	r7,r9
  8090a4:	9809883a 	mov	r4,r19
  8090a8:	400d883a 	mov	r6,r8
  8090ac:	080f3e00 	call	80f3e0 <__divdf3>
  8090b0:	dfc00617 	ldw	ra,24(sp)
  8090b4:	dd000517 	ldw	r20,20(sp)
  8090b8:	dcc00417 	ldw	r19,16(sp)
  8090bc:	dc800317 	ldw	r18,12(sp)
  8090c0:	dc400217 	ldw	r17,8(sp)
  8090c4:	dec00704 	addi	sp,sp,28
  8090c8:	f800283a 	ret
  8090cc:	28d3c83a 	sub	r9,r5,r3
  8090d0:	003ff206 	br	80909c <__ratio+0x78>

008090d4 <_mprec_log10>:
  8090d4:	defffe04 	addi	sp,sp,-8
  8090d8:	008005c4 	movi	r2,23
  8090dc:	dc000015 	stw	r16,0(sp)
  8090e0:	dfc00115 	stw	ra,4(sp)
  8090e4:	2021883a 	mov	r16,r4
  8090e8:	11000c16 	blt	r2,r4,80911c <_mprec_log10+0x48>
  8090ec:	200490fa 	slli	r2,r4,3
  8090f0:	00c02074 	movhi	r3,129
  8090f4:	18d2db04 	addi	r3,r3,19308
  8090f8:	10c5883a 	add	r2,r2,r3
  8090fc:	12400117 	ldw	r9,4(r2)
  809100:	12000017 	ldw	r8,0(r2)
  809104:	4807883a 	mov	r3,r9
  809108:	4005883a 	mov	r2,r8
  80910c:	dfc00117 	ldw	ra,4(sp)
  809110:	dc000017 	ldw	r16,0(sp)
  809114:	dec00204 	addi	sp,sp,8
  809118:	f800283a 	ret
  80911c:	0011883a 	mov	r8,zero
  809120:	024ffc34 	movhi	r9,16368
  809124:	0005883a 	mov	r2,zero
  809128:	00d00934 	movhi	r3,16420
  80912c:	480b883a 	mov	r5,r9
  809130:	4009883a 	mov	r4,r8
  809134:	180f883a 	mov	r7,r3
  809138:	100d883a 	mov	r6,r2
  80913c:	080f01c0 	call	80f01c <__muldf3>
  809140:	843fffc4 	addi	r16,r16,-1
  809144:	1011883a 	mov	r8,r2
  809148:	1813883a 	mov	r9,r3
  80914c:	803ff51e 	bne	r16,zero,809124 <_mprec_log10+0x50>
  809150:	4005883a 	mov	r2,r8
  809154:	4807883a 	mov	r3,r9
  809158:	dfc00117 	ldw	ra,4(sp)
  80915c:	dc000017 	ldw	r16,0(sp)
  809160:	dec00204 	addi	sp,sp,8
  809164:	f800283a 	ret

00809168 <__copybits>:
  809168:	297fffc4 	addi	r5,r5,-1
  80916c:	30800417 	ldw	r2,16(r6)
  809170:	280bd17a 	srai	r5,r5,5
  809174:	31800504 	addi	r6,r6,20
  809178:	1085883a 	add	r2,r2,r2
  80917c:	294b883a 	add	r5,r5,r5
  809180:	294b883a 	add	r5,r5,r5
  809184:	1085883a 	add	r2,r2,r2
  809188:	290b883a 	add	r5,r5,r4
  80918c:	3087883a 	add	r3,r6,r2
  809190:	29400104 	addi	r5,r5,4
  809194:	30c0052e 	bgeu	r6,r3,8091ac <__copybits+0x44>
  809198:	30800017 	ldw	r2,0(r6)
  80919c:	31800104 	addi	r6,r6,4
  8091a0:	20800015 	stw	r2,0(r4)
  8091a4:	21000104 	addi	r4,r4,4
  8091a8:	30fffb36 	bltu	r6,r3,809198 <__copybits+0x30>
  8091ac:	2140032e 	bgeu	r4,r5,8091bc <__copybits+0x54>
  8091b0:	20000015 	stw	zero,0(r4)
  8091b4:	21000104 	addi	r4,r4,4
  8091b8:	217ffd36 	bltu	r4,r5,8091b0 <__copybits+0x48>
  8091bc:	f800283a 	ret

008091c0 <__any_on>:
  8091c0:	20800417 	ldw	r2,16(r4)
  8091c4:	2807d17a 	srai	r3,r5,5
  8091c8:	21000504 	addi	r4,r4,20
  8091cc:	10c00d0e 	bge	r2,r3,809204 <__any_on+0x44>
  8091d0:	1085883a 	add	r2,r2,r2
  8091d4:	1085883a 	add	r2,r2,r2
  8091d8:	208d883a 	add	r6,r4,r2
  8091dc:	2180182e 	bgeu	r4,r6,809240 <__any_on+0x80>
  8091e0:	30bfff17 	ldw	r2,-4(r6)
  8091e4:	30ffff04 	addi	r3,r6,-4
  8091e8:	1000041e 	bne	r2,zero,8091fc <__any_on+0x3c>
  8091ec:	20c0142e 	bgeu	r4,r3,809240 <__any_on+0x80>
  8091f0:	18ffff04 	addi	r3,r3,-4
  8091f4:	18800017 	ldw	r2,0(r3)
  8091f8:	103ffc26 	beq	r2,zero,8091ec <__any_on+0x2c>
  8091fc:	00800044 	movi	r2,1
  809200:	f800283a 	ret
  809204:	18800a0e 	bge	r3,r2,809230 <__any_on+0x70>
  809208:	294007cc 	andi	r5,r5,31
  80920c:	28000826 	beq	r5,zero,809230 <__any_on+0x70>
  809210:	18c5883a 	add	r2,r3,r3
  809214:	1085883a 	add	r2,r2,r2
  809218:	208d883a 	add	r6,r4,r2
  80921c:	30c00017 	ldw	r3,0(r6)
  809220:	1944d83a 	srl	r2,r3,r5
  809224:	1144983a 	sll	r2,r2,r5
  809228:	18bff41e 	bne	r3,r2,8091fc <__any_on+0x3c>
  80922c:	003feb06 	br	8091dc <__any_on+0x1c>
  809230:	18c5883a 	add	r2,r3,r3
  809234:	1085883a 	add	r2,r2,r2
  809238:	208d883a 	add	r6,r4,r2
  80923c:	003fe706 	br	8091dc <__any_on+0x1c>
  809240:	0005883a 	mov	r2,zero
  809244:	f800283a 	ret

00809248 <_Balloc>:
  809248:	20c01317 	ldw	r3,76(r4)
  80924c:	defffb04 	addi	sp,sp,-20
  809250:	dcc00315 	stw	r19,12(sp)
  809254:	dc800215 	stw	r18,8(sp)
  809258:	dfc00415 	stw	ra,16(sp)
  80925c:	2825883a 	mov	r18,r5
  809260:	dc400115 	stw	r17,4(sp)
  809264:	dc000015 	stw	r16,0(sp)
  809268:	2027883a 	mov	r19,r4
  80926c:	01800404 	movi	r6,16
  809270:	01400104 	movi	r5,4
  809274:	18001726 	beq	r3,zero,8092d4 <_Balloc+0x8c>
  809278:	01400044 	movi	r5,1
  80927c:	9485883a 	add	r2,r18,r18
  809280:	2ca2983a 	sll	r17,r5,r18
  809284:	1085883a 	add	r2,r2,r2
  809288:	10c7883a 	add	r3,r2,r3
  80928c:	1c000017 	ldw	r16,0(r3)
  809290:	8c4d883a 	add	r6,r17,r17
  809294:	318d883a 	add	r6,r6,r6
  809298:	9809883a 	mov	r4,r19
  80929c:	31800504 	addi	r6,r6,20
  8092a0:	80001226 	beq	r16,zero,8092ec <_Balloc+0xa4>
  8092a4:	80800017 	ldw	r2,0(r16)
  8092a8:	18800015 	stw	r2,0(r3)
  8092ac:	80000415 	stw	zero,16(r16)
  8092b0:	80000315 	stw	zero,12(r16)
  8092b4:	8005883a 	mov	r2,r16
  8092b8:	dfc00417 	ldw	ra,16(sp)
  8092bc:	dcc00317 	ldw	r19,12(sp)
  8092c0:	dc800217 	ldw	r18,8(sp)
  8092c4:	dc400117 	ldw	r17,4(sp)
  8092c8:	dc000017 	ldw	r16,0(sp)
  8092cc:	dec00504 	addi	sp,sp,20
  8092d0:	f800283a 	ret
  8092d4:	080ce880 	call	80ce88 <_calloc_r>
  8092d8:	1007883a 	mov	r3,r2
  8092dc:	0021883a 	mov	r16,zero
  8092e0:	98801315 	stw	r2,76(r19)
  8092e4:	103fe41e 	bne	r2,zero,809278 <_Balloc+0x30>
  8092e8:	003ff206 	br	8092b4 <_Balloc+0x6c>
  8092ec:	080ce880 	call	80ce88 <_calloc_r>
  8092f0:	103ff026 	beq	r2,zero,8092b4 <_Balloc+0x6c>
  8092f4:	1021883a 	mov	r16,r2
  8092f8:	14800115 	stw	r18,4(r2)
  8092fc:	14400215 	stw	r17,8(r2)
  809300:	003fea06 	br	8092ac <_Balloc+0x64>

00809304 <__d2b>:
  809304:	defff504 	addi	sp,sp,-44
  809308:	dcc00515 	stw	r19,20(sp)
  80930c:	04c00044 	movi	r19,1
  809310:	dc000215 	stw	r16,8(sp)
  809314:	2821883a 	mov	r16,r5
  809318:	980b883a 	mov	r5,r19
  80931c:	ddc00915 	stw	r23,36(sp)
  809320:	dd800815 	stw	r22,32(sp)
  809324:	dd400715 	stw	r21,28(sp)
  809328:	dd000615 	stw	r20,24(sp)
  80932c:	dc800415 	stw	r18,16(sp)
  809330:	dc400315 	stw	r17,12(sp)
  809334:	dfc00a15 	stw	ra,40(sp)
  809338:	3023883a 	mov	r17,r6
  80933c:	382d883a 	mov	r22,r7
  809340:	ddc00b17 	ldw	r23,44(sp)
  809344:	08092480 	call	809248 <_Balloc>
  809348:	1025883a 	mov	r18,r2
  80934c:	00a00034 	movhi	r2,32768
  809350:	10bfffc4 	addi	r2,r2,-1
  809354:	8888703a 	and	r4,r17,r2
  809358:	202ad53a 	srli	r21,r4,20
  80935c:	00800434 	movhi	r2,16
  809360:	10bfffc4 	addi	r2,r2,-1
  809364:	8886703a 	and	r3,r17,r2
  809368:	a829003a 	cmpeq	r20,r21,zero
  80936c:	800b883a 	mov	r5,r16
  809370:	d8c00115 	stw	r3,4(sp)
  809374:	94000504 	addi	r16,r18,20
  809378:	a000021e 	bne	r20,zero,809384 <__d2b+0x80>
  80937c:	18c00434 	orhi	r3,r3,16
  809380:	d8c00115 	stw	r3,4(sp)
  809384:	28002726 	beq	r5,zero,809424 <__d2b+0x120>
  809388:	d809883a 	mov	r4,sp
  80938c:	d9400015 	stw	r5,0(sp)
  809390:	0808d600 	call	808d60 <__lo0bits>
  809394:	100d883a 	mov	r6,r2
  809398:	10003526 	beq	r2,zero,809470 <__d2b+0x16c>
  80939c:	d8c00117 	ldw	r3,4(sp)
  8093a0:	00800804 	movi	r2,32
  8093a4:	1185c83a 	sub	r2,r2,r6
  8093a8:	d9000017 	ldw	r4,0(sp)
  8093ac:	1886983a 	sll	r3,r3,r2
  8093b0:	1906b03a 	or	r3,r3,r4
  8093b4:	90c00515 	stw	r3,20(r18)
  8093b8:	d8c00117 	ldw	r3,4(sp)
  8093bc:	1986d83a 	srl	r3,r3,r6
  8093c0:	d8c00115 	stw	r3,4(sp)
  8093c4:	180b003a 	cmpeq	r5,r3,zero
  8093c8:	00800084 	movi	r2,2
  8093cc:	114bc83a 	sub	r5,r2,r5
  8093d0:	80c00115 	stw	r3,4(r16)
  8093d4:	91400415 	stw	r5,16(r18)
  8093d8:	a0001a1e 	bne	r20,zero,809444 <__d2b+0x140>
  8093dc:	3545883a 	add	r2,r6,r21
  8093e0:	10bef344 	addi	r2,r2,-1075
  8093e4:	00c00d44 	movi	r3,53
  8093e8:	b0800015 	stw	r2,0(r22)
  8093ec:	1987c83a 	sub	r3,r3,r6
  8093f0:	b8c00015 	stw	r3,0(r23)
  8093f4:	9005883a 	mov	r2,r18
  8093f8:	dfc00a17 	ldw	ra,40(sp)
  8093fc:	ddc00917 	ldw	r23,36(sp)
  809400:	dd800817 	ldw	r22,32(sp)
  809404:	dd400717 	ldw	r21,28(sp)
  809408:	dd000617 	ldw	r20,24(sp)
  80940c:	dcc00517 	ldw	r19,20(sp)
  809410:	dc800417 	ldw	r18,16(sp)
  809414:	dc400317 	ldw	r17,12(sp)
  809418:	dc000217 	ldw	r16,8(sp)
  80941c:	dec00b04 	addi	sp,sp,44
  809420:	f800283a 	ret
  809424:	d9000104 	addi	r4,sp,4
  809428:	0808d600 	call	808d60 <__lo0bits>
  80942c:	11800804 	addi	r6,r2,32
  809430:	d8800117 	ldw	r2,4(sp)
  809434:	94c00415 	stw	r19,16(r18)
  809438:	980b883a 	mov	r5,r19
  80943c:	90800515 	stw	r2,20(r18)
  809440:	a03fe626 	beq	r20,zero,8093dc <__d2b+0xd8>
  809444:	2945883a 	add	r2,r5,r5
  809448:	1085883a 	add	r2,r2,r2
  80944c:	1405883a 	add	r2,r2,r16
  809450:	113fff17 	ldw	r4,-4(r2)
  809454:	30fef384 	addi	r3,r6,-1074
  809458:	2820917a 	slli	r16,r5,5
  80945c:	b0c00015 	stw	r3,0(r22)
  809460:	0808cf00 	call	808cf0 <__hi0bits>
  809464:	80a1c83a 	sub	r16,r16,r2
  809468:	bc000015 	stw	r16,0(r23)
  80946c:	003fe106 	br	8093f4 <__d2b+0xf0>
  809470:	d8800017 	ldw	r2,0(sp)
  809474:	90800515 	stw	r2,20(r18)
  809478:	d8c00117 	ldw	r3,4(sp)
  80947c:	003fd106 	br	8093c4 <__d2b+0xc0>

00809480 <__mdiff>:
  809480:	defffb04 	addi	sp,sp,-20
  809484:	dc000015 	stw	r16,0(sp)
  809488:	2821883a 	mov	r16,r5
  80948c:	dc800215 	stw	r18,8(sp)
  809490:	300b883a 	mov	r5,r6
  809494:	2025883a 	mov	r18,r4
  809498:	8009883a 	mov	r4,r16
  80949c:	dc400115 	stw	r17,4(sp)
  8094a0:	dfc00415 	stw	ra,16(sp)
  8094a4:	dcc00315 	stw	r19,12(sp)
  8094a8:	3023883a 	mov	r17,r6
  8094ac:	0808e240 	call	808e24 <__mcmp>
  8094b0:	10004226 	beq	r2,zero,8095bc <__mdiff+0x13c>
  8094b4:	10005016 	blt	r2,zero,8095f8 <__mdiff+0x178>
  8094b8:	0027883a 	mov	r19,zero
  8094bc:	81400117 	ldw	r5,4(r16)
  8094c0:	9009883a 	mov	r4,r18
  8094c4:	08092480 	call	809248 <_Balloc>
  8094c8:	1019883a 	mov	r12,r2
  8094cc:	82800417 	ldw	r10,16(r16)
  8094d0:	88800417 	ldw	r2,16(r17)
  8094d4:	81800504 	addi	r6,r16,20
  8094d8:	5287883a 	add	r3,r10,r10
  8094dc:	1085883a 	add	r2,r2,r2
  8094e0:	18c7883a 	add	r3,r3,r3
  8094e4:	1085883a 	add	r2,r2,r2
  8094e8:	8a000504 	addi	r8,r17,20
  8094ec:	64c00315 	stw	r19,12(r12)
  8094f0:	30db883a 	add	r13,r6,r3
  8094f4:	4097883a 	add	r11,r8,r2
  8094f8:	61c00504 	addi	r7,r12,20
  8094fc:	0013883a 	mov	r9,zero
  809500:	31000017 	ldw	r4,0(r6)
  809504:	41400017 	ldw	r5,0(r8)
  809508:	42000104 	addi	r8,r8,4
  80950c:	20bfffcc 	andi	r2,r4,65535
  809510:	28ffffcc 	andi	r3,r5,65535
  809514:	10c5c83a 	sub	r2,r2,r3
  809518:	1245883a 	add	r2,r2,r9
  80951c:	2008d43a 	srli	r4,r4,16
  809520:	280ad43a 	srli	r5,r5,16
  809524:	1007d43a 	srai	r3,r2,16
  809528:	3880000d 	sth	r2,0(r7)
  80952c:	2149c83a 	sub	r4,r4,r5
  809530:	20c9883a 	add	r4,r4,r3
  809534:	3900008d 	sth	r4,2(r7)
  809538:	31800104 	addi	r6,r6,4
  80953c:	39c00104 	addi	r7,r7,4
  809540:	2013d43a 	srai	r9,r4,16
  809544:	42ffee36 	bltu	r8,r11,809500 <__mdiff+0x80>
  809548:	33400c2e 	bgeu	r6,r13,80957c <__mdiff+0xfc>
  80954c:	30800017 	ldw	r2,0(r6)
  809550:	31800104 	addi	r6,r6,4
  809554:	10ffffcc 	andi	r3,r2,65535
  809558:	1a47883a 	add	r3,r3,r9
  80955c:	1004d43a 	srli	r2,r2,16
  809560:	1809d43a 	srai	r4,r3,16
  809564:	38c0000d 	sth	r3,0(r7)
  809568:	1105883a 	add	r2,r2,r4
  80956c:	3880008d 	sth	r2,2(r7)
  809570:	1013d43a 	srai	r9,r2,16
  809574:	39c00104 	addi	r7,r7,4
  809578:	337ff436 	bltu	r6,r13,80954c <__mdiff+0xcc>
  80957c:	38bfff17 	ldw	r2,-4(r7)
  809580:	38ffff04 	addi	r3,r7,-4
  809584:	1000041e 	bne	r2,zero,809598 <__mdiff+0x118>
  809588:	18ffff04 	addi	r3,r3,-4
  80958c:	18800017 	ldw	r2,0(r3)
  809590:	52bfffc4 	addi	r10,r10,-1
  809594:	103ffc26 	beq	r2,zero,809588 <__mdiff+0x108>
  809598:	6005883a 	mov	r2,r12
  80959c:	62800415 	stw	r10,16(r12)
  8095a0:	dfc00417 	ldw	ra,16(sp)
  8095a4:	dcc00317 	ldw	r19,12(sp)
  8095a8:	dc800217 	ldw	r18,8(sp)
  8095ac:	dc400117 	ldw	r17,4(sp)
  8095b0:	dc000017 	ldw	r16,0(sp)
  8095b4:	dec00504 	addi	sp,sp,20
  8095b8:	f800283a 	ret
  8095bc:	9009883a 	mov	r4,r18
  8095c0:	000b883a 	mov	r5,zero
  8095c4:	08092480 	call	809248 <_Balloc>
  8095c8:	1019883a 	mov	r12,r2
  8095cc:	00800044 	movi	r2,1
  8095d0:	60800415 	stw	r2,16(r12)
  8095d4:	6005883a 	mov	r2,r12
  8095d8:	60000515 	stw	zero,20(r12)
  8095dc:	dfc00417 	ldw	ra,16(sp)
  8095e0:	dcc00317 	ldw	r19,12(sp)
  8095e4:	dc800217 	ldw	r18,8(sp)
  8095e8:	dc400117 	ldw	r17,4(sp)
  8095ec:	dc000017 	ldw	r16,0(sp)
  8095f0:	dec00504 	addi	sp,sp,20
  8095f4:	f800283a 	ret
  8095f8:	880d883a 	mov	r6,r17
  8095fc:	04c00044 	movi	r19,1
  809600:	8023883a 	mov	r17,r16
  809604:	3021883a 	mov	r16,r6
  809608:	003fac06 	br	8094bc <__mdiff+0x3c>

0080960c <__lshift>:
  80960c:	defff904 	addi	sp,sp,-28
  809610:	28800417 	ldw	r2,16(r5)
  809614:	dc000015 	stw	r16,0(sp)
  809618:	3021d17a 	srai	r16,r6,5
  80961c:	28c00217 	ldw	r3,8(r5)
  809620:	10800044 	addi	r2,r2,1
  809624:	dc400115 	stw	r17,4(sp)
  809628:	80a3883a 	add	r17,r16,r2
  80962c:	dd400515 	stw	r21,20(sp)
  809630:	dd000415 	stw	r20,16(sp)
  809634:	dc800215 	stw	r18,8(sp)
  809638:	dfc00615 	stw	ra,24(sp)
  80963c:	2825883a 	mov	r18,r5
  809640:	dcc00315 	stw	r19,12(sp)
  809644:	3029883a 	mov	r20,r6
  809648:	202b883a 	mov	r21,r4
  80964c:	29400117 	ldw	r5,4(r5)
  809650:	1c40030e 	bge	r3,r17,809660 <__lshift+0x54>
  809654:	18c7883a 	add	r3,r3,r3
  809658:	29400044 	addi	r5,r5,1
  80965c:	1c7ffd16 	blt	r3,r17,809654 <__lshift+0x48>
  809660:	a809883a 	mov	r4,r21
  809664:	08092480 	call	809248 <_Balloc>
  809668:	1027883a 	mov	r19,r2
  80966c:	11400504 	addi	r5,r2,20
  809670:	0400090e 	bge	zero,r16,809698 <__lshift+0x8c>
  809674:	2805883a 	mov	r2,r5
  809678:	0007883a 	mov	r3,zero
  80967c:	18c00044 	addi	r3,r3,1
  809680:	10000015 	stw	zero,0(r2)
  809684:	10800104 	addi	r2,r2,4
  809688:	80fffc1e 	bne	r16,r3,80967c <__lshift+0x70>
  80968c:	8405883a 	add	r2,r16,r16
  809690:	1085883a 	add	r2,r2,r2
  809694:	288b883a 	add	r5,r5,r2
  809698:	90800417 	ldw	r2,16(r18)
  80969c:	91000504 	addi	r4,r18,20
  8096a0:	a18007cc 	andi	r6,r20,31
  8096a4:	1085883a 	add	r2,r2,r2
  8096a8:	1085883a 	add	r2,r2,r2
  8096ac:	208f883a 	add	r7,r4,r2
  8096b0:	30001e26 	beq	r6,zero,80972c <__lshift+0x120>
  8096b4:	00800804 	movi	r2,32
  8096b8:	1191c83a 	sub	r8,r2,r6
  8096bc:	0007883a 	mov	r3,zero
  8096c0:	20800017 	ldw	r2,0(r4)
  8096c4:	1184983a 	sll	r2,r2,r6
  8096c8:	1884b03a 	or	r2,r3,r2
  8096cc:	28800015 	stw	r2,0(r5)
  8096d0:	20c00017 	ldw	r3,0(r4)
  8096d4:	21000104 	addi	r4,r4,4
  8096d8:	29400104 	addi	r5,r5,4
  8096dc:	1a06d83a 	srl	r3,r3,r8
  8096e0:	21fff736 	bltu	r4,r7,8096c0 <__lshift+0xb4>
  8096e4:	28c00015 	stw	r3,0(r5)
  8096e8:	18000126 	beq	r3,zero,8096f0 <__lshift+0xe4>
  8096ec:	8c400044 	addi	r17,r17,1
  8096f0:	88bfffc4 	addi	r2,r17,-1
  8096f4:	98800415 	stw	r2,16(r19)
  8096f8:	a809883a 	mov	r4,r21
  8096fc:	900b883a 	mov	r5,r18
  809700:	0808cc80 	call	808cc8 <_Bfree>
  809704:	9805883a 	mov	r2,r19
  809708:	dfc00617 	ldw	ra,24(sp)
  80970c:	dd400517 	ldw	r21,20(sp)
  809710:	dd000417 	ldw	r20,16(sp)
  809714:	dcc00317 	ldw	r19,12(sp)
  809718:	dc800217 	ldw	r18,8(sp)
  80971c:	dc400117 	ldw	r17,4(sp)
  809720:	dc000017 	ldw	r16,0(sp)
  809724:	dec00704 	addi	sp,sp,28
  809728:	f800283a 	ret
  80972c:	20800017 	ldw	r2,0(r4)
  809730:	21000104 	addi	r4,r4,4
  809734:	28800015 	stw	r2,0(r5)
  809738:	29400104 	addi	r5,r5,4
  80973c:	21ffec2e 	bgeu	r4,r7,8096f0 <__lshift+0xe4>
  809740:	20800017 	ldw	r2,0(r4)
  809744:	21000104 	addi	r4,r4,4
  809748:	28800015 	stw	r2,0(r5)
  80974c:	29400104 	addi	r5,r5,4
  809750:	21fff636 	bltu	r4,r7,80972c <__lshift+0x120>
  809754:	003fe606 	br	8096f0 <__lshift+0xe4>

00809758 <__multiply>:
  809758:	defff004 	addi	sp,sp,-64
  80975c:	dc800815 	stw	r18,32(sp)
  809760:	dc400715 	stw	r17,28(sp)
  809764:	2c800417 	ldw	r18,16(r5)
  809768:	34400417 	ldw	r17,16(r6)
  80976c:	dcc00915 	stw	r19,36(sp)
  809770:	dc000615 	stw	r16,24(sp)
  809774:	dfc00f15 	stw	ra,60(sp)
  809778:	df000e15 	stw	fp,56(sp)
  80977c:	ddc00d15 	stw	r23,52(sp)
  809780:	dd800c15 	stw	r22,48(sp)
  809784:	dd400b15 	stw	r21,44(sp)
  809788:	dd000a15 	stw	r20,40(sp)
  80978c:	2821883a 	mov	r16,r5
  809790:	3027883a 	mov	r19,r6
  809794:	9440040e 	bge	r18,r17,8097a8 <__multiply+0x50>
  809798:	8825883a 	mov	r18,r17
  80979c:	2c400417 	ldw	r17,16(r5)
  8097a0:	2827883a 	mov	r19,r5
  8097a4:	3021883a 	mov	r16,r6
  8097a8:	80800217 	ldw	r2,8(r16)
  8097ac:	9447883a 	add	r3,r18,r17
  8097b0:	d8c00415 	stw	r3,16(sp)
  8097b4:	81400117 	ldw	r5,4(r16)
  8097b8:	10c0010e 	bge	r2,r3,8097c0 <__multiply+0x68>
  8097bc:	29400044 	addi	r5,r5,1
  8097c0:	08092480 	call	809248 <_Balloc>
  8097c4:	d8800515 	stw	r2,20(sp)
  8097c8:	d9000417 	ldw	r4,16(sp)
  8097cc:	d8c00517 	ldw	r3,20(sp)
  8097d0:	2105883a 	add	r2,r4,r4
  8097d4:	1085883a 	add	r2,r2,r2
  8097d8:	19000504 	addi	r4,r3,20
  8097dc:	2085883a 	add	r2,r4,r2
  8097e0:	d8800315 	stw	r2,12(sp)
  8097e4:	2080052e 	bgeu	r4,r2,8097fc <__multiply+0xa4>
  8097e8:	2005883a 	mov	r2,r4
  8097ec:	d8c00317 	ldw	r3,12(sp)
  8097f0:	10000015 	stw	zero,0(r2)
  8097f4:	10800104 	addi	r2,r2,4
  8097f8:	10fffc36 	bltu	r2,r3,8097ec <__multiply+0x94>
  8097fc:	8c45883a 	add	r2,r17,r17
  809800:	9487883a 	add	r3,r18,r18
  809804:	9dc00504 	addi	r23,r19,20
  809808:	1085883a 	add	r2,r2,r2
  80980c:	84000504 	addi	r16,r16,20
  809810:	18c7883a 	add	r3,r3,r3
  809814:	b885883a 	add	r2,r23,r2
  809818:	dc000015 	stw	r16,0(sp)
  80981c:	d8800215 	stw	r2,8(sp)
  809820:	80f9883a 	add	fp,r16,r3
  809824:	b880432e 	bgeu	r23,r2,809934 <__multiply+0x1dc>
  809828:	d9000115 	stw	r4,4(sp)
  80982c:	b9000017 	ldw	r4,0(r23)
  809830:	253fffcc 	andi	r20,r4,65535
  809834:	a0001a26 	beq	r20,zero,8098a0 <__multiply+0x148>
  809838:	dcc00017 	ldw	r19,0(sp)
  80983c:	dc800117 	ldw	r18,4(sp)
  809840:	002b883a 	mov	r21,zero
  809844:	9c400017 	ldw	r17,0(r19)
  809848:	94000017 	ldw	r16,0(r18)
  80984c:	a009883a 	mov	r4,r20
  809850:	897fffcc 	andi	r5,r17,65535
  809854:	080fe8c0 	call	80fe8c <__mulsi3>
  809858:	880ad43a 	srli	r5,r17,16
  80985c:	80ffffcc 	andi	r3,r16,65535
  809860:	a8c7883a 	add	r3,r21,r3
  809864:	a009883a 	mov	r4,r20
  809868:	10e3883a 	add	r17,r2,r3
  80986c:	8020d43a 	srli	r16,r16,16
  809870:	080fe8c0 	call	80fe8c <__mulsi3>
  809874:	8806d43a 	srli	r3,r17,16
  809878:	1405883a 	add	r2,r2,r16
  80987c:	9cc00104 	addi	r19,r19,4
  809880:	1887883a 	add	r3,r3,r2
  809884:	90c0008d 	sth	r3,2(r18)
  809888:	9440000d 	sth	r17,0(r18)
  80988c:	182ad43a 	srli	r21,r3,16
  809890:	94800104 	addi	r18,r18,4
  809894:	9f3feb36 	bltu	r19,fp,809844 <__multiply+0xec>
  809898:	95400015 	stw	r21,0(r18)
  80989c:	b9000017 	ldw	r4,0(r23)
  8098a0:	202ad43a 	srli	r21,r4,16
  8098a4:	a8001c26 	beq	r21,zero,809918 <__multiply+0x1c0>
  8098a8:	d9000117 	ldw	r4,4(sp)
  8098ac:	dd000017 	ldw	r20,0(sp)
  8098b0:	002d883a 	mov	r22,zero
  8098b4:	24c00017 	ldw	r19,0(r4)
  8098b8:	2025883a 	mov	r18,r4
  8098bc:	9823883a 	mov	r17,r19
  8098c0:	a4000017 	ldw	r16,0(r20)
  8098c4:	a809883a 	mov	r4,r21
  8098c8:	a5000104 	addi	r20,r20,4
  8098cc:	817fffcc 	andi	r5,r16,65535
  8098d0:	080fe8c0 	call	80fe8c <__mulsi3>
  8098d4:	8806d43a 	srli	r3,r17,16
  8098d8:	800ad43a 	srli	r5,r16,16
  8098dc:	94c0000d 	sth	r19,0(r18)
  8098e0:	b0c7883a 	add	r3,r22,r3
  8098e4:	10e1883a 	add	r16,r2,r3
  8098e8:	9400008d 	sth	r16,2(r18)
  8098ec:	a809883a 	mov	r4,r21
  8098f0:	94800104 	addi	r18,r18,4
  8098f4:	080fe8c0 	call	80fe8c <__mulsi3>
  8098f8:	94400017 	ldw	r17,0(r18)
  8098fc:	8020d43a 	srli	r16,r16,16
  809900:	88ffffcc 	andi	r3,r17,65535
  809904:	10c5883a 	add	r2,r2,r3
  809908:	80a7883a 	add	r19,r16,r2
  80990c:	982cd43a 	srli	r22,r19,16
  809910:	a73feb36 	bltu	r20,fp,8098c0 <__multiply+0x168>
  809914:	94c00015 	stw	r19,0(r18)
  809918:	d8800217 	ldw	r2,8(sp)
  80991c:	bdc00104 	addi	r23,r23,4
  809920:	b880042e 	bgeu	r23,r2,809934 <__multiply+0x1dc>
  809924:	d8c00117 	ldw	r3,4(sp)
  809928:	18c00104 	addi	r3,r3,4
  80992c:	d8c00115 	stw	r3,4(sp)
  809930:	003fbe06 	br	80982c <__multiply+0xd4>
  809934:	d9000417 	ldw	r4,16(sp)
  809938:	01000c0e 	bge	zero,r4,80996c <__multiply+0x214>
  80993c:	d8c00317 	ldw	r3,12(sp)
  809940:	18bfff17 	ldw	r2,-4(r3)
  809944:	18ffff04 	addi	r3,r3,-4
  809948:	10000326 	beq	r2,zero,809958 <__multiply+0x200>
  80994c:	00000706 	br	80996c <__multiply+0x214>
  809950:	18800017 	ldw	r2,0(r3)
  809954:	1000051e 	bne	r2,zero,80996c <__multiply+0x214>
  809958:	d9000417 	ldw	r4,16(sp)
  80995c:	18ffff04 	addi	r3,r3,-4
  809960:	213fffc4 	addi	r4,r4,-1
  809964:	d9000415 	stw	r4,16(sp)
  809968:	203ff91e 	bne	r4,zero,809950 <__multiply+0x1f8>
  80996c:	d8800417 	ldw	r2,16(sp)
  809970:	d8c00517 	ldw	r3,20(sp)
  809974:	18800415 	stw	r2,16(r3)
  809978:	1805883a 	mov	r2,r3
  80997c:	dfc00f17 	ldw	ra,60(sp)
  809980:	df000e17 	ldw	fp,56(sp)
  809984:	ddc00d17 	ldw	r23,52(sp)
  809988:	dd800c17 	ldw	r22,48(sp)
  80998c:	dd400b17 	ldw	r21,44(sp)
  809990:	dd000a17 	ldw	r20,40(sp)
  809994:	dcc00917 	ldw	r19,36(sp)
  809998:	dc800817 	ldw	r18,32(sp)
  80999c:	dc400717 	ldw	r17,28(sp)
  8099a0:	dc000617 	ldw	r16,24(sp)
  8099a4:	dec01004 	addi	sp,sp,64
  8099a8:	f800283a 	ret

008099ac <__i2b>:
  8099ac:	defffd04 	addi	sp,sp,-12
  8099b0:	dc000015 	stw	r16,0(sp)
  8099b4:	04000044 	movi	r16,1
  8099b8:	dc800115 	stw	r18,4(sp)
  8099bc:	2825883a 	mov	r18,r5
  8099c0:	800b883a 	mov	r5,r16
  8099c4:	dfc00215 	stw	ra,8(sp)
  8099c8:	08092480 	call	809248 <_Balloc>
  8099cc:	14000415 	stw	r16,16(r2)
  8099d0:	14800515 	stw	r18,20(r2)
  8099d4:	dfc00217 	ldw	ra,8(sp)
  8099d8:	dc800117 	ldw	r18,4(sp)
  8099dc:	dc000017 	ldw	r16,0(sp)
  8099e0:	dec00304 	addi	sp,sp,12
  8099e4:	f800283a 	ret

008099e8 <__multadd>:
  8099e8:	defff604 	addi	sp,sp,-40
  8099ec:	dd800615 	stw	r22,24(sp)
  8099f0:	2d800417 	ldw	r22,16(r5)
  8099f4:	df000815 	stw	fp,32(sp)
  8099f8:	ddc00715 	stw	r23,28(sp)
  8099fc:	dd400515 	stw	r21,20(sp)
  809a00:	dd000415 	stw	r20,16(sp)
  809a04:	dcc00315 	stw	r19,12(sp)
  809a08:	dc800215 	stw	r18,8(sp)
  809a0c:	dfc00915 	stw	ra,36(sp)
  809a10:	dc400115 	stw	r17,4(sp)
  809a14:	dc000015 	stw	r16,0(sp)
  809a18:	282f883a 	mov	r23,r5
  809a1c:	2039883a 	mov	fp,r4
  809a20:	302b883a 	mov	r21,r6
  809a24:	3829883a 	mov	r20,r7
  809a28:	2c800504 	addi	r18,r5,20
  809a2c:	0027883a 	mov	r19,zero
  809a30:	94400017 	ldw	r17,0(r18)
  809a34:	a80b883a 	mov	r5,r21
  809a38:	9cc00044 	addi	r19,r19,1
  809a3c:	893fffcc 	andi	r4,r17,65535
  809a40:	080fe8c0 	call	80fe8c <__mulsi3>
  809a44:	8808d43a 	srli	r4,r17,16
  809a48:	1521883a 	add	r16,r2,r20
  809a4c:	a80b883a 	mov	r5,r21
  809a50:	080fe8c0 	call	80fe8c <__mulsi3>
  809a54:	8008d43a 	srli	r4,r16,16
  809a58:	843fffcc 	andi	r16,r16,65535
  809a5c:	1105883a 	add	r2,r2,r4
  809a60:	1006943a 	slli	r3,r2,16
  809a64:	1028d43a 	srli	r20,r2,16
  809a68:	1c07883a 	add	r3,r3,r16
  809a6c:	90c00015 	stw	r3,0(r18)
  809a70:	94800104 	addi	r18,r18,4
  809a74:	9dbfee16 	blt	r19,r22,809a30 <__multadd+0x48>
  809a78:	a0000826 	beq	r20,zero,809a9c <__multadd+0xb4>
  809a7c:	b8800217 	ldw	r2,8(r23)
  809a80:	b080130e 	bge	r22,r2,809ad0 <__multadd+0xe8>
  809a84:	b585883a 	add	r2,r22,r22
  809a88:	1085883a 	add	r2,r2,r2
  809a8c:	15c5883a 	add	r2,r2,r23
  809a90:	b0c00044 	addi	r3,r22,1
  809a94:	15000515 	stw	r20,20(r2)
  809a98:	b8c00415 	stw	r3,16(r23)
  809a9c:	b805883a 	mov	r2,r23
  809aa0:	dfc00917 	ldw	ra,36(sp)
  809aa4:	df000817 	ldw	fp,32(sp)
  809aa8:	ddc00717 	ldw	r23,28(sp)
  809aac:	dd800617 	ldw	r22,24(sp)
  809ab0:	dd400517 	ldw	r21,20(sp)
  809ab4:	dd000417 	ldw	r20,16(sp)
  809ab8:	dcc00317 	ldw	r19,12(sp)
  809abc:	dc800217 	ldw	r18,8(sp)
  809ac0:	dc400117 	ldw	r17,4(sp)
  809ac4:	dc000017 	ldw	r16,0(sp)
  809ac8:	dec00a04 	addi	sp,sp,40
  809acc:	f800283a 	ret
  809ad0:	b9400117 	ldw	r5,4(r23)
  809ad4:	e009883a 	mov	r4,fp
  809ad8:	29400044 	addi	r5,r5,1
  809adc:	08092480 	call	809248 <_Balloc>
  809ae0:	b9800417 	ldw	r6,16(r23)
  809ae4:	b9400304 	addi	r5,r23,12
  809ae8:	11000304 	addi	r4,r2,12
  809aec:	318d883a 	add	r6,r6,r6
  809af0:	318d883a 	add	r6,r6,r6
  809af4:	31800204 	addi	r6,r6,8
  809af8:	1023883a 	mov	r17,r2
  809afc:	0808b480 	call	808b48 <memcpy>
  809b00:	b80b883a 	mov	r5,r23
  809b04:	e009883a 	mov	r4,fp
  809b08:	0808cc80 	call	808cc8 <_Bfree>
  809b0c:	882f883a 	mov	r23,r17
  809b10:	003fdc06 	br	809a84 <__multadd+0x9c>

00809b14 <__pow5mult>:
  809b14:	defffa04 	addi	sp,sp,-24
  809b18:	308000cc 	andi	r2,r6,3
  809b1c:	dd000415 	stw	r20,16(sp)
  809b20:	dcc00315 	stw	r19,12(sp)
  809b24:	dc000015 	stw	r16,0(sp)
  809b28:	dfc00515 	stw	ra,20(sp)
  809b2c:	dc800215 	stw	r18,8(sp)
  809b30:	dc400115 	stw	r17,4(sp)
  809b34:	3021883a 	mov	r16,r6
  809b38:	2027883a 	mov	r19,r4
  809b3c:	2829883a 	mov	r20,r5
  809b40:	10002b1e 	bne	r2,zero,809bf0 <__pow5mult+0xdc>
  809b44:	8025d0ba 	srai	r18,r16,2
  809b48:	90001b26 	beq	r18,zero,809bb8 <__pow5mult+0xa4>
  809b4c:	9c001217 	ldw	r16,72(r19)
  809b50:	8000081e 	bne	r16,zero,809b74 <__pow5mult+0x60>
  809b54:	00003006 	br	809c18 <__pow5mult+0x104>
  809b58:	800b883a 	mov	r5,r16
  809b5c:	800d883a 	mov	r6,r16
  809b60:	9809883a 	mov	r4,r19
  809b64:	90001426 	beq	r18,zero,809bb8 <__pow5mult+0xa4>
  809b68:	80800017 	ldw	r2,0(r16)
  809b6c:	10001b26 	beq	r2,zero,809bdc <__pow5mult+0xc8>
  809b70:	1021883a 	mov	r16,r2
  809b74:	9080004c 	andi	r2,r18,1
  809b78:	1005003a 	cmpeq	r2,r2,zero
  809b7c:	9025d07a 	srai	r18,r18,1
  809b80:	800d883a 	mov	r6,r16
  809b84:	9809883a 	mov	r4,r19
  809b88:	a00b883a 	mov	r5,r20
  809b8c:	103ff21e 	bne	r2,zero,809b58 <__pow5mult+0x44>
  809b90:	08097580 	call	809758 <__multiply>
  809b94:	a00b883a 	mov	r5,r20
  809b98:	9809883a 	mov	r4,r19
  809b9c:	1023883a 	mov	r17,r2
  809ba0:	0808cc80 	call	808cc8 <_Bfree>
  809ba4:	8829883a 	mov	r20,r17
  809ba8:	800b883a 	mov	r5,r16
  809bac:	800d883a 	mov	r6,r16
  809bb0:	9809883a 	mov	r4,r19
  809bb4:	903fec1e 	bne	r18,zero,809b68 <__pow5mult+0x54>
  809bb8:	a005883a 	mov	r2,r20
  809bbc:	dfc00517 	ldw	ra,20(sp)
  809bc0:	dd000417 	ldw	r20,16(sp)
  809bc4:	dcc00317 	ldw	r19,12(sp)
  809bc8:	dc800217 	ldw	r18,8(sp)
  809bcc:	dc400117 	ldw	r17,4(sp)
  809bd0:	dc000017 	ldw	r16,0(sp)
  809bd4:	dec00604 	addi	sp,sp,24
  809bd8:	f800283a 	ret
  809bdc:	08097580 	call	809758 <__multiply>
  809be0:	80800015 	stw	r2,0(r16)
  809be4:	1021883a 	mov	r16,r2
  809be8:	10000015 	stw	zero,0(r2)
  809bec:	003fe106 	br	809b74 <__pow5mult+0x60>
  809bf0:	1085883a 	add	r2,r2,r2
  809bf4:	00c02074 	movhi	r3,129
  809bf8:	18d32104 	addi	r3,r3,19588
  809bfc:	1085883a 	add	r2,r2,r2
  809c00:	10c5883a 	add	r2,r2,r3
  809c04:	11bfff17 	ldw	r6,-4(r2)
  809c08:	000f883a 	mov	r7,zero
  809c0c:	08099e80 	call	8099e8 <__multadd>
  809c10:	1029883a 	mov	r20,r2
  809c14:	003fcb06 	br	809b44 <__pow5mult+0x30>
  809c18:	9809883a 	mov	r4,r19
  809c1c:	01409c44 	movi	r5,625
  809c20:	08099ac0 	call	8099ac <__i2b>
  809c24:	98801215 	stw	r2,72(r19)
  809c28:	1021883a 	mov	r16,r2
  809c2c:	10000015 	stw	zero,0(r2)
  809c30:	003fd006 	br	809b74 <__pow5mult+0x60>

00809c34 <__s2b>:
  809c34:	defff904 	addi	sp,sp,-28
  809c38:	dcc00315 	stw	r19,12(sp)
  809c3c:	dc800215 	stw	r18,8(sp)
  809c40:	2827883a 	mov	r19,r5
  809c44:	2025883a 	mov	r18,r4
  809c48:	01400244 	movi	r5,9
  809c4c:	39000204 	addi	r4,r7,8
  809c50:	dd000415 	stw	r20,16(sp)
  809c54:	dc400115 	stw	r17,4(sp)
  809c58:	dfc00615 	stw	ra,24(sp)
  809c5c:	dd400515 	stw	r21,20(sp)
  809c60:	dc000015 	stw	r16,0(sp)
  809c64:	3829883a 	mov	r20,r7
  809c68:	3023883a 	mov	r17,r6
  809c6c:	080fdbc0 	call	80fdbc <__divsi3>
  809c70:	00c00044 	movi	r3,1
  809c74:	1880350e 	bge	r3,r2,809d4c <__s2b+0x118>
  809c78:	000b883a 	mov	r5,zero
  809c7c:	18c7883a 	add	r3,r3,r3
  809c80:	29400044 	addi	r5,r5,1
  809c84:	18bffd16 	blt	r3,r2,809c7c <__s2b+0x48>
  809c88:	9009883a 	mov	r4,r18
  809c8c:	08092480 	call	809248 <_Balloc>
  809c90:	1011883a 	mov	r8,r2
  809c94:	d8800717 	ldw	r2,28(sp)
  809c98:	00c00044 	movi	r3,1
  809c9c:	01800244 	movi	r6,9
  809ca0:	40800515 	stw	r2,20(r8)
  809ca4:	40c00415 	stw	r3,16(r8)
  809ca8:	3440260e 	bge	r6,r17,809d44 <__s2b+0x110>
  809cac:	3021883a 	mov	r16,r6
  809cb0:	99ab883a 	add	r21,r19,r6
  809cb4:	9c05883a 	add	r2,r19,r16
  809cb8:	11c00007 	ldb	r7,0(r2)
  809cbc:	400b883a 	mov	r5,r8
  809cc0:	9009883a 	mov	r4,r18
  809cc4:	39fff404 	addi	r7,r7,-48
  809cc8:	01800284 	movi	r6,10
  809ccc:	08099e80 	call	8099e8 <__multadd>
  809cd0:	84000044 	addi	r16,r16,1
  809cd4:	1011883a 	mov	r8,r2
  809cd8:	8c3ff61e 	bne	r17,r16,809cb4 <__s2b+0x80>
  809cdc:	ac45883a 	add	r2,r21,r17
  809ce0:	117ffe04 	addi	r5,r2,-8
  809ce4:	880d883a 	mov	r6,r17
  809ce8:	35000c0e 	bge	r6,r20,809d1c <__s2b+0xe8>
  809cec:	a185c83a 	sub	r2,r20,r6
  809cf0:	2821883a 	mov	r16,r5
  809cf4:	28a3883a 	add	r17,r5,r2
  809cf8:	81c00007 	ldb	r7,0(r16)
  809cfc:	400b883a 	mov	r5,r8
  809d00:	9009883a 	mov	r4,r18
  809d04:	39fff404 	addi	r7,r7,-48
  809d08:	01800284 	movi	r6,10
  809d0c:	08099e80 	call	8099e8 <__multadd>
  809d10:	84000044 	addi	r16,r16,1
  809d14:	1011883a 	mov	r8,r2
  809d18:	847ff71e 	bne	r16,r17,809cf8 <__s2b+0xc4>
  809d1c:	4005883a 	mov	r2,r8
  809d20:	dfc00617 	ldw	ra,24(sp)
  809d24:	dd400517 	ldw	r21,20(sp)
  809d28:	dd000417 	ldw	r20,16(sp)
  809d2c:	dcc00317 	ldw	r19,12(sp)
  809d30:	dc800217 	ldw	r18,8(sp)
  809d34:	dc400117 	ldw	r17,4(sp)
  809d38:	dc000017 	ldw	r16,0(sp)
  809d3c:	dec00704 	addi	sp,sp,28
  809d40:	f800283a 	ret
  809d44:	99400284 	addi	r5,r19,10
  809d48:	003fe706 	br	809ce8 <__s2b+0xb4>
  809d4c:	000b883a 	mov	r5,zero
  809d50:	003fcd06 	br	809c88 <__s2b+0x54>

00809d54 <putc>:
  809d54:	defffc04 	addi	sp,sp,-16
  809d58:	dc800215 	stw	r18,8(sp)
  809d5c:	04802074 	movhi	r18,129
  809d60:	949a6904 	addi	r18,r18,27044
  809d64:	90c00017 	ldw	r3,0(r18)
  809d68:	dc400115 	stw	r17,4(sp)
  809d6c:	dc000015 	stw	r16,0(sp)
  809d70:	dfc00315 	stw	ra,12(sp)
  809d74:	2023883a 	mov	r17,r4
  809d78:	2821883a 	mov	r16,r5
  809d7c:	18000226 	beq	r3,zero,809d88 <putc+0x34>
  809d80:	18800e17 	ldw	r2,56(r3)
  809d84:	10001126 	beq	r2,zero,809dcc <putc+0x78>
  809d88:	80800217 	ldw	r2,8(r16)
  809d8c:	10ffffc4 	addi	r3,r2,-1
  809d90:	80c00215 	stw	r3,8(r16)
  809d94:	18001316 	blt	r3,zero,809de4 <putc+0x90>
  809d98:	80800017 	ldw	r2,0(r16)
  809d9c:	14400005 	stb	r17,0(r2)
  809da0:	80c00017 	ldw	r3,0(r16)
  809da4:	18800044 	addi	r2,r3,1
  809da8:	18c00003 	ldbu	r3,0(r3)
  809dac:	80800015 	stw	r2,0(r16)
  809db0:	1805883a 	mov	r2,r3
  809db4:	dfc00317 	ldw	ra,12(sp)
  809db8:	dc800217 	ldw	r18,8(sp)
  809dbc:	dc400117 	ldw	r17,4(sp)
  809dc0:	dc000017 	ldw	r16,0(sp)
  809dc4:	dec00404 	addi	sp,sp,16
  809dc8:	f800283a 	ret
  809dcc:	1809883a 	mov	r4,r3
  809dd0:	0800dc40 	call	800dc4 <__sinit>
  809dd4:	80800217 	ldw	r2,8(r16)
  809dd8:	10ffffc4 	addi	r3,r2,-1
  809ddc:	80c00215 	stw	r3,8(r16)
  809de0:	183fed0e 	bge	r3,zero,809d98 <putc+0x44>
  809de4:	80800617 	ldw	r2,24(r16)
  809de8:	18800f16 	blt	r3,r2,809e28 <putc+0xd4>
  809dec:	80800017 	ldw	r2,0(r16)
  809df0:	14400005 	stb	r17,0(r2)
  809df4:	81000017 	ldw	r4,0(r16)
  809df8:	00800284 	movi	r2,10
  809dfc:	20c00003 	ldbu	r3,0(r4)
  809e00:	18801226 	beq	r3,r2,809e4c <putc+0xf8>
  809e04:	20800044 	addi	r2,r4,1
  809e08:	80800015 	stw	r2,0(r16)
  809e0c:	1805883a 	mov	r2,r3
  809e10:	dfc00317 	ldw	ra,12(sp)
  809e14:	dc800217 	ldw	r18,8(sp)
  809e18:	dc400117 	ldw	r17,4(sp)
  809e1c:	dc000017 	ldw	r16,0(sp)
  809e20:	dec00404 	addi	sp,sp,16
  809e24:	f800283a 	ret
  809e28:	91000017 	ldw	r4,0(r18)
  809e2c:	880b883a 	mov	r5,r17
  809e30:	800d883a 	mov	r6,r16
  809e34:	dfc00317 	ldw	ra,12(sp)
  809e38:	dc800217 	ldw	r18,8(sp)
  809e3c:	dc400117 	ldw	r17,4(sp)
  809e40:	dc000017 	ldw	r16,0(sp)
  809e44:	dec00404 	addi	sp,sp,16
  809e48:	080cd3c1 	jmpi	80cd3c <__swbuf_r>
  809e4c:	91000017 	ldw	r4,0(r18)
  809e50:	180b883a 	mov	r5,r3
  809e54:	003ff606 	br	809e30 <putc+0xdc>

00809e58 <_putc_r>:
  809e58:	defffc04 	addi	sp,sp,-16
  809e5c:	dc400215 	stw	r17,8(sp)
  809e60:	dc000115 	stw	r16,4(sp)
  809e64:	dfc00315 	stw	ra,12(sp)
  809e68:	2021883a 	mov	r16,r4
  809e6c:	2823883a 	mov	r17,r5
  809e70:	20000226 	beq	r4,zero,809e7c <_putc_r+0x24>
  809e74:	20800e17 	ldw	r2,56(r4)
  809e78:	10001026 	beq	r2,zero,809ebc <_putc_r+0x64>
  809e7c:	30800217 	ldw	r2,8(r6)
  809e80:	10ffffc4 	addi	r3,r2,-1
  809e84:	30c00215 	stw	r3,8(r6)
  809e88:	18001316 	blt	r3,zero,809ed8 <_putc_r+0x80>
  809e8c:	30800017 	ldw	r2,0(r6)
  809e90:	14400005 	stb	r17,0(r2)
  809e94:	30c00017 	ldw	r3,0(r6)
  809e98:	18800044 	addi	r2,r3,1
  809e9c:	18c00003 	ldbu	r3,0(r3)
  809ea0:	30800015 	stw	r2,0(r6)
  809ea4:	1805883a 	mov	r2,r3
  809ea8:	dfc00317 	ldw	ra,12(sp)
  809eac:	dc400217 	ldw	r17,8(sp)
  809eb0:	dc000117 	ldw	r16,4(sp)
  809eb4:	dec00404 	addi	sp,sp,16
  809eb8:	f800283a 	ret
  809ebc:	d9800015 	stw	r6,0(sp)
  809ec0:	0800dc40 	call	800dc4 <__sinit>
  809ec4:	d9800017 	ldw	r6,0(sp)
  809ec8:	30800217 	ldw	r2,8(r6)
  809ecc:	10ffffc4 	addi	r3,r2,-1
  809ed0:	30c00215 	stw	r3,8(r6)
  809ed4:	183fed0e 	bge	r3,zero,809e8c <_putc_r+0x34>
  809ed8:	30800617 	ldw	r2,24(r6)
  809edc:	18800e16 	blt	r3,r2,809f18 <_putc_r+0xc0>
  809ee0:	30800017 	ldw	r2,0(r6)
  809ee4:	14400005 	stb	r17,0(r2)
  809ee8:	31000017 	ldw	r4,0(r6)
  809eec:	00800284 	movi	r2,10
  809ef0:	20c00003 	ldbu	r3,0(r4)
  809ef4:	18800f26 	beq	r3,r2,809f34 <_putc_r+0xdc>
  809ef8:	20800044 	addi	r2,r4,1
  809efc:	30800015 	stw	r2,0(r6)
  809f00:	1805883a 	mov	r2,r3
  809f04:	dfc00317 	ldw	ra,12(sp)
  809f08:	dc400217 	ldw	r17,8(sp)
  809f0c:	dc000117 	ldw	r16,4(sp)
  809f10:	dec00404 	addi	sp,sp,16
  809f14:	f800283a 	ret
  809f18:	8009883a 	mov	r4,r16
  809f1c:	880b883a 	mov	r5,r17
  809f20:	dfc00317 	ldw	ra,12(sp)
  809f24:	dc400217 	ldw	r17,8(sp)
  809f28:	dc000117 	ldw	r16,4(sp)
  809f2c:	dec00404 	addi	sp,sp,16
  809f30:	080cd3c1 	jmpi	80cd3c <__swbuf_r>
  809f34:	8009883a 	mov	r4,r16
  809f38:	180b883a 	mov	r5,r3
  809f3c:	003ff806 	br	809f20 <_putc_r+0xc8>

00809f40 <_read_r>:
  809f40:	defffd04 	addi	sp,sp,-12
  809f44:	dc000015 	stw	r16,0(sp)
  809f48:	040020b4 	movhi	r16,130
  809f4c:	84216b04 	addi	r16,r16,-31316
  809f50:	dc400115 	stw	r17,4(sp)
  809f54:	80000015 	stw	zero,0(r16)
  809f58:	2023883a 	mov	r17,r4
  809f5c:	2809883a 	mov	r4,r5
  809f60:	300b883a 	mov	r5,r6
  809f64:	380d883a 	mov	r6,r7
  809f68:	dfc00215 	stw	ra,8(sp)
  809f6c:	08113d80 	call	8113d8 <read>
  809f70:	1007883a 	mov	r3,r2
  809f74:	00bfffc4 	movi	r2,-1
  809f78:	18800626 	beq	r3,r2,809f94 <_read_r+0x54>
  809f7c:	1805883a 	mov	r2,r3
  809f80:	dfc00217 	ldw	ra,8(sp)
  809f84:	dc400117 	ldw	r17,4(sp)
  809f88:	dc000017 	ldw	r16,0(sp)
  809f8c:	dec00304 	addi	sp,sp,12
  809f90:	f800283a 	ret
  809f94:	80800017 	ldw	r2,0(r16)
  809f98:	103ff826 	beq	r2,zero,809f7c <_read_r+0x3c>
  809f9c:	88800015 	stw	r2,0(r17)
  809fa0:	1805883a 	mov	r2,r3
  809fa4:	dfc00217 	ldw	ra,8(sp)
  809fa8:	dc400117 	ldw	r17,4(sp)
  809fac:	dc000017 	ldw	r16,0(sp)
  809fb0:	dec00304 	addi	sp,sp,12
  809fb4:	f800283a 	ret

00809fb8 <_realloc_r>:
  809fb8:	defff404 	addi	sp,sp,-48
  809fbc:	dd800815 	stw	r22,32(sp)
  809fc0:	dc800415 	stw	r18,16(sp)
  809fc4:	dc400315 	stw	r17,12(sp)
  809fc8:	dfc00b15 	stw	ra,44(sp)
  809fcc:	df000a15 	stw	fp,40(sp)
  809fd0:	ddc00915 	stw	r23,36(sp)
  809fd4:	dd400715 	stw	r21,28(sp)
  809fd8:	dd000615 	stw	r20,24(sp)
  809fdc:	dcc00515 	stw	r19,20(sp)
  809fe0:	dc000215 	stw	r16,8(sp)
  809fe4:	2825883a 	mov	r18,r5
  809fe8:	3023883a 	mov	r17,r6
  809fec:	202d883a 	mov	r22,r4
  809ff0:	2800c926 	beq	r5,zero,80a318 <_realloc_r+0x360>
  809ff4:	08110b40 	call	8110b4 <__malloc_lock>
  809ff8:	943ffe04 	addi	r16,r18,-8
  809ffc:	88c002c4 	addi	r3,r17,11
  80a000:	00800584 	movi	r2,22
  80a004:	82000117 	ldw	r8,4(r16)
  80a008:	10c01b2e 	bgeu	r2,r3,80a078 <_realloc_r+0xc0>
  80a00c:	00bffe04 	movi	r2,-8
  80a010:	188e703a 	and	r7,r3,r2
  80a014:	3839883a 	mov	fp,r7
  80a018:	38001a16 	blt	r7,zero,80a084 <_realloc_r+0xcc>
  80a01c:	e4401936 	bltu	fp,r17,80a084 <_realloc_r+0xcc>
  80a020:	013fff04 	movi	r4,-4
  80a024:	4126703a 	and	r19,r8,r4
  80a028:	99c02616 	blt	r19,r7,80a0c4 <_realloc_r+0x10c>
  80a02c:	802b883a 	mov	r21,r16
  80a030:	9829883a 	mov	r20,r19
  80a034:	84000204 	addi	r16,r16,8
  80a038:	a80f883a 	mov	r7,r21
  80a03c:	a70dc83a 	sub	r6,r20,fp
  80a040:	008003c4 	movi	r2,15
  80a044:	1180c136 	bltu	r2,r6,80a34c <_realloc_r+0x394>
  80a048:	38800117 	ldw	r2,4(r7)
  80a04c:	a549883a 	add	r4,r20,r21
  80a050:	1080004c 	andi	r2,r2,1
  80a054:	a084b03a 	or	r2,r20,r2
  80a058:	38800115 	stw	r2,4(r7)
  80a05c:	20c00117 	ldw	r3,4(r4)
  80a060:	18c00054 	ori	r3,r3,1
  80a064:	20c00115 	stw	r3,4(r4)
  80a068:	b009883a 	mov	r4,r22
  80a06c:	08110d40 	call	8110d4 <__malloc_unlock>
  80a070:	8023883a 	mov	r17,r16
  80a074:	00000606 	br	80a090 <_realloc_r+0xd8>
  80a078:	01c00404 	movi	r7,16
  80a07c:	3839883a 	mov	fp,r7
  80a080:	e47fe72e 	bgeu	fp,r17,80a020 <_realloc_r+0x68>
  80a084:	00800304 	movi	r2,12
  80a088:	0023883a 	mov	r17,zero
  80a08c:	b0800015 	stw	r2,0(r22)
  80a090:	8805883a 	mov	r2,r17
  80a094:	dfc00b17 	ldw	ra,44(sp)
  80a098:	df000a17 	ldw	fp,40(sp)
  80a09c:	ddc00917 	ldw	r23,36(sp)
  80a0a0:	dd800817 	ldw	r22,32(sp)
  80a0a4:	dd400717 	ldw	r21,28(sp)
  80a0a8:	dd000617 	ldw	r20,24(sp)
  80a0ac:	dcc00517 	ldw	r19,20(sp)
  80a0b0:	dc800417 	ldw	r18,16(sp)
  80a0b4:	dc400317 	ldw	r17,12(sp)
  80a0b8:	dc000217 	ldw	r16,8(sp)
  80a0bc:	dec00c04 	addi	sp,sp,48
  80a0c0:	f800283a 	ret
  80a0c4:	00802074 	movhi	r2,129
  80a0c8:	10949004 	addi	r2,r2,21056
  80a0cc:	12400217 	ldw	r9,8(r2)
  80a0d0:	84cd883a 	add	r6,r16,r19
  80a0d4:	802b883a 	mov	r21,r16
  80a0d8:	3240b926 	beq	r6,r9,80a3c0 <_realloc_r+0x408>
  80a0dc:	31400117 	ldw	r5,4(r6)
  80a0e0:	00bfff84 	movi	r2,-2
  80a0e4:	2884703a 	and	r2,r5,r2
  80a0e8:	1185883a 	add	r2,r2,r6
  80a0ec:	10c00117 	ldw	r3,4(r2)
  80a0f0:	18c0004c 	andi	r3,r3,1
  80a0f4:	1807003a 	cmpeq	r3,r3,zero
  80a0f8:	1800a326 	beq	r3,zero,80a388 <_realloc_r+0x3d0>
  80a0fc:	2908703a 	and	r4,r5,r4
  80a100:	9929883a 	add	r20,r19,r4
  80a104:	a1c0a30e 	bge	r20,r7,80a394 <_realloc_r+0x3dc>
  80a108:	4080004c 	andi	r2,r8,1
  80a10c:	1000551e 	bne	r2,zero,80a264 <_realloc_r+0x2ac>
  80a110:	80800017 	ldw	r2,0(r16)
  80a114:	80afc83a 	sub	r23,r16,r2
  80a118:	b8c00117 	ldw	r3,4(r23)
  80a11c:	00bfff04 	movi	r2,-4
  80a120:	1884703a 	and	r2,r3,r2
  80a124:	30002e26 	beq	r6,zero,80a1e0 <_realloc_r+0x228>
  80a128:	3240b926 	beq	r6,r9,80a410 <_realloc_r+0x458>
  80a12c:	98a9883a 	add	r20,r19,r2
  80a130:	2509883a 	add	r4,r4,r20
  80a134:	d9000015 	stw	r4,0(sp)
  80a138:	21c02a16 	blt	r4,r7,80a1e4 <_realloc_r+0x22c>
  80a13c:	30800317 	ldw	r2,12(r6)
  80a140:	30c00217 	ldw	r3,8(r6)
  80a144:	01400904 	movi	r5,36
  80a148:	99bfff04 	addi	r6,r19,-4
  80a14c:	18800315 	stw	r2,12(r3)
  80a150:	10c00215 	stw	r3,8(r2)
  80a154:	b9000317 	ldw	r4,12(r23)
  80a158:	b8800217 	ldw	r2,8(r23)
  80a15c:	b82b883a 	mov	r21,r23
  80a160:	bc000204 	addi	r16,r23,8
  80a164:	20800215 	stw	r2,8(r4)
  80a168:	11000315 	stw	r4,12(r2)
  80a16c:	2980e436 	bltu	r5,r6,80a500 <_realloc_r+0x548>
  80a170:	008004c4 	movi	r2,19
  80a174:	9009883a 	mov	r4,r18
  80a178:	8011883a 	mov	r8,r16
  80a17c:	11800f2e 	bgeu	r2,r6,80a1bc <_realloc_r+0x204>
  80a180:	90800017 	ldw	r2,0(r18)
  80a184:	ba000404 	addi	r8,r23,16
  80a188:	91000204 	addi	r4,r18,8
  80a18c:	b8800215 	stw	r2,8(r23)
  80a190:	90c00117 	ldw	r3,4(r18)
  80a194:	008006c4 	movi	r2,27
  80a198:	b8c00315 	stw	r3,12(r23)
  80a19c:	1180072e 	bgeu	r2,r6,80a1bc <_realloc_r+0x204>
  80a1a0:	90c00217 	ldw	r3,8(r18)
  80a1a4:	ba000604 	addi	r8,r23,24
  80a1a8:	91000404 	addi	r4,r18,16
  80a1ac:	b8c00415 	stw	r3,16(r23)
  80a1b0:	90800317 	ldw	r2,12(r18)
  80a1b4:	b8800515 	stw	r2,20(r23)
  80a1b8:	3140e726 	beq	r6,r5,80a558 <_realloc_r+0x5a0>
  80a1bc:	20800017 	ldw	r2,0(r4)
  80a1c0:	dd000017 	ldw	r20,0(sp)
  80a1c4:	b80f883a 	mov	r7,r23
  80a1c8:	40800015 	stw	r2,0(r8)
  80a1cc:	20c00117 	ldw	r3,4(r4)
  80a1d0:	40c00115 	stw	r3,4(r8)
  80a1d4:	20800217 	ldw	r2,8(r4)
  80a1d8:	40800215 	stw	r2,8(r8)
  80a1dc:	003f9706 	br	80a03c <_realloc_r+0x84>
  80a1e0:	98a9883a 	add	r20,r19,r2
  80a1e4:	a1c01f16 	blt	r20,r7,80a264 <_realloc_r+0x2ac>
  80a1e8:	b8c00317 	ldw	r3,12(r23)
  80a1ec:	b8800217 	ldw	r2,8(r23)
  80a1f0:	99bfff04 	addi	r6,r19,-4
  80a1f4:	01400904 	movi	r5,36
  80a1f8:	b82b883a 	mov	r21,r23
  80a1fc:	18800215 	stw	r2,8(r3)
  80a200:	10c00315 	stw	r3,12(r2)
  80a204:	bc000204 	addi	r16,r23,8
  80a208:	2980c336 	bltu	r5,r6,80a518 <_realloc_r+0x560>
  80a20c:	008004c4 	movi	r2,19
  80a210:	9009883a 	mov	r4,r18
  80a214:	8011883a 	mov	r8,r16
  80a218:	11800f2e 	bgeu	r2,r6,80a258 <_realloc_r+0x2a0>
  80a21c:	90800017 	ldw	r2,0(r18)
  80a220:	ba000404 	addi	r8,r23,16
  80a224:	91000204 	addi	r4,r18,8
  80a228:	b8800215 	stw	r2,8(r23)
  80a22c:	90c00117 	ldw	r3,4(r18)
  80a230:	008006c4 	movi	r2,27
  80a234:	b8c00315 	stw	r3,12(r23)
  80a238:	1180072e 	bgeu	r2,r6,80a258 <_realloc_r+0x2a0>
  80a23c:	90c00217 	ldw	r3,8(r18)
  80a240:	ba000604 	addi	r8,r23,24
  80a244:	91000404 	addi	r4,r18,16
  80a248:	b8c00415 	stw	r3,16(r23)
  80a24c:	90800317 	ldw	r2,12(r18)
  80a250:	b8800515 	stw	r2,20(r23)
  80a254:	3140c726 	beq	r6,r5,80a574 <_realloc_r+0x5bc>
  80a258:	20800017 	ldw	r2,0(r4)
  80a25c:	b80f883a 	mov	r7,r23
  80a260:	003fd906 	br	80a1c8 <_realloc_r+0x210>
  80a264:	880b883a 	mov	r5,r17
  80a268:	b009883a 	mov	r4,r22
  80a26c:	0801ffc0 	call	801ffc <_malloc_r>
  80a270:	1023883a 	mov	r17,r2
  80a274:	10002526 	beq	r2,zero,80a30c <_realloc_r+0x354>
  80a278:	80800117 	ldw	r2,4(r16)
  80a27c:	00ffff84 	movi	r3,-2
  80a280:	893ffe04 	addi	r4,r17,-8
  80a284:	10c4703a 	and	r2,r2,r3
  80a288:	8085883a 	add	r2,r16,r2
  80a28c:	20809526 	beq	r4,r2,80a4e4 <_realloc_r+0x52c>
  80a290:	99bfff04 	addi	r6,r19,-4
  80a294:	01c00904 	movi	r7,36
  80a298:	39804536 	bltu	r7,r6,80a3b0 <_realloc_r+0x3f8>
  80a29c:	008004c4 	movi	r2,19
  80a2a0:	9009883a 	mov	r4,r18
  80a2a4:	880b883a 	mov	r5,r17
  80a2a8:	11800f2e 	bgeu	r2,r6,80a2e8 <_realloc_r+0x330>
  80a2ac:	90800017 	ldw	r2,0(r18)
  80a2b0:	89400204 	addi	r5,r17,8
  80a2b4:	91000204 	addi	r4,r18,8
  80a2b8:	88800015 	stw	r2,0(r17)
  80a2bc:	90c00117 	ldw	r3,4(r18)
  80a2c0:	008006c4 	movi	r2,27
  80a2c4:	88c00115 	stw	r3,4(r17)
  80a2c8:	1180072e 	bgeu	r2,r6,80a2e8 <_realloc_r+0x330>
  80a2cc:	90c00217 	ldw	r3,8(r18)
  80a2d0:	89400404 	addi	r5,r17,16
  80a2d4:	91000404 	addi	r4,r18,16
  80a2d8:	88c00215 	stw	r3,8(r17)
  80a2dc:	90800317 	ldw	r2,12(r18)
  80a2e0:	88800315 	stw	r2,12(r17)
  80a2e4:	31c09126 	beq	r6,r7,80a52c <_realloc_r+0x574>
  80a2e8:	20800017 	ldw	r2,0(r4)
  80a2ec:	28800015 	stw	r2,0(r5)
  80a2f0:	20c00117 	ldw	r3,4(r4)
  80a2f4:	28c00115 	stw	r3,4(r5)
  80a2f8:	20800217 	ldw	r2,8(r4)
  80a2fc:	28800215 	stw	r2,8(r5)
  80a300:	900b883a 	mov	r5,r18
  80a304:	b009883a 	mov	r4,r22
  80a308:	08012ec0 	call	8012ec <_free_r>
  80a30c:	b009883a 	mov	r4,r22
  80a310:	08110d40 	call	8110d4 <__malloc_unlock>
  80a314:	003f5e06 	br	80a090 <_realloc_r+0xd8>
  80a318:	300b883a 	mov	r5,r6
  80a31c:	dfc00b17 	ldw	ra,44(sp)
  80a320:	df000a17 	ldw	fp,40(sp)
  80a324:	ddc00917 	ldw	r23,36(sp)
  80a328:	dd800817 	ldw	r22,32(sp)
  80a32c:	dd400717 	ldw	r21,28(sp)
  80a330:	dd000617 	ldw	r20,24(sp)
  80a334:	dcc00517 	ldw	r19,20(sp)
  80a338:	dc800417 	ldw	r18,16(sp)
  80a33c:	dc400317 	ldw	r17,12(sp)
  80a340:	dc000217 	ldw	r16,8(sp)
  80a344:	dec00c04 	addi	sp,sp,48
  80a348:	0801ffc1 	jmpi	801ffc <_malloc_r>
  80a34c:	38800117 	ldw	r2,4(r7)
  80a350:	e54b883a 	add	r5,fp,r21
  80a354:	31000054 	ori	r4,r6,1
  80a358:	1080004c 	andi	r2,r2,1
  80a35c:	1704b03a 	or	r2,r2,fp
  80a360:	38800115 	stw	r2,4(r7)
  80a364:	29000115 	stw	r4,4(r5)
  80a368:	2987883a 	add	r3,r5,r6
  80a36c:	18800117 	ldw	r2,4(r3)
  80a370:	29400204 	addi	r5,r5,8
  80a374:	b009883a 	mov	r4,r22
  80a378:	10800054 	ori	r2,r2,1
  80a37c:	18800115 	stw	r2,4(r3)
  80a380:	08012ec0 	call	8012ec <_free_r>
  80a384:	003f3806 	br	80a068 <_realloc_r+0xb0>
  80a388:	000d883a 	mov	r6,zero
  80a38c:	0009883a 	mov	r4,zero
  80a390:	003f5d06 	br	80a108 <_realloc_r+0x150>
  80a394:	30c00217 	ldw	r3,8(r6)
  80a398:	30800317 	ldw	r2,12(r6)
  80a39c:	800f883a 	mov	r7,r16
  80a3a0:	84000204 	addi	r16,r16,8
  80a3a4:	10c00215 	stw	r3,8(r2)
  80a3a8:	18800315 	stw	r2,12(r3)
  80a3ac:	003f2306 	br	80a03c <_realloc_r+0x84>
  80a3b0:	8809883a 	mov	r4,r17
  80a3b4:	900b883a 	mov	r5,r18
  80a3b8:	0808be80 	call	808be8 <memmove>
  80a3bc:	003fd006 	br	80a300 <_realloc_r+0x348>
  80a3c0:	30800117 	ldw	r2,4(r6)
  80a3c4:	e0c00404 	addi	r3,fp,16
  80a3c8:	1108703a 	and	r4,r2,r4
  80a3cc:	9905883a 	add	r2,r19,r4
  80a3d0:	10ff4d16 	blt	r2,r3,80a108 <_realloc_r+0x150>
  80a3d4:	1705c83a 	sub	r2,r2,fp
  80a3d8:	870b883a 	add	r5,r16,fp
  80a3dc:	10800054 	ori	r2,r2,1
  80a3e0:	28800115 	stw	r2,4(r5)
  80a3e4:	80c00117 	ldw	r3,4(r16)
  80a3e8:	00802074 	movhi	r2,129
  80a3ec:	10949004 	addi	r2,r2,21056
  80a3f0:	b009883a 	mov	r4,r22
  80a3f4:	18c0004c 	andi	r3,r3,1
  80a3f8:	e0c6b03a 	or	r3,fp,r3
  80a3fc:	11400215 	stw	r5,8(r2)
  80a400:	80c00115 	stw	r3,4(r16)
  80a404:	08110d40 	call	8110d4 <__malloc_unlock>
  80a408:	84400204 	addi	r17,r16,8
  80a40c:	003f2006 	br	80a090 <_realloc_r+0xd8>
  80a410:	98a9883a 	add	r20,r19,r2
  80a414:	2509883a 	add	r4,r4,r20
  80a418:	e0800404 	addi	r2,fp,16
  80a41c:	d9000115 	stw	r4,4(sp)
  80a420:	20bf7016 	blt	r4,r2,80a1e4 <_realloc_r+0x22c>
  80a424:	b8c00317 	ldw	r3,12(r23)
  80a428:	b8800217 	ldw	r2,8(r23)
  80a42c:	99bfff04 	addi	r6,r19,-4
  80a430:	01400904 	movi	r5,36
  80a434:	18800215 	stw	r2,8(r3)
  80a438:	10c00315 	stw	r3,12(r2)
  80a43c:	bc400204 	addi	r17,r23,8
  80a440:	29804136 	bltu	r5,r6,80a548 <_realloc_r+0x590>
  80a444:	008004c4 	movi	r2,19
  80a448:	9009883a 	mov	r4,r18
  80a44c:	880f883a 	mov	r7,r17
  80a450:	11800f2e 	bgeu	r2,r6,80a490 <_realloc_r+0x4d8>
  80a454:	90800017 	ldw	r2,0(r18)
  80a458:	b9c00404 	addi	r7,r23,16
  80a45c:	91000204 	addi	r4,r18,8
  80a460:	b8800215 	stw	r2,8(r23)
  80a464:	90c00117 	ldw	r3,4(r18)
  80a468:	008006c4 	movi	r2,27
  80a46c:	b8c00315 	stw	r3,12(r23)
  80a470:	1180072e 	bgeu	r2,r6,80a490 <_realloc_r+0x4d8>
  80a474:	90c00217 	ldw	r3,8(r18)
  80a478:	b9c00604 	addi	r7,r23,24
  80a47c:	91000404 	addi	r4,r18,16
  80a480:	b8c00415 	stw	r3,16(r23)
  80a484:	90800317 	ldw	r2,12(r18)
  80a488:	b8800515 	stw	r2,20(r23)
  80a48c:	31404026 	beq	r6,r5,80a590 <_realloc_r+0x5d8>
  80a490:	20800017 	ldw	r2,0(r4)
  80a494:	38800015 	stw	r2,0(r7)
  80a498:	20c00117 	ldw	r3,4(r4)
  80a49c:	38c00115 	stw	r3,4(r7)
  80a4a0:	20800217 	ldw	r2,8(r4)
  80a4a4:	38800215 	stw	r2,8(r7)
  80a4a8:	d8c00117 	ldw	r3,4(sp)
  80a4ac:	bf0b883a 	add	r5,r23,fp
  80a4b0:	b009883a 	mov	r4,r22
  80a4b4:	1f05c83a 	sub	r2,r3,fp
  80a4b8:	10800054 	ori	r2,r2,1
  80a4bc:	28800115 	stw	r2,4(r5)
  80a4c0:	b8c00117 	ldw	r3,4(r23)
  80a4c4:	00802074 	movhi	r2,129
  80a4c8:	10949004 	addi	r2,r2,21056
  80a4cc:	11400215 	stw	r5,8(r2)
  80a4d0:	18c0004c 	andi	r3,r3,1
  80a4d4:	e0c6b03a 	or	r3,fp,r3
  80a4d8:	b8c00115 	stw	r3,4(r23)
  80a4dc:	08110d40 	call	8110d4 <__malloc_unlock>
  80a4e0:	003eeb06 	br	80a090 <_realloc_r+0xd8>
  80a4e4:	20800117 	ldw	r2,4(r4)
  80a4e8:	00ffff04 	movi	r3,-4
  80a4ec:	800f883a 	mov	r7,r16
  80a4f0:	10c4703a 	and	r2,r2,r3
  80a4f4:	98a9883a 	add	r20,r19,r2
  80a4f8:	84000204 	addi	r16,r16,8
  80a4fc:	003ecf06 	br	80a03c <_realloc_r+0x84>
  80a500:	900b883a 	mov	r5,r18
  80a504:	8009883a 	mov	r4,r16
  80a508:	0808be80 	call	808be8 <memmove>
  80a50c:	dd000017 	ldw	r20,0(sp)
  80a510:	b80f883a 	mov	r7,r23
  80a514:	003ec906 	br	80a03c <_realloc_r+0x84>
  80a518:	900b883a 	mov	r5,r18
  80a51c:	8009883a 	mov	r4,r16
  80a520:	0808be80 	call	808be8 <memmove>
  80a524:	b80f883a 	mov	r7,r23
  80a528:	003ec406 	br	80a03c <_realloc_r+0x84>
  80a52c:	90c00417 	ldw	r3,16(r18)
  80a530:	89400604 	addi	r5,r17,24
  80a534:	91000604 	addi	r4,r18,24
  80a538:	88c00415 	stw	r3,16(r17)
  80a53c:	90800517 	ldw	r2,20(r18)
  80a540:	88800515 	stw	r2,20(r17)
  80a544:	003f6806 	br	80a2e8 <_realloc_r+0x330>
  80a548:	900b883a 	mov	r5,r18
  80a54c:	8809883a 	mov	r4,r17
  80a550:	0808be80 	call	808be8 <memmove>
  80a554:	003fd406 	br	80a4a8 <_realloc_r+0x4f0>
  80a558:	90c00417 	ldw	r3,16(r18)
  80a55c:	91000604 	addi	r4,r18,24
  80a560:	ba000804 	addi	r8,r23,32
  80a564:	b8c00615 	stw	r3,24(r23)
  80a568:	90800517 	ldw	r2,20(r18)
  80a56c:	b8800715 	stw	r2,28(r23)
  80a570:	003f1206 	br	80a1bc <_realloc_r+0x204>
  80a574:	90c00417 	ldw	r3,16(r18)
  80a578:	91000604 	addi	r4,r18,24
  80a57c:	ba000804 	addi	r8,r23,32
  80a580:	b8c00615 	stw	r3,24(r23)
  80a584:	90800517 	ldw	r2,20(r18)
  80a588:	b8800715 	stw	r2,28(r23)
  80a58c:	003f3206 	br	80a258 <_realloc_r+0x2a0>
  80a590:	90c00417 	ldw	r3,16(r18)
  80a594:	91000604 	addi	r4,r18,24
  80a598:	b9c00804 	addi	r7,r23,32
  80a59c:	b8c00615 	stw	r3,24(r23)
  80a5a0:	90800517 	ldw	r2,20(r18)
  80a5a4:	b8800715 	stw	r2,28(r23)
  80a5a8:	003fb906 	br	80a490 <_realloc_r+0x4d8>

0080a5ac <__isinfd>:
  80a5ac:	200d883a 	mov	r6,r4
  80a5b0:	0109c83a 	sub	r4,zero,r4
  80a5b4:	2188b03a 	or	r4,r4,r6
  80a5b8:	2008d7fa 	srli	r4,r4,31
  80a5bc:	00a00034 	movhi	r2,32768
  80a5c0:	10bfffc4 	addi	r2,r2,-1
  80a5c4:	1144703a 	and	r2,r2,r5
  80a5c8:	2088b03a 	or	r4,r4,r2
  80a5cc:	009ffc34 	movhi	r2,32752
  80a5d0:	1105c83a 	sub	r2,r2,r4
  80a5d4:	0087c83a 	sub	r3,zero,r2
  80a5d8:	10c4b03a 	or	r2,r2,r3
  80a5dc:	1004d7fa 	srli	r2,r2,31
  80a5e0:	00c00044 	movi	r3,1
  80a5e4:	1885c83a 	sub	r2,r3,r2
  80a5e8:	f800283a 	ret

0080a5ec <__isnand>:
  80a5ec:	200d883a 	mov	r6,r4
  80a5f0:	0109c83a 	sub	r4,zero,r4
  80a5f4:	2188b03a 	or	r4,r4,r6
  80a5f8:	2008d7fa 	srli	r4,r4,31
  80a5fc:	00a00034 	movhi	r2,32768
  80a600:	10bfffc4 	addi	r2,r2,-1
  80a604:	1144703a 	and	r2,r2,r5
  80a608:	2088b03a 	or	r4,r4,r2
  80a60c:	009ffc34 	movhi	r2,32752
  80a610:	1105c83a 	sub	r2,r2,r4
  80a614:	1004d7fa 	srli	r2,r2,31
  80a618:	f800283a 	ret

0080a61c <__sccl>:
  80a61c:	28c00003 	ldbu	r3,0(r5)
  80a620:	00801784 	movi	r2,94
  80a624:	2a000044 	addi	r8,r5,1
  80a628:	18802526 	beq	r3,r2,80a6c0 <__sccl+0xa4>
  80a62c:	180f883a 	mov	r7,r3
  80a630:	0013883a 	mov	r9,zero
  80a634:	000d883a 	mov	r6,zero
  80a638:	0007883a 	mov	r3,zero
  80a63c:	01404004 	movi	r5,256
  80a640:	1905883a 	add	r2,r3,r4
  80a644:	18c00044 	addi	r3,r3,1
  80a648:	11800005 	stb	r6,0(r2)
  80a64c:	197ffc1e 	bne	r3,r5,80a640 <__sccl+0x24>
  80a650:	38000c26 	beq	r7,zero,80a684 <__sccl+0x68>
  80a654:	00800044 	movi	r2,1
  80a658:	124dc83a 	sub	r6,r2,r9
  80a65c:	3905883a 	add	r2,r7,r4
  80a660:	11800005 	stb	r6,0(r2)
  80a664:	41400044 	addi	r5,r8,1
  80a668:	02400b44 	movi	r9,45
  80a66c:	02801744 	movi	r10,93
  80a670:	28bfffc3 	ldbu	r2,-1(r5)
  80a674:	2811883a 	mov	r8,r5
  80a678:	12400726 	beq	r2,r9,80a698 <__sccl+0x7c>
  80a67c:	12800226 	beq	r2,r10,80a688 <__sccl+0x6c>
  80a680:	1000031e 	bne	r2,zero,80a690 <__sccl+0x74>
  80a684:	423fffc4 	addi	r8,r8,-1
  80a688:	4005883a 	mov	r2,r8
  80a68c:	f800283a 	ret
  80a690:	100f883a 	mov	r7,r2
  80a694:	003ff106 	br	80a65c <__sccl+0x40>
  80a698:	28c00003 	ldbu	r3,0(r5)
  80a69c:	1a800d26 	beq	r3,r10,80a6d4 <__sccl+0xb8>
  80a6a0:	19c00c16 	blt	r3,r7,80a6d4 <__sccl+0xb8>
  80a6a4:	21c5883a 	add	r2,r4,r7
  80a6a8:	39c00044 	addi	r7,r7,1
  80a6ac:	11800045 	stb	r6,1(r2)
  80a6b0:	10800044 	addi	r2,r2,1
  80a6b4:	38fffc16 	blt	r7,r3,80a6a8 <__sccl+0x8c>
  80a6b8:	29400084 	addi	r5,r5,2
  80a6bc:	003fec06 	br	80a670 <__sccl+0x54>
  80a6c0:	29c00043 	ldbu	r7,1(r5)
  80a6c4:	02400044 	movi	r9,1
  80a6c8:	2a000084 	addi	r8,r5,2
  80a6cc:	480d883a 	mov	r6,r9
  80a6d0:	003fd906 	br	80a638 <__sccl+0x1c>
  80a6d4:	01c00b44 	movi	r7,45
  80a6d8:	003fe006 	br	80a65c <__sccl+0x40>

0080a6dc <nanf>:
  80a6dc:	009ff034 	movhi	r2,32704
  80a6e0:	f800283a 	ret

0080a6e4 <sprintf>:
  80a6e4:	deffe504 	addi	sp,sp,-108
  80a6e8:	2013883a 	mov	r9,r4
  80a6ec:	dfc01815 	stw	ra,96(sp)
  80a6f0:	d9801915 	stw	r6,100(sp)
  80a6f4:	d9c01a15 	stw	r7,104(sp)
  80a6f8:	d8801904 	addi	r2,sp,100
  80a6fc:	d8800015 	stw	r2,0(sp)
  80a700:	00802074 	movhi	r2,129
  80a704:	109a6904 	addi	r2,r2,27044
  80a708:	11000017 	ldw	r4,0(r2)
  80a70c:	d9c00017 	ldw	r7,0(sp)
  80a710:	00808204 	movi	r2,520
  80a714:	00e00034 	movhi	r3,32768
  80a718:	18ffffc4 	addi	r3,r3,-1
  80a71c:	280d883a 	mov	r6,r5
  80a720:	d880040d 	sth	r2,16(sp)
  80a724:	d9400104 	addi	r5,sp,4
  80a728:	00bfffc4 	movi	r2,-1
  80a72c:	d8c00615 	stw	r3,24(sp)
  80a730:	d8c00315 	stw	r3,12(sp)
  80a734:	da400515 	stw	r9,20(sp)
  80a738:	d880048d 	sth	r2,18(sp)
  80a73c:	da400115 	stw	r9,4(sp)
  80a740:	0802f780 	call	802f78 <___vfprintf_internal_r>
  80a744:	d8c00117 	ldw	r3,4(sp)
  80a748:	18000005 	stb	zero,0(r3)
  80a74c:	dfc01817 	ldw	ra,96(sp)
  80a750:	dec01b04 	addi	sp,sp,108
  80a754:	f800283a 	ret

0080a758 <_sprintf_r>:
  80a758:	deffe604 	addi	sp,sp,-104
  80a75c:	2813883a 	mov	r9,r5
  80a760:	dfc01815 	stw	ra,96(sp)
  80a764:	d9c01915 	stw	r7,100(sp)
  80a768:	d8801904 	addi	r2,sp,100
  80a76c:	d8800015 	stw	r2,0(sp)
  80a770:	100f883a 	mov	r7,r2
  80a774:	00808204 	movi	r2,520
  80a778:	00e00034 	movhi	r3,32768
  80a77c:	18ffffc4 	addi	r3,r3,-1
  80a780:	d880040d 	sth	r2,16(sp)
  80a784:	d9400104 	addi	r5,sp,4
  80a788:	00bfffc4 	movi	r2,-1
  80a78c:	d8c00615 	stw	r3,24(sp)
  80a790:	d8c00315 	stw	r3,12(sp)
  80a794:	da400515 	stw	r9,20(sp)
  80a798:	d880048d 	sth	r2,18(sp)
  80a79c:	da400115 	stw	r9,4(sp)
  80a7a0:	0802f780 	call	802f78 <___vfprintf_internal_r>
  80a7a4:	d8c00117 	ldw	r3,4(sp)
  80a7a8:	18000005 	stb	zero,0(r3)
  80a7ac:	dfc01817 	ldw	ra,96(sp)
  80a7b0:	dec01a04 	addi	sp,sp,104
  80a7b4:	f800283a 	ret

0080a7b8 <strcmp>:
  80a7b8:	2144b03a 	or	r2,r4,r5
  80a7bc:	108000cc 	andi	r2,r2,3
  80a7c0:	10001d1e 	bne	r2,zero,80a838 <strcmp+0x80>
  80a7c4:	200f883a 	mov	r7,r4
  80a7c8:	28800017 	ldw	r2,0(r5)
  80a7cc:	21000017 	ldw	r4,0(r4)
  80a7d0:	280d883a 	mov	r6,r5
  80a7d4:	2080161e 	bne	r4,r2,80a830 <strcmp+0x78>
  80a7d8:	023fbff4 	movhi	r8,65279
  80a7dc:	423fbfc4 	addi	r8,r8,-257
  80a7e0:	2207883a 	add	r3,r4,r8
  80a7e4:	01602074 	movhi	r5,32897
  80a7e8:	29602004 	addi	r5,r5,-32640
  80a7ec:	1946703a 	and	r3,r3,r5
  80a7f0:	0104303a 	nor	r2,zero,r4
  80a7f4:	10c4703a 	and	r2,r2,r3
  80a7f8:	10001c1e 	bne	r2,zero,80a86c <strcmp+0xb4>
  80a7fc:	4013883a 	mov	r9,r8
  80a800:	2811883a 	mov	r8,r5
  80a804:	00000106 	br	80a80c <strcmp+0x54>
  80a808:	1800181e 	bne	r3,zero,80a86c <strcmp+0xb4>
  80a80c:	39c00104 	addi	r7,r7,4
  80a810:	39000017 	ldw	r4,0(r7)
  80a814:	31800104 	addi	r6,r6,4
  80a818:	31400017 	ldw	r5,0(r6)
  80a81c:	2245883a 	add	r2,r4,r9
  80a820:	1204703a 	and	r2,r2,r8
  80a824:	0106303a 	nor	r3,zero,r4
  80a828:	1886703a 	and	r3,r3,r2
  80a82c:	217ff626 	beq	r4,r5,80a808 <strcmp+0x50>
  80a830:	3809883a 	mov	r4,r7
  80a834:	300b883a 	mov	r5,r6
  80a838:	20c00007 	ldb	r3,0(r4)
  80a83c:	1800051e 	bne	r3,zero,80a854 <strcmp+0x9c>
  80a840:	00000606 	br	80a85c <strcmp+0xa4>
  80a844:	21000044 	addi	r4,r4,1
  80a848:	20c00007 	ldb	r3,0(r4)
  80a84c:	29400044 	addi	r5,r5,1
  80a850:	18000226 	beq	r3,zero,80a85c <strcmp+0xa4>
  80a854:	28800007 	ldb	r2,0(r5)
  80a858:	18bffa26 	beq	r3,r2,80a844 <strcmp+0x8c>
  80a85c:	20c00003 	ldbu	r3,0(r4)
  80a860:	28800003 	ldbu	r2,0(r5)
  80a864:	1885c83a 	sub	r2,r3,r2
  80a868:	f800283a 	ret
  80a86c:	0005883a 	mov	r2,zero
  80a870:	f800283a 	ret

0080a874 <match>:
  80a874:	21800017 	ldw	r6,0(r4)
  80a878:	01c01004 	movi	r7,64
  80a87c:	02001684 	movi	r8,90
  80a880:	28800007 	ldb	r2,0(r5)
  80a884:	29400044 	addi	r5,r5,1
  80a888:	10000826 	beq	r2,zero,80a8ac <match+0x38>
  80a88c:	31800044 	addi	r6,r6,1
  80a890:	30c00007 	ldb	r3,0(r6)
  80a894:	38c0020e 	bge	r7,r3,80a8a0 <match+0x2c>
  80a898:	40c00116 	blt	r8,r3,80a8a0 <match+0x2c>
  80a89c:	18c00804 	addi	r3,r3,32
  80a8a0:	18bff726 	beq	r3,r2,80a880 <match+0xc>
  80a8a4:	0005883a 	mov	r2,zero
  80a8a8:	f800283a 	ret
  80a8ac:	30800044 	addi	r2,r6,1
  80a8b0:	20800015 	stw	r2,0(r4)
  80a8b4:	00800044 	movi	r2,1
  80a8b8:	f800283a 	ret

0080a8bc <_strtod_r>:
  80a8bc:	deffd504 	addi	sp,sp,-172
  80a8c0:	df002915 	stw	fp,164(sp)
  80a8c4:	dd402615 	stw	r21,152(sp)
  80a8c8:	dd002515 	stw	r20,148(sp)
  80a8cc:	dfc02a15 	stw	ra,168(sp)
  80a8d0:	ddc02815 	stw	r23,160(sp)
  80a8d4:	dd802715 	stw	r22,156(sp)
  80a8d8:	dcc02415 	stw	r19,144(sp)
  80a8dc:	dc802315 	stw	r18,140(sp)
  80a8e0:	dc402215 	stw	r17,136(sp)
  80a8e4:	dc002115 	stw	r16,132(sp)
  80a8e8:	2829883a 	mov	r20,r5
  80a8ec:	202b883a 	mov	r21,r4
  80a8f0:	d9801d15 	stw	r6,116(sp)
  80a8f4:	d8000915 	stw	zero,36(sp)
  80a8f8:	d8000a15 	stw	zero,40(sp)
  80a8fc:	d9400415 	stw	r5,16(sp)
  80a900:	df000904 	addi	fp,sp,36
  80a904:	dc000417 	ldw	r16,16(sp)
  80a908:	00800b44 	movi	r2,45
  80a90c:	80c00003 	ldbu	r3,0(r16)
  80a910:	10c03536 	bltu	r2,r3,80a9e8 <_strtod_r+0x12c>
  80a914:	18c5883a 	add	r2,r3,r3
  80a918:	1085883a 	add	r2,r2,r2
  80a91c:	00c02074 	movhi	r3,129
  80a920:	18ea4c04 	addi	r3,r3,-22224
  80a924:	10c5883a 	add	r2,r2,r3
  80a928:	11000017 	ldw	r4,0(r2)
  80a92c:	2000683a 	jmp	r4
  80a930:	0080ab68 	cmpgeui	r2,zero,685
  80a934:	0080a9e8 	cmpgeui	r2,zero,679
  80a938:	0080a9e8 	cmpgeui	r2,zero,679
  80a93c:	0080a9e8 	cmpgeui	r2,zero,679
  80a940:	0080a9e8 	cmpgeui	r2,zero,679
  80a944:	0080a9e8 	cmpgeui	r2,zero,679
  80a948:	0080a9e8 	cmpgeui	r2,zero,679
  80a94c:	0080a9e8 	cmpgeui	r2,zero,679
  80a950:	0080a9e8 	cmpgeui	r2,zero,679
  80a954:	0080aeb0 	cmpltui	r2,zero,698
  80a958:	0080aeb0 	cmpltui	r2,zero,698
  80a95c:	0080aeb0 	cmpltui	r2,zero,698
  80a960:	0080aeb0 	cmpltui	r2,zero,698
  80a964:	0080aeb0 	cmpltui	r2,zero,698
  80a968:	0080a9e8 	cmpgeui	r2,zero,679
  80a96c:	0080a9e8 	cmpgeui	r2,zero,679
  80a970:	0080a9e8 	cmpgeui	r2,zero,679
  80a974:	0080a9e8 	cmpgeui	r2,zero,679
  80a978:	0080a9e8 	cmpgeui	r2,zero,679
  80a97c:	0080a9e8 	cmpgeui	r2,zero,679
  80a980:	0080a9e8 	cmpgeui	r2,zero,679
  80a984:	0080a9e8 	cmpgeui	r2,zero,679
  80a988:	0080a9e8 	cmpgeui	r2,zero,679
  80a98c:	0080a9e8 	cmpgeui	r2,zero,679
  80a990:	0080a9e8 	cmpgeui	r2,zero,679
  80a994:	0080a9e8 	cmpgeui	r2,zero,679
  80a998:	0080a9e8 	cmpgeui	r2,zero,679
  80a99c:	0080a9e8 	cmpgeui	r2,zero,679
  80a9a0:	0080a9e8 	cmpgeui	r2,zero,679
  80a9a4:	0080a9e8 	cmpgeui	r2,zero,679
  80a9a8:	0080a9e8 	cmpgeui	r2,zero,679
  80a9ac:	0080a9e8 	cmpgeui	r2,zero,679
  80a9b0:	0080aeb0 	cmpltui	r2,zero,698
  80a9b4:	0080a9e8 	cmpgeui	r2,zero,679
  80a9b8:	0080a9e8 	cmpgeui	r2,zero,679
  80a9bc:	0080a9e8 	cmpgeui	r2,zero,679
  80a9c0:	0080a9e8 	cmpgeui	r2,zero,679
  80a9c4:	0080a9e8 	cmpgeui	r2,zero,679
  80a9c8:	0080a9e8 	cmpgeui	r2,zero,679
  80a9cc:	0080a9e8 	cmpgeui	r2,zero,679
  80a9d0:	0080a9e8 	cmpgeui	r2,zero,679
  80a9d4:	0080a9e8 	cmpgeui	r2,zero,679
  80a9d8:	0080a9e8 	cmpgeui	r2,zero,679
  80a9dc:	0080ae90 	cmplti	r2,zero,698
  80a9e0:	0080a9e8 	cmpgeui	r2,zero,679
  80a9e4:	0080aebc 	xorhi	r2,zero,698
  80a9e8:	d8001515 	stw	zero,84(sp)
  80a9ec:	80c00007 	ldb	r3,0(r16)
  80a9f0:	00800c04 	movi	r2,48
  80a9f4:	1880e926 	beq	r3,r2,80ad9c <_strtod_r+0x4e0>
  80a9f8:	d8001615 	stw	zero,88(sp)
  80a9fc:	dc001415 	stw	r16,80(sp)
  80aa00:	84400007 	ldb	r17,0(r16)
  80aa04:	00800bc4 	movi	r2,47
  80aa08:	1443760e 	bge	r2,r17,80b7e4 <_strtod_r+0xf28>
  80aa0c:	00800e44 	movi	r2,57
  80aa10:	14437416 	blt	r2,r17,80b7e4 <_strtod_r+0xf28>
  80aa14:	8025883a 	mov	r18,r16
  80aa18:	0027883a 	mov	r19,zero
  80aa1c:	d8001215 	stw	zero,72(sp)
  80aa20:	d8001115 	stw	zero,68(sp)
  80aa24:	00000f06 	br	80aa64 <_strtod_r+0x1a8>
  80aa28:	d9001217 	ldw	r4,72(sp)
  80aa2c:	01400284 	movi	r5,10
  80aa30:	080fe8c0 	call	80fe8c <__mulsi3>
  80aa34:	1445883a 	add	r2,r2,r17
  80aa38:	10bff404 	addi	r2,r2,-48
  80aa3c:	d8801215 	stw	r2,72(sp)
  80aa40:	94000044 	addi	r16,r18,1
  80aa44:	dc000415 	stw	r16,16(sp)
  80aa48:	84400007 	ldb	r17,0(r16)
  80aa4c:	00800bc4 	movi	r2,47
  80aa50:	9cc00044 	addi	r19,r19,1
  80aa54:	8025883a 	mov	r18,r16
  80aa58:	1440130e 	bge	r2,r17,80aaa8 <_strtod_r+0x1ec>
  80aa5c:	00800e44 	movi	r2,57
  80aa60:	14401116 	blt	r2,r17,80aaa8 <_strtod_r+0x1ec>
  80aa64:	00800204 	movi	r2,8
  80aa68:	14ffef0e 	bge	r2,r19,80aa28 <_strtod_r+0x16c>
  80aa6c:	008003c4 	movi	r2,15
  80aa70:	14fff316 	blt	r2,r19,80aa40 <_strtod_r+0x184>
  80aa74:	d9001117 	ldw	r4,68(sp)
  80aa78:	01400284 	movi	r5,10
  80aa7c:	94000044 	addi	r16,r18,1
  80aa80:	080fe8c0 	call	80fe8c <__mulsi3>
  80aa84:	1445883a 	add	r2,r2,r17
  80aa88:	10bff404 	addi	r2,r2,-48
  80aa8c:	d8801115 	stw	r2,68(sp)
  80aa90:	dc000415 	stw	r16,16(sp)
  80aa94:	84400007 	ldb	r17,0(r16)
  80aa98:	00800bc4 	movi	r2,47
  80aa9c:	9cc00044 	addi	r19,r19,1
  80aaa0:	8025883a 	mov	r18,r16
  80aaa4:	147fed16 	blt	r2,r17,80aa5c <_strtod_r+0x1a0>
  80aaa8:	00800b84 	movi	r2,46
  80aaac:	8880c926 	beq	r17,r2,80add4 <_strtod_r+0x518>
  80aab0:	dcc01815 	stw	r19,96(sp)
  80aab4:	d8001b15 	stw	zero,108(sp)
  80aab8:	d8001715 	stw	zero,92(sp)
  80aabc:	000d883a 	mov	r6,zero
  80aac0:	00801944 	movi	r2,101
  80aac4:	88802126 	beq	r17,r2,80ab4c <_strtod_r+0x290>
  80aac8:	00801144 	movi	r2,69
  80aacc:	88801f26 	beq	r17,r2,80ab4c <_strtod_r+0x290>
  80aad0:	d9001817 	ldw	r4,96(sp)
  80aad4:	2024c03a 	cmpne	r18,r4,zero
  80aad8:	0009883a 	mov	r4,zero
  80aadc:	9000651e 	bne	r18,zero,80ac74 <_strtod_r+0x3b8>
  80aae0:	3000c926 	beq	r6,zero,80ae08 <_strtod_r+0x54c>
  80aae4:	d8801d17 	ldw	r2,116(sp)
  80aae8:	10000326 	beq	r2,zero,80aaf8 <_strtod_r+0x23c>
  80aaec:	d8800417 	ldw	r2,16(sp)
  80aaf0:	d8c01d17 	ldw	r3,116(sp)
  80aaf4:	18800015 	stw	r2,0(r3)
  80aaf8:	d9001517 	ldw	r4,84(sp)
  80aafc:	2005003a 	cmpeq	r2,r4,zero
  80ab00:	10001c1e 	bne	r2,zero,80ab74 <_strtod_r+0x2b8>
  80ab04:	e0800017 	ldw	r2,0(fp)
  80ab08:	e0c00117 	ldw	r3,4(fp)
  80ab0c:	1009883a 	mov	r4,r2
  80ab10:	1960003c 	xorhi	r5,r3,32768
  80ab14:	2005883a 	mov	r2,r4
  80ab18:	2807883a 	mov	r3,r5
  80ab1c:	dfc02a17 	ldw	ra,168(sp)
  80ab20:	df002917 	ldw	fp,164(sp)
  80ab24:	ddc02817 	ldw	r23,160(sp)
  80ab28:	dd802717 	ldw	r22,156(sp)
  80ab2c:	dd402617 	ldw	r21,152(sp)
  80ab30:	dd002517 	ldw	r20,148(sp)
  80ab34:	dcc02417 	ldw	r19,144(sp)
  80ab38:	dc802317 	ldw	r18,140(sp)
  80ab3c:	dc402217 	ldw	r17,136(sp)
  80ab40:	dc002117 	ldw	r16,132(sp)
  80ab44:	dec02b04 	addi	sp,sp,172
  80ab48:	f800283a 	ret
  80ab4c:	d8801817 	ldw	r2,96(sp)
  80ab50:	1024c03a 	cmpne	r18,r2,zero
  80ab54:	90000a1e 	bne	r18,zero,80ab80 <_strtod_r+0x2c4>
  80ab58:	3000091e 	bne	r6,zero,80ab80 <_strtod_r+0x2c4>
  80ab5c:	d8c01617 	ldw	r3,88(sp)
  80ab60:	1805003a 	cmpeq	r2,r3,zero
  80ab64:	10000626 	beq	r2,zero,80ab80 <_strtod_r+0x2c4>
  80ab68:	d8001515 	stw	zero,84(sp)
  80ab6c:	dd000415 	stw	r20,16(sp)
  80ab70:	003fdc06 	br	80aae4 <_strtod_r+0x228>
  80ab74:	e1000017 	ldw	r4,0(fp)
  80ab78:	e1400117 	ldw	r5,4(fp)
  80ab7c:	003fe506 	br	80ab14 <_strtod_r+0x258>
  80ab80:	dd000417 	ldw	r20,16(sp)
  80ab84:	00800ac4 	movi	r2,43
  80ab88:	a4000044 	addi	r16,r20,1
  80ab8c:	dc000415 	stw	r16,16(sp)
  80ab90:	a0c00047 	ldb	r3,1(r20)
  80ab94:	8009883a 	mov	r4,r16
  80ab98:	1880cb26 	beq	r3,r2,80aec8 <_strtod_r+0x60c>
  80ab9c:	00800b44 	movi	r2,45
  80aba0:	18838326 	beq	r3,r2,80b9b0 <_strtod_r+0x10f4>
  80aba4:	1823883a 	mov	r17,r3
  80aba8:	88fff404 	addi	r3,r17,-48
  80abac:	00800244 	movi	r2,9
  80abb0:	d8001915 	stw	zero,100(sp)
  80abb4:	10c0cb36 	bltu	r2,r3,80aee4 <_strtod_r+0x628>
  80abb8:	00800c04 	movi	r2,48
  80abbc:	8880061e 	bne	r17,r2,80abd8 <_strtod_r+0x31c>
  80abc0:	dc000417 	ldw	r16,16(sp)
  80abc4:	8805883a 	mov	r2,r17
  80abc8:	84000044 	addi	r16,r16,1
  80abcc:	dc000415 	stw	r16,16(sp)
  80abd0:	84400007 	ldb	r17,0(r16)
  80abd4:	88bffc26 	beq	r17,r2,80abc8 <_strtod_r+0x30c>
  80abd8:	88fff3c4 	addi	r3,r17,-49
  80abdc:	00800204 	movi	r2,8
  80abe0:	10ffbd36 	bltu	r2,r3,80aad8 <_strtod_r+0x21c>
  80abe4:	dc000417 	ldw	r16,16(sp)
  80abe8:	893ff404 	addi	r4,r17,-48
  80abec:	00c00bc4 	movi	r3,47
  80abf0:	dc001315 	stw	r16,76(sp)
  80abf4:	84000044 	addi	r16,r16,1
  80abf8:	dc000415 	stw	r16,16(sp)
  80abfc:	84400007 	ldb	r17,0(r16)
  80ac00:	1c40100e 	bge	r3,r17,80ac44 <_strtod_r+0x388>
  80ac04:	00800e44 	movi	r2,57
  80ac08:	14400e16 	blt	r2,r17,80ac44 <_strtod_r+0x388>
  80ac0c:	182f883a 	mov	r23,r3
  80ac10:	102d883a 	mov	r22,r2
  80ac14:	00000106 	br	80ac1c <_strtod_r+0x360>
  80ac18:	b4400a16 	blt	r22,r17,80ac44 <_strtod_r+0x388>
  80ac1c:	84000044 	addi	r16,r16,1
  80ac20:	01400284 	movi	r5,10
  80ac24:	d9802015 	stw	r6,128(sp)
  80ac28:	080fe8c0 	call	80fe8c <__mulsi3>
  80ac2c:	dc000415 	stw	r16,16(sp)
  80ac30:	8885883a 	add	r2,r17,r2
  80ac34:	84400007 	ldb	r17,0(r16)
  80ac38:	113ff404 	addi	r4,r2,-48
  80ac3c:	d9802017 	ldw	r6,128(sp)
  80ac40:	bc7ff516 	blt	r23,r17,80ac18 <_strtod_r+0x35c>
  80ac44:	d8801317 	ldw	r2,76(sp)
  80ac48:	8087c83a 	sub	r3,r16,r2
  80ac4c:	00800204 	movi	r2,8
  80ac50:	10c2ff16 	blt	r2,r3,80b850 <_strtod_r+0xf94>
  80ac54:	009387c4 	movi	r2,19999
  80ac58:	1100010e 	bge	r2,r4,80ac60 <_strtod_r+0x3a4>
  80ac5c:	1009883a 	mov	r4,r2
  80ac60:	d8c01917 	ldw	r3,100(sp)
  80ac64:	1805003a 	cmpeq	r2,r3,zero
  80ac68:	103f9c1e 	bne	r2,zero,80aadc <_strtod_r+0x220>
  80ac6c:	0109c83a 	sub	r4,zero,r4
  80ac70:	903f9b26 	beq	r18,zero,80aae0 <_strtod_r+0x224>
  80ac74:	d8801717 	ldw	r2,92(sp)
  80ac78:	2089c83a 	sub	r4,r4,r2
  80ac7c:	d9000f15 	stw	r4,60(sp)
  80ac80:	9800811e 	bne	r19,zero,80ae88 <_strtod_r+0x5cc>
  80ac84:	dd001817 	ldw	r20,96(sp)
  80ac88:	dc801817 	ldw	r18,96(sp)
  80ac8c:	00800404 	movi	r2,16
  80ac90:	1480010e 	bge	r2,r18,80ac98 <_strtod_r+0x3dc>
  80ac94:	1025883a 	mov	r18,r2
  80ac98:	d9001217 	ldw	r4,72(sp)
  80ac9c:	080fbac0 	call	80fbac <__floatunsidf>
  80aca0:	100f883a 	mov	r7,r2
  80aca4:	e0800015 	stw	r2,0(fp)
  80aca8:	00800244 	movi	r2,9
  80acac:	e0c00115 	stw	r3,4(fp)
  80acb0:	1480160e 	bge	r2,r18,80ad0c <_strtod_r+0x450>
  80acb4:	900c90fa 	slli	r6,r18,3
  80acb8:	01002074 	movhi	r4,129
  80acbc:	2112db04 	addi	r4,r4,19308
  80acc0:	180b883a 	mov	r5,r3
  80acc4:	310d883a 	add	r6,r6,r4
  80acc8:	30ffef17 	ldw	r3,-68(r6)
  80accc:	30bfee17 	ldw	r2,-72(r6)
  80acd0:	3809883a 	mov	r4,r7
  80acd4:	180f883a 	mov	r7,r3
  80acd8:	100d883a 	mov	r6,r2
  80acdc:	080f01c0 	call	80f01c <__muldf3>
  80ace0:	d9001117 	ldw	r4,68(sp)
  80ace4:	1021883a 	mov	r16,r2
  80ace8:	1823883a 	mov	r17,r3
  80acec:	080fbac0 	call	80fbac <__floatunsidf>
  80acf0:	880b883a 	mov	r5,r17
  80acf4:	180f883a 	mov	r7,r3
  80acf8:	8009883a 	mov	r4,r16
  80acfc:	100d883a 	mov	r6,r2
  80ad00:	080efa80 	call	80efa8 <__adddf3>
  80ad04:	e0c00115 	stw	r3,4(fp)
  80ad08:	e0800015 	stw	r2,0(fp)
  80ad0c:	d8c01817 	ldw	r3,96(sp)
  80ad10:	010003c4 	movi	r4,15
  80ad14:	20c09e16 	blt	r4,r3,80af90 <_strtod_r+0x6d4>
  80ad18:	d8800f17 	ldw	r2,60(sp)
  80ad1c:	103f7126 	beq	r2,zero,80aae4 <_strtod_r+0x228>
  80ad20:	0083d90e 	bge	zero,r2,80bc88 <_strtod_r+0x13cc>
  80ad24:	d8c00f17 	ldw	r3,60(sp)
  80ad28:	00800584 	movi	r2,22
  80ad2c:	10c2ca0e 	bge	r2,r3,80b858 <_strtod_r+0xf9c>
  80ad30:	d8801817 	ldw	r2,96(sp)
  80ad34:	d8c00f17 	ldw	r3,60(sp)
  80ad38:	20a3c83a 	sub	r17,r4,r2
  80ad3c:	88800584 	addi	r2,r17,22
  80ad40:	10c09316 	blt	r2,r3,80af90 <_strtod_r+0x6d4>
  80ad44:	880890fa 	slli	r4,r17,3
  80ad48:	04002074 	movhi	r16,129
  80ad4c:	8412db04 	addi	r16,r16,19308
  80ad50:	e0800017 	ldw	r2,0(fp)
  80ad54:	2409883a 	add	r4,r4,r16
  80ad58:	22000017 	ldw	r8,0(r4)
  80ad5c:	22400117 	ldw	r9,4(r4)
  80ad60:	e0c00117 	ldw	r3,4(fp)
  80ad64:	1009883a 	mov	r4,r2
  80ad68:	480f883a 	mov	r7,r9
  80ad6c:	180b883a 	mov	r5,r3
  80ad70:	400d883a 	mov	r6,r8
  80ad74:	080f01c0 	call	80f01c <__muldf3>
  80ad78:	d9000f17 	ldw	r4,60(sp)
  80ad7c:	180b883a 	mov	r5,r3
  80ad80:	2455c83a 	sub	r10,r4,r17
  80ad84:	501490fa 	slli	r10,r10,3
  80ad88:	1009883a 	mov	r4,r2
  80ad8c:	5415883a 	add	r10,r10,r16
  80ad90:	52000017 	ldw	r8,0(r10)
  80ad94:	52400117 	ldw	r9,4(r10)
  80ad98:	0002b906 	br	80b880 <_strtod_r+0xfc4>
  80ad9c:	80c00047 	ldb	r3,1(r16)
  80ada0:	00801604 	movi	r2,88
  80ada4:	18805226 	beq	r3,r2,80aef0 <_strtod_r+0x634>
  80ada8:	00801e04 	movi	r2,120
  80adac:	18805026 	beq	r3,r2,80aef0 <_strtod_r+0x634>
  80adb0:	84000044 	addi	r16,r16,1
  80adb4:	dc000415 	stw	r16,16(sp)
  80adb8:	80c00007 	ldb	r3,0(r16)
  80adbc:	00800c04 	movi	r2,48
  80adc0:	18bffb26 	beq	r3,r2,80adb0 <_strtod_r+0x4f4>
  80adc4:	183f4726 	beq	r3,zero,80aae4 <_strtod_r+0x228>
  80adc8:	01000044 	movi	r4,1
  80adcc:	d9001615 	stw	r4,88(sp)
  80add0:	003f0a06 	br	80a9fc <_strtod_r+0x140>
  80add4:	84000044 	addi	r16,r16,1
  80add8:	dc000415 	stw	r16,16(sp)
  80addc:	94400047 	ldb	r17,1(r18)
  80ade0:	9800ba26 	beq	r19,zero,80b0cc <_strtod_r+0x810>
  80ade4:	dcc01815 	stw	r19,96(sp)
  80ade8:	d8001715 	stw	zero,92(sp)
  80adec:	000d883a 	mov	r6,zero
  80adf0:	8dbff404 	addi	r22,r17,-48
  80adf4:	00800244 	movi	r2,9
  80adf8:	15826e2e 	bgeu	r2,r22,80b7b4 <_strtod_r+0xef8>
  80adfc:	01000044 	movi	r4,1
  80ae00:	d9001b15 	stw	r4,108(sp)
  80ae04:	003f2e06 	br	80aac0 <_strtod_r+0x204>
  80ae08:	d8c01617 	ldw	r3,88(sp)
  80ae0c:	1804c03a 	cmpne	r2,r3,zero
  80ae10:	103f341e 	bne	r2,zero,80aae4 <_strtod_r+0x228>
  80ae14:	d9001b17 	ldw	r4,108(sp)
  80ae18:	2004c03a 	cmpne	r2,r4,zero
  80ae1c:	103f521e 	bne	r2,zero,80ab68 <_strtod_r+0x2ac>
  80ae20:	00801384 	movi	r2,78
  80ae24:	8883b526 	beq	r17,r2,80bcfc <_strtod_r+0x1440>
  80ae28:	1443b016 	blt	r2,r17,80bcec <_strtod_r+0x1430>
  80ae2c:	00801244 	movi	r2,73
  80ae30:	88bf4d1e 	bne	r17,r2,80ab68 <_strtod_r+0x2ac>
  80ae34:	dc000404 	addi	r16,sp,16
  80ae38:	8009883a 	mov	r4,r16
  80ae3c:	01402074 	movhi	r5,129
  80ae40:	29532404 	addi	r5,r5,19600
  80ae44:	080a8740 	call	80a874 <match>
  80ae48:	103f4726 	beq	r2,zero,80ab68 <_strtod_r+0x2ac>
  80ae4c:	d8800417 	ldw	r2,16(sp)
  80ae50:	8009883a 	mov	r4,r16
  80ae54:	01402074 	movhi	r5,129
  80ae58:	29532504 	addi	r5,r5,19604
  80ae5c:	143fffc4 	addi	r16,r2,-1
  80ae60:	dc000415 	stw	r16,16(sp)
  80ae64:	080a8740 	call	80a874 <match>
  80ae68:	1000031e 	bne	r2,zero,80ae78 <_strtod_r+0x5bc>
  80ae6c:	d8800417 	ldw	r2,16(sp)
  80ae70:	14000044 	addi	r16,r2,1
  80ae74:	dc000415 	stw	r16,16(sp)
  80ae78:	019ffc34 	movhi	r6,32752
  80ae7c:	e1800115 	stw	r6,4(fp)
  80ae80:	e0000015 	stw	zero,0(fp)
  80ae84:	003f1706 	br	80aae4 <_strtod_r+0x228>
  80ae88:	9829883a 	mov	r20,r19
  80ae8c:	003f7e06 	br	80ac88 <_strtod_r+0x3cc>
  80ae90:	d8001515 	stw	zero,84(sp)
  80ae94:	84000044 	addi	r16,r16,1
  80ae98:	dc000415 	stw	r16,16(sp)
  80ae9c:	80800007 	ldb	r2,0(r16)
  80aea0:	103ed21e 	bne	r2,zero,80a9ec <_strtod_r+0x130>
  80aea4:	d8001515 	stw	zero,84(sp)
  80aea8:	dd000415 	stw	r20,16(sp)
  80aeac:	003f0d06 	br	80aae4 <_strtod_r+0x228>
  80aeb0:	84000044 	addi	r16,r16,1
  80aeb4:	dc000415 	stw	r16,16(sp)
  80aeb8:	003e9206 	br	80a904 <_strtod_r+0x48>
  80aebc:	00800044 	movi	r2,1
  80aec0:	d8801515 	stw	r2,84(sp)
  80aec4:	003ff306 	br	80ae94 <_strtod_r+0x5d8>
  80aec8:	d8001915 	stw	zero,100(sp)
  80aecc:	84000044 	addi	r16,r16,1
  80aed0:	dc000415 	stw	r16,16(sp)
  80aed4:	24400047 	ldb	r17,1(r4)
  80aed8:	00800244 	movi	r2,9
  80aedc:	88fff404 	addi	r3,r17,-48
  80aee0:	10ff352e 	bgeu	r2,r3,80abb8 <_strtod_r+0x2fc>
  80aee4:	0009883a 	mov	r4,zero
  80aee8:	dd000415 	stw	r20,16(sp)
  80aeec:	003efb06 	br	80aadc <_strtod_r+0x220>
  80aef0:	d8c01517 	ldw	r3,84(sp)
  80aef4:	04402074 	movhi	r17,129
  80aef8:	8c559a04 	addi	r17,r17,22120
  80aefc:	d8800504 	addi	r2,sp,20
  80af00:	a809883a 	mov	r4,r21
  80af04:	d9400404 	addi	r5,sp,16
  80af08:	880d883a 	mov	r6,r17
  80af0c:	d9c00604 	addi	r7,sp,24
  80af10:	d8800015 	stw	r2,0(sp)
  80af14:	d8c00115 	stw	r3,4(sp)
  80af18:	080d08c0 	call	80d08c <__gethex>
  80af1c:	140001cc 	andi	r16,r2,7
  80af20:	1025883a 	mov	r18,r2
  80af24:	803eef26 	beq	r16,zero,80aae4 <_strtod_r+0x228>
  80af28:	04c00184 	movi	r19,6
  80af2c:	84ff0e26 	beq	r16,r19,80ab68 <_strtod_r+0x2ac>
  80af30:	d9800517 	ldw	r6,20(sp)
  80af34:	30000626 	beq	r6,zero,80af50 <_strtod_r+0x694>
  80af38:	89400017 	ldw	r5,0(r17)
  80af3c:	d9000d04 	addi	r4,sp,52
  80af40:	08091680 	call	809168 <__copybits>
  80af44:	d9400517 	ldw	r5,20(sp)
  80af48:	a809883a 	mov	r4,r21
  80af4c:	0808cc80 	call	808cc8 <_Bfree>
  80af50:	d9400617 	ldw	r5,24(sp)
  80af54:	9c025436 	bltu	r19,r16,80b8a8 <_strtod_r+0xfec>
  80af58:	8405883a 	add	r2,r16,r16
  80af5c:	1085883a 	add	r2,r2,r2
  80af60:	00c02074 	movhi	r3,129
  80af64:	18ebdd04 	addi	r3,r3,-20620
  80af68:	10c5883a 	add	r2,r2,r3
  80af6c:	11000017 	ldw	r4,0(r2)
  80af70:	2000683a 	jmp	r4
  80af74:	0080b8e8 	cmpgeui	r2,zero,739
  80af78:	0080b8f4 	movhi	r2,739
  80af7c:	0080b898 	cmpnei	r2,zero,738
  80af80:	0080b8c0 	call	80b8c <__reset-0x77f474>
  80af84:	0080b8d0 	cmplti	r2,zero,739
  80af88:	0080b8f4 	movhi	r2,739
  80af8c:	0080b8e8 	cmpgeui	r2,zero,739
  80af90:	d9001817 	ldw	r4,96(sp)
  80af94:	d8c00f17 	ldw	r3,60(sp)
  80af98:	2485c83a 	sub	r2,r4,r18
  80af9c:	18a1883a 	add	r16,r3,r2
  80afa0:	0402e80e 	bge	zero,r16,80bb44 <_strtod_r+0x1288>
  80afa4:	814003cc 	andi	r5,r16,15
  80afa8:	28000f26 	beq	r5,zero,80afe8 <_strtod_r+0x72c>
  80afac:	280a90fa 	slli	r5,r5,3
  80afb0:	01002074 	movhi	r4,129
  80afb4:	2112db04 	addi	r4,r4,19308
  80afb8:	e0800017 	ldw	r2,0(fp)
  80afbc:	290b883a 	add	r5,r5,r4
  80afc0:	2a000017 	ldw	r8,0(r5)
  80afc4:	e0c00117 	ldw	r3,4(fp)
  80afc8:	2a400117 	ldw	r9,4(r5)
  80afcc:	1009883a 	mov	r4,r2
  80afd0:	180b883a 	mov	r5,r3
  80afd4:	480f883a 	mov	r7,r9
  80afd8:	400d883a 	mov	r6,r8
  80afdc:	080f01c0 	call	80f01c <__muldf3>
  80afe0:	e0c00115 	stw	r3,4(fp)
  80afe4:	e0800015 	stw	r2,0(fp)
  80afe8:	00bffc04 	movi	r2,-16
  80afec:	808c703a 	and	r6,r16,r2
  80aff0:	30006726 	beq	r6,zero,80b190 <_strtod_r+0x8d4>
  80aff4:	00804d04 	movi	r2,308
  80aff8:	11820f16 	blt	r2,r6,80b838 <_strtod_r+0xf7c>
  80affc:	3021d13a 	srai	r16,r6,4
  80b000:	00800044 	movi	r2,1
  80b004:	14037f0e 	bge	r2,r16,80be04 <_strtod_r+0x1548>
  80b008:	05802074 	movhi	r22,129
  80b00c:	b5930d04 	addi	r22,r22,19508
  80b010:	1027883a 	mov	r19,r2
  80b014:	0025883a 	mov	r18,zero
  80b018:	b023883a 	mov	r17,r22
  80b01c:	8080004c 	andi	r2,r16,1
  80b020:	1005003a 	cmpeq	r2,r2,zero
  80b024:	1000091e 	bne	r2,zero,80b04c <_strtod_r+0x790>
  80b028:	e0800017 	ldw	r2,0(fp)
  80b02c:	e0c00117 	ldw	r3,4(fp)
  80b030:	89800017 	ldw	r6,0(r17)
  80b034:	89c00117 	ldw	r7,4(r17)
  80b038:	180b883a 	mov	r5,r3
  80b03c:	1009883a 	mov	r4,r2
  80b040:	080f01c0 	call	80f01c <__muldf3>
  80b044:	e0c00115 	stw	r3,4(fp)
  80b048:	e0800015 	stw	r2,0(fp)
  80b04c:	8021d07a 	srai	r16,r16,1
  80b050:	94800044 	addi	r18,r18,1
  80b054:	8c400204 	addi	r17,r17,8
  80b058:	9c3ff016 	blt	r19,r16,80b01c <_strtod_r+0x760>
  80b05c:	900e90fa 	slli	r7,r18,3
  80b060:	e2000117 	ldw	r8,4(fp)
  80b064:	e1000017 	ldw	r4,0(fp)
  80b068:	3d8f883a 	add	r7,r7,r22
  80b06c:	38800017 	ldw	r2,0(r7)
  80b070:	38c00117 	ldw	r3,4(r7)
  80b074:	01bf2c34 	movhi	r6,64688
  80b078:	418d883a 	add	r6,r8,r6
  80b07c:	300b883a 	mov	r5,r6
  80b080:	180f883a 	mov	r7,r3
  80b084:	100d883a 	mov	r6,r2
  80b088:	080f01c0 	call	80f01c <__muldf3>
  80b08c:	1009883a 	mov	r4,r2
  80b090:	180b883a 	mov	r5,r3
  80b094:	199ffc2c 	andhi	r6,r3,32752
  80b098:	009f2834 	movhi	r2,31904
  80b09c:	e1000015 	stw	r4,0(fp)
  80b0a0:	e1400115 	stw	r5,4(fp)
  80b0a4:	1181e436 	bltu	r2,r6,80b838 <_strtod_r+0xf7c>
  80b0a8:	009f2434 	movhi	r2,31888
  80b0ac:	11833f2e 	bgeu	r2,r6,80bdac <_strtod_r+0x14f0>
  80b0b0:	d8001c15 	stw	zero,112(sp)
  80b0b4:	019ffc34 	movhi	r6,32752
  80b0b8:	31bfffc4 	addi	r6,r6,-1
  80b0bc:	01ffffc4 	movi	r7,-1
  80b0c0:	e1800115 	stw	r6,4(fp)
  80b0c4:	e1c00015 	stw	r7,0(fp)
  80b0c8:	00003206 	br	80b194 <_strtod_r+0x8d8>
  80b0cc:	00800c04 	movi	r2,48
  80b0d0:	8883221e 	bne	r17,r2,80bd5c <_strtod_r+0x14a0>
  80b0d4:	8805883a 	mov	r2,r17
  80b0d8:	000d883a 	mov	r6,zero
  80b0dc:	84000044 	addi	r16,r16,1
  80b0e0:	dc000415 	stw	r16,16(sp)
  80b0e4:	84400007 	ldb	r17,0(r16)
  80b0e8:	31800044 	addi	r6,r6,1
  80b0ec:	88bffb26 	beq	r17,r2,80b0dc <_strtod_r+0x820>
  80b0f0:	88fff3c4 	addi	r3,r17,-49
  80b0f4:	00800204 	movi	r2,8
  80b0f8:	10c1ca36 	bltu	r2,r3,80b824 <_strtod_r+0xf68>
  80b0fc:	d8c00417 	ldw	r3,16(sp)
  80b100:	d9801715 	stw	r6,92(sp)
  80b104:	8dbff404 	addi	r22,r17,-48
  80b108:	d8c01415 	stw	r3,80(sp)
  80b10c:	1821883a 	mov	r16,r3
  80b110:	d8001815 	stw	zero,96(sp)
  80b114:	01800044 	movi	r6,1
  80b118:	b0023526 	beq	r22,zero,80b9f0 <_strtod_r+0x1134>
  80b11c:	d9001717 	ldw	r4,92(sp)
  80b120:	00800044 	movi	r2,1
  80b124:	2189883a 	add	r4,r4,r6
  80b128:	d9001715 	stw	r4,92(sp)
  80b12c:	1183390e 	bge	r2,r6,80be14 <_strtod_r+0x1558>
  80b130:	dc401817 	ldw	r17,96(sp)
  80b134:	1025883a 	mov	r18,r2
  80b138:	05c00204 	movi	r23,8
  80b13c:	00000806 	br	80b160 <_strtod_r+0x8a4>
  80b140:	d9001217 	ldw	r4,72(sp)
  80b144:	01400284 	movi	r5,10
  80b148:	d9802015 	stw	r6,128(sp)
  80b14c:	080fe8c0 	call	80fe8c <__mulsi3>
  80b150:	d9802017 	ldw	r6,128(sp)
  80b154:	d8801215 	stw	r2,72(sp)
  80b158:	94800044 	addi	r18,r18,1
  80b15c:	91821726 	beq	r18,r6,80b9bc <_strtod_r+0x1100>
  80b160:	8c400044 	addi	r17,r17,1
  80b164:	88bfffc4 	addi	r2,r17,-1
  80b168:	b8bff50e 	bge	r23,r2,80b140 <_strtod_r+0x884>
  80b16c:	00800404 	movi	r2,16
  80b170:	147ff916 	blt	r2,r17,80b158 <_strtod_r+0x89c>
  80b174:	d9001117 	ldw	r4,68(sp)
  80b178:	01400284 	movi	r5,10
  80b17c:	d9802015 	stw	r6,128(sp)
  80b180:	080fe8c0 	call	80fe8c <__mulsi3>
  80b184:	d9802017 	ldw	r6,128(sp)
  80b188:	d8801115 	stw	r2,68(sp)
  80b18c:	003ff206 	br	80b158 <_strtod_r+0x89c>
  80b190:	d8001c15 	stw	zero,112(sp)
  80b194:	d8c01217 	ldw	r3,72(sp)
  80b198:	d9401417 	ldw	r5,80(sp)
  80b19c:	d9c01817 	ldw	r7,96(sp)
  80b1a0:	a809883a 	mov	r4,r21
  80b1a4:	a00d883a 	mov	r6,r20
  80b1a8:	d8c00015 	stw	r3,0(sp)
  80b1ac:	0809c340 	call	809c34 <__s2b>
  80b1b0:	11000304 	addi	r4,r2,12
  80b1b4:	d8801015 	stw	r2,64(sp)
  80b1b8:	d8800f17 	ldw	r2,60(sp)
  80b1bc:	d9001f15 	stw	r4,124(sp)
  80b1c0:	1004803a 	cmplt	r2,r2,zero
  80b1c4:	d8801e15 	stw	r2,120(sp)
  80b1c8:	d8c01017 	ldw	r3,64(sp)
  80b1cc:	a809883a 	mov	r4,r21
  80b1d0:	19400117 	ldw	r5,4(r3)
  80b1d4:	08092480 	call	809248 <_Balloc>
  80b1d8:	d9001017 	ldw	r4,64(sp)
  80b1dc:	d9401f17 	ldw	r5,124(sp)
  80b1e0:	102f883a 	mov	r23,r2
  80b1e4:	21800417 	ldw	r6,16(r4)
  80b1e8:	11000304 	addi	r4,r2,12
  80b1ec:	318d883a 	add	r6,r6,r6
  80b1f0:	318d883a 	add	r6,r6,r6
  80b1f4:	31800204 	addi	r6,r6,8
  80b1f8:	0808b480 	call	808b48 <memcpy>
  80b1fc:	e2000017 	ldw	r8,0(fp)
  80b200:	e2400117 	ldw	r9,4(fp)
  80b204:	a809883a 	mov	r4,r21
  80b208:	400b883a 	mov	r5,r8
  80b20c:	d9c00204 	addi	r7,sp,8
  80b210:	d8800304 	addi	r2,sp,12
  80b214:	480d883a 	mov	r6,r9
  80b218:	d8800015 	stw	r2,0(sp)
  80b21c:	08093040 	call	809304 <__d2b>
  80b220:	a809883a 	mov	r4,r21
  80b224:	01400044 	movi	r5,1
  80b228:	d8800515 	stw	r2,20(sp)
  80b22c:	08099ac0 	call	8099ac <__i2b>
  80b230:	d8c01e17 	ldw	r3,120(sp)
  80b234:	102d883a 	mov	r22,r2
  80b238:	1801091e 	bne	r3,zero,80b660 <_strtod_r+0xda4>
  80b23c:	dd000f17 	ldw	r20,60(sp)
  80b240:	000f883a 	mov	r7,zero
  80b244:	0013883a 	mov	r9,zero
  80b248:	a011883a 	mov	r8,r20
  80b24c:	d8800217 	ldw	r2,8(sp)
  80b250:	10010116 	blt	r2,zero,80b658 <_strtod_r+0xd9c>
  80b254:	388f883a 	add	r7,r7,r2
  80b258:	d8c01c17 	ldw	r3,112(sp)
  80b25c:	d9400317 	ldw	r5,12(sp)
  80b260:	10c9c83a 	sub	r4,r2,r3
  80b264:	2145883a 	add	r2,r4,r5
  80b268:	10bfffc4 	addi	r2,r2,-1
  80b26c:	00ff0084 	movi	r3,-1022
  80b270:	10c09f0e 	bge	r2,r3,80b4f0 <_strtod_r+0xc34>
  80b274:	21810cc4 	addi	r6,r4,1075
  80b278:	d9001c17 	ldw	r4,112(sp)
  80b27c:	4185883a 	add	r2,r8,r6
  80b280:	39a1883a 	add	r16,r7,r6
  80b284:	20a5883a 	add	r18,r4,r2
  80b288:	3807883a 	mov	r3,r7
  80b28c:	81c0010e 	bge	r16,r7,80b294 <_strtod_r+0x9d8>
  80b290:	8007883a 	mov	r3,r16
  80b294:	9005883a 	mov	r2,r18
  80b298:	1c80010e 	bge	r3,r18,80b2a0 <_strtod_r+0x9e4>
  80b29c:	1805883a 	mov	r2,r3
  80b2a0:	0080eb0e 	bge	zero,r2,80b650 <_strtod_r+0xd94>
  80b2a4:	38a7c83a 	sub	r19,r7,r2
  80b2a8:	80a1c83a 	sub	r16,r16,r2
  80b2ac:	90a5c83a 	sub	r18,r18,r2
  80b2b0:	02400e0e 	bge	zero,r9,80b2ec <_strtod_r+0xa30>
  80b2b4:	480d883a 	mov	r6,r9
  80b2b8:	b00b883a 	mov	r5,r22
  80b2bc:	a809883a 	mov	r4,r21
  80b2c0:	0809b140 	call	809b14 <__pow5mult>
  80b2c4:	d9800517 	ldw	r6,20(sp)
  80b2c8:	a809883a 	mov	r4,r21
  80b2cc:	100b883a 	mov	r5,r2
  80b2d0:	102d883a 	mov	r22,r2
  80b2d4:	08097580 	call	809758 <__multiply>
  80b2d8:	d9400517 	ldw	r5,20(sp)
  80b2dc:	1023883a 	mov	r17,r2
  80b2e0:	a809883a 	mov	r4,r21
  80b2e4:	0808cc80 	call	808cc8 <_Bfree>
  80b2e8:	dc400515 	stw	r17,20(sp)
  80b2ec:	0400050e 	bge	zero,r16,80b304 <_strtod_r+0xa48>
  80b2f0:	d9400517 	ldw	r5,20(sp)
  80b2f4:	800d883a 	mov	r6,r16
  80b2f8:	a809883a 	mov	r4,r21
  80b2fc:	080960c0 	call	80960c <__lshift>
  80b300:	d8800515 	stw	r2,20(sp)
  80b304:	a000741e 	bne	r20,zero,80b4d8 <_strtod_r+0xc1c>
  80b308:	0480050e 	bge	zero,r18,80b320 <_strtod_r+0xa64>
  80b30c:	b80b883a 	mov	r5,r23
  80b310:	900d883a 	mov	r6,r18
  80b314:	a809883a 	mov	r4,r21
  80b318:	080960c0 	call	80960c <__lshift>
  80b31c:	102f883a 	mov	r23,r2
  80b320:	04c0050e 	bge	zero,r19,80b338 <_strtod_r+0xa7c>
  80b324:	b00b883a 	mov	r5,r22
  80b328:	980d883a 	mov	r6,r19
  80b32c:	a809883a 	mov	r4,r21
  80b330:	080960c0 	call	80960c <__lshift>
  80b334:	102d883a 	mov	r22,r2
  80b338:	d9400517 	ldw	r5,20(sp)
  80b33c:	a809883a 	mov	r4,r21
  80b340:	b80d883a 	mov	r6,r23
  80b344:	08094800 	call	809480 <__mdiff>
  80b348:	1029883a 	mov	r20,r2
  80b34c:	10800317 	ldw	r2,12(r2)
  80b350:	a009883a 	mov	r4,r20
  80b354:	a0000315 	stw	zero,12(r20)
  80b358:	b00b883a 	mov	r5,r22
  80b35c:	d8801a15 	stw	r2,104(sp)
  80b360:	0808e240 	call	808e24 <__mcmp>
  80b364:	1001a616 	blt	r2,zero,80ba00 <_strtod_r+0x1144>
  80b368:	10016d26 	beq	r2,zero,80b920 <_strtod_r+0x1064>
  80b36c:	a009883a 	mov	r4,r20
  80b370:	b00b883a 	mov	r5,r22
  80b374:	08090240 	call	809024 <__ratio>
  80b378:	0011883a 	mov	r8,zero
  80b37c:	02500034 	movhi	r9,16384
  80b380:	480f883a 	mov	r7,r9
  80b384:	1009883a 	mov	r4,r2
  80b388:	180b883a 	mov	r5,r3
  80b38c:	400d883a 	mov	r6,r8
  80b390:	1021883a 	mov	r16,r2
  80b394:	1823883a 	mov	r17,r3
  80b398:	080f8e00 	call	80f8e0 <__ledf2>
  80b39c:	00805716 	blt	zero,r2,80b4fc <_strtod_r+0xc40>
  80b3a0:	d8801a17 	ldw	r2,104(sp)
  80b3a4:	1025003a 	cmpeq	r18,r2,zero
  80b3a8:	90008c1e 	bne	r18,zero,80b5dc <_strtod_r+0xd20>
  80b3ac:	008ffc34 	movhi	r2,16368
  80b3b0:	0021883a 	mov	r16,zero
  80b3b4:	1023883a 	mov	r17,r2
  80b3b8:	d8000715 	stw	zero,28(sp)
  80b3bc:	d8800815 	stw	r2,32(sp)
  80b3c0:	e1c00117 	ldw	r7,4(fp)
  80b3c4:	009ff834 	movhi	r2,32736
  80b3c8:	3cdffc2c 	andhi	r19,r7,32752
  80b3cc:	98805f26 	beq	r19,r2,80b54c <_strtod_r+0xc90>
  80b3d0:	d8c01c17 	ldw	r3,112(sp)
  80b3d4:	18001b26 	beq	r3,zero,80b444 <_strtod_r+0xb88>
  80b3d8:	0081a834 	movhi	r2,1696
  80b3dc:	14c01936 	bltu	r2,r19,80b444 <_strtod_r+0xb88>
  80b3e0:	00bff034 	movhi	r2,65472
  80b3e4:	00d07834 	movhi	r3,16864
  80b3e8:	18ffffc4 	addi	r3,r3,-1
  80b3ec:	180f883a 	mov	r7,r3
  80b3f0:	8009883a 	mov	r4,r16
  80b3f4:	880b883a 	mov	r5,r17
  80b3f8:	100d883a 	mov	r6,r2
  80b3fc:	080f8e00 	call	80f8e0 <__ledf2>
  80b400:	00800b16 	blt	zero,r2,80b430 <_strtod_r+0xb74>
  80b404:	880b883a 	mov	r5,r17
  80b408:	8009883a 	mov	r4,r16
  80b40c:	080dc400 	call	80dc40 <__fixunsdfsi>
  80b410:	1000e31e 	bne	r2,zero,80b7a0 <_strtod_r+0xee4>
  80b414:	0021883a 	mov	r16,zero
  80b418:	044ffc34 	movhi	r17,16368
  80b41c:	9000dd1e 	bne	r18,zero,80b794 <_strtod_r+0xed8>
  80b420:	8005883a 	mov	r2,r16
  80b424:	8807883a 	mov	r3,r17
  80b428:	d8c00815 	stw	r3,32(sp)
  80b42c:	d8800715 	stw	r2,28(sp)
  80b430:	d8800817 	ldw	r2,32(sp)
  80b434:	00c1ac34 	movhi	r3,1712
  80b438:	14c5c83a 	sub	r2,r2,r19
  80b43c:	10c5883a 	add	r2,r2,r3
  80b440:	d8800815 	stw	r2,32(sp)
  80b444:	e0800017 	ldw	r2,0(fp)
  80b448:	e0c00117 	ldw	r3,4(fp)
  80b44c:	1009883a 	mov	r4,r2
  80b450:	180b883a 	mov	r5,r3
  80b454:	0808e840 	call	808e84 <__ulp>
  80b458:	d9800717 	ldw	r6,28(sp)
  80b45c:	d9c00817 	ldw	r7,32(sp)
  80b460:	180b883a 	mov	r5,r3
  80b464:	1009883a 	mov	r4,r2
  80b468:	080f01c0 	call	80f01c <__muldf3>
  80b46c:	e2000017 	ldw	r8,0(fp)
  80b470:	e2400117 	ldw	r9,4(fp)
  80b474:	180b883a 	mov	r5,r3
  80b478:	1009883a 	mov	r4,r2
  80b47c:	480f883a 	mov	r7,r9
  80b480:	400d883a 	mov	r6,r8
  80b484:	080efa80 	call	80efa8 <__adddf3>
  80b488:	e0c00115 	stw	r3,4(fp)
  80b48c:	e0800015 	stw	r2,0(fp)
  80b490:	d9001c17 	ldw	r4,112(sp)
  80b494:	e4800117 	ldw	r18,4(fp)
  80b498:	2000021e 	bne	r4,zero,80b4a4 <_strtod_r+0xbe8>
  80b49c:	909ffc2c 	andhi	r2,r18,32752
  80b4a0:	98807f26 	beq	r19,r2,80b6a0 <_strtod_r+0xde4>
  80b4a4:	d9400517 	ldw	r5,20(sp)
  80b4a8:	a809883a 	mov	r4,r21
  80b4ac:	0808cc80 	call	808cc8 <_Bfree>
  80b4b0:	a809883a 	mov	r4,r21
  80b4b4:	b80b883a 	mov	r5,r23
  80b4b8:	0808cc80 	call	808cc8 <_Bfree>
  80b4bc:	a809883a 	mov	r4,r21
  80b4c0:	b00b883a 	mov	r5,r22
  80b4c4:	0808cc80 	call	808cc8 <_Bfree>
  80b4c8:	a809883a 	mov	r4,r21
  80b4cc:	a00b883a 	mov	r5,r20
  80b4d0:	0808cc80 	call	808cc8 <_Bfree>
  80b4d4:	003f3c06 	br	80b1c8 <_strtod_r+0x90c>
  80b4d8:	b80b883a 	mov	r5,r23
  80b4dc:	a00d883a 	mov	r6,r20
  80b4e0:	a809883a 	mov	r4,r21
  80b4e4:	0809b140 	call	809b14 <__pow5mult>
  80b4e8:	102f883a 	mov	r23,r2
  80b4ec:	003f8606 	br	80b308 <_strtod_r+0xa4c>
  80b4f0:	00800d84 	movi	r2,54
  80b4f4:	114dc83a 	sub	r6,r2,r5
  80b4f8:	003f5f06 	br	80b278 <_strtod_r+0x9bc>
  80b4fc:	0005883a 	mov	r2,zero
  80b500:	00cff834 	movhi	r3,16352
  80b504:	8009883a 	mov	r4,r16
  80b508:	880b883a 	mov	r5,r17
  80b50c:	180f883a 	mov	r7,r3
  80b510:	100d883a 	mov	r6,r2
  80b514:	080f01c0 	call	80f01c <__muldf3>
  80b518:	1009883a 	mov	r4,r2
  80b51c:	d8801a17 	ldw	r2,104(sp)
  80b520:	2021883a 	mov	r16,r4
  80b524:	1823883a 	mov	r17,r3
  80b528:	1025003a 	cmpeq	r18,r2,zero
  80b52c:	9000451e 	bne	r18,zero,80b644 <_strtod_r+0xd88>
  80b530:	2005883a 	mov	r2,r4
  80b534:	d8800715 	stw	r2,28(sp)
  80b538:	d8c00815 	stw	r3,32(sp)
  80b53c:	e1c00117 	ldw	r7,4(fp)
  80b540:	009ff834 	movhi	r2,32736
  80b544:	3cdffc2c 	andhi	r19,r7,32752
  80b548:	98bfa11e 	bne	r19,r2,80b3d0 <_strtod_r+0xb14>
  80b54c:	e1000017 	ldw	r4,0(fp)
  80b550:	01bf2c34 	movhi	r6,64688
  80b554:	398d883a 	add	r6,r7,r6
  80b558:	d9000b15 	stw	r4,44(sp)
  80b55c:	d9c00c15 	stw	r7,48(sp)
  80b560:	300b883a 	mov	r5,r6
  80b564:	e1800115 	stw	r6,4(fp)
  80b568:	0808e840 	call	808e84 <__ulp>
  80b56c:	d9800717 	ldw	r6,28(sp)
  80b570:	d9c00817 	ldw	r7,32(sp)
  80b574:	180b883a 	mov	r5,r3
  80b578:	1009883a 	mov	r4,r2
  80b57c:	080f01c0 	call	80f01c <__muldf3>
  80b580:	e2000017 	ldw	r8,0(fp)
  80b584:	e2400117 	ldw	r9,4(fp)
  80b588:	180b883a 	mov	r5,r3
  80b58c:	1009883a 	mov	r4,r2
  80b590:	480f883a 	mov	r7,r9
  80b594:	400d883a 	mov	r6,r8
  80b598:	080efa80 	call	80efa8 <__adddf3>
  80b59c:	1009883a 	mov	r4,r2
  80b5a0:	180b883a 	mov	r5,r3
  80b5a4:	009f2834 	movhi	r2,31904
  80b5a8:	10bfffc4 	addi	r2,r2,-1
  80b5ac:	18dffc2c 	andhi	r3,r3,32752
  80b5b0:	e1000015 	stw	r4,0(fp)
  80b5b4:	e1400115 	stw	r5,4(fp)
  80b5b8:	10c0722e 	bgeu	r2,r3,80b784 <_strtod_r+0xec8>
  80b5bc:	d8800c17 	ldw	r2,48(sp)
  80b5c0:	011ffc34 	movhi	r4,32752
  80b5c4:	213fffc4 	addi	r4,r4,-1
  80b5c8:	11007d26 	beq	r2,r4,80b7c0 <_strtod_r+0xf04>
  80b5cc:	01ffffc4 	movi	r7,-1
  80b5d0:	e1000115 	stw	r4,4(fp)
  80b5d4:	e1c00015 	stw	r7,0(fp)
  80b5d8:	003fb206 	br	80b4a4 <_strtod_r+0xbe8>
  80b5dc:	e0c00017 	ldw	r3,0(fp)
  80b5e0:	1800251e 	bne	r3,zero,80b678 <_strtod_r+0xdbc>
  80b5e4:	e0800117 	ldw	r2,4(fp)
  80b5e8:	00c00434 	movhi	r3,16
  80b5ec:	18ffffc4 	addi	r3,r3,-1
  80b5f0:	10c4703a 	and	r2,r2,r3
  80b5f4:	1000241e 	bne	r2,zero,80b688 <_strtod_r+0xdcc>
  80b5f8:	0005883a 	mov	r2,zero
  80b5fc:	00cffc34 	movhi	r3,16368
  80b600:	180f883a 	mov	r7,r3
  80b604:	8009883a 	mov	r4,r16
  80b608:	880b883a 	mov	r5,r17
  80b60c:	100d883a 	mov	r6,r2
  80b610:	080f8580 	call	80f858 <__ltdf2>
  80b614:	10014616 	blt	r2,zero,80bb30 <_strtod_r+0x1274>
  80b618:	0005883a 	mov	r2,zero
  80b61c:	00cff834 	movhi	r3,16352
  80b620:	880b883a 	mov	r5,r17
  80b624:	8009883a 	mov	r4,r16
  80b628:	180f883a 	mov	r7,r3
  80b62c:	100d883a 	mov	r6,r2
  80b630:	080f01c0 	call	80f01c <__muldf3>
  80b634:	1823883a 	mov	r17,r3
  80b638:	1021883a 	mov	r16,r2
  80b63c:	18e0003c 	xorhi	r3,r3,32768
  80b640:	003fbc06 	br	80b534 <_strtod_r+0xc78>
  80b644:	2005883a 	mov	r2,r4
  80b648:	18e0003c 	xorhi	r3,r3,32768
  80b64c:	003fb906 	br	80b534 <_strtod_r+0xc78>
  80b650:	3827883a 	mov	r19,r7
  80b654:	003f1606 	br	80b2b0 <_strtod_r+0x9f4>
  80b658:	4091c83a 	sub	r8,r8,r2
  80b65c:	003efe06 	br	80b258 <_strtod_r+0x99c>
  80b660:	d9000f17 	ldw	r4,60(sp)
  80b664:	0011883a 	mov	r8,zero
  80b668:	0029883a 	mov	r20,zero
  80b66c:	0113c83a 	sub	r9,zero,r4
  80b670:	480f883a 	mov	r7,r9
  80b674:	003ef506 	br	80b24c <_strtod_r+0x990>
  80b678:	00800044 	movi	r2,1
  80b67c:	1880021e 	bne	r3,r2,80b688 <_strtod_r+0xdcc>
  80b680:	e0800117 	ldw	r2,4(fp)
  80b684:	1000c526 	beq	r2,zero,80b99c <_strtod_r+0x10e0>
  80b688:	00affc34 	movhi	r2,49136
  80b68c:	0021883a 	mov	r16,zero
  80b690:	044ffc34 	movhi	r17,16368
  80b694:	d8800815 	stw	r2,32(sp)
  80b698:	d8000715 	stw	zero,28(sp)
  80b69c:	003f4806 	br	80b3c0 <_strtod_r+0xb04>
  80b6a0:	880b883a 	mov	r5,r17
  80b6a4:	8009883a 	mov	r4,r16
  80b6a8:	080fa600 	call	80fa60 <__fixdfsi>
  80b6ac:	1009883a 	mov	r4,r2
  80b6b0:	080f9680 	call	80f968 <__floatsidf>
  80b6b4:	880b883a 	mov	r5,r17
  80b6b8:	8009883a 	mov	r4,r16
  80b6bc:	100d883a 	mov	r6,r2
  80b6c0:	180f883a 	mov	r7,r3
  80b6c4:	080ef280 	call	80ef28 <__subdf3>
  80b6c8:	100b883a 	mov	r5,r2
  80b6cc:	1021883a 	mov	r16,r2
  80b6d0:	d8801a17 	ldw	r2,104(sp)
  80b6d4:	180d883a 	mov	r6,r3
  80b6d8:	1823883a 	mov	r17,r3
  80b6dc:	1000061e 	bne	r2,zero,80b6f8 <_strtod_r+0xe3c>
  80b6e0:	e0800017 	ldw	r2,0(fp)
  80b6e4:	1000041e 	bne	r2,zero,80b6f8 <_strtod_r+0xe3c>
  80b6e8:	00c00434 	movhi	r3,16
  80b6ec:	18ffffc4 	addi	r3,r3,-1
  80b6f0:	90c4703a 	and	r2,r18,r3
  80b6f4:	10004026 	beq	r2,zero,80b7f8 <_strtod_r+0xf3c>
  80b6f8:	00a52834 	movhi	r2,38048
  80b6fc:	108d6544 	addi	r2,r2,13717
  80b700:	00cff834 	movhi	r3,16352
  80b704:	18ffffc4 	addi	r3,r3,-1
  80b708:	180f883a 	mov	r7,r3
  80b70c:	8009883a 	mov	r4,r16
  80b710:	880b883a 	mov	r5,r17
  80b714:	100d883a 	mov	r6,r2
  80b718:	080f8580 	call	80f858 <__ltdf2>
  80b71c:	10000916 	blt	r2,zero,80b744 <_strtod_r+0xe88>
  80b720:	008d6c34 	movhi	r2,13744
  80b724:	10b94d44 	addi	r2,r2,-6859
  80b728:	00cff834 	movhi	r3,16352
  80b72c:	880b883a 	mov	r5,r17
  80b730:	180f883a 	mov	r7,r3
  80b734:	8009883a 	mov	r4,r16
  80b738:	100d883a 	mov	r6,r2
  80b73c:	080f7480 	call	80f748 <__gtdf2>
  80b740:	00bf580e 	bge	zero,r2,80b4a4 <_strtod_r+0xbe8>
  80b744:	d9400517 	ldw	r5,20(sp)
  80b748:	a809883a 	mov	r4,r21
  80b74c:	0808cc80 	call	808cc8 <_Bfree>
  80b750:	a809883a 	mov	r4,r21
  80b754:	b80b883a 	mov	r5,r23
  80b758:	0808cc80 	call	808cc8 <_Bfree>
  80b75c:	a809883a 	mov	r4,r21
  80b760:	b00b883a 	mov	r5,r22
  80b764:	0808cc80 	call	808cc8 <_Bfree>
  80b768:	d9401017 	ldw	r5,64(sp)
  80b76c:	a809883a 	mov	r4,r21
  80b770:	0808cc80 	call	808cc8 <_Bfree>
  80b774:	a809883a 	mov	r4,r21
  80b778:	a00b883a 	mov	r5,r20
  80b77c:	0808cc80 	call	808cc8 <_Bfree>
  80b780:	003cd806 	br	80aae4 <_strtod_r+0x228>
  80b784:	0080d434 	movhi	r2,848
  80b788:	288d883a 	add	r6,r5,r2
  80b78c:	e1800115 	stw	r6,4(fp)
  80b790:	003f3f06 	br	80b490 <_strtod_r+0xbd4>
  80b794:	8005883a 	mov	r2,r16
  80b798:	88e0003c 	xorhi	r3,r17,32768
  80b79c:	003f2206 	br	80b428 <_strtod_r+0xb6c>
  80b7a0:	1009883a 	mov	r4,r2
  80b7a4:	080fbac0 	call	80fbac <__floatunsidf>
  80b7a8:	1021883a 	mov	r16,r2
  80b7ac:	1823883a 	mov	r17,r3
  80b7b0:	003f1a06 	br	80b41c <_strtod_r+0xb60>
  80b7b4:	dc000417 	ldw	r16,16(sp)
  80b7b8:	31800044 	addi	r6,r6,1
  80b7bc:	003e5606 	br	80b118 <_strtod_r+0x85c>
  80b7c0:	d8c00b17 	ldw	r3,44(sp)
  80b7c4:	00bfffc4 	movi	r2,-1
  80b7c8:	18bf801e 	bne	r3,r2,80b5cc <_strtod_r+0xd10>
  80b7cc:	00c00884 	movi	r3,34
  80b7d0:	a8c00015 	stw	r3,0(r21)
  80b7d4:	009ffc34 	movhi	r2,32752
  80b7d8:	e0800115 	stw	r2,4(fp)
  80b7dc:	e0000015 	stw	zero,0(fp)
  80b7e0:	003fd806 	br	80b744 <_strtod_r+0xe88>
  80b7e4:	8025883a 	mov	r18,r16
  80b7e8:	0027883a 	mov	r19,zero
  80b7ec:	d8001215 	stw	zero,72(sp)
  80b7f0:	d8001115 	stw	zero,68(sp)
  80b7f4:	003cac06 	br	80aaa8 <_strtod_r+0x1ec>
  80b7f8:	00a52834 	movhi	r2,38048
  80b7fc:	108d6544 	addi	r2,r2,13717
  80b800:	00cff434 	movhi	r3,16336
  80b804:	18ffffc4 	addi	r3,r3,-1
  80b808:	2809883a 	mov	r4,r5
  80b80c:	180f883a 	mov	r7,r3
  80b810:	300b883a 	mov	r5,r6
  80b814:	100d883a 	mov	r6,r2
  80b818:	080f8580 	call	80f858 <__ltdf2>
  80b81c:	103f210e 	bge	r2,zero,80b4a4 <_strtod_r+0xbe8>
  80b820:	003fc806 	br	80b744 <_strtod_r+0xe88>
  80b824:	00800044 	movi	r2,1
  80b828:	d8001815 	stw	zero,96(sp)
  80b82c:	d8801b15 	stw	r2,108(sp)
  80b830:	d8001715 	stw	zero,92(sp)
  80b834:	003ca206 	br	80aac0 <_strtod_r+0x204>
  80b838:	00800884 	movi	r2,34
  80b83c:	a8800015 	stw	r2,0(r21)
  80b840:	019ffc34 	movhi	r6,32752
  80b844:	e1800115 	stw	r6,4(fp)
  80b848:	e0000015 	stw	zero,0(fp)
  80b84c:	003ca506 	br	80aae4 <_strtod_r+0x228>
  80b850:	011387c4 	movi	r4,19999
  80b854:	003d0206 	br	80ac60 <_strtod_r+0x3a4>
  80b858:	180a90fa 	slli	r5,r3,3
  80b85c:	e0800017 	ldw	r2,0(fp)
  80b860:	e0c00117 	ldw	r3,4(fp)
  80b864:	01002074 	movhi	r4,129
  80b868:	2112db04 	addi	r4,r4,19308
  80b86c:	290b883a 	add	r5,r5,r4
  80b870:	2a000017 	ldw	r8,0(r5)
  80b874:	2a400117 	ldw	r9,4(r5)
  80b878:	1009883a 	mov	r4,r2
  80b87c:	180b883a 	mov	r5,r3
  80b880:	480f883a 	mov	r7,r9
  80b884:	400d883a 	mov	r6,r8
  80b888:	080f01c0 	call	80f01c <__muldf3>
  80b88c:	e0c00115 	stw	r3,4(fp)
  80b890:	e0800015 	stw	r2,0(fp)
  80b894:	003c9306 	br	80aae4 <_strtod_r+0x228>
  80b898:	d8800d17 	ldw	r2,52(sp)
  80b89c:	e0800015 	stw	r2,0(fp)
  80b8a0:	d8c00e17 	ldw	r3,56(sp)
  80b8a4:	e0c00115 	stw	r3,4(fp)
  80b8a8:	9080020c 	andi	r2,r18,8
  80b8ac:	103c8d26 	beq	r2,zero,80aae4 <_strtod_r+0x228>
  80b8b0:	e0800117 	ldw	r2,4(fp)
  80b8b4:	10a00034 	orhi	r2,r2,32768
  80b8b8:	e0800115 	stw	r2,4(fp)
  80b8bc:	003c8906 	br	80aae4 <_strtod_r+0x228>
  80b8c0:	009ffc34 	movhi	r2,32752
  80b8c4:	e0800115 	stw	r2,4(fp)
  80b8c8:	e0000015 	stw	zero,0(fp)
  80b8cc:	003ff606 	br	80b8a8 <_strtod_r+0xfec>
  80b8d0:	00a00034 	movhi	r2,32768
  80b8d4:	10bfffc4 	addi	r2,r2,-1
  80b8d8:	00ffffc4 	movi	r3,-1
  80b8dc:	e0800115 	stw	r2,4(fp)
  80b8e0:	e0c00015 	stw	r3,0(fp)
  80b8e4:	003ff006 	br	80b8a8 <_strtod_r+0xfec>
  80b8e8:	e0000115 	stw	zero,4(fp)
  80b8ec:	e0000015 	stw	zero,0(fp)
  80b8f0:	003fed06 	br	80b8a8 <_strtod_r+0xfec>
  80b8f4:	d8800e17 	ldw	r2,56(sp)
  80b8f8:	29010cc4 	addi	r4,r5,1075
  80b8fc:	00fffc34 	movhi	r3,65520
  80b900:	18ffffc4 	addi	r3,r3,-1
  80b904:	2008953a 	slli	r4,r4,20
  80b908:	10c4703a 	and	r2,r2,r3
  80b90c:	d8c00d17 	ldw	r3,52(sp)
  80b910:	1104b03a 	or	r2,r2,r4
  80b914:	e0800115 	stw	r2,4(fp)
  80b918:	e0c00015 	stw	r3,0(fp)
  80b91c:	003fe206 	br	80b8a8 <_strtod_r+0xfec>
  80b920:	d8c01a17 	ldw	r3,104(sp)
  80b924:	1825003a 	cmpeq	r18,r3,zero
  80b928:	9000cf1e 	bne	r18,zero,80bc68 <_strtod_r+0x13ac>
  80b92c:	e1400117 	ldw	r5,4(fp)
  80b930:	01000434 	movhi	r4,16
  80b934:	213fffc4 	addi	r4,r4,-1
  80b938:	2904703a 	and	r2,r5,r4
  80b93c:	11006826 	beq	r2,r4,80bae0 <_strtod_r+0x1224>
  80b940:	e1c00017 	ldw	r7,0(fp)
  80b944:	3880004c 	andi	r2,r7,1
  80b948:	1005003a 	cmpeq	r2,r2,zero
  80b94c:	1000601e 	bne	r2,zero,80bad0 <_strtod_r+0x1214>
  80b950:	90010426 	beq	r18,zero,80bd64 <_strtod_r+0x14a8>
  80b954:	e4400117 	ldw	r17,4(fp)
  80b958:	3809883a 	mov	r4,r7
  80b95c:	3821883a 	mov	r16,r7
  80b960:	880b883a 	mov	r5,r17
  80b964:	0808e840 	call	808e84 <__ulp>
  80b968:	180f883a 	mov	r7,r3
  80b96c:	880b883a 	mov	r5,r17
  80b970:	8009883a 	mov	r4,r16
  80b974:	100d883a 	mov	r6,r2
  80b978:	080ef280 	call	80ef28 <__subdf3>
  80b97c:	1009883a 	mov	r4,r2
  80b980:	000d883a 	mov	r6,zero
  80b984:	000f883a 	mov	r7,zero
  80b988:	180b883a 	mov	r5,r3
  80b98c:	e0800015 	stw	r2,0(fp)
  80b990:	e0c00115 	stw	r3,4(fp)
  80b994:	080f6c00 	call	80f6c0 <__nedf2>
  80b998:	10004d1e 	bne	r2,zero,80bad0 <_strtod_r+0x1214>
  80b99c:	00800884 	movi	r2,34
  80b9a0:	a8800015 	stw	r2,0(r21)
  80b9a4:	e0000015 	stw	zero,0(fp)
  80b9a8:	e0000115 	stw	zero,4(fp)
  80b9ac:	003f6506 	br	80b744 <_strtod_r+0xe88>
  80b9b0:	00800044 	movi	r2,1
  80b9b4:	d8801915 	stw	r2,100(sp)
  80b9b8:	003d4406 	br	80aecc <_strtod_r+0x610>
  80b9bc:	d8c01817 	ldw	r3,96(sp)
  80b9c0:	1985883a 	add	r2,r3,r6
  80b9c4:	11ffffc4 	addi	r7,r2,-1
  80b9c8:	39000044 	addi	r4,r7,1
  80b9cc:	00800204 	movi	r2,8
  80b9d0:	d9001815 	stw	r4,96(sp)
  80b9d4:	11c0d716 	blt	r2,r7,80bd34 <_strtod_r+0x1478>
  80b9d8:	d9001217 	ldw	r4,72(sp)
  80b9dc:	01400284 	movi	r5,10
  80b9e0:	080fe8c0 	call	80fe8c <__mulsi3>
  80b9e4:	1585883a 	add	r2,r2,r22
  80b9e8:	d8801215 	stw	r2,72(sp)
  80b9ec:	000d883a 	mov	r6,zero
  80b9f0:	84000044 	addi	r16,r16,1
  80b9f4:	dc000415 	stw	r16,16(sp)
  80b9f8:	84400007 	ldb	r17,0(r16)
  80b9fc:	003cfc06 	br	80adf0 <_strtod_r+0x534>
  80ba00:	d8c01a17 	ldw	r3,104(sp)
  80ba04:	1800321e 	bne	r3,zero,80bad0 <_strtod_r+0x1214>
  80ba08:	e0800017 	ldw	r2,0(fp)
  80ba0c:	1000b31e 	bne	r2,zero,80bcdc <_strtod_r+0x1420>
  80ba10:	e0c00117 	ldw	r3,4(fp)
  80ba14:	01000434 	movhi	r4,16
  80ba18:	213fffc4 	addi	r4,r4,-1
  80ba1c:	1904703a 	and	r2,r3,r4
  80ba20:	1000e71e 	bne	r2,zero,80bdc0 <_strtod_r+0x1504>
  80ba24:	18dffc2c 	andhi	r3,r3,32752
  80ba28:	0081ac34 	movhi	r2,1712
  80ba2c:	10c0282e 	bgeu	r2,r3,80bad0 <_strtod_r+0x1214>
  80ba30:	a0800517 	ldw	r2,20(r20)
  80ba34:	1000031e 	bne	r2,zero,80ba44 <_strtod_r+0x1188>
  80ba38:	a0c00417 	ldw	r3,16(r20)
  80ba3c:	00800044 	movi	r2,1
  80ba40:	10c0a60e 	bge	r2,r3,80bcdc <_strtod_r+0x1420>
  80ba44:	a00b883a 	mov	r5,r20
  80ba48:	a809883a 	mov	r4,r21
  80ba4c:	01800044 	movi	r6,1
  80ba50:	080960c0 	call	80960c <__lshift>
  80ba54:	1009883a 	mov	r4,r2
  80ba58:	b00b883a 	mov	r5,r22
  80ba5c:	1029883a 	mov	r20,r2
  80ba60:	0808e240 	call	808e24 <__mcmp>
  80ba64:	00809d0e 	bge	zero,r2,80bcdc <_strtod_r+0x1420>
  80ba68:	e1800117 	ldw	r6,4(fp)
  80ba6c:	d9001c17 	ldw	r4,112(sp)
  80ba70:	2013003a 	cmpeq	r9,r4,zero
  80ba74:	4800d61e 	bne	r9,zero,80bdd0 <_strtod_r+0x1514>
  80ba78:	30dffc2c 	andhi	r3,r6,32752
  80ba7c:	0081ac34 	movhi	r2,1712
  80ba80:	10c0d336 	bltu	r2,r3,80bdd0 <_strtod_r+0x1514>
  80ba84:	0080dc34 	movhi	r2,880
  80ba88:	10ffc42e 	bgeu	r2,r3,80b99c <_strtod_r+0x10e0>
  80ba8c:	e0800017 	ldw	r2,0(fp)
  80ba90:	e0c00117 	ldw	r3,4(fp)
  80ba94:	020e5434 	movhi	r8,14672
  80ba98:	000d883a 	mov	r6,zero
  80ba9c:	400f883a 	mov	r7,r8
  80baa0:	180b883a 	mov	r5,r3
  80baa4:	1009883a 	mov	r4,r2
  80baa8:	da000c15 	stw	r8,48(sp)
  80baac:	d8000b15 	stw	zero,44(sp)
  80bab0:	080f01c0 	call	80f01c <__muldf3>
  80bab4:	e0800015 	stw	r2,0(fp)
  80bab8:	e0c00115 	stw	r3,4(fp)
  80babc:	183f211e 	bne	r3,zero,80b744 <_strtod_r+0xe88>
  80bac0:	103f201e 	bne	r2,zero,80b744 <_strtod_r+0xe88>
  80bac4:	00800884 	movi	r2,34
  80bac8:	a8800015 	stw	r2,0(r21)
  80bacc:	003f1d06 	br	80b744 <_strtod_r+0xe88>
  80bad0:	d9001c17 	ldw	r4,112(sp)
  80bad4:	2013003a 	cmpeq	r9,r4,zero
  80bad8:	483f1a1e 	bne	r9,zero,80b744 <_strtod_r+0xe88>
  80badc:	003feb06 	br	80ba8c <_strtod_r+0x11d0>
  80bae0:	d8801c17 	ldw	r2,112(sp)
  80bae4:	e1c00017 	ldw	r7,0(fp)
  80bae8:	1013003a 	cmpeq	r9,r2,zero
  80baec:	4800c31e 	bne	r9,zero,80bdfc <_strtod_r+0x1540>
  80baf0:	28dffc2c 	andhi	r3,r5,32752
  80baf4:	0081a834 	movhi	r2,1696
  80baf8:	10c0c036 	bltu	r2,r3,80bdfc <_strtod_r+0x1540>
  80bafc:	1804d53a 	srli	r2,r3,20
  80bb00:	00c01ac4 	movi	r3,107
  80bb04:	013fffc4 	movi	r4,-1
  80bb08:	1887c83a 	sub	r3,r3,r2
  80bb0c:	20c4983a 	sll	r2,r4,r3
  80bb10:	11ff8c1e 	bne	r2,r7,80b944 <_strtod_r+0x1088>
  80bb14:	28dffc2c 	andhi	r3,r5,32752
  80bb18:	00800434 	movhi	r2,16
  80bb1c:	188d883a 	add	r6,r3,r2
  80bb20:	e1800115 	stw	r6,4(fp)
  80bb24:	e0000015 	stw	zero,0(fp)
  80bb28:	483f061e 	bne	r9,zero,80b744 <_strtod_r+0xe88>
  80bb2c:	003fd706 	br	80ba8c <_strtod_r+0x11d0>
  80bb30:	0021883a 	mov	r16,zero
  80bb34:	0005883a 	mov	r2,zero
  80bb38:	044ff834 	movhi	r17,16352
  80bb3c:	00eff834 	movhi	r3,49120
  80bb40:	003e7c06 	br	80b534 <_strtod_r+0xc78>
  80bb44:	803d9226 	beq	r16,zero,80b190 <_strtod_r+0x8d4>
  80bb48:	0421c83a 	sub	r16,zero,r16
  80bb4c:	814003cc 	andi	r5,r16,15
  80bb50:	28000f26 	beq	r5,zero,80bb90 <_strtod_r+0x12d4>
  80bb54:	280a90fa 	slli	r5,r5,3
  80bb58:	01002074 	movhi	r4,129
  80bb5c:	2112db04 	addi	r4,r4,19308
  80bb60:	e0800017 	ldw	r2,0(fp)
  80bb64:	290b883a 	add	r5,r5,r4
  80bb68:	2a000017 	ldw	r8,0(r5)
  80bb6c:	e0c00117 	ldw	r3,4(fp)
  80bb70:	2a400117 	ldw	r9,4(r5)
  80bb74:	1009883a 	mov	r4,r2
  80bb78:	180b883a 	mov	r5,r3
  80bb7c:	480f883a 	mov	r7,r9
  80bb80:	400d883a 	mov	r6,r8
  80bb84:	080f3e00 	call	80f3e0 <__divdf3>
  80bb88:	e0c00115 	stw	r3,4(fp)
  80bb8c:	e0800015 	stw	r2,0(fp)
  80bb90:	8021d13a 	srai	r16,r16,4
  80bb94:	803d7e26 	beq	r16,zero,80b190 <_strtod_r+0x8d4>
  80bb98:	008007c4 	movi	r2,31
  80bb9c:	14002d16 	blt	r2,r16,80bc54 <_strtod_r+0x1398>
  80bba0:	8080040c 	andi	r2,r16,16
  80bba4:	10009d26 	beq	r2,zero,80be1c <_strtod_r+0x1560>
  80bba8:	01001a84 	movi	r4,106
  80bbac:	d9001c15 	stw	r4,112(sp)
  80bbb0:	0400110e 	bge	zero,r16,80bbf8 <_strtod_r+0x133c>
  80bbb4:	04402074 	movhi	r17,129
  80bbb8:	8c532804 	addi	r17,r17,19616
  80bbbc:	8080004c 	andi	r2,r16,1
  80bbc0:	1005003a 	cmpeq	r2,r2,zero
  80bbc4:	1000091e 	bne	r2,zero,80bbec <_strtod_r+0x1330>
  80bbc8:	e0800017 	ldw	r2,0(fp)
  80bbcc:	e0c00117 	ldw	r3,4(fp)
  80bbd0:	89800017 	ldw	r6,0(r17)
  80bbd4:	89c00117 	ldw	r7,4(r17)
  80bbd8:	180b883a 	mov	r5,r3
  80bbdc:	1009883a 	mov	r4,r2
  80bbe0:	080f01c0 	call	80f01c <__muldf3>
  80bbe4:	e0c00115 	stw	r3,4(fp)
  80bbe8:	e0800015 	stw	r2,0(fp)
  80bbec:	8021d07a 	srai	r16,r16,1
  80bbf0:	8c400204 	addi	r17,r17,8
  80bbf4:	043ff116 	blt	zero,r16,80bbbc <_strtod_r+0x1300>
  80bbf8:	d8801c17 	ldw	r2,112(sp)
  80bbfc:	10000d26 	beq	r2,zero,80bc34 <_strtod_r+0x1378>
  80bc00:	e1000117 	ldw	r4,4(fp)
  80bc04:	00c01ac4 	movi	r3,107
  80bc08:	209ffc2c 	andhi	r2,r4,32752
  80bc0c:	1004d53a 	srli	r2,r2,20
  80bc10:	1887c83a 	sub	r3,r3,r2
  80bc14:	00c0070e 	bge	zero,r3,80bc34 <_strtod_r+0x1378>
  80bc18:	008007c4 	movi	r2,31
  80bc1c:	10c0940e 	bge	r2,r3,80be70 <_strtod_r+0x15b4>
  80bc20:	00800d04 	movi	r2,52
  80bc24:	e0000015 	stw	zero,0(fp)
  80bc28:	10c08b0e 	bge	r2,r3,80be58 <_strtod_r+0x159c>
  80bc2c:	0180dc34 	movhi	r6,880
  80bc30:	e1800115 	stw	r6,4(fp)
  80bc34:	e0800017 	ldw	r2,0(fp)
  80bc38:	e0c00117 	ldw	r3,4(fp)
  80bc3c:	000d883a 	mov	r6,zero
  80bc40:	000f883a 	mov	r7,zero
  80bc44:	180b883a 	mov	r5,r3
  80bc48:	1009883a 	mov	r4,r2
  80bc4c:	080f6c00 	call	80f6c0 <__nedf2>
  80bc50:	103d501e 	bne	r2,zero,80b194 <_strtod_r+0x8d8>
  80bc54:	00800884 	movi	r2,34
  80bc58:	a8800015 	stw	r2,0(r21)
  80bc5c:	e0000015 	stw	zero,0(fp)
  80bc60:	e0000115 	stw	zero,4(fp)
  80bc64:	003b9f06 	br	80aae4 <_strtod_r+0x228>
  80bc68:	e1800117 	ldw	r6,4(fp)
  80bc6c:	00c00434 	movhi	r3,16
  80bc70:	18ffffc4 	addi	r3,r3,-1
  80bc74:	30c4703a 	and	r2,r6,r3
  80bc78:	103f311e 	bne	r2,zero,80b940 <_strtod_r+0x1084>
  80bc7c:	e1c00017 	ldw	r7,0(fp)
  80bc80:	383f301e 	bne	r7,zero,80b944 <_strtod_r+0x1088>
  80bc84:	003f7906 	br	80ba6c <_strtod_r+0x11b0>
  80bc88:	d8c00f17 	ldw	r3,60(sp)
  80bc8c:	00bffa84 	movi	r2,-22
  80bc90:	18bcbf16 	blt	r3,r2,80af90 <_strtod_r+0x6d4>
  80bc94:	1809883a 	mov	r4,r3
  80bc98:	017ffe04 	movi	r5,-8
  80bc9c:	080fe8c0 	call	80fe8c <__mulsi3>
  80bca0:	00c02074 	movhi	r3,129
  80bca4:	18d2db04 	addi	r3,r3,19308
  80bca8:	10c5883a 	add	r2,r2,r3
  80bcac:	e2000017 	ldw	r8,0(fp)
  80bcb0:	e2400117 	ldw	r9,4(fp)
  80bcb4:	12800017 	ldw	r10,0(r2)
  80bcb8:	12c00117 	ldw	r11,4(r2)
  80bcbc:	480b883a 	mov	r5,r9
  80bcc0:	4009883a 	mov	r4,r8
  80bcc4:	580f883a 	mov	r7,r11
  80bcc8:	500d883a 	mov	r6,r10
  80bccc:	080f3e00 	call	80f3e0 <__divdf3>
  80bcd0:	e0c00115 	stw	r3,4(fp)
  80bcd4:	e0800015 	stw	r2,0(fp)
  80bcd8:	003b8206 	br	80aae4 <_strtod_r+0x228>
  80bcdc:	d8801c17 	ldw	r2,112(sp)
  80bce0:	1013003a 	cmpeq	r9,r2,zero
  80bce4:	483e971e 	bne	r9,zero,80b744 <_strtod_r+0xe88>
  80bce8:	003f6806 	br	80ba8c <_strtod_r+0x11d0>
  80bcec:	00801a44 	movi	r2,105
  80bcf0:	88bc5026 	beq	r17,r2,80ae34 <_strtod_r+0x578>
  80bcf4:	00801b84 	movi	r2,110
  80bcf8:	88bb9b1e 	bne	r17,r2,80ab68 <_strtod_r+0x2ac>
  80bcfc:	dc000404 	addi	r16,sp,16
  80bd00:	8009883a 	mov	r4,r16
  80bd04:	01402074 	movhi	r5,129
  80bd08:	29532704 	addi	r5,r5,19612
  80bd0c:	080a8740 	call	80a874 <match>
  80bd10:	103b9526 	beq	r2,zero,80ab68 <_strtod_r+0x2ac>
  80bd14:	d8800417 	ldw	r2,16(sp)
  80bd18:	00c00a04 	movi	r3,40
  80bd1c:	11000007 	ldb	r4,0(r2)
  80bd20:	20c04026 	beq	r4,r3,80be24 <_strtod_r+0x1568>
  80bd24:	01bffe34 	movhi	r6,65528
  80bd28:	e1800115 	stw	r6,4(fp)
  80bd2c:	e0000015 	stw	zero,0(fp)
  80bd30:	003b6c06 	br	80aae4 <_strtod_r+0x228>
  80bd34:	d8c01817 	ldw	r3,96(sp)
  80bd38:	00800404 	movi	r2,16
  80bd3c:	10c00516 	blt	r2,r3,80bd54 <_strtod_r+0x1498>
  80bd40:	d9001117 	ldw	r4,68(sp)
  80bd44:	01400284 	movi	r5,10
  80bd48:	080fe8c0 	call	80fe8c <__mulsi3>
  80bd4c:	1585883a 	add	r2,r2,r22
  80bd50:	d8801115 	stw	r2,68(sp)
  80bd54:	000d883a 	mov	r6,zero
  80bd58:	003f2506 	br	80b9f0 <_strtod_r+0x1134>
  80bd5c:	000d883a 	mov	r6,zero
  80bd60:	003ce306 	br	80b0f0 <_strtod_r+0x834>
  80bd64:	e4400117 	ldw	r17,4(fp)
  80bd68:	3809883a 	mov	r4,r7
  80bd6c:	3821883a 	mov	r16,r7
  80bd70:	880b883a 	mov	r5,r17
  80bd74:	0808e840 	call	808e84 <__ulp>
  80bd78:	180f883a 	mov	r7,r3
  80bd7c:	880b883a 	mov	r5,r17
  80bd80:	8009883a 	mov	r4,r16
  80bd84:	100d883a 	mov	r6,r2
  80bd88:	080efa80 	call	80efa8 <__adddf3>
  80bd8c:	180b883a 	mov	r5,r3
  80bd90:	d8c01c17 	ldw	r3,112(sp)
  80bd94:	1009883a 	mov	r4,r2
  80bd98:	e1400115 	stw	r5,4(fp)
  80bd9c:	1813003a 	cmpeq	r9,r3,zero
  80bda0:	e1000015 	stw	r4,0(fp)
  80bda4:	483e671e 	bne	r9,zero,80b744 <_strtod_r+0xe88>
  80bda8:	003f3806 	br	80ba8c <_strtod_r+0x11d0>
  80bdac:	0080d434 	movhi	r2,848
  80bdb0:	188d883a 	add	r6,r3,r2
  80bdb4:	d8001c15 	stw	zero,112(sp)
  80bdb8:	e1800115 	stw	r6,4(fp)
  80bdbc:	003cf506 	br	80b194 <_strtod_r+0x8d8>
  80bdc0:	d8c01c17 	ldw	r3,112(sp)
  80bdc4:	1813003a 	cmpeq	r9,r3,zero
  80bdc8:	483e5e1e 	bne	r9,zero,80b744 <_strtod_r+0xe88>
  80bdcc:	003f2f06 	br	80ba8c <_strtod_r+0x11d0>
  80bdd0:	309ffc2c 	andhi	r2,r6,32752
  80bdd4:	00fffc34 	movhi	r3,65520
  80bdd8:	10c5883a 	add	r2,r2,r3
  80bddc:	00c00434 	movhi	r3,16
  80bde0:	18ffffc4 	addi	r3,r3,-1
  80bde4:	10ccb03a 	or	r6,r2,r3
  80bde8:	01ffffc4 	movi	r7,-1
  80bdec:	e1800115 	stw	r6,4(fp)
  80bdf0:	e1c00015 	stw	r7,0(fp)
  80bdf4:	483e531e 	bne	r9,zero,80b744 <_strtod_r+0xe88>
  80bdf8:	003f2406 	br	80ba8c <_strtod_r+0x11d0>
  80bdfc:	00bfffc4 	movi	r2,-1
  80be00:	003f4306 	br	80bb10 <_strtod_r+0x1254>
  80be04:	0025883a 	mov	r18,zero
  80be08:	05802074 	movhi	r22,129
  80be0c:	b5930d04 	addi	r22,r22,19508
  80be10:	003c9206 	br	80b05c <_strtod_r+0x7a0>
  80be14:	d9c01817 	ldw	r7,96(sp)
  80be18:	003eeb06 	br	80b9c8 <_strtod_r+0x110c>
  80be1c:	d8001c15 	stw	zero,112(sp)
  80be20:	003f6306 	br	80bbb0 <_strtod_r+0x12f4>
  80be24:	8009883a 	mov	r4,r16
  80be28:	01402074 	movhi	r5,129
  80be2c:	29559504 	addi	r5,r5,22100
  80be30:	d9800d04 	addi	r6,sp,52
  80be34:	080d8d40 	call	80d8d4 <__hexnan>
  80be38:	00c00144 	movi	r3,5
  80be3c:	10ffb91e 	bne	r2,r3,80bd24 <_strtod_r+0x1468>
  80be40:	d8800e17 	ldw	r2,56(sp)
  80be44:	d9c00d17 	ldw	r7,52(sp)
  80be48:	119ffc34 	orhi	r6,r2,32752
  80be4c:	e1800115 	stw	r6,4(fp)
  80be50:	e1c00015 	stw	r7,0(fp)
  80be54:	003b2306 	br	80aae4 <_strtod_r+0x228>
  80be58:	18fff804 	addi	r3,r3,-32
  80be5c:	00bfffc4 	movi	r2,-1
  80be60:	10c4983a 	sll	r2,r2,r3
  80be64:	208c703a 	and	r6,r4,r2
  80be68:	e1800115 	stw	r6,4(fp)
  80be6c:	003f7106 	br	80bc34 <_strtod_r+0x1378>
  80be70:	00bfffc4 	movi	r2,-1
  80be74:	10c4983a 	sll	r2,r2,r3
  80be78:	e0c00017 	ldw	r3,0(fp)
  80be7c:	188e703a 	and	r7,r3,r2
  80be80:	e1c00015 	stw	r7,0(fp)
  80be84:	003f6b06 	br	80bc34 <_strtod_r+0x1378>

0080be88 <strtof>:
  80be88:	defffa04 	addi	sp,sp,-24
  80be8c:	dd000415 	stw	r20,16(sp)
  80be90:	05002074 	movhi	r20,129
  80be94:	a51a6904 	addi	r20,r20,27044
  80be98:	2007883a 	mov	r3,r4
  80be9c:	a1000017 	ldw	r4,0(r20)
  80bea0:	280d883a 	mov	r6,r5
  80bea4:	180b883a 	mov	r5,r3
  80bea8:	dfc00515 	stw	ra,20(sp)
  80beac:	dcc00315 	stw	r19,12(sp)
  80beb0:	dc800215 	stw	r18,8(sp)
  80beb4:	dc400115 	stw	r17,4(sp)
  80beb8:	dc000015 	stw	r16,0(sp)
  80bebc:	080a8bc0 	call	80a8bc <_strtod_r>
  80bec0:	180b883a 	mov	r5,r3
  80bec4:	1009883a 	mov	r4,r2
  80bec8:	1823883a 	mov	r17,r3
  80becc:	1021883a 	mov	r16,r2
  80bed0:	080fb380 	call	80fb38 <__truncdfsf2>
  80bed4:	1009883a 	mov	r4,r2
  80bed8:	000b883a 	mov	r5,zero
  80bedc:	1025883a 	mov	r18,r2
  80bee0:	1027883a 	mov	r19,r2
  80bee4:	080e9b00 	call	80e9b0 <__nesf2>
  80bee8:	000d883a 	mov	r6,zero
  80beec:	000f883a 	mov	r7,zero
  80bef0:	8009883a 	mov	r4,r16
  80bef4:	880b883a 	mov	r5,r17
  80bef8:	10000e1e 	bne	r2,zero,80bf34 <strtof+0xac>
  80befc:	080f6c00 	call	80f6c0 <__nedf2>
  80bf00:	10000c26 	beq	r2,zero,80bf34 <strtof+0xac>
  80bf04:	a0c00017 	ldw	r3,0(r20)
  80bf08:	00800884 	movi	r2,34
  80bf0c:	18800015 	stw	r2,0(r3)
  80bf10:	9805883a 	mov	r2,r19
  80bf14:	dfc00517 	ldw	ra,20(sp)
  80bf18:	dd000417 	ldw	r20,16(sp)
  80bf1c:	dcc00317 	ldw	r19,12(sp)
  80bf20:	dc800217 	ldw	r18,8(sp)
  80bf24:	dc400117 	ldw	r17,4(sp)
  80bf28:	dc000017 	ldw	r16,0(sp)
  80bf2c:	dec00604 	addi	sp,sp,24
  80bf30:	f800283a 	ret
  80bf34:	9009883a 	mov	r4,r18
  80bf38:	015fe034 	movhi	r5,32640
  80bf3c:	297fffc4 	addi	r5,r5,-1
  80bf40:	080ea280 	call	80ea28 <__gtsf2>
  80bf44:	00ffffc4 	movi	r3,-1
  80bf48:	011ffc34 	movhi	r4,32752
  80bf4c:	213fffc4 	addi	r4,r4,-1
  80bf50:	200f883a 	mov	r7,r4
  80bf54:	180d883a 	mov	r6,r3
  80bf58:	8009883a 	mov	r4,r16
  80bf5c:	880b883a 	mov	r5,r17
  80bf60:	00800f16 	blt	zero,r2,80bfa0 <strtof+0x118>
  80bf64:	9009883a 	mov	r4,r18
  80bf68:	017fe034 	movhi	r5,65408
  80bf6c:	297fffc4 	addi	r5,r5,-1
  80bf70:	080eaa00 	call	80eaa0 <__ltsf2>
  80bf74:	023fffc4 	movi	r8,-1
  80bf78:	027ffc34 	movhi	r9,65520
  80bf7c:	4a7fffc4 	addi	r9,r9,-1
  80bf80:	880b883a 	mov	r5,r17
  80bf84:	480f883a 	mov	r7,r9
  80bf88:	8009883a 	mov	r4,r16
  80bf8c:	400d883a 	mov	r6,r8
  80bf90:	103fdf0e 	bge	r2,zero,80bf10 <strtof+0x88>
  80bf94:	080f8580 	call	80f858 <__ltdf2>
  80bf98:	103fda0e 	bge	r2,zero,80bf04 <strtof+0x7c>
  80bf9c:	003fdc06 	br	80bf10 <strtof+0x88>
  80bfa0:	080f7480 	call	80f748 <__gtdf2>
  80bfa4:	00bfd70e 	bge	zero,r2,80bf04 <strtof+0x7c>
  80bfa8:	003fee06 	br	80bf64 <strtof+0xdc>

0080bfac <strtod>:
  80bfac:	01802074 	movhi	r6,129
  80bfb0:	319a6904 	addi	r6,r6,27044
  80bfb4:	2007883a 	mov	r3,r4
  80bfb8:	31000017 	ldw	r4,0(r6)
  80bfbc:	280d883a 	mov	r6,r5
  80bfc0:	180b883a 	mov	r5,r3
  80bfc4:	080a8bc1 	jmpi	80a8bc <_strtod_r>

0080bfc8 <_strtol_r>:
  80bfc8:	defff304 	addi	sp,sp,-52
  80bfcc:	00802074 	movhi	r2,129
  80bfd0:	109a6d04 	addi	r2,r2,27060
  80bfd4:	dd000715 	stw	r20,28(sp)
  80bfd8:	15000017 	ldw	r20,0(r2)
  80bfdc:	ddc00a15 	stw	r23,40(sp)
  80bfe0:	dc800515 	stw	r18,20(sp)
  80bfe4:	dc400415 	stw	r17,16(sp)
  80bfe8:	dfc00c15 	stw	ra,48(sp)
  80bfec:	df000b15 	stw	fp,44(sp)
  80bff0:	dd800915 	stw	r22,36(sp)
  80bff4:	dd400815 	stw	r21,32(sp)
  80bff8:	dcc00615 	stw	r19,24(sp)
  80bffc:	dc000315 	stw	r16,12(sp)
  80c000:	282f883a 	mov	r23,r5
  80c004:	d9000115 	stw	r4,4(sp)
  80c008:	d9800215 	stw	r6,8(sp)
  80c00c:	3825883a 	mov	r18,r7
  80c010:	2823883a 	mov	r17,r5
  80c014:	8c000007 	ldb	r16,0(r17)
  80c018:	8c400044 	addi	r17,r17,1
  80c01c:	a407883a 	add	r3,r20,r16
  80c020:	18800003 	ldbu	r2,0(r3)
  80c024:	1080020c 	andi	r2,r2,8
  80c028:	103ffa1e 	bne	r2,zero,80c014 <_strtol_r+0x4c>
  80c02c:	00800b44 	movi	r2,45
  80c030:	80805c26 	beq	r16,r2,80c1a4 <_strtol_r+0x1dc>
  80c034:	00800ac4 	movi	r2,43
  80c038:	80805726 	beq	r16,r2,80c198 <_strtol_r+0x1d0>
  80c03c:	d8000015 	stw	zero,0(sp)
  80c040:	9007003a 	cmpeq	r3,r18,zero
  80c044:	1800431e 	bne	r3,zero,80c154 <_strtol_r+0x18c>
  80c048:	00800404 	movi	r2,16
  80c04c:	90804126 	beq	r18,r2,80c154 <_strtol_r+0x18c>
  80c050:	902b883a 	mov	r21,r18
  80c054:	d8c00017 	ldw	r3,0(sp)
  80c058:	1838c03a 	cmpne	fp,r3,zero
  80c05c:	e0004a1e 	bne	fp,zero,80c188 <_strtol_r+0x1c0>
  80c060:	04e00034 	movhi	r19,32768
  80c064:	9cffffc4 	addi	r19,r19,-1
  80c068:	9809883a 	mov	r4,r19
  80c06c:	a80b883a 	mov	r5,r21
  80c070:	080fe840 	call	80fe84 <__umodsi3>
  80c074:	9809883a 	mov	r4,r19
  80c078:	a80b883a 	mov	r5,r21
  80c07c:	102d883a 	mov	r22,r2
  80c080:	080fe7c0 	call	80fe7c <__udivsi3>
  80c084:	1027883a 	mov	r19,r2
  80c088:	a405883a 	add	r2,r20,r16
  80c08c:	11400003 	ldbu	r5,0(r2)
  80c090:	0009883a 	mov	r4,zero
  80c094:	000d883a 	mov	r6,zero
  80c098:	28c0010c 	andi	r3,r5,4
  80c09c:	18000f26 	beq	r3,zero,80c0dc <_strtol_r+0x114>
  80c0a0:	843ff404 	addi	r16,r16,-48
  80c0a4:	8480150e 	bge	r16,r18,80c0fc <_strtol_r+0x134>
  80c0a8:	30003216 	blt	r6,zero,80c174 <_strtol_r+0x1ac>
  80c0ac:	99003136 	bltu	r19,r4,80c174 <_strtol_r+0x1ac>
  80c0b0:	24c02f26 	beq	r4,r19,80c170 <_strtol_r+0x1a8>
  80c0b4:	a80b883a 	mov	r5,r21
  80c0b8:	080fe8c0 	call	80fe8c <__mulsi3>
  80c0bc:	1409883a 	add	r4,r2,r16
  80c0c0:	01800044 	movi	r6,1
  80c0c4:	8c000007 	ldb	r16,0(r17)
  80c0c8:	8c400044 	addi	r17,r17,1
  80c0cc:	a405883a 	add	r2,r20,r16
  80c0d0:	11400003 	ldbu	r5,0(r2)
  80c0d4:	28c0010c 	andi	r3,r5,4
  80c0d8:	183ff11e 	bne	r3,zero,80c0a0 <_strtol_r+0xd8>
  80c0dc:	288000cc 	andi	r2,r5,3
  80c0e0:	10000626 	beq	r2,zero,80c0fc <_strtol_r+0x134>
  80c0e4:	2880004c 	andi	r2,r5,1
  80c0e8:	1005003a 	cmpeq	r2,r2,zero
  80c0ec:	1000231e 	bne	r2,zero,80c17c <_strtol_r+0x1b4>
  80c0f0:	00800dc4 	movi	r2,55
  80c0f4:	80a1c83a 	sub	r16,r16,r2
  80c0f8:	84bfeb16 	blt	r16,r18,80c0a8 <_strtol_r+0xe0>
  80c0fc:	30002e16 	blt	r6,zero,80c1b8 <_strtol_r+0x1f0>
  80c100:	e000231e 	bne	fp,zero,80c190 <_strtol_r+0x1c8>
  80c104:	2007883a 	mov	r3,r4
  80c108:	d8800217 	ldw	r2,8(sp)
  80c10c:	10000426 	beq	r2,zero,80c120 <_strtol_r+0x158>
  80c110:	30000126 	beq	r6,zero,80c118 <_strtol_r+0x150>
  80c114:	8dffffc4 	addi	r23,r17,-1
  80c118:	d9000217 	ldw	r4,8(sp)
  80c11c:	25c00015 	stw	r23,0(r4)
  80c120:	1805883a 	mov	r2,r3
  80c124:	dfc00c17 	ldw	ra,48(sp)
  80c128:	df000b17 	ldw	fp,44(sp)
  80c12c:	ddc00a17 	ldw	r23,40(sp)
  80c130:	dd800917 	ldw	r22,36(sp)
  80c134:	dd400817 	ldw	r21,32(sp)
  80c138:	dd000717 	ldw	r20,28(sp)
  80c13c:	dcc00617 	ldw	r19,24(sp)
  80c140:	dc800517 	ldw	r18,20(sp)
  80c144:	dc400417 	ldw	r17,16(sp)
  80c148:	dc000317 	ldw	r16,12(sp)
  80c14c:	dec00d04 	addi	sp,sp,52
  80c150:	f800283a 	ret
  80c154:	00800c04 	movi	r2,48
  80c158:	80801f26 	beq	r16,r2,80c1d8 <_strtol_r+0x210>
  80c15c:	183fbc26 	beq	r3,zero,80c050 <_strtol_r+0x88>
  80c160:	00800c04 	movi	r2,48
  80c164:	80802926 	beq	r16,r2,80c20c <_strtol_r+0x244>
  80c168:	04800284 	movi	r18,10
  80c16c:	003fb806 	br	80c050 <_strtol_r+0x88>
  80c170:	b43fd00e 	bge	r22,r16,80c0b4 <_strtol_r+0xec>
  80c174:	01bfffc4 	movi	r6,-1
  80c178:	003fd206 	br	80c0c4 <_strtol_r+0xfc>
  80c17c:	008015c4 	movi	r2,87
  80c180:	80a1c83a 	sub	r16,r16,r2
  80c184:	003fdc06 	br	80c0f8 <_strtol_r+0x130>
  80c188:	04e00034 	movhi	r19,32768
  80c18c:	003fb606 	br	80c068 <_strtol_r+0xa0>
  80c190:	0107c83a 	sub	r3,zero,r4
  80c194:	003fdc06 	br	80c108 <_strtol_r+0x140>
  80c198:	8c000007 	ldb	r16,0(r17)
  80c19c:	8c400044 	addi	r17,r17,1
  80c1a0:	003fa606 	br	80c03c <_strtol_r+0x74>
  80c1a4:	8c000007 	ldb	r16,0(r17)
  80c1a8:	00800044 	movi	r2,1
  80c1ac:	8c400044 	addi	r17,r17,1
  80c1b0:	d8800015 	stw	r2,0(sp)
  80c1b4:	003fa206 	br	80c040 <_strtol_r+0x78>
  80c1b8:	d9000017 	ldw	r4,0(sp)
  80c1bc:	2005003a 	cmpeq	r2,r4,zero
  80c1c0:	10000f1e 	bne	r2,zero,80c200 <_strtol_r+0x238>
  80c1c4:	00e00034 	movhi	r3,32768
  80c1c8:	d9000117 	ldw	r4,4(sp)
  80c1cc:	00800884 	movi	r2,34
  80c1d0:	20800015 	stw	r2,0(r4)
  80c1d4:	003fcc06 	br	80c108 <_strtol_r+0x140>
  80c1d8:	89000007 	ldb	r4,0(r17)
  80c1dc:	00801e04 	movi	r2,120
  80c1e0:	20800226 	beq	r4,r2,80c1ec <_strtol_r+0x224>
  80c1e4:	00801604 	movi	r2,88
  80c1e8:	20bfdc1e 	bne	r4,r2,80c15c <_strtol_r+0x194>
  80c1ec:	8c000047 	ldb	r16,1(r17)
  80c1f0:	04800404 	movi	r18,16
  80c1f4:	8c400084 	addi	r17,r17,2
  80c1f8:	902b883a 	mov	r21,r18
  80c1fc:	003f9506 	br	80c054 <_strtol_r+0x8c>
  80c200:	00e00034 	movhi	r3,32768
  80c204:	18ffffc4 	addi	r3,r3,-1
  80c208:	003fef06 	br	80c1c8 <_strtol_r+0x200>
  80c20c:	04800204 	movi	r18,8
  80c210:	902b883a 	mov	r21,r18
  80c214:	003f8f06 	br	80c054 <_strtol_r+0x8c>

0080c218 <strtol>:
  80c218:	00802074 	movhi	r2,129
  80c21c:	109a6904 	addi	r2,r2,27044
  80c220:	2013883a 	mov	r9,r4
  80c224:	11000017 	ldw	r4,0(r2)
  80c228:	2805883a 	mov	r2,r5
  80c22c:	300f883a 	mov	r7,r6
  80c230:	480b883a 	mov	r5,r9
  80c234:	100d883a 	mov	r6,r2
  80c238:	080bfc81 	jmpi	80bfc8 <_strtol_r>

0080c23c <_strtoll_r>:
  80c23c:	defff004 	addi	sp,sp,-64
  80c240:	00802074 	movhi	r2,129
  80c244:	109a6d04 	addi	r2,r2,27060
  80c248:	df000e15 	stw	fp,56(sp)
  80c24c:	17000017 	ldw	fp,0(r2)
  80c250:	ddc00d15 	stw	r23,52(sp)
  80c254:	dd000a15 	stw	r20,40(sp)
  80c258:	dfc00f15 	stw	ra,60(sp)
  80c25c:	dd800c15 	stw	r22,48(sp)
  80c260:	dd400b15 	stw	r21,44(sp)
  80c264:	dcc00915 	stw	r19,36(sp)
  80c268:	dc800815 	stw	r18,32(sp)
  80c26c:	dc400715 	stw	r17,28(sp)
  80c270:	dc000615 	stw	r16,24(sp)
  80c274:	d9400315 	stw	r5,12(sp)
  80c278:	d9000215 	stw	r4,8(sp)
  80c27c:	d9800415 	stw	r6,16(sp)
  80c280:	382f883a 	mov	r23,r7
  80c284:	2829883a 	mov	r20,r5
  80c288:	a4c00007 	ldb	r19,0(r20)
  80c28c:	a5000044 	addi	r20,r20,1
  80c290:	e4c7883a 	add	r3,fp,r19
  80c294:	18800003 	ldbu	r2,0(r3)
  80c298:	1080020c 	andi	r2,r2,8
  80c29c:	103ffa1e 	bne	r2,zero,80c288 <_strtoll_r+0x4c>
  80c2a0:	00800b44 	movi	r2,45
  80c2a4:	98808826 	beq	r19,r2,80c4c8 <_strtoll_r+0x28c>
  80c2a8:	00800ac4 	movi	r2,43
  80c2ac:	98808326 	beq	r19,r2,80c4bc <_strtoll_r+0x280>
  80c2b0:	d8000115 	stw	zero,4(sp)
  80c2b4:	b807003a 	cmpeq	r3,r23,zero
  80c2b8:	18005f1e 	bne	r3,zero,80c438 <_strtoll_r+0x1fc>
  80c2bc:	00800404 	movi	r2,16
  80c2c0:	b8805d26 	beq	r23,r2,80c438 <_strtoll_r+0x1fc>
  80c2c4:	b82dd7fa 	srai	r22,r23,31
  80c2c8:	b82b883a 	mov	r21,r23
  80c2cc:	d8c00117 	ldw	r3,4(sp)
  80c2d0:	1806c03a 	cmpne	r3,r3,zero
  80c2d4:	d8c00515 	stw	r3,20(sp)
  80c2d8:	1800631e 	bne	r3,zero,80c468 <_strtoll_r+0x22c>
  80c2dc:	043fffc4 	movi	r16,-1
  80c2e0:	04600034 	movhi	r17,32768
  80c2e4:	8c7fffc4 	addi	r17,r17,-1
  80c2e8:	880b883a 	mov	r5,r17
  80c2ec:	8009883a 	mov	r4,r16
  80c2f0:	a80d883a 	mov	r6,r21
  80c2f4:	b00f883a 	mov	r7,r22
  80c2f8:	080e3500 	call	80e350 <__umoddi3>
  80c2fc:	880b883a 	mov	r5,r17
  80c300:	8009883a 	mov	r4,r16
  80c304:	b00f883a 	mov	r7,r22
  80c308:	a80d883a 	mov	r6,r21
  80c30c:	d8800015 	stw	r2,0(sp)
  80c310:	080dce40 	call	80dce4 <__udivdi3>
  80c314:	1023883a 	mov	r17,r2
  80c318:	e4c5883a 	add	r2,fp,r19
  80c31c:	11000003 	ldbu	r4,0(r2)
  80c320:	1825883a 	mov	r18,r3
  80c324:	0015883a 	mov	r10,zero
  80c328:	20c0010c 	andi	r3,r4,4
  80c32c:	0017883a 	mov	r11,zero
  80c330:	000f883a 	mov	r7,zero
  80c334:	18001a26 	beq	r3,zero,80c3a0 <_strtoll_r+0x164>
  80c338:	9c3ff404 	addi	r16,r19,-48
  80c33c:	85c0200e 	bge	r16,r23,80c3c0 <_strtoll_r+0x184>
  80c340:	38003b16 	blt	r7,zero,80c430 <_strtoll_r+0x1f4>
  80c344:	92c03a36 	bltu	r18,r11,80c430 <_strtoll_r+0x1f4>
  80c348:	5c803826 	beq	r11,r18,80c42c <_strtoll_r+0x1f0>
  80c34c:	54404c26 	beq	r10,r17,80c480 <_strtoll_r+0x244>
  80c350:	580b883a 	mov	r5,r11
  80c354:	5009883a 	mov	r4,r10
  80c358:	a80d883a 	mov	r6,r21
  80c35c:	b00f883a 	mov	r7,r22
  80c360:	080db1c0 	call	80db1c <__muldi3>
  80c364:	8013d7fa 	srai	r9,r16,31
  80c368:	100d883a 	mov	r6,r2
  80c36c:	1405883a 	add	r2,r2,r16
  80c370:	118d803a 	cmpltu	r6,r2,r6
  80c374:	1a47883a 	add	r3,r3,r9
  80c378:	30cd883a 	add	r6,r6,r3
  80c37c:	1015883a 	mov	r10,r2
  80c380:	3017883a 	mov	r11,r6
  80c384:	01c00044 	movi	r7,1
  80c388:	a4c00007 	ldb	r19,0(r20)
  80c38c:	a5000044 	addi	r20,r20,1
  80c390:	e4c5883a 	add	r2,fp,r19
  80c394:	11000003 	ldbu	r4,0(r2)
  80c398:	20c0010c 	andi	r3,r4,4
  80c39c:	183fe61e 	bne	r3,zero,80c338 <_strtoll_r+0xfc>
  80c3a0:	208000cc 	andi	r2,r4,3
  80c3a4:	10000626 	beq	r2,zero,80c3c0 <_strtoll_r+0x184>
  80c3a8:	2080004c 	andi	r2,r4,1
  80c3ac:	1005003a 	cmpeq	r2,r2,zero
  80c3b0:	1000301e 	bne	r2,zero,80c474 <_strtoll_r+0x238>
  80c3b4:	02000dc4 	movi	r8,55
  80c3b8:	9a21c83a 	sub	r16,r19,r8
  80c3bc:	85ffe016 	blt	r16,r23,80c340 <_strtoll_r+0x104>
  80c3c0:	38004616 	blt	r7,zero,80c4dc <_strtoll_r+0x2a0>
  80c3c4:	d8800517 	ldw	r2,20(sp)
  80c3c8:	1000341e 	bne	r2,zero,80c49c <_strtoll_r+0x260>
  80c3cc:	500b883a 	mov	r5,r10
  80c3d0:	580d883a 	mov	r6,r11
  80c3d4:	d8c00417 	ldw	r3,16(sp)
  80c3d8:	18000626 	beq	r3,zero,80c3f4 <_strtoll_r+0x1b8>
  80c3dc:	38000226 	beq	r7,zero,80c3e8 <_strtoll_r+0x1ac>
  80c3e0:	a53fffc4 	addi	r20,r20,-1
  80c3e4:	dd000315 	stw	r20,12(sp)
  80c3e8:	d8c00317 	ldw	r3,12(sp)
  80c3ec:	d8800417 	ldw	r2,16(sp)
  80c3f0:	10c00015 	stw	r3,0(r2)
  80c3f4:	2805883a 	mov	r2,r5
  80c3f8:	3007883a 	mov	r3,r6
  80c3fc:	dfc00f17 	ldw	ra,60(sp)
  80c400:	df000e17 	ldw	fp,56(sp)
  80c404:	ddc00d17 	ldw	r23,52(sp)
  80c408:	dd800c17 	ldw	r22,48(sp)
  80c40c:	dd400b17 	ldw	r21,44(sp)
  80c410:	dd000a17 	ldw	r20,40(sp)
  80c414:	dcc00917 	ldw	r19,36(sp)
  80c418:	dc800817 	ldw	r18,32(sp)
  80c41c:	dc400717 	ldw	r17,28(sp)
  80c420:	dc000617 	ldw	r16,24(sp)
  80c424:	dec01004 	addi	sp,sp,64
  80c428:	f800283a 	ret
  80c42c:	8abfc72e 	bgeu	r17,r10,80c34c <_strtoll_r+0x110>
  80c430:	01ffffc4 	movi	r7,-1
  80c434:	003fd406 	br	80c388 <_strtoll_r+0x14c>
  80c438:	00800c04 	movi	r2,48
  80c43c:	98803226 	beq	r19,r2,80c508 <_strtoll_r+0x2cc>
  80c440:	183fa026 	beq	r3,zero,80c2c4 <_strtoll_r+0x88>
  80c444:	00800c04 	movi	r2,48
  80c448:	98803e26 	beq	r19,r2,80c544 <_strtoll_r+0x308>
  80c44c:	d8c00117 	ldw	r3,4(sp)
  80c450:	05c00284 	movi	r23,10
  80c454:	b82b883a 	mov	r21,r23
  80c458:	1806c03a 	cmpne	r3,r3,zero
  80c45c:	002d883a 	mov	r22,zero
  80c460:	d8c00515 	stw	r3,20(sp)
  80c464:	183f9d26 	beq	r3,zero,80c2dc <_strtoll_r+0xa0>
  80c468:	0021883a 	mov	r16,zero
  80c46c:	04600034 	movhi	r17,32768
  80c470:	003f9d06 	br	80c2e8 <_strtoll_r+0xac>
  80c474:	020015c4 	movi	r8,87
  80c478:	9a21c83a 	sub	r16,r19,r8
  80c47c:	003fcf06 	br	80c3bc <_strtoll_r+0x180>
  80c480:	5cbfb31e 	bne	r11,r18,80c350 <_strtoll_r+0x114>
  80c484:	d8800017 	ldw	r2,0(sp)
  80c488:	143fb10e 	bge	r2,r16,80c350 <_strtoll_r+0x114>
  80c48c:	8815883a 	mov	r10,r17
  80c490:	9017883a 	mov	r11,r18
  80c494:	01ffffc4 	movi	r7,-1
  80c498:	003fbb06 	br	80c388 <_strtoll_r+0x14c>
  80c49c:	0009883a 	mov	r4,zero
  80c4a0:	2285c83a 	sub	r2,r4,r10
  80c4a4:	2089803a 	cmpltu	r4,r4,r2
  80c4a8:	02c7c83a 	sub	r3,zero,r11
  80c4ac:	1909c83a 	sub	r4,r3,r4
  80c4b0:	100b883a 	mov	r5,r2
  80c4b4:	200d883a 	mov	r6,r4
  80c4b8:	003fc606 	br	80c3d4 <_strtoll_r+0x198>
  80c4bc:	a4c00007 	ldb	r19,0(r20)
  80c4c0:	a5000044 	addi	r20,r20,1
  80c4c4:	003f7a06 	br	80c2b0 <_strtoll_r+0x74>
  80c4c8:	a4c00007 	ldb	r19,0(r20)
  80c4cc:	00800044 	movi	r2,1
  80c4d0:	a5000044 	addi	r20,r20,1
  80c4d4:	d8800115 	stw	r2,4(sp)
  80c4d8:	003f7606 	br	80c2b4 <_strtoll_r+0x78>
  80c4dc:	d8c00117 	ldw	r3,4(sp)
  80c4e0:	1805003a 	cmpeq	r2,r3,zero
  80c4e4:	1000131e 	bne	r2,zero,80c534 <_strtoll_r+0x2f8>
  80c4e8:	0005883a 	mov	r2,zero
  80c4ec:	00e00034 	movhi	r3,32768
  80c4f0:	100b883a 	mov	r5,r2
  80c4f4:	180d883a 	mov	r6,r3
  80c4f8:	d8c00217 	ldw	r3,8(sp)
  80c4fc:	00800884 	movi	r2,34
  80c500:	18800015 	stw	r2,0(r3)
  80c504:	003fb306 	br	80c3d4 <_strtoll_r+0x198>
  80c508:	a1000007 	ldb	r4,0(r20)
  80c50c:	00801e04 	movi	r2,120
  80c510:	20800226 	beq	r4,r2,80c51c <_strtoll_r+0x2e0>
  80c514:	00801604 	movi	r2,88
  80c518:	20bfc91e 	bne	r4,r2,80c440 <_strtoll_r+0x204>
  80c51c:	a4c00047 	ldb	r19,1(r20)
  80c520:	05c00404 	movi	r23,16
  80c524:	b82b883a 	mov	r21,r23
  80c528:	a5000084 	addi	r20,r20,2
  80c52c:	002d883a 	mov	r22,zero
  80c530:	003f6606 	br	80c2cc <_strtoll_r+0x90>
  80c534:	017fffc4 	movi	r5,-1
  80c538:	01a00034 	movhi	r6,32768
  80c53c:	31bfffc4 	addi	r6,r6,-1
  80c540:	003fed06 	br	80c4f8 <_strtoll_r+0x2bc>
  80c544:	05c00204 	movi	r23,8
  80c548:	b82b883a 	mov	r21,r23
  80c54c:	002d883a 	mov	r22,zero
  80c550:	003f5e06 	br	80c2cc <_strtoll_r+0x90>

0080c554 <_strtoul_r>:
  80c554:	defff404 	addi	sp,sp,-48
  80c558:	00802074 	movhi	r2,129
  80c55c:	109a6d04 	addi	r2,r2,27060
  80c560:	dd000615 	stw	r20,24(sp)
  80c564:	15000017 	ldw	r20,0(r2)
  80c568:	df000a15 	stw	fp,40(sp)
  80c56c:	ddc00915 	stw	r23,36(sp)
  80c570:	dc800415 	stw	r18,16(sp)
  80c574:	dc400315 	stw	r17,12(sp)
  80c578:	dfc00b15 	stw	ra,44(sp)
  80c57c:	dd800815 	stw	r22,32(sp)
  80c580:	dd400715 	stw	r21,28(sp)
  80c584:	dcc00515 	stw	r19,20(sp)
  80c588:	dc000215 	stw	r16,8(sp)
  80c58c:	282f883a 	mov	r23,r5
  80c590:	d9000115 	stw	r4,4(sp)
  80c594:	3039883a 	mov	fp,r6
  80c598:	3825883a 	mov	r18,r7
  80c59c:	2823883a 	mov	r17,r5
  80c5a0:	8c000007 	ldb	r16,0(r17)
  80c5a4:	8c400044 	addi	r17,r17,1
  80c5a8:	a407883a 	add	r3,r20,r16
  80c5ac:	18800003 	ldbu	r2,0(r3)
  80c5b0:	1080020c 	andi	r2,r2,8
  80c5b4:	103ffa1e 	bne	r2,zero,80c5a0 <_strtoul_r+0x4c>
  80c5b8:	00800b44 	movi	r2,45
  80c5bc:	80805826 	beq	r16,r2,80c720 <_strtoul_r+0x1cc>
  80c5c0:	00800ac4 	movi	r2,43
  80c5c4:	80805326 	beq	r16,r2,80c714 <_strtoul_r+0x1c0>
  80c5c8:	d8000015 	stw	zero,0(sp)
  80c5cc:	9007003a 	cmpeq	r3,r18,zero
  80c5d0:	18003d1e 	bne	r3,zero,80c6c8 <_strtoul_r+0x174>
  80c5d4:	00800404 	movi	r2,16
  80c5d8:	90803b26 	beq	r18,r2,80c6c8 <_strtoul_r+0x174>
  80c5dc:	013fffc4 	movi	r4,-1
  80c5e0:	900b883a 	mov	r5,r18
  80c5e4:	080fe7c0 	call	80fe7c <__udivsi3>
  80c5e8:	013fffc4 	movi	r4,-1
  80c5ec:	900b883a 	mov	r5,r18
  80c5f0:	1027883a 	mov	r19,r2
  80c5f4:	080fe840 	call	80fe84 <__umodsi3>
  80c5f8:	102d883a 	mov	r22,r2
  80c5fc:	902b883a 	mov	r21,r18
  80c600:	a405883a 	add	r2,r20,r16
  80c604:	11400003 	ldbu	r5,0(r2)
  80c608:	0009883a 	mov	r4,zero
  80c60c:	000d883a 	mov	r6,zero
  80c610:	28c0010c 	andi	r3,r5,4
  80c614:	18000f26 	beq	r3,zero,80c654 <_strtoul_r+0x100>
  80c618:	843ff404 	addi	r16,r16,-48
  80c61c:	8480150e 	bge	r16,r18,80c674 <_strtoul_r+0x120>
  80c620:	30003516 	blt	r6,zero,80c6f8 <_strtoul_r+0x1a4>
  80c624:	99003436 	bltu	r19,r4,80c6f8 <_strtoul_r+0x1a4>
  80c628:	24c03226 	beq	r4,r19,80c6f4 <_strtoul_r+0x1a0>
  80c62c:	a80b883a 	mov	r5,r21
  80c630:	080fe8c0 	call	80fe8c <__mulsi3>
  80c634:	1409883a 	add	r4,r2,r16
  80c638:	01800044 	movi	r6,1
  80c63c:	8c000007 	ldb	r16,0(r17)
  80c640:	8c400044 	addi	r17,r17,1
  80c644:	a405883a 	add	r2,r20,r16
  80c648:	11400003 	ldbu	r5,0(r2)
  80c64c:	28c0010c 	andi	r3,r5,4
  80c650:	183ff11e 	bne	r3,zero,80c618 <_strtoul_r+0xc4>
  80c654:	288000cc 	andi	r2,r5,3
  80c658:	10000626 	beq	r2,zero,80c674 <_strtoul_r+0x120>
  80c65c:	2880004c 	andi	r2,r5,1
  80c660:	1005003a 	cmpeq	r2,r2,zero
  80c664:	1000261e 	bne	r2,zero,80c700 <_strtoul_r+0x1ac>
  80c668:	00800dc4 	movi	r2,55
  80c66c:	80a1c83a 	sub	r16,r16,r2
  80c670:	84bfeb16 	blt	r16,r18,80c620 <_strtoul_r+0xcc>
  80c674:	3000420e 	bge	r6,zero,80c780 <_strtoul_r+0x22c>
  80c678:	d8c00117 	ldw	r3,4(sp)
  80c67c:	00800884 	movi	r2,34
  80c680:	013fffc4 	movi	r4,-1
  80c684:	18800015 	stw	r2,0(r3)
  80c688:	e0000226 	beq	fp,zero,80c694 <_strtoul_r+0x140>
  80c68c:	30001f1e 	bne	r6,zero,80c70c <_strtoul_r+0x1b8>
  80c690:	e5c00015 	stw	r23,0(fp)
  80c694:	2005883a 	mov	r2,r4
  80c698:	dfc00b17 	ldw	ra,44(sp)
  80c69c:	df000a17 	ldw	fp,40(sp)
  80c6a0:	ddc00917 	ldw	r23,36(sp)
  80c6a4:	dd800817 	ldw	r22,32(sp)
  80c6a8:	dd400717 	ldw	r21,28(sp)
  80c6ac:	dd000617 	ldw	r20,24(sp)
  80c6b0:	dcc00517 	ldw	r19,20(sp)
  80c6b4:	dc800417 	ldw	r18,16(sp)
  80c6b8:	dc400317 	ldw	r17,12(sp)
  80c6bc:	dc000217 	ldw	r16,8(sp)
  80c6c0:	dec00c04 	addi	sp,sp,48
  80c6c4:	f800283a 	ret
  80c6c8:	00800c04 	movi	r2,48
  80c6cc:	80801926 	beq	r16,r2,80c734 <_strtoul_r+0x1e0>
  80c6d0:	183fc226 	beq	r3,zero,80c5dc <_strtoul_r+0x88>
  80c6d4:	00800c04 	movi	r2,48
  80c6d8:	80802326 	beq	r16,r2,80c768 <_strtoul_r+0x214>
  80c6dc:	04800284 	movi	r18,10
  80c6e0:	902b883a 	mov	r21,r18
  80c6e4:	04c666b4 	movhi	r19,6554
  80c6e8:	9ce66644 	addi	r19,r19,-26215
  80c6ec:	05800144 	movi	r22,5
  80c6f0:	003fc306 	br	80c600 <_strtoul_r+0xac>
  80c6f4:	b43fcd0e 	bge	r22,r16,80c62c <_strtoul_r+0xd8>
  80c6f8:	01bfffc4 	movi	r6,-1
  80c6fc:	003fcf06 	br	80c63c <_strtoul_r+0xe8>
  80c700:	008015c4 	movi	r2,87
  80c704:	80a1c83a 	sub	r16,r16,r2
  80c708:	003fd906 	br	80c670 <_strtoul_r+0x11c>
  80c70c:	8dffffc4 	addi	r23,r17,-1
  80c710:	003fdf06 	br	80c690 <_strtoul_r+0x13c>
  80c714:	8c000007 	ldb	r16,0(r17)
  80c718:	8c400044 	addi	r17,r17,1
  80c71c:	003faa06 	br	80c5c8 <_strtoul_r+0x74>
  80c720:	8c000007 	ldb	r16,0(r17)
  80c724:	00800044 	movi	r2,1
  80c728:	8c400044 	addi	r17,r17,1
  80c72c:	d8800015 	stw	r2,0(sp)
  80c730:	003fa606 	br	80c5cc <_strtoul_r+0x78>
  80c734:	89000007 	ldb	r4,0(r17)
  80c738:	00801e04 	movi	r2,120
  80c73c:	20800226 	beq	r4,r2,80c748 <_strtoul_r+0x1f4>
  80c740:	00801604 	movi	r2,88
  80c744:	20bfe21e 	bne	r4,r2,80c6d0 <_strtoul_r+0x17c>
  80c748:	8c000047 	ldb	r16,1(r17)
  80c74c:	04800404 	movi	r18,16
  80c750:	8c400084 	addi	r17,r17,2
  80c754:	902b883a 	mov	r21,r18
  80c758:	04c40034 	movhi	r19,4096
  80c75c:	9cffffc4 	addi	r19,r19,-1
  80c760:	058003c4 	movi	r22,15
  80c764:	003fa606 	br	80c600 <_strtoul_r+0xac>
  80c768:	04800204 	movi	r18,8
  80c76c:	902b883a 	mov	r21,r18
  80c770:	04c80034 	movhi	r19,8192
  80c774:	9cffffc4 	addi	r19,r19,-1
  80c778:	058001c4 	movi	r22,7
  80c77c:	003fa006 	br	80c600 <_strtoul_r+0xac>
  80c780:	d8c00017 	ldw	r3,0(sp)
  80c784:	1805003a 	cmpeq	r2,r3,zero
  80c788:	103fbf1e 	bne	r2,zero,80c688 <_strtoul_r+0x134>
  80c78c:	0109c83a 	sub	r4,zero,r4
  80c790:	003fbd06 	br	80c688 <_strtoul_r+0x134>

0080c794 <strtoul>:
  80c794:	00802074 	movhi	r2,129
  80c798:	109a6904 	addi	r2,r2,27044
  80c79c:	2013883a 	mov	r9,r4
  80c7a0:	11000017 	ldw	r4,0(r2)
  80c7a4:	2805883a 	mov	r2,r5
  80c7a8:	300f883a 	mov	r7,r6
  80c7ac:	480b883a 	mov	r5,r9
  80c7b0:	100d883a 	mov	r6,r2
  80c7b4:	080c5541 	jmpi	80c554 <_strtoul_r>

0080c7b8 <_strtoull_r>:
  80c7b8:	defff104 	addi	sp,sp,-60
  80c7bc:	00802074 	movhi	r2,129
  80c7c0:	109a6d04 	addi	r2,r2,27060
  80c7c4:	df000d15 	stw	fp,52(sp)
  80c7c8:	17000017 	ldw	fp,0(r2)
  80c7cc:	ddc00c15 	stw	r23,48(sp)
  80c7d0:	dcc00815 	stw	r19,32(sp)
  80c7d4:	dfc00e15 	stw	ra,56(sp)
  80c7d8:	dd800b15 	stw	r22,44(sp)
  80c7dc:	dd400a15 	stw	r21,40(sp)
  80c7e0:	dd000915 	stw	r20,36(sp)
  80c7e4:	dc800715 	stw	r18,28(sp)
  80c7e8:	dc400615 	stw	r17,24(sp)
  80c7ec:	dc000515 	stw	r16,20(sp)
  80c7f0:	d9400215 	stw	r5,8(sp)
  80c7f4:	d9000115 	stw	r4,4(sp)
  80c7f8:	d9800315 	stw	r6,12(sp)
  80c7fc:	382f883a 	mov	r23,r7
  80c800:	2827883a 	mov	r19,r5
  80c804:	9d000007 	ldb	r20,0(r19)
  80c808:	9cc00044 	addi	r19,r19,1
  80c80c:	e507883a 	add	r3,fp,r20
  80c810:	18800003 	ldbu	r2,0(r3)
  80c814:	1080020c 	andi	r2,r2,8
  80c818:	103ffa1e 	bne	r2,zero,80c804 <_strtoull_r+0x4c>
  80c81c:	00800b44 	movi	r2,45
  80c820:	a0807a26 	beq	r20,r2,80ca0c <_strtoull_r+0x254>
  80c824:	00800ac4 	movi	r2,43
  80c828:	a0807526 	beq	r20,r2,80ca00 <_strtoull_r+0x248>
  80c82c:	d8000015 	stw	zero,0(sp)
  80c830:	b807003a 	cmpeq	r3,r23,zero
  80c834:	18005a1e 	bne	r3,zero,80c9a0 <_strtoull_r+0x1e8>
  80c838:	00800404 	movi	r2,16
  80c83c:	b8805826 	beq	r23,r2,80c9a0 <_strtoull_r+0x1e8>
  80c840:	b82dd7fa 	srai	r22,r23,31
  80c844:	043fffc4 	movi	r16,-1
  80c848:	8009883a 	mov	r4,r16
  80c84c:	800b883a 	mov	r5,r16
  80c850:	b80d883a 	mov	r6,r23
  80c854:	b00f883a 	mov	r7,r22
  80c858:	080dce40 	call	80dce4 <__udivdi3>
  80c85c:	8009883a 	mov	r4,r16
  80c860:	800b883a 	mov	r5,r16
  80c864:	b80d883a 	mov	r6,r23
  80c868:	b00f883a 	mov	r7,r22
  80c86c:	1023883a 	mov	r17,r2
  80c870:	1825883a 	mov	r18,r3
  80c874:	080e3500 	call	80e350 <__umoddi3>
  80c878:	b82b883a 	mov	r21,r23
  80c87c:	1019883a 	mov	r12,r2
  80c880:	e505883a 	add	r2,fp,r20
  80c884:	11000003 	ldbu	r4,0(r2)
  80c888:	0015883a 	mov	r10,zero
  80c88c:	0017883a 	mov	r11,zero
  80c890:	20c0010c 	andi	r3,r4,4
  80c894:	000d883a 	mov	r6,zero
  80c898:	18001c26 	beq	r3,zero,80c90c <_strtoull_r+0x154>
  80c89c:	a43ff404 	addi	r16,r20,-48
  80c8a0:	85c0220e 	bge	r16,r23,80c92c <_strtoull_r+0x174>
  80c8a4:	30003c16 	blt	r6,zero,80c998 <_strtoull_r+0x1e0>
  80c8a8:	92c03b36 	bltu	r18,r11,80c998 <_strtoull_r+0x1e0>
  80c8ac:	5c803926 	beq	r11,r18,80c994 <_strtoull_r+0x1dc>
  80c8b0:	54404c26 	beq	r10,r17,80c9e4 <_strtoull_r+0x22c>
  80c8b4:	580b883a 	mov	r5,r11
  80c8b8:	5009883a 	mov	r4,r10
  80c8bc:	a80d883a 	mov	r6,r21
  80c8c0:	b00f883a 	mov	r7,r22
  80c8c4:	db000415 	stw	r12,16(sp)
  80c8c8:	080db1c0 	call	80db1c <__muldi3>
  80c8cc:	8013d7fa 	srai	r9,r16,31
  80c8d0:	100d883a 	mov	r6,r2
  80c8d4:	1405883a 	add	r2,r2,r16
  80c8d8:	118d803a 	cmpltu	r6,r2,r6
  80c8dc:	1a47883a 	add	r3,r3,r9
  80c8e0:	db000417 	ldw	r12,16(sp)
  80c8e4:	30cd883a 	add	r6,r6,r3
  80c8e8:	3017883a 	mov	r11,r6
  80c8ec:	1015883a 	mov	r10,r2
  80c8f0:	01800044 	movi	r6,1
  80c8f4:	9d000007 	ldb	r20,0(r19)
  80c8f8:	9cc00044 	addi	r19,r19,1
  80c8fc:	e505883a 	add	r2,fp,r20
  80c900:	11000003 	ldbu	r4,0(r2)
  80c904:	20c0010c 	andi	r3,r4,4
  80c908:	183fe41e 	bne	r3,zero,80c89c <_strtoull_r+0xe4>
  80c90c:	208000cc 	andi	r2,r4,3
  80c910:	10000626 	beq	r2,zero,80c92c <_strtoull_r+0x174>
  80c914:	2080004c 	andi	r2,r4,1
  80c918:	1005003a 	cmpeq	r2,r2,zero
  80c91c:	10002e1e 	bne	r2,zero,80c9d8 <_strtoull_r+0x220>
  80c920:	02000dc4 	movi	r8,55
  80c924:	a221c83a 	sub	r16,r20,r8
  80c928:	85ffde16 	blt	r16,r23,80c8a4 <_strtoull_r+0xec>
  80c92c:	3000530e 	bge	r6,zero,80ca7c <_strtoull_r+0x2c4>
  80c930:	d8c00117 	ldw	r3,4(sp)
  80c934:	02bfffc4 	movi	r10,-1
  80c938:	00800884 	movi	r2,34
  80c93c:	5017883a 	mov	r11,r10
  80c940:	18800015 	stw	r2,0(r3)
  80c944:	d8800317 	ldw	r2,12(sp)
  80c948:	10000426 	beq	r2,zero,80c95c <_strtoull_r+0x1a4>
  80c94c:	3000291e 	bne	r6,zero,80c9f4 <_strtoull_r+0x23c>
  80c950:	d8800217 	ldw	r2,8(sp)
  80c954:	d8c00317 	ldw	r3,12(sp)
  80c958:	18800015 	stw	r2,0(r3)
  80c95c:	5005883a 	mov	r2,r10
  80c960:	5807883a 	mov	r3,r11
  80c964:	dfc00e17 	ldw	ra,56(sp)
  80c968:	df000d17 	ldw	fp,52(sp)
  80c96c:	ddc00c17 	ldw	r23,48(sp)
  80c970:	dd800b17 	ldw	r22,44(sp)
  80c974:	dd400a17 	ldw	r21,40(sp)
  80c978:	dd000917 	ldw	r20,36(sp)
  80c97c:	dcc00817 	ldw	r19,32(sp)
  80c980:	dc800717 	ldw	r18,28(sp)
  80c984:	dc400617 	ldw	r17,24(sp)
  80c988:	dc000517 	ldw	r16,20(sp)
  80c98c:	dec00f04 	addi	sp,sp,60
  80c990:	f800283a 	ret
  80c994:	8abfc62e 	bgeu	r17,r10,80c8b0 <_strtoull_r+0xf8>
  80c998:	01bfffc4 	movi	r6,-1
  80c99c:	003fd506 	br	80c8f4 <_strtoull_r+0x13c>
  80c9a0:	00800c04 	movi	r2,48
  80c9a4:	a0801e26 	beq	r20,r2,80ca20 <_strtoull_r+0x268>
  80c9a8:	183fa526 	beq	r3,zero,80c840 <_strtoull_r+0x88>
  80c9ac:	00800c04 	movi	r2,48
  80c9b0:	a0802a26 	beq	r20,r2,80ca5c <_strtoull_r+0x2a4>
  80c9b4:	05c00284 	movi	r23,10
  80c9b8:	b82b883a 	mov	r21,r23
  80c9bc:	046666b4 	movhi	r17,39322
  80c9c0:	8c666644 	addi	r17,r17,-26215
  80c9c4:	002d883a 	mov	r22,zero
  80c9c8:	048666b4 	movhi	r18,6554
  80c9cc:	94a66644 	addi	r18,r18,-26215
  80c9d0:	03000144 	movi	r12,5
  80c9d4:	003faa06 	br	80c880 <_strtoull_r+0xc8>
  80c9d8:	020015c4 	movi	r8,87
  80c9dc:	a221c83a 	sub	r16,r20,r8
  80c9e0:	003fd106 	br	80c928 <_strtoull_r+0x170>
  80c9e4:	5cbfb31e 	bne	r11,r18,80c8b4 <_strtoull_r+0xfc>
  80c9e8:	643fb20e 	bge	r12,r16,80c8b4 <_strtoull_r+0xfc>
  80c9ec:	01bfffc4 	movi	r6,-1
  80c9f0:	003fc006 	br	80c8f4 <_strtoull_r+0x13c>
  80c9f4:	9cffffc4 	addi	r19,r19,-1
  80c9f8:	dcc00215 	stw	r19,8(sp)
  80c9fc:	003fd406 	br	80c950 <_strtoull_r+0x198>
  80ca00:	9d000007 	ldb	r20,0(r19)
  80ca04:	9cc00044 	addi	r19,r19,1
  80ca08:	003f8806 	br	80c82c <_strtoull_r+0x74>
  80ca0c:	9d000007 	ldb	r20,0(r19)
  80ca10:	00800044 	movi	r2,1
  80ca14:	9cc00044 	addi	r19,r19,1
  80ca18:	d8800015 	stw	r2,0(sp)
  80ca1c:	003f8406 	br	80c830 <_strtoull_r+0x78>
  80ca20:	99000007 	ldb	r4,0(r19)
  80ca24:	00801e04 	movi	r2,120
  80ca28:	20800226 	beq	r4,r2,80ca34 <_strtoull_r+0x27c>
  80ca2c:	00801604 	movi	r2,88
  80ca30:	20bfdd1e 	bne	r4,r2,80c9a8 <_strtoull_r+0x1f0>
  80ca34:	9d000047 	ldb	r20,1(r19)
  80ca38:	05c00404 	movi	r23,16
  80ca3c:	b82b883a 	mov	r21,r23
  80ca40:	047fffc4 	movi	r17,-1
  80ca44:	9cc00084 	addi	r19,r19,2
  80ca48:	002d883a 	mov	r22,zero
  80ca4c:	04840034 	movhi	r18,4096
  80ca50:	94bfffc4 	addi	r18,r18,-1
  80ca54:	030003c4 	movi	r12,15
  80ca58:	003f8906 	br	80c880 <_strtoull_r+0xc8>
  80ca5c:	05c00204 	movi	r23,8
  80ca60:	b82b883a 	mov	r21,r23
  80ca64:	047fffc4 	movi	r17,-1
  80ca68:	002d883a 	mov	r22,zero
  80ca6c:	04880034 	movhi	r18,8192
  80ca70:	94bfffc4 	addi	r18,r18,-1
  80ca74:	030001c4 	movi	r12,7
  80ca78:	003f8106 	br	80c880 <_strtoull_r+0xc8>
  80ca7c:	d8c00017 	ldw	r3,0(sp)
  80ca80:	1805003a 	cmpeq	r2,r3,zero
  80ca84:	103faf1e 	bne	r2,zero,80c944 <_strtoull_r+0x18c>
  80ca88:	0009883a 	mov	r4,zero
  80ca8c:	2285c83a 	sub	r2,r4,r10
  80ca90:	02c7c83a 	sub	r3,zero,r11
  80ca94:	2089803a 	cmpltu	r4,r4,r2
  80ca98:	1909c83a 	sub	r4,r3,r4
  80ca9c:	1015883a 	mov	r10,r2
  80caa0:	2017883a 	mov	r11,r4
  80caa4:	003fa706 	br	80c944 <_strtoull_r+0x18c>

0080caa8 <__submore>:
  80caa8:	defffa04 	addi	sp,sp,-24
  80caac:	28c00c17 	ldw	r3,48(r5)
  80cab0:	dc800215 	stw	r18,8(sp)
  80cab4:	2825883a 	mov	r18,r5
  80cab8:	dc000015 	stw	r16,0(sp)
  80cabc:	90801004 	addi	r2,r18,64
  80cac0:	04010004 	movi	r16,1024
  80cac4:	dfc00515 	stw	ra,20(sp)
  80cac8:	dd000415 	stw	r20,16(sp)
  80cacc:	dcc00315 	stw	r19,12(sp)
  80cad0:	dc400115 	stw	r17,4(sp)
  80cad4:	800b883a 	mov	r5,r16
  80cad8:	18801b26 	beq	r3,r2,80cb48 <__submore+0xa0>
  80cadc:	94400d17 	ldw	r17,52(r18)
  80cae0:	180b883a 	mov	r5,r3
  80cae4:	8c69883a 	add	r20,r17,r17
  80cae8:	a00d883a 	mov	r6,r20
  80caec:	0809fb80 	call	809fb8 <_realloc_r>
  80caf0:	1467883a 	add	r19,r2,r17
  80caf4:	1021883a 	mov	r16,r2
  80caf8:	880d883a 	mov	r6,r17
  80cafc:	9809883a 	mov	r4,r19
  80cb00:	100b883a 	mov	r5,r2
  80cb04:	10000e26 	beq	r2,zero,80cb40 <__submore+0x98>
  80cb08:	0808b480 	call	808b48 <memcpy>
  80cb0c:	000d883a 	mov	r6,zero
  80cb10:	95000d15 	stw	r20,52(r18)
  80cb14:	94c00015 	stw	r19,0(r18)
  80cb18:	94000c15 	stw	r16,48(r18)
  80cb1c:	3005883a 	mov	r2,r6
  80cb20:	dfc00517 	ldw	ra,20(sp)
  80cb24:	dd000417 	ldw	r20,16(sp)
  80cb28:	dcc00317 	ldw	r19,12(sp)
  80cb2c:	dc800217 	ldw	r18,8(sp)
  80cb30:	dc400117 	ldw	r17,4(sp)
  80cb34:	dc000017 	ldw	r16,0(sp)
  80cb38:	dec00604 	addi	sp,sp,24
  80cb3c:	f800283a 	ret
  80cb40:	01bfffc4 	movi	r6,-1
  80cb44:	003ff506 	br	80cb1c <__submore+0x74>
  80cb48:	0801ffc0 	call	801ffc <_malloc_r>
  80cb4c:	1009883a 	mov	r4,r2
  80cb50:	1140ff44 	addi	r5,r2,1021
  80cb54:	000d883a 	mov	r6,zero
  80cb58:	103ff926 	beq	r2,zero,80cb40 <__submore+0x98>
  80cb5c:	90801083 	ldbu	r2,66(r18)
  80cb60:	94000d15 	stw	r16,52(r18)
  80cb64:	91000c15 	stw	r4,48(r18)
  80cb68:	28800085 	stb	r2,2(r5)
  80cb6c:	90c01043 	ldbu	r3,65(r18)
  80cb70:	28c00045 	stb	r3,1(r5)
  80cb74:	90801003 	ldbu	r2,64(r18)
  80cb78:	2080ff45 	stb	r2,1021(r4)
  80cb7c:	91400015 	stw	r5,0(r18)
  80cb80:	003fe606 	br	80cb1c <__submore+0x74>

0080cb84 <_ungetc_r>:
  80cb84:	defffc04 	addi	sp,sp,-16
  80cb88:	00bfffc4 	movi	r2,-1
  80cb8c:	dc400215 	stw	r17,8(sp)
  80cb90:	dc000115 	stw	r16,4(sp)
  80cb94:	dfc00315 	stw	ra,12(sp)
  80cb98:	2821883a 	mov	r16,r5
  80cb9c:	2023883a 	mov	r17,r4
  80cba0:	28801826 	beq	r5,r2,80cc04 <_ungetc_r+0x80>
  80cba4:	20000226 	beq	r4,zero,80cbb0 <_ungetc_r+0x2c>
  80cba8:	20800e17 	ldw	r2,56(r4)
  80cbac:	10001b26 	beq	r2,zero,80cc1c <_ungetc_r+0x98>
  80cbb0:	3100030b 	ldhu	r4,12(r6)
  80cbb4:	00bff7c4 	movi	r2,-33
  80cbb8:	2084703a 	and	r2,r4,r2
  80cbbc:	117fffcc 	andi	r5,r2,65535
  80cbc0:	28c0010c 	andi	r3,r5,4
  80cbc4:	1009883a 	mov	r4,r2
  80cbc8:	3080030d 	sth	r2,12(r6)
  80cbcc:	18003526 	beq	r3,zero,80cca4 <_ungetc_r+0x120>
  80cbd0:	30800c17 	ldw	r2,48(r6)
  80cbd4:	84003fcc 	andi	r16,r16,255
  80cbd8:	10001426 	beq	r2,zero,80cc2c <_ungetc_r+0xa8>
  80cbdc:	30c00117 	ldw	r3,4(r6)
  80cbe0:	30800d17 	ldw	r2,52(r6)
  80cbe4:	1880380e 	bge	r3,r2,80ccc8 <_ungetc_r+0x144>
  80cbe8:	30c00017 	ldw	r3,0(r6)
  80cbec:	19ffffc4 	addi	r7,r3,-1
  80cbf0:	31c00015 	stw	r7,0(r6)
  80cbf4:	1c3fffc5 	stb	r16,-1(r3)
  80cbf8:	30800117 	ldw	r2,4(r6)
  80cbfc:	10800044 	addi	r2,r2,1
  80cc00:	30800115 	stw	r2,4(r6)
  80cc04:	8005883a 	mov	r2,r16
  80cc08:	dfc00317 	ldw	ra,12(sp)
  80cc0c:	dc400217 	ldw	r17,8(sp)
  80cc10:	dc000117 	ldw	r16,4(sp)
  80cc14:	dec00404 	addi	sp,sp,16
  80cc18:	f800283a 	ret
  80cc1c:	d9800015 	stw	r6,0(sp)
  80cc20:	0800dc40 	call	800dc4 <__sinit>
  80cc24:	d9800017 	ldw	r6,0(sp)
  80cc28:	003fe106 	br	80cbb0 <_ungetc_r+0x2c>
  80cc2c:	30800417 	ldw	r2,16(r6)
  80cc30:	10002326 	beq	r2,zero,80ccc0 <_ungetc_r+0x13c>
  80cc34:	31c00017 	ldw	r7,0(r6)
  80cc38:	11c0022e 	bgeu	r2,r7,80cc44 <_ungetc_r+0xc0>
  80cc3c:	38bfffc3 	ldbu	r2,-1(r7)
  80cc40:	80801226 	beq	r16,r2,80cc8c <_ungetc_r+0x108>
  80cc44:	30c00117 	ldw	r3,4(r6)
  80cc48:	00800044 	movi	r2,1
  80cc4c:	30800115 	stw	r2,4(r6)
  80cc50:	008000c4 	movi	r2,3
  80cc54:	31001004 	addi	r4,r6,64
  80cc58:	31401084 	addi	r5,r6,66
  80cc5c:	30800d15 	stw	r2,52(r6)
  80cc60:	8005883a 	mov	r2,r16
  80cc64:	30c00f15 	stw	r3,60(r6)
  80cc68:	31c00e15 	stw	r7,56(r6)
  80cc6c:	31000c15 	stw	r4,48(r6)
  80cc70:	31400015 	stw	r5,0(r6)
  80cc74:	34001085 	stb	r16,66(r6)
  80cc78:	dfc00317 	ldw	ra,12(sp)
  80cc7c:	dc400217 	ldw	r17,8(sp)
  80cc80:	dc000117 	ldw	r16,4(sp)
  80cc84:	dec00404 	addi	sp,sp,16
  80cc88:	f800283a 	ret
  80cc8c:	30800117 	ldw	r2,4(r6)
  80cc90:	39ffffc4 	addi	r7,r7,-1
  80cc94:	31c00015 	stw	r7,0(r6)
  80cc98:	10800044 	addi	r2,r2,1
  80cc9c:	30800115 	stw	r2,4(r6)
  80cca0:	003fd806 	br	80cc04 <_ungetc_r+0x80>
  80cca4:	2880040c 	andi	r2,r5,16
  80cca8:	10000d26 	beq	r2,zero,80cce0 <_ungetc_r+0x15c>
  80ccac:	2880020c 	andi	r2,r5,8
  80ccb0:	10000d1e 	bne	r2,zero,80cce8 <_ungetc_r+0x164>
  80ccb4:	20800114 	ori	r2,r4,4
  80ccb8:	3080030d 	sth	r2,12(r6)
  80ccbc:	003fc406 	br	80cbd0 <_ungetc_r+0x4c>
  80ccc0:	31c00017 	ldw	r7,0(r6)
  80ccc4:	003fdf06 	br	80cc44 <_ungetc_r+0xc0>
  80ccc8:	300b883a 	mov	r5,r6
  80cccc:	8809883a 	mov	r4,r17
  80ccd0:	d9800015 	stw	r6,0(sp)
  80ccd4:	080caa80 	call	80caa8 <__submore>
  80ccd8:	d9800017 	ldw	r6,0(sp)
  80ccdc:	103fc226 	beq	r2,zero,80cbe8 <_ungetc_r+0x64>
  80cce0:	043fffc4 	movi	r16,-1
  80cce4:	003fc706 	br	80cc04 <_ungetc_r+0x80>
  80cce8:	300b883a 	mov	r5,r6
  80ccec:	8809883a 	mov	r4,r17
  80ccf0:	d9800015 	stw	r6,0(sp)
  80ccf4:	0800b2c0 	call	800b2c <_fflush_r>
  80ccf8:	d9800017 	ldw	r6,0(sp)
  80ccfc:	103ff81e 	bne	r2,zero,80cce0 <_ungetc_r+0x15c>
  80cd00:	3100030b 	ldhu	r4,12(r6)
  80cd04:	00bffdc4 	movi	r2,-9
  80cd08:	30000215 	stw	zero,8(r6)
  80cd0c:	2084703a 	and	r2,r4,r2
  80cd10:	1009883a 	mov	r4,r2
  80cd14:	3080030d 	sth	r2,12(r6)
  80cd18:	30000615 	stw	zero,24(r6)
  80cd1c:	003fe506 	br	80ccb4 <_ungetc_r+0x130>

0080cd20 <ungetc>:
  80cd20:	01802074 	movhi	r6,129
  80cd24:	319a6904 	addi	r6,r6,27044
  80cd28:	2007883a 	mov	r3,r4
  80cd2c:	31000017 	ldw	r4,0(r6)
  80cd30:	280d883a 	mov	r6,r5
  80cd34:	180b883a 	mov	r5,r3
  80cd38:	080cb841 	jmpi	80cb84 <_ungetc_r>

0080cd3c <__swbuf_r>:
  80cd3c:	defffc04 	addi	sp,sp,-16
  80cd40:	dc400215 	stw	r17,8(sp)
  80cd44:	dc000115 	stw	r16,4(sp)
  80cd48:	dfc00315 	stw	ra,12(sp)
  80cd4c:	2023883a 	mov	r17,r4
  80cd50:	2821883a 	mov	r16,r5
  80cd54:	20000226 	beq	r4,zero,80cd60 <__swbuf_r+0x24>
  80cd58:	20800e17 	ldw	r2,56(r4)
  80cd5c:	10002f26 	beq	r2,zero,80ce1c <__swbuf_r+0xe0>
  80cd60:	3080030b 	ldhu	r2,12(r6)
  80cd64:	30c00617 	ldw	r3,24(r6)
  80cd68:	1080020c 	andi	r2,r2,8
  80cd6c:	30c00215 	stw	r3,8(r6)
  80cd70:	10002226 	beq	r2,zero,80cdfc <__swbuf_r+0xc0>
  80cd74:	30c00417 	ldw	r3,16(r6)
  80cd78:	18002026 	beq	r3,zero,80cdfc <__swbuf_r+0xc0>
  80cd7c:	31000017 	ldw	r4,0(r6)
  80cd80:	30800517 	ldw	r2,20(r6)
  80cd84:	20c7c83a 	sub	r3,r4,r3
  80cd88:	18802f0e 	bge	r3,r2,80ce48 <__swbuf_r+0x10c>
  80cd8c:	19400044 	addi	r5,r3,1
  80cd90:	30800217 	ldw	r2,8(r6)
  80cd94:	84003fcc 	andi	r16,r16,255
  80cd98:	20c00044 	addi	r3,r4,1
  80cd9c:	10bfffc4 	addi	r2,r2,-1
  80cda0:	30800215 	stw	r2,8(r6)
  80cda4:	24000005 	stb	r16,0(r4)
  80cda8:	30800517 	ldw	r2,20(r6)
  80cdac:	30c00015 	stw	r3,0(r6)
  80cdb0:	11400c26 	beq	r2,r5,80cde4 <__swbuf_r+0xa8>
  80cdb4:	3080030b 	ldhu	r2,12(r6)
  80cdb8:	1080004c 	andi	r2,r2,1
  80cdbc:	1005003a 	cmpeq	r2,r2,zero
  80cdc0:	10000626 	beq	r2,zero,80cddc <__swbuf_r+0xa0>
  80cdc4:	8005883a 	mov	r2,r16
  80cdc8:	dfc00317 	ldw	ra,12(sp)
  80cdcc:	dc400217 	ldw	r17,8(sp)
  80cdd0:	dc000117 	ldw	r16,4(sp)
  80cdd4:	dec00404 	addi	sp,sp,16
  80cdd8:	f800283a 	ret
  80cddc:	00800284 	movi	r2,10
  80cde0:	80bff81e 	bne	r16,r2,80cdc4 <__swbuf_r+0x88>
  80cde4:	8809883a 	mov	r4,r17
  80cde8:	300b883a 	mov	r5,r6
  80cdec:	0800b2c0 	call	800b2c <_fflush_r>
  80cdf0:	103ff426 	beq	r2,zero,80cdc4 <__swbuf_r+0x88>
  80cdf4:	043fffc4 	movi	r16,-1
  80cdf8:	003ff206 	br	80cdc4 <__swbuf_r+0x88>
  80cdfc:	300b883a 	mov	r5,r6
  80ce00:	8809883a 	mov	r4,r17
  80ce04:	d9800015 	stw	r6,0(sp)
  80ce08:	08066600 	call	806660 <__swsetup_r>
  80ce0c:	d9800017 	ldw	r6,0(sp)
  80ce10:	1000061e 	bne	r2,zero,80ce2c <__swbuf_r+0xf0>
  80ce14:	30c00417 	ldw	r3,16(r6)
  80ce18:	003fd806 	br	80cd7c <__swbuf_r+0x40>
  80ce1c:	d9800015 	stw	r6,0(sp)
  80ce20:	0800dc40 	call	800dc4 <__sinit>
  80ce24:	d9800017 	ldw	r6,0(sp)
  80ce28:	003fcd06 	br	80cd60 <__swbuf_r+0x24>
  80ce2c:	3080030b 	ldhu	r2,12(r6)
  80ce30:	00c00244 	movi	r3,9
  80ce34:	043fffc4 	movi	r16,-1
  80ce38:	10801014 	ori	r2,r2,64
  80ce3c:	3080030d 	sth	r2,12(r6)
  80ce40:	88c00015 	stw	r3,0(r17)
  80ce44:	003fdf06 	br	80cdc4 <__swbuf_r+0x88>
  80ce48:	300b883a 	mov	r5,r6
  80ce4c:	8809883a 	mov	r4,r17
  80ce50:	d9800015 	stw	r6,0(sp)
  80ce54:	0800b2c0 	call	800b2c <_fflush_r>
  80ce58:	d9800017 	ldw	r6,0(sp)
  80ce5c:	103fe51e 	bne	r2,zero,80cdf4 <__swbuf_r+0xb8>
  80ce60:	31000017 	ldw	r4,0(r6)
  80ce64:	01400044 	movi	r5,1
  80ce68:	003fc906 	br	80cd90 <__swbuf_r+0x54>

0080ce6c <__swbuf>:
  80ce6c:	01802074 	movhi	r6,129
  80ce70:	319a6904 	addi	r6,r6,27044
  80ce74:	2007883a 	mov	r3,r4
  80ce78:	31000017 	ldw	r4,0(r6)
  80ce7c:	280d883a 	mov	r6,r5
  80ce80:	180b883a 	mov	r5,r3
  80ce84:	080cd3c1 	jmpi	80cd3c <__swbuf_r>

0080ce88 <_calloc_r>:
  80ce88:	defffe04 	addi	sp,sp,-8
  80ce8c:	dc400015 	stw	r17,0(sp)
  80ce90:	2023883a 	mov	r17,r4
  80ce94:	2809883a 	mov	r4,r5
  80ce98:	300b883a 	mov	r5,r6
  80ce9c:	dfc00115 	stw	ra,4(sp)
  80cea0:	080fe8c0 	call	80fe8c <__mulsi3>
  80cea4:	100b883a 	mov	r5,r2
  80cea8:	8809883a 	mov	r4,r17
  80ceac:	0801ffc0 	call	801ffc <_malloc_r>
  80ceb0:	1023883a 	mov	r17,r2
  80ceb4:	01c00904 	movi	r7,36
  80ceb8:	10000d26 	beq	r2,zero,80cef0 <_calloc_r+0x68>
  80cebc:	10ffff17 	ldw	r3,-4(r2)
  80cec0:	1009883a 	mov	r4,r2
  80cec4:	00bfff04 	movi	r2,-4
  80cec8:	1886703a 	and	r3,r3,r2
  80cecc:	1887883a 	add	r3,r3,r2
  80ced0:	180d883a 	mov	r6,r3
  80ced4:	000b883a 	mov	r5,zero
  80ced8:	38c01736 	bltu	r7,r3,80cf38 <_calloc_r+0xb0>
  80cedc:	008004c4 	movi	r2,19
  80cee0:	10c00836 	bltu	r2,r3,80cf04 <_calloc_r+0x7c>
  80cee4:	20000215 	stw	zero,8(r4)
  80cee8:	20000015 	stw	zero,0(r4)
  80ceec:	20000115 	stw	zero,4(r4)
  80cef0:	8805883a 	mov	r2,r17
  80cef4:	dfc00117 	ldw	ra,4(sp)
  80cef8:	dc400017 	ldw	r17,0(sp)
  80cefc:	dec00204 	addi	sp,sp,8
  80cf00:	f800283a 	ret
  80cf04:	008006c4 	movi	r2,27
  80cf08:	88000015 	stw	zero,0(r17)
  80cf0c:	88000115 	stw	zero,4(r17)
  80cf10:	89000204 	addi	r4,r17,8
  80cf14:	10fff32e 	bgeu	r2,r3,80cee4 <_calloc_r+0x5c>
  80cf18:	88000215 	stw	zero,8(r17)
  80cf1c:	88000315 	stw	zero,12(r17)
  80cf20:	89000404 	addi	r4,r17,16
  80cf24:	19ffef1e 	bne	r3,r7,80cee4 <_calloc_r+0x5c>
  80cf28:	89000604 	addi	r4,r17,24
  80cf2c:	88000415 	stw	zero,16(r17)
  80cf30:	88000515 	stw	zero,20(r17)
  80cf34:	003feb06 	br	80cee4 <_calloc_r+0x5c>
  80cf38:	080273c0 	call	80273c <memset>
  80cf3c:	8805883a 	mov	r2,r17
  80cf40:	dfc00117 	ldw	ra,4(sp)
  80cf44:	dc400017 	ldw	r17,0(sp)
  80cf48:	dec00204 	addi	sp,sp,8
  80cf4c:	f800283a 	ret

0080cf50 <htinit>:
  80cf50:	28800003 	ldbu	r2,0(r5)
  80cf54:	10000626 	beq	r2,zero,80cf70 <htinit+0x20>
  80cf58:	1105883a 	add	r2,r2,r4
  80cf5c:	11800005 	stb	r6,0(r2)
  80cf60:	28800043 	ldbu	r2,1(r5)
  80cf64:	31800044 	addi	r6,r6,1
  80cf68:	29400044 	addi	r5,r5,1
  80cf6c:	103ffa1e 	bne	r2,zero,80cf58 <htinit+0x8>
  80cf70:	f800283a 	ret

0080cf74 <__hexdig_init>:
  80cf74:	defffd04 	addi	sp,sp,-12
  80cf78:	dc400015 	stw	r17,0(sp)
  80cf7c:	044020b4 	movhi	r17,130
  80cf80:	8c618204 	addi	r17,r17,-31224
  80cf84:	dcc00115 	stw	r19,4(sp)
  80cf88:	8809883a 	mov	r4,r17
  80cf8c:	04c00684 	movi	r19,26
  80cf90:	01402074 	movhi	r5,129
  80cf94:	29533204 	addi	r5,r5,19656
  80cf98:	01800404 	movi	r6,16
  80cf9c:	dfc00215 	stw	ra,8(sp)
  80cfa0:	080cf500 	call	80cf50 <htinit>
  80cfa4:	980d883a 	mov	r6,r19
  80cfa8:	8809883a 	mov	r4,r17
  80cfac:	01402074 	movhi	r5,129
  80cfb0:	29533504 	addi	r5,r5,19668
  80cfb4:	080cf500 	call	80cf50 <htinit>
  80cfb8:	8809883a 	mov	r4,r17
  80cfbc:	980d883a 	mov	r6,r19
  80cfc0:	01402074 	movhi	r5,129
  80cfc4:	29533704 	addi	r5,r5,19676
  80cfc8:	dfc00217 	ldw	ra,8(sp)
  80cfcc:	dcc00117 	ldw	r19,4(sp)
  80cfd0:	dc400017 	ldw	r17,0(sp)
  80cfd4:	dec00304 	addi	sp,sp,12
  80cfd8:	080cf501 	jmpi	80cf50 <htinit>

0080cfdc <rshift>:
  80cfdc:	2807d17a 	srai	r3,r5,5
  80cfe0:	20800417 	ldw	r2,16(r4)
  80cfe4:	22400504 	addi	r9,r4,20
  80cfe8:	480f883a 	mov	r7,r9
  80cfec:	1880190e 	bge	r3,r2,80d054 <rshift+0x78>
  80cff0:	1085883a 	add	r2,r2,r2
  80cff4:	18c7883a 	add	r3,r3,r3
  80cff8:	1085883a 	add	r2,r2,r2
  80cffc:	18c7883a 	add	r3,r3,r3
  80d000:	294007cc 	andi	r5,r5,31
  80d004:	4891883a 	add	r8,r9,r2
  80d008:	48cd883a 	add	r6,r9,r3
  80d00c:	28001726 	beq	r5,zero,80d06c <rshift+0x90>
  80d010:	30c00017 	ldw	r3,0(r6)
  80d014:	00800804 	movi	r2,32
  80d018:	31800104 	addi	r6,r6,4
  80d01c:	1155c83a 	sub	r10,r2,r5
  80d020:	1946d83a 	srl	r3,r3,r5
  80d024:	3200092e 	bgeu	r6,r8,80d04c <rshift+0x70>
  80d028:	30800017 	ldw	r2,0(r6)
  80d02c:	1284983a 	sll	r2,r2,r10
  80d030:	10c4b03a 	or	r2,r2,r3
  80d034:	38800015 	stw	r2,0(r7)
  80d038:	30c00017 	ldw	r3,0(r6)
  80d03c:	31800104 	addi	r6,r6,4
  80d040:	39c00104 	addi	r7,r7,4
  80d044:	1946d83a 	srl	r3,r3,r5
  80d048:	323ff736 	bltu	r6,r8,80d028 <rshift+0x4c>
  80d04c:	38c00015 	stw	r3,0(r7)
  80d050:	18000c1e 	bne	r3,zero,80d084 <rshift+0xa8>
  80d054:	3a45c83a 	sub	r2,r7,r9
  80d058:	1005d0ba 	srai	r2,r2,2
  80d05c:	20800415 	stw	r2,16(r4)
  80d060:	1000011e 	bne	r2,zero,80d068 <rshift+0x8c>
  80d064:	20000515 	stw	zero,20(r4)
  80d068:	f800283a 	ret
  80d06c:	323ff92e 	bgeu	r6,r8,80d054 <rshift+0x78>
  80d070:	30800017 	ldw	r2,0(r6)
  80d074:	31800104 	addi	r6,r6,4
  80d078:	38800015 	stw	r2,0(r7)
  80d07c:	39c00104 	addi	r7,r7,4
  80d080:	003ffa06 	br	80d06c <rshift+0x90>
  80d084:	39c00104 	addi	r7,r7,4
  80d088:	003ff206 	br	80d054 <rshift+0x78>

0080d08c <__gethex>:
  80d08c:	defff104 	addi	sp,sp,-60
  80d090:	df000d15 	stw	fp,52(sp)
  80d094:	dcc00815 	stw	r19,32(sp)
  80d098:	dfc00e15 	stw	ra,56(sp)
  80d09c:	ddc00c15 	stw	r23,48(sp)
  80d0a0:	dd800b15 	stw	r22,44(sp)
  80d0a4:	dd400a15 	stw	r21,40(sp)
  80d0a8:	dd000915 	stw	r20,36(sp)
  80d0ac:	dc800715 	stw	r18,28(sp)
  80d0b0:	dc400615 	stw	r17,24(sp)
  80d0b4:	dc000515 	stw	r16,20(sp)
  80d0b8:	04c020b4 	movhi	r19,130
  80d0bc:	9ce18204 	addi	r19,r19,-31224
  80d0c0:	98800c03 	ldbu	r2,48(r19)
  80d0c4:	d9000115 	stw	r4,4(sp)
  80d0c8:	2839883a 	mov	fp,r5
  80d0cc:	d9800215 	stw	r6,8(sp)
  80d0d0:	d9c00315 	stw	r7,12(sp)
  80d0d4:	10007526 	beq	r2,zero,80d2ac <__gethex+0x220>
  80d0d8:	e1800017 	ldw	r6,0(fp)
  80d0dc:	00800c04 	movi	r2,48
  80d0e0:	31000083 	ldbu	r4,2(r6)
  80d0e4:	30c00084 	addi	r3,r6,2
  80d0e8:	2080761e 	bne	r4,r2,80d2c4 <__gethex+0x238>
  80d0ec:	200b883a 	mov	r5,r4
  80d0f0:	3007883a 	mov	r3,r6
  80d0f4:	188000c3 	ldbu	r2,3(r3)
  80d0f8:	18c00044 	addi	r3,r3,1
  80d0fc:	1009883a 	mov	r4,r2
  80d100:	117ffc26 	beq	r2,r5,80d0f4 <__gethex+0x68>
  80d104:	198fc83a 	sub	r7,r3,r6
  80d108:	19400084 	addi	r5,r3,2
  80d10c:	24c5883a 	add	r2,r4,r19
  80d110:	10c00003 	ldbu	r3,0(r2)
  80d114:	18002e26 	beq	r3,zero,80d1d0 <__gethex+0x144>
  80d118:	29000003 	ldbu	r4,0(r5)
  80d11c:	282b883a 	mov	r21,r5
  80d120:	000d883a 	mov	r6,zero
  80d124:	002d883a 	mov	r22,zero
  80d128:	21003fcc 	andi	r4,r4,255
  80d12c:	24c5883a 	add	r2,r4,r19
  80d130:	10c00003 	ldbu	r3,0(r2)
  80d134:	18000526 	beq	r3,zero,80d14c <__gethex+0xc0>
  80d138:	29400044 	addi	r5,r5,1
  80d13c:	29000003 	ldbu	r4,0(r5)
  80d140:	24c5883a 	add	r2,r4,r19
  80d144:	10c00003 	ldbu	r3,0(r2)
  80d148:	183ffb1e 	bne	r3,zero,80d138 <__gethex+0xac>
  80d14c:	00800b84 	movi	r2,46
  80d150:	20805f26 	beq	r4,r2,80d2d0 <__gethex+0x244>
  80d154:	30008226 	beq	r6,zero,80d360 <__gethex+0x2d4>
  80d158:	2985c83a 	sub	r2,r5,r6
  80d15c:	1085883a 	add	r2,r2,r2
  80d160:	1085883a 	add	r2,r2,r2
  80d164:	0085c83a 	sub	r2,zero,r2
  80d168:	d8800015 	stw	r2,0(sp)
  80d16c:	2825883a 	mov	r18,r5
  80d170:	90c00003 	ldbu	r3,0(r18)
  80d174:	00801404 	movi	r2,80
  80d178:	18801e26 	beq	r3,r2,80d1f4 <__gethex+0x168>
  80d17c:	00801c04 	movi	r2,112
  80d180:	18801c26 	beq	r3,r2,80d1f4 <__gethex+0x168>
  80d184:	9023883a 	mov	r17,r18
  80d188:	b005003a 	cmpeq	r2,r22,zero
  80d18c:	e4400015 	stw	r17,0(fp)
  80d190:	10008d1e 	bne	r2,zero,80d3c8 <__gethex+0x33c>
  80d194:	38004326 	beq	r7,zero,80d2a4 <__gethex+0x218>
  80d198:	0025883a 	mov	r18,zero
  80d19c:	9005883a 	mov	r2,r18
  80d1a0:	dfc00e17 	ldw	ra,56(sp)
  80d1a4:	df000d17 	ldw	fp,52(sp)
  80d1a8:	ddc00c17 	ldw	r23,48(sp)
  80d1ac:	dd800b17 	ldw	r22,44(sp)
  80d1b0:	dd400a17 	ldw	r21,40(sp)
  80d1b4:	dd000917 	ldw	r20,36(sp)
  80d1b8:	dcc00817 	ldw	r19,32(sp)
  80d1bc:	dc800717 	ldw	r18,28(sp)
  80d1c0:	dc400617 	ldw	r17,24(sp)
  80d1c4:	dc000517 	ldw	r16,20(sp)
  80d1c8:	dec00f04 	addi	sp,sp,60
  80d1cc:	f800283a 	ret
  80d1d0:	00800b84 	movi	r2,46
  80d1d4:	20805126 	beq	r4,r2,80d31c <__gethex+0x290>
  80d1d8:	2825883a 	mov	r18,r5
  80d1dc:	d8000015 	stw	zero,0(sp)
  80d1e0:	90c00003 	ldbu	r3,0(r18)
  80d1e4:	00801404 	movi	r2,80
  80d1e8:	282b883a 	mov	r21,r5
  80d1ec:	05800044 	movi	r22,1
  80d1f0:	18bfe21e 	bne	r3,r2,80d17c <__gethex+0xf0>
  80d1f4:	90c00043 	ldbu	r3,1(r18)
  80d1f8:	00800ac4 	movi	r2,43
  80d1fc:	91400044 	addi	r5,r18,1
  80d200:	18805126 	beq	r3,r2,80d348 <__gethex+0x2bc>
  80d204:	00800b44 	movi	r2,45
  80d208:	18805326 	beq	r3,r2,80d358 <__gethex+0x2cc>
  80d20c:	002f883a 	mov	r23,zero
  80d210:	1cc5883a 	add	r2,r3,r19
  80d214:	10800003 	ldbu	r2,0(r2)
  80d218:	103fda26 	beq	r2,zero,80d184 <__gethex+0xf8>
  80d21c:	01800644 	movi	r6,25
  80d220:	30bfd816 	blt	r6,r2,80d184 <__gethex+0xf8>
  80d224:	28c00043 	ldbu	r3,1(r5)
  80d228:	113ffc04 	addi	r4,r2,-16
  80d22c:	008020b4 	movhi	r2,130
  80d230:	10a18204 	addi	r2,r2,-31224
  80d234:	1887883a 	add	r3,r3,r2
  80d238:	18800003 	ldbu	r2,0(r3)
  80d23c:	2c400044 	addi	r17,r5,1
  80d240:	10001126 	beq	r2,zero,80d288 <__gethex+0x1fc>
  80d244:	1021883a 	mov	r16,r2
  80d248:	30800f16 	blt	r6,r2,80d288 <__gethex+0x1fc>
  80d24c:	3029883a 	mov	r20,r6
  80d250:	00000106 	br	80d258 <__gethex+0x1cc>
  80d254:	a0800c16 	blt	r20,r2,80d288 <__gethex+0x1fc>
  80d258:	8c400044 	addi	r17,r17,1
  80d25c:	01400284 	movi	r5,10
  80d260:	d9c00415 	stw	r7,16(sp)
  80d264:	080fe8c0 	call	80fe8c <__mulsi3>
  80d268:	88c00003 	ldbu	r3,0(r17)
  80d26c:	1405883a 	add	r2,r2,r16
  80d270:	113ffc04 	addi	r4,r2,-16
  80d274:	1cc7883a 	add	r3,r3,r19
  80d278:	18800003 	ldbu	r2,0(r3)
  80d27c:	d9c00417 	ldw	r7,16(sp)
  80d280:	1021883a 	mov	r16,r2
  80d284:	103ff31e 	bne	r2,zero,80d254 <__gethex+0x1c8>
  80d288:	b805003a 	cmpeq	r2,r23,zero
  80d28c:	1000011e 	bne	r2,zero,80d294 <__gethex+0x208>
  80d290:	0109c83a 	sub	r4,zero,r4
  80d294:	d8800017 	ldw	r2,0(sp)
  80d298:	1105883a 	add	r2,r2,r4
  80d29c:	d8800015 	stw	r2,0(sp)
  80d2a0:	003fb906 	br	80d188 <__gethex+0xfc>
  80d2a4:	04800184 	movi	r18,6
  80d2a8:	003fbc06 	br	80d19c <__gethex+0x110>
  80d2ac:	080cf740 	call	80cf74 <__hexdig_init>
  80d2b0:	e1800017 	ldw	r6,0(fp)
  80d2b4:	00800c04 	movi	r2,48
  80d2b8:	31000083 	ldbu	r4,2(r6)
  80d2bc:	30c00084 	addi	r3,r6,2
  80d2c0:	20bf8a26 	beq	r4,r2,80d0ec <__gethex+0x60>
  80d2c4:	180b883a 	mov	r5,r3
  80d2c8:	000f883a 	mov	r7,zero
  80d2cc:	003f8f06 	br	80d10c <__gethex+0x80>
  80d2d0:	303fa11e 	bne	r6,zero,80d158 <__gethex+0xcc>
  80d2d4:	29400044 	addi	r5,r5,1
  80d2d8:	28800003 	ldbu	r2,0(r5)
  80d2dc:	14c5883a 	add	r2,r2,r19
  80d2e0:	10c00003 	ldbu	r3,0(r2)
  80d2e4:	1800b526 	beq	r3,zero,80d5bc <__gethex+0x530>
  80d2e8:	2809883a 	mov	r4,r5
  80d2ec:	21000044 	addi	r4,r4,1
  80d2f0:	20800003 	ldbu	r2,0(r4)
  80d2f4:	14c5883a 	add	r2,r2,r19
  80d2f8:	10c00003 	ldbu	r3,0(r2)
  80d2fc:	183ffb1e 	bne	r3,zero,80d2ec <__gethex+0x260>
  80d300:	2145c83a 	sub	r2,r4,r5
  80d304:	1085883a 	add	r2,r2,r2
  80d308:	1085883a 	add	r2,r2,r2
  80d30c:	0085c83a 	sub	r2,zero,r2
  80d310:	200b883a 	mov	r5,r4
  80d314:	d8800015 	stw	r2,0(sp)
  80d318:	003f9406 	br	80d16c <__gethex+0xe0>
  80d31c:	29000043 	ldbu	r4,1(r5)
  80d320:	008020b4 	movhi	r2,130
  80d324:	10a18204 	addi	r2,r2,-31224
  80d328:	2c800044 	addi	r18,r5,1
  80d32c:	2085883a 	add	r2,r4,r2
  80d330:	10c00003 	ldbu	r3,0(r2)
  80d334:	18000d1e 	bne	r3,zero,80d36c <__gethex+0x2e0>
  80d338:	282b883a 	mov	r21,r5
  80d33c:	05800044 	movi	r22,1
  80d340:	d8000015 	stw	zero,0(sp)
  80d344:	003f8a06 	br	80d170 <__gethex+0xe4>
  80d348:	002f883a 	mov	r23,zero
  80d34c:	29400044 	addi	r5,r5,1
  80d350:	28c00003 	ldbu	r3,0(r5)
  80d354:	003fae06 	br	80d210 <__gethex+0x184>
  80d358:	05c00044 	movi	r23,1
  80d35c:	003ffb06 	br	80d34c <__gethex+0x2c0>
  80d360:	2825883a 	mov	r18,r5
  80d364:	d8000015 	stw	zero,0(sp)
  80d368:	003f8106 	br	80d170 <__gethex+0xe4>
  80d36c:	00800c04 	movi	r2,48
  80d370:	20800e1e 	bne	r4,r2,80d3ac <__gethex+0x320>
  80d374:	2007883a 	mov	r3,r4
  80d378:	900b883a 	mov	r5,r18
  80d37c:	29400044 	addi	r5,r5,1
  80d380:	29000003 	ldbu	r4,0(r5)
  80d384:	20803fcc 	andi	r2,r4,255
  80d388:	10fffc26 	beq	r2,r3,80d37c <__gethex+0x2f0>
  80d38c:	14c5883a 	add	r2,r2,r19
  80d390:	10c00003 	ldbu	r3,0(r2)
  80d394:	1800071e 	bne	r3,zero,80d3b4 <__gethex+0x328>
  80d398:	01c00044 	movi	r7,1
  80d39c:	900d883a 	mov	r6,r18
  80d3a0:	282b883a 	mov	r21,r5
  80d3a4:	382d883a 	mov	r22,r7
  80d3a8:	003f5f06 	br	80d128 <__gethex+0x9c>
  80d3ac:	91000003 	ldbu	r4,0(r18)
  80d3b0:	900b883a 	mov	r5,r18
  80d3b4:	900d883a 	mov	r6,r18
  80d3b8:	282b883a 	mov	r21,r5
  80d3bc:	01c00044 	movi	r7,1
  80d3c0:	002d883a 	mov	r22,zero
  80d3c4:	003f5806 	br	80d128 <__gethex+0x9c>
  80d3c8:	9545c83a 	sub	r2,r18,r21
  80d3cc:	10bfffc4 	addi	r2,r2,-1
  80d3d0:	00c001c4 	movi	r3,7
  80d3d4:	1880770e 	bge	r3,r2,80d5b4 <__gethex+0x528>
  80d3d8:	000b883a 	mov	r5,zero
  80d3dc:	1005d07a 	srai	r2,r2,1
  80d3e0:	29400044 	addi	r5,r5,1
  80d3e4:	18bffd16 	blt	r3,r2,80d3dc <__gethex+0x350>
  80d3e8:	d9000117 	ldw	r4,4(sp)
  80d3ec:	08092480 	call	809248 <_Balloc>
  80d3f0:	1029883a 	mov	r20,r2
  80d3f4:	15800504 	addi	r22,r2,20
  80d3f8:	ac80562e 	bgeu	r21,r18,80d554 <__gethex+0x4c8>
  80d3fc:	900b883a 	mov	r5,r18
  80d400:	b011883a 	mov	r8,r22
  80d404:	000f883a 	mov	r7,zero
  80d408:	0009883a 	mov	r4,zero
  80d40c:	02400b84 	movi	r9,46
  80d410:	02800804 	movi	r10,32
  80d414:	297fffc4 	addi	r5,r5,-1
  80d418:	28c00003 	ldbu	r3,0(r5)
  80d41c:	1a400826 	beq	r3,r9,80d440 <__gethex+0x3b4>
  80d420:	380d883a 	mov	r6,r7
  80d424:	3a802a26 	beq	r7,r10,80d4d0 <__gethex+0x444>
  80d428:	39c00104 	addi	r7,r7,4
  80d42c:	1cc7883a 	add	r3,r3,r19
  80d430:	18800003 	ldbu	r2,0(r3)
  80d434:	108003cc 	andi	r2,r2,15
  80d438:	1184983a 	sll	r2,r2,r6
  80d43c:	2088b03a 	or	r4,r4,r2
  80d440:	a97ff436 	bltu	r21,r5,80d414 <__gethex+0x388>
  80d444:	40800104 	addi	r2,r8,4
  80d448:	1585c83a 	sub	r2,r2,r22
  80d44c:	1021d0ba 	srai	r16,r2,2
  80d450:	41000015 	stw	r4,0(r8)
  80d454:	a4000415 	stw	r16,16(r20)
  80d458:	0808cf00 	call	808cf0 <__hi0bits>
  80d45c:	d9000217 	ldw	r4,8(sp)
  80d460:	8006917a 	slli	r3,r16,5
  80d464:	24c00017 	ldw	r19,0(r4)
  80d468:	1885c83a 	sub	r2,r3,r2
  80d46c:	98801f16 	blt	r19,r2,80d4ec <__gethex+0x460>
  80d470:	14c00c16 	blt	r2,r19,80d4a4 <__gethex+0x418>
  80d474:	002b883a 	mov	r21,zero
  80d478:	d9000217 	ldw	r4,8(sp)
  80d47c:	d8c00017 	ldw	r3,0(sp)
  80d480:	20800217 	ldw	r2,8(r4)
  80d484:	10c0360e 	bge	r2,r3,80d560 <__gethex+0x4d4>
  80d488:	d9000117 	ldw	r4,4(sp)
  80d48c:	a00b883a 	mov	r5,r20
  80d490:	048028c4 	movi	r18,163
  80d494:	0808cc80 	call	808cc8 <_Bfree>
  80d498:	d9000f17 	ldw	r4,60(sp)
  80d49c:	20000015 	stw	zero,0(r4)
  80d4a0:	003f3e06 	br	80d19c <__gethex+0x110>
  80d4a4:	d9000117 	ldw	r4,4(sp)
  80d4a8:	98a1c83a 	sub	r16,r19,r2
  80d4ac:	a00b883a 	mov	r5,r20
  80d4b0:	800d883a 	mov	r6,r16
  80d4b4:	080960c0 	call	80960c <__lshift>
  80d4b8:	d8c00017 	ldw	r3,0(sp)
  80d4bc:	1029883a 	mov	r20,r2
  80d4c0:	15800504 	addi	r22,r2,20
  80d4c4:	1c07c83a 	sub	r3,r3,r16
  80d4c8:	d8c00015 	stw	r3,0(sp)
  80d4cc:	003fe906 	br	80d474 <__gethex+0x3e8>
  80d4d0:	41000015 	stw	r4,0(r8)
  80d4d4:	28c00003 	ldbu	r3,0(r5)
  80d4d8:	01c00104 	movi	r7,4
  80d4dc:	000d883a 	mov	r6,zero
  80d4e0:	41d1883a 	add	r8,r8,r7
  80d4e4:	0009883a 	mov	r4,zero
  80d4e8:	003fd006 	br	80d42c <__gethex+0x3a0>
  80d4ec:	14e1c83a 	sub	r16,r2,r19
  80d4f0:	a009883a 	mov	r4,r20
  80d4f4:	800b883a 	mov	r5,r16
  80d4f8:	08091c00 	call	8091c0 <__any_on>
  80d4fc:	1000081e 	bne	r2,zero,80d520 <__gethex+0x494>
  80d500:	002b883a 	mov	r21,zero
  80d504:	a009883a 	mov	r4,r20
  80d508:	800b883a 	mov	r5,r16
  80d50c:	080cfdc0 	call	80cfdc <rshift>
  80d510:	d8800017 	ldw	r2,0(sp)
  80d514:	1405883a 	add	r2,r2,r16
  80d518:	d8800015 	stw	r2,0(sp)
  80d51c:	003fd606 	br	80d478 <__gethex+0x3ec>
  80d520:	817fffc4 	addi	r5,r16,-1
  80d524:	2805d17a 	srai	r2,r5,5
  80d528:	290007cc 	andi	r4,r5,31
  80d52c:	01800044 	movi	r6,1
  80d530:	1085883a 	add	r2,r2,r2
  80d534:	1085883a 	add	r2,r2,r2
  80d538:	1585883a 	add	r2,r2,r22
  80d53c:	3108983a 	sll	r4,r6,r4
  80d540:	10c00017 	ldw	r3,0(r2)
  80d544:	20c8703a 	and	r4,r4,r3
  80d548:	20001e1e 	bne	r4,zero,80d5c4 <__gethex+0x538>
  80d54c:	302b883a 	mov	r21,r6
  80d550:	003fec06 	br	80d504 <__gethex+0x478>
  80d554:	b011883a 	mov	r8,r22
  80d558:	0009883a 	mov	r4,zero
  80d55c:	003fb906 	br	80d444 <__gethex+0x3b8>
  80d560:	d8800217 	ldw	r2,8(sp)
  80d564:	d8c00017 	ldw	r3,0(sp)
  80d568:	11000117 	ldw	r4,4(r2)
  80d56c:	19001c16 	blt	r3,r4,80d5e0 <__gethex+0x554>
  80d570:	04800044 	movi	r18,1
  80d574:	a8000926 	beq	r21,zero,80d59c <__gethex+0x510>
  80d578:	d8c00217 	ldw	r3,8(sp)
  80d57c:	00800084 	movi	r2,2
  80d580:	19000317 	ldw	r4,12(r3)
  80d584:	20809826 	beq	r4,r2,80d7e8 <__gethex+0x75c>
  80d588:	008000c4 	movi	r2,3
  80d58c:	20805b26 	beq	r4,r2,80d6fc <__gethex+0x670>
  80d590:	00800044 	movi	r2,1
  80d594:	20804326 	beq	r4,r2,80d6a4 <__gethex+0x618>
  80d598:	94800414 	ori	r18,r18,16
  80d59c:	d9000f17 	ldw	r4,60(sp)
  80d5a0:	d8800017 	ldw	r2,0(sp)
  80d5a4:	d8c00317 	ldw	r3,12(sp)
  80d5a8:	25000015 	stw	r20,0(r4)
  80d5ac:	18800015 	stw	r2,0(r3)
  80d5b0:	003efa06 	br	80d19c <__gethex+0x110>
  80d5b4:	000b883a 	mov	r5,zero
  80d5b8:	003f8b06 	br	80d3e8 <__gethex+0x35c>
  80d5bc:	d8000015 	stw	zero,0(sp)
  80d5c0:	003eea06 	br	80d16c <__gethex+0xe0>
  80d5c4:	3140180e 	bge	r6,r5,80d628 <__gethex+0x59c>
  80d5c8:	a009883a 	mov	r4,r20
  80d5cc:	817fff84 	addi	r5,r16,-2
  80d5d0:	08091c00 	call	8091c0 <__any_on>
  80d5d4:	10001426 	beq	r2,zero,80d628 <__gethex+0x59c>
  80d5d8:	054000c4 	movi	r21,3
  80d5dc:	003fc906 	br	80d504 <__gethex+0x478>
  80d5e0:	d8800017 	ldw	r2,0(sp)
  80d5e4:	20a3c83a 	sub	r17,r4,r2
  80d5e8:	8cc01116 	blt	r17,r19,80d630 <__gethex+0x5a4>
  80d5ec:	d8800217 	ldw	r2,8(sp)
  80d5f0:	10c00317 	ldw	r3,12(r2)
  80d5f4:	00800084 	movi	r2,2
  80d5f8:	18809426 	beq	r3,r2,80d84c <__gethex+0x7c0>
  80d5fc:	008000c4 	movi	r2,3
  80d600:	18808f26 	beq	r3,r2,80d840 <__gethex+0x7b4>
  80d604:	00800044 	movi	r2,1
  80d608:	18807c26 	beq	r3,r2,80d7fc <__gethex+0x770>
  80d60c:	d9000117 	ldw	r4,4(sp)
  80d610:	a00b883a 	mov	r5,r20
  80d614:	04801404 	movi	r18,80
  80d618:	0808cc80 	call	808cc8 <_Bfree>
  80d61c:	d9000f17 	ldw	r4,60(sp)
  80d620:	20000015 	stw	zero,0(r4)
  80d624:	003edd06 	br	80d19c <__gethex+0x110>
  80d628:	05400084 	movi	r21,2
  80d62c:	003fb506 	br	80d504 <__gethex+0x478>
  80d630:	8c3fffc4 	addi	r16,r17,-1
  80d634:	a8001526 	beq	r21,zero,80d68c <__gethex+0x600>
  80d638:	05400044 	movi	r21,1
  80d63c:	8005d17a 	srai	r2,r16,5
  80d640:	814007cc 	andi	r5,r16,31
  80d644:	00c00044 	movi	r3,1
  80d648:	1085883a 	add	r2,r2,r2
  80d64c:	1085883a 	add	r2,r2,r2
  80d650:	1585883a 	add	r2,r2,r22
  80d654:	1946983a 	sll	r3,r3,r5
  80d658:	11000017 	ldw	r4,0(r2)
  80d65c:	1906703a 	and	r3,r3,r4
  80d660:	18000126 	beq	r3,zero,80d668 <__gethex+0x5dc>
  80d664:	ad400094 	ori	r21,r21,2
  80d668:	880b883a 	mov	r5,r17
  80d66c:	a009883a 	mov	r4,r20
  80d670:	080cfdc0 	call	80cfdc <rshift>
  80d674:	d8800217 	ldw	r2,8(sp)
  80d678:	9c67c83a 	sub	r19,r19,r17
  80d67c:	04800084 	movi	r18,2
  80d680:	10800117 	ldw	r2,4(r2)
  80d684:	d8800015 	stw	r2,0(sp)
  80d688:	003fba06 	br	80d574 <__gethex+0x4e8>
  80d68c:	043feb0e 	bge	zero,r16,80d63c <__gethex+0x5b0>
  80d690:	a009883a 	mov	r4,r20
  80d694:	800b883a 	mov	r5,r16
  80d698:	08091c00 	call	8091c0 <__any_on>
  80d69c:	102b883a 	mov	r21,r2
  80d6a0:	003fe606 	br	80d63c <__gethex+0x5b0>
  80d6a4:	a880008c 	andi	r2,r21,2
  80d6a8:	103fbb26 	beq	r2,zero,80d598 <__gethex+0x50c>
  80d6ac:	b0800017 	ldw	r2,0(r22)
  80d6b0:	a884b03a 	or	r2,r21,r2
  80d6b4:	1104703a 	and	r2,r2,r4
  80d6b8:	103fb726 	beq	r2,zero,80d598 <__gethex+0x50c>
  80d6bc:	a4000417 	ldw	r16,16(r20)
  80d6c0:	b007883a 	mov	r3,r22
  80d6c4:	017fffc4 	movi	r5,-1
  80d6c8:	8405883a 	add	r2,r16,r16
  80d6cc:	10ab883a 	add	r21,r2,r2
  80d6d0:	802f883a 	mov	r23,r16
  80d6d4:	b549883a 	add	r4,r22,r21
  80d6d8:	00000306 	br	80d6e8 <__gethex+0x65c>
  80d6dc:	18000015 	stw	zero,0(r3)
  80d6e0:	18c00104 	addi	r3,r3,4
  80d6e4:	1900082e 	bgeu	r3,r4,80d708 <__gethex+0x67c>
  80d6e8:	18800017 	ldw	r2,0(r3)
  80d6ec:	117ffb26 	beq	r2,r5,80d6dc <__gethex+0x650>
  80d6f0:	10800044 	addi	r2,r2,1
  80d6f4:	18800015 	stw	r2,0(r3)
  80d6f8:	00001e06 	br	80d774 <__gethex+0x6e8>
  80d6fc:	d8801017 	ldw	r2,64(sp)
  80d700:	103fa526 	beq	r2,zero,80d598 <__gethex+0x50c>
  80d704:	003fed06 	br	80d6bc <__gethex+0x630>
  80d708:	a0800217 	ldw	r2,8(r20)
  80d70c:	80801216 	blt	r16,r2,80d758 <__gethex+0x6cc>
  80d710:	a1400117 	ldw	r5,4(r20)
  80d714:	d9000117 	ldw	r4,4(sp)
  80d718:	29400044 	addi	r5,r5,1
  80d71c:	08092480 	call	809248 <_Balloc>
  80d720:	a1800417 	ldw	r6,16(r20)
  80d724:	a1400304 	addi	r5,r20,12
  80d728:	11000304 	addi	r4,r2,12
  80d72c:	318d883a 	add	r6,r6,r6
  80d730:	318d883a 	add	r6,r6,r6
  80d734:	31800204 	addi	r6,r6,8
  80d738:	1023883a 	mov	r17,r2
  80d73c:	0808b480 	call	808b48 <memcpy>
  80d740:	d9000117 	ldw	r4,4(sp)
  80d744:	a00b883a 	mov	r5,r20
  80d748:	8d800504 	addi	r22,r17,20
  80d74c:	0808cc80 	call	808cc8 <_Bfree>
  80d750:	8c000417 	ldw	r16,16(r17)
  80d754:	8829883a 	mov	r20,r17
  80d758:	8405883a 	add	r2,r16,r16
  80d75c:	1085883a 	add	r2,r2,r2
  80d760:	1505883a 	add	r2,r2,r20
  80d764:	84000044 	addi	r16,r16,1
  80d768:	00c00044 	movi	r3,1
  80d76c:	10c00515 	stw	r3,20(r2)
  80d770:	a4000415 	stw	r16,16(r20)
  80d774:	00800084 	movi	r2,2
  80d778:	90801526 	beq	r18,r2,80d7d0 <__gethex+0x744>
  80d77c:	bc000a16 	blt	r23,r16,80d7a8 <__gethex+0x71c>
  80d780:	9c0007cc 	andi	r16,r19,31
  80d784:	8000021e 	bne	r16,zero,80d790 <__gethex+0x704>
  80d788:	94800814 	ori	r18,r18,32
  80d78c:	003f8306 	br	80d59c <__gethex+0x510>
  80d790:	b545883a 	add	r2,r22,r21
  80d794:	113fff17 	ldw	r4,-4(r2)
  80d798:	0808cf00 	call	808cf0 <__hi0bits>
  80d79c:	00c00804 	movi	r3,32
  80d7a0:	1c07c83a 	sub	r3,r3,r16
  80d7a4:	10fff80e 	bge	r2,r3,80d788 <__gethex+0x6fc>
  80d7a8:	a009883a 	mov	r4,r20
  80d7ac:	01400044 	movi	r5,1
  80d7b0:	080cfdc0 	call	80cfdc <rshift>
  80d7b4:	d9000217 	ldw	r4,8(sp)
  80d7b8:	d8c00017 	ldw	r3,0(sp)
  80d7bc:	20800217 	ldw	r2,8(r4)
  80d7c0:	18c00044 	addi	r3,r3,1
  80d7c4:	d8c00015 	stw	r3,0(sp)
  80d7c8:	10ff2f16 	blt	r2,r3,80d488 <__gethex+0x3fc>
  80d7cc:	003fee06 	br	80d788 <__gethex+0x6fc>
  80d7d0:	d8c00217 	ldw	r3,8(sp)
  80d7d4:	18800017 	ldw	r2,0(r3)
  80d7d8:	10bfffc4 	addi	r2,r2,-1
  80d7dc:	98801e26 	beq	r19,r2,80d858 <__gethex+0x7cc>
  80d7e0:	04800884 	movi	r18,34
  80d7e4:	003f6d06 	br	80d59c <__gethex+0x510>
  80d7e8:	d9001017 	ldw	r4,64(sp)
  80d7ec:	00800044 	movi	r2,1
  80d7f0:	1105c83a 	sub	r2,r2,r4
  80d7f4:	103f6826 	beq	r2,zero,80d598 <__gethex+0x50c>
  80d7f8:	003fb006 	br	80d6bc <__gethex+0x630>
  80d7fc:	9c7f831e 	bne	r19,r17,80d60c <__gethex+0x580>
  80d800:	1cc0060e 	bge	r3,r19,80d81c <__gethex+0x790>
  80d804:	98cbc83a 	sub	r5,r19,r3
  80d808:	a009883a 	mov	r4,r20
  80d80c:	08091c00 	call	8091c0 <__any_on>
  80d810:	103f7e26 	beq	r2,zero,80d60c <__gethex+0x580>
  80d814:	d8c00217 	ldw	r3,8(sp)
  80d818:	19000117 	ldw	r4,4(r3)
  80d81c:	d8800317 	ldw	r2,12(sp)
  80d820:	d8c00f17 	ldw	r3,60(sp)
  80d824:	04000044 	movi	r16,1
  80d828:	11000015 	stw	r4,0(r2)
  80d82c:	04801884 	movi	r18,98
  80d830:	b4000015 	stw	r16,0(r22)
  80d834:	1d000015 	stw	r20,0(r3)
  80d838:	a4000415 	stw	r16,16(r20)
  80d83c:	003e5706 	br	80d19c <__gethex+0x110>
  80d840:	d8801017 	ldw	r2,64(sp)
  80d844:	103f7126 	beq	r2,zero,80d60c <__gethex+0x580>
  80d848:	003ff406 	br	80d81c <__gethex+0x790>
  80d84c:	d8c01017 	ldw	r3,64(sp)
  80d850:	183ff226 	beq	r3,zero,80d81c <__gethex+0x790>
  80d854:	003f6d06 	br	80d60c <__gethex+0x580>
  80d858:	9805d17a 	srai	r2,r19,5
  80d85c:	994007cc 	andi	r5,r19,31
  80d860:	00c00044 	movi	r3,1
  80d864:	1085883a 	add	r2,r2,r2
  80d868:	1085883a 	add	r2,r2,r2
  80d86c:	1585883a 	add	r2,r2,r22
  80d870:	1946983a 	sll	r3,r3,r5
  80d874:	11000017 	ldw	r4,0(r2)
  80d878:	1906703a 	and	r3,r3,r4
  80d87c:	183fd826 	beq	r3,zero,80d7e0 <__gethex+0x754>
  80d880:	04800844 	movi	r18,33
  80d884:	003f4506 	br	80d59c <__gethex+0x510>

0080d888 <L_shift>:
  80d888:	00800204 	movi	r2,8
  80d88c:	1185c83a 	sub	r2,r2,r6
  80d890:	1085883a 	add	r2,r2,r2
  80d894:	21c00017 	ldw	r7,0(r4)
  80d898:	1093883a 	add	r9,r2,r2
  80d89c:	00800804 	movi	r2,32
  80d8a0:	200d883a 	mov	r6,r4
  80d8a4:	1251c83a 	sub	r8,r2,r9
  80d8a8:	31800104 	addi	r6,r6,4
  80d8ac:	3805883a 	mov	r2,r7
  80d8b0:	31c00017 	ldw	r7,0(r6)
  80d8b4:	3a08983a 	sll	r4,r7,r8
  80d8b8:	3a46d83a 	srl	r3,r7,r9
  80d8bc:	1104b03a 	or	r2,r2,r4
  80d8c0:	180f883a 	mov	r7,r3
  80d8c4:	30bfff15 	stw	r2,-4(r6)
  80d8c8:	30c00015 	stw	r3,0(r6)
  80d8cc:	317ff636 	bltu	r6,r5,80d8a8 <L_shift+0x20>
  80d8d0:	f800283a 	ret

0080d8d4 <__hexnan>:
  80d8d4:	defff404 	addi	sp,sp,-48
  80d8d8:	dd800815 	stw	r22,32(sp)
  80d8dc:	058020b4 	movhi	r22,130
  80d8e0:	b5a18204 	addi	r22,r22,-31224
  80d8e4:	b0800c03 	ldbu	r2,48(r22)
  80d8e8:	dcc00515 	stw	r19,20(sp)
  80d8ec:	dc000215 	stw	r16,8(sp)
  80d8f0:	dfc00b15 	stw	ra,44(sp)
  80d8f4:	df000a15 	stw	fp,40(sp)
  80d8f8:	ddc00915 	stw	r23,36(sp)
  80d8fc:	dd400715 	stw	r21,28(sp)
  80d900:	dd000615 	stw	r20,24(sp)
  80d904:	dc800415 	stw	r18,16(sp)
  80d908:	dc400315 	stw	r17,12(sp)
  80d90c:	d9000115 	stw	r4,4(sp)
  80d910:	2821883a 	mov	r16,r5
  80d914:	3027883a 	mov	r19,r6
  80d918:	10007426 	beq	r2,zero,80daec <__hexnan+0x218>
  80d91c:	80c00017 	ldw	r3,0(r16)
  80d920:	1805d17a 	srai	r2,r3,5
  80d924:	18c007cc 	andi	r3,r3,31
  80d928:	1839003a 	cmpeq	fp,r3,zero
  80d92c:	1085883a 	add	r2,r2,r2
  80d930:	1085883a 	add	r2,r2,r2
  80d934:	d8c00015 	stw	r3,0(sp)
  80d938:	14c5883a 	add	r2,r2,r19
  80d93c:	e000011e 	bne	fp,zero,80d944 <__hexnan+0x70>
  80d940:	10800104 	addi	r2,r2,4
  80d944:	d8c00117 	ldw	r3,4(sp)
  80d948:	153fff04 	addi	r20,r2,-4
  80d94c:	a021883a 	mov	r16,r20
  80d950:	1c400017 	ldw	r17,0(r3)
  80d954:	a02b883a 	mov	r21,r20
  80d958:	0025883a 	mov	r18,zero
  80d95c:	002f883a 	mov	r23,zero
  80d960:	000d883a 	mov	r6,zero
  80d964:	103fff15 	stw	zero,-4(r2)
  80d968:	8c400044 	addi	r17,r17,1
  80d96c:	89000003 	ldbu	r4,0(r17)
  80d970:	20000e26 	beq	r4,zero,80d9ac <__hexnan+0xd8>
  80d974:	2585883a 	add	r2,r4,r22
  80d978:	10c00003 	ldbu	r3,0(r2)
  80d97c:	18002e1e 	bne	r3,zero,80da38 <__hexnan+0x164>
  80d980:	00800804 	movi	r2,32
  80d984:	11005536 	bltu	r2,r4,80dadc <__hexnan+0x208>
  80d988:	bcbff70e 	bge	r23,r18,80d968 <__hexnan+0x94>
  80d98c:	8540022e 	bgeu	r16,r21,80d998 <__hexnan+0xc4>
  80d990:	008001c4 	movi	r2,7
  80d994:	11803c0e 	bge	r2,r6,80da88 <__hexnan+0x1b4>
  80d998:	9c003536 	bltu	r19,r16,80da70 <__hexnan+0x19c>
  80d99c:	8c400044 	addi	r17,r17,1
  80d9a0:	89000003 	ldbu	r4,0(r17)
  80d9a4:	01800204 	movi	r6,8
  80d9a8:	203ff21e 	bne	r4,zero,80d974 <__hexnan+0xa0>
  80d9ac:	90004d26 	beq	r18,zero,80dae4 <__hexnan+0x210>
  80d9b0:	85404336 	bltu	r16,r21,80dac0 <__hexnan+0x1ec>
  80d9b4:	9c00382e 	bgeu	r19,r16,80da98 <__hexnan+0x1c4>
  80d9b8:	9807883a 	mov	r3,r19
  80d9bc:	80800017 	ldw	r2,0(r16)
  80d9c0:	84000104 	addi	r16,r16,4
  80d9c4:	18800015 	stw	r2,0(r3)
  80d9c8:	18c00104 	addi	r3,r3,4
  80d9cc:	a43ffb2e 	bgeu	r20,r16,80d9bc <__hexnan+0xe8>
  80d9d0:	18000015 	stw	zero,0(r3)
  80d9d4:	18c00104 	addi	r3,r3,4
  80d9d8:	a0fffd2e 	bgeu	r20,r3,80d9d0 <__hexnan+0xfc>
  80d9dc:	a0800017 	ldw	r2,0(r20)
  80d9e0:	1000071e 	bne	r2,zero,80da00 <__hexnan+0x12c>
  80d9e4:	9d004326 	beq	r19,r20,80daf4 <__hexnan+0x220>
  80d9e8:	a007883a 	mov	r3,r20
  80d9ec:	00000106 	br	80d9f4 <__hexnan+0x120>
  80d9f0:	98c04026 	beq	r19,r3,80daf4 <__hexnan+0x220>
  80d9f4:	18ffff04 	addi	r3,r3,-4
  80d9f8:	18800017 	ldw	r2,0(r3)
  80d9fc:	103ffc26 	beq	r2,zero,80d9f0 <__hexnan+0x11c>
  80da00:	00c00144 	movi	r3,5
  80da04:	1805883a 	mov	r2,r3
  80da08:	dfc00b17 	ldw	ra,44(sp)
  80da0c:	df000a17 	ldw	fp,40(sp)
  80da10:	ddc00917 	ldw	r23,36(sp)
  80da14:	dd800817 	ldw	r22,32(sp)
  80da18:	dd400717 	ldw	r21,28(sp)
  80da1c:	dd000617 	ldw	r20,24(sp)
  80da20:	dcc00517 	ldw	r19,20(sp)
  80da24:	dc800417 	ldw	r18,16(sp)
  80da28:	dc400317 	ldw	r17,12(sp)
  80da2c:	dc000217 	ldw	r16,8(sp)
  80da30:	dec00c04 	addi	sp,sp,48
  80da34:	f800283a 	ret
  80da38:	31800044 	addi	r6,r6,1
  80da3c:	00800204 	movi	r2,8
  80da40:	94800044 	addi	r18,r18,1
  80da44:	1180040e 	bge	r2,r6,80da58 <__hexnan+0x184>
  80da48:	9c3fc72e 	bgeu	r19,r16,80d968 <__hexnan+0x94>
  80da4c:	843fff04 	addi	r16,r16,-4
  80da50:	80000015 	stw	zero,0(r16)
  80da54:	01800044 	movi	r6,1
  80da58:	80800017 	ldw	r2,0(r16)
  80da5c:	18c003cc 	andi	r3,r3,15
  80da60:	1004913a 	slli	r2,r2,4
  80da64:	10c4b03a 	or	r2,r2,r3
  80da68:	80800015 	stw	r2,0(r16)
  80da6c:	003fbe06 	br	80d968 <__hexnan+0x94>
  80da70:	843fff04 	addi	r16,r16,-4
  80da74:	802b883a 	mov	r21,r16
  80da78:	902f883a 	mov	r23,r18
  80da7c:	000d883a 	mov	r6,zero
  80da80:	80000015 	stw	zero,0(r16)
  80da84:	003fb806 	br	80d968 <__hexnan+0x94>
  80da88:	8009883a 	mov	r4,r16
  80da8c:	a80b883a 	mov	r5,r21
  80da90:	080d8880 	call	80d888 <L_shift>
  80da94:	003fc006 	br	80d998 <__hexnan+0xc4>
  80da98:	e03fd01e 	bne	fp,zero,80d9dc <__hexnan+0x108>
  80da9c:	d8c00017 	ldw	r3,0(sp)
  80daa0:	00800804 	movi	r2,32
  80daa4:	10c5c83a 	sub	r2,r2,r3
  80daa8:	00ffffc4 	movi	r3,-1
  80daac:	1886d83a 	srl	r3,r3,r2
  80dab0:	a0800017 	ldw	r2,0(r20)
  80dab4:	10c4703a 	and	r2,r2,r3
  80dab8:	a0800015 	stw	r2,0(r20)
  80dabc:	003fc806 	br	80d9e0 <__hexnan+0x10c>
  80dac0:	008001c4 	movi	r2,7
  80dac4:	11bfbb16 	blt	r2,r6,80d9b4 <__hexnan+0xe0>
  80dac8:	a80b883a 	mov	r5,r21
  80dacc:	8009883a 	mov	r4,r16
  80dad0:	080d8880 	call	80d888 <L_shift>
  80dad4:	9c3ff02e 	bgeu	r19,r16,80da98 <__hexnan+0x1c4>
  80dad8:	003fb706 	br	80d9b8 <__hexnan+0xe4>
  80dadc:	00800a44 	movi	r2,41
  80dae0:	20800826 	beq	r4,r2,80db04 <__hexnan+0x230>
  80dae4:	00c00104 	movi	r3,4
  80dae8:	003fc606 	br	80da04 <__hexnan+0x130>
  80daec:	080cf740 	call	80cf74 <__hexdig_init>
  80daf0:	003f8a06 	br	80d91c <__hexnan+0x48>
  80daf4:	00800044 	movi	r2,1
  80daf8:	00c00144 	movi	r3,5
  80dafc:	98800015 	stw	r2,0(r19)
  80db00:	003fc006 	br	80da04 <__hexnan+0x130>
  80db04:	903ff726 	beq	r18,zero,80dae4 <__hexnan+0x210>
  80db08:	d8c00117 	ldw	r3,4(sp)
  80db0c:	88800044 	addi	r2,r17,1
  80db10:	18800015 	stw	r2,0(r3)
  80db14:	857fa72e 	bgeu	r16,r21,80d9b4 <__hexnan+0xe0>
  80db18:	003fe906 	br	80dac0 <__hexnan+0x1ec>

0080db1c <__muldi3>:
  80db1c:	defff204 	addi	sp,sp,-56
  80db20:	df000c15 	stw	fp,48(sp)
  80db24:	3038d43a 	srli	fp,r6,16
  80db28:	dd000815 	stw	r20,32(sp)
  80db2c:	dc400515 	stw	r17,20(sp)
  80db30:	2028d43a 	srli	r20,r4,16
  80db34:	247fffcc 	andi	r17,r4,65535
  80db38:	dc000415 	stw	r16,16(sp)
  80db3c:	343fffcc 	andi	r16,r6,65535
  80db40:	dcc00715 	stw	r19,28(sp)
  80db44:	d9000015 	stw	r4,0(sp)
  80db48:	2827883a 	mov	r19,r5
  80db4c:	8809883a 	mov	r4,r17
  80db50:	d9400115 	stw	r5,4(sp)
  80db54:	800b883a 	mov	r5,r16
  80db58:	d9800215 	stw	r6,8(sp)
  80db5c:	dfc00d15 	stw	ra,52(sp)
  80db60:	d9c00315 	stw	r7,12(sp)
  80db64:	dd800a15 	stw	r22,40(sp)
  80db68:	dd400915 	stw	r21,36(sp)
  80db6c:	302d883a 	mov	r22,r6
  80db70:	ddc00b15 	stw	r23,44(sp)
  80db74:	dc800615 	stw	r18,24(sp)
  80db78:	080fe8c0 	call	80fe8c <__mulsi3>
  80db7c:	8809883a 	mov	r4,r17
  80db80:	e00b883a 	mov	r5,fp
  80db84:	102b883a 	mov	r21,r2
  80db88:	080fe8c0 	call	80fe8c <__mulsi3>
  80db8c:	800b883a 	mov	r5,r16
  80db90:	a009883a 	mov	r4,r20
  80db94:	1023883a 	mov	r17,r2
  80db98:	080fe8c0 	call	80fe8c <__mulsi3>
  80db9c:	a009883a 	mov	r4,r20
  80dba0:	e00b883a 	mov	r5,fp
  80dba4:	1021883a 	mov	r16,r2
  80dba8:	080fe8c0 	call	80fe8c <__mulsi3>
  80dbac:	a8ffffcc 	andi	r3,r21,65535
  80dbb0:	a82ad43a 	srli	r21,r21,16
  80dbb4:	8c23883a 	add	r17,r17,r16
  80dbb8:	1011883a 	mov	r8,r2
  80dbbc:	ac6b883a 	add	r21,r21,r17
  80dbc0:	a804943a 	slli	r2,r21,16
  80dbc4:	b009883a 	mov	r4,r22
  80dbc8:	980b883a 	mov	r5,r19
  80dbcc:	10c7883a 	add	r3,r2,r3
  80dbd0:	a812d43a 	srli	r9,r21,16
  80dbd4:	180d883a 	mov	r6,r3
  80dbd8:	ac00022e 	bgeu	r21,r16,80dbe4 <__muldi3+0xc8>
  80dbdc:	00800074 	movhi	r2,1
  80dbe0:	4091883a 	add	r8,r8,r2
  80dbe4:	4267883a 	add	r19,r8,r9
  80dbe8:	302d883a 	mov	r22,r6
  80dbec:	080fe8c0 	call	80fe8c <__mulsi3>
  80dbf0:	d9400317 	ldw	r5,12(sp)
  80dbf4:	d9000017 	ldw	r4,0(sp)
  80dbf8:	1023883a 	mov	r17,r2
  80dbfc:	080fe8c0 	call	80fe8c <__mulsi3>
  80dc00:	14cb883a 	add	r5,r2,r19
  80dc04:	894b883a 	add	r5,r17,r5
  80dc08:	b005883a 	mov	r2,r22
  80dc0c:	2807883a 	mov	r3,r5
  80dc10:	dfc00d17 	ldw	ra,52(sp)
  80dc14:	df000c17 	ldw	fp,48(sp)
  80dc18:	ddc00b17 	ldw	r23,44(sp)
  80dc1c:	dd800a17 	ldw	r22,40(sp)
  80dc20:	dd400917 	ldw	r21,36(sp)
  80dc24:	dd000817 	ldw	r20,32(sp)
  80dc28:	dcc00717 	ldw	r19,28(sp)
  80dc2c:	dc800617 	ldw	r18,24(sp)
  80dc30:	dc400517 	ldw	r17,20(sp)
  80dc34:	dc000417 	ldw	r16,16(sp)
  80dc38:	dec00e04 	addi	sp,sp,56
  80dc3c:	f800283a 	ret

0080dc40 <__fixunsdfsi>:
  80dc40:	defffb04 	addi	sp,sp,-20
  80dc44:	dc400115 	stw	r17,4(sp)
  80dc48:	dc000015 	stw	r16,0(sp)
  80dc4c:	04507834 	movhi	r17,16864
  80dc50:	0021883a 	mov	r16,zero
  80dc54:	800d883a 	mov	r6,r16
  80dc58:	880f883a 	mov	r7,r17
  80dc5c:	dcc00315 	stw	r19,12(sp)
  80dc60:	dc800215 	stw	r18,8(sp)
  80dc64:	2827883a 	mov	r19,r5
  80dc68:	2025883a 	mov	r18,r4
  80dc6c:	dfc00415 	stw	ra,16(sp)
  80dc70:	080f7d00 	call	80f7d0 <__gedf2>
  80dc74:	000d883a 	mov	r6,zero
  80dc78:	880f883a 	mov	r7,r17
  80dc7c:	980b883a 	mov	r5,r19
  80dc80:	9009883a 	mov	r4,r18
  80dc84:	10000d16 	blt	r2,zero,80dcbc <__fixunsdfsi+0x7c>
  80dc88:	080ef280 	call	80ef28 <__subdf3>
  80dc8c:	180b883a 	mov	r5,r3
  80dc90:	1009883a 	mov	r4,r2
  80dc94:	080fa600 	call	80fa60 <__fixdfsi>
  80dc98:	00e00034 	movhi	r3,32768
  80dc9c:	10c5883a 	add	r2,r2,r3
  80dca0:	dfc00417 	ldw	ra,16(sp)
  80dca4:	dcc00317 	ldw	r19,12(sp)
  80dca8:	dc800217 	ldw	r18,8(sp)
  80dcac:	dc400117 	ldw	r17,4(sp)
  80dcb0:	dc000017 	ldw	r16,0(sp)
  80dcb4:	dec00504 	addi	sp,sp,20
  80dcb8:	f800283a 	ret
  80dcbc:	980b883a 	mov	r5,r19
  80dcc0:	9009883a 	mov	r4,r18
  80dcc4:	080fa600 	call	80fa60 <__fixdfsi>
  80dcc8:	dfc00417 	ldw	ra,16(sp)
  80dccc:	dcc00317 	ldw	r19,12(sp)
  80dcd0:	dc800217 	ldw	r18,8(sp)
  80dcd4:	dc400117 	ldw	r17,4(sp)
  80dcd8:	dc000017 	ldw	r16,0(sp)
  80dcdc:	dec00504 	addi	sp,sp,20
  80dce0:	f800283a 	ret

0080dce4 <__udivdi3>:
  80dce4:	defff104 	addi	sp,sp,-60
  80dce8:	0015883a 	mov	r10,zero
  80dcec:	2005883a 	mov	r2,r4
  80dcf0:	3011883a 	mov	r8,r6
  80dcf4:	df000d15 	stw	fp,52(sp)
  80dcf8:	dd400a15 	stw	r21,40(sp)
  80dcfc:	dcc00815 	stw	r19,32(sp)
  80dd00:	dfc00e15 	stw	ra,56(sp)
  80dd04:	ddc00c15 	stw	r23,48(sp)
  80dd08:	dd800b15 	stw	r22,44(sp)
  80dd0c:	dd000915 	stw	r20,36(sp)
  80dd10:	dc800715 	stw	r18,28(sp)
  80dd14:	dc400615 	stw	r17,24(sp)
  80dd18:	dc000515 	stw	r16,20(sp)
  80dd1c:	da800315 	stw	r10,12(sp)
  80dd20:	4027883a 	mov	r19,r8
  80dd24:	1039883a 	mov	fp,r2
  80dd28:	282b883a 	mov	r21,r5
  80dd2c:	da800415 	stw	r10,16(sp)
  80dd30:	3800401e 	bne	r7,zero,80de34 <__udivdi3+0x150>
  80dd34:	2a006536 	bltu	r5,r8,80decc <__udivdi3+0x1e8>
  80dd38:	4000b526 	beq	r8,zero,80e010 <__udivdi3+0x32c>
  80dd3c:	00bfffd4 	movui	r2,65535
  80dd40:	14c0ad36 	bltu	r2,r19,80dff8 <__udivdi3+0x314>
  80dd44:	00803fc4 	movi	r2,255
  80dd48:	14c15e36 	bltu	r2,r19,80e2c4 <__udivdi3+0x5e0>
  80dd4c:	000b883a 	mov	r5,zero
  80dd50:	0005883a 	mov	r2,zero
  80dd54:	9884d83a 	srl	r2,r19,r2
  80dd58:	01002074 	movhi	r4,129
  80dd5c:	21133e04 	addi	r4,r4,19704
  80dd60:	01800804 	movi	r6,32
  80dd64:	1105883a 	add	r2,r2,r4
  80dd68:	10c00003 	ldbu	r3,0(r2)
  80dd6c:	28c7883a 	add	r3,r5,r3
  80dd70:	30e9c83a 	sub	r20,r6,r3
  80dd74:	a0010a1e 	bne	r20,zero,80e1a0 <__udivdi3+0x4bc>
  80dd78:	982ed43a 	srli	r23,r19,16
  80dd7c:	acebc83a 	sub	r21,r21,r19
  80dd80:	9dbfffcc 	andi	r22,r19,65535
  80dd84:	05000044 	movi	r20,1
  80dd88:	a809883a 	mov	r4,r21
  80dd8c:	b80b883a 	mov	r5,r23
  80dd90:	080fe7c0 	call	80fe7c <__udivsi3>
  80dd94:	100b883a 	mov	r5,r2
  80dd98:	b009883a 	mov	r4,r22
  80dd9c:	1021883a 	mov	r16,r2
  80dda0:	080fe8c0 	call	80fe8c <__mulsi3>
  80dda4:	a809883a 	mov	r4,r21
  80dda8:	b80b883a 	mov	r5,r23
  80ddac:	1023883a 	mov	r17,r2
  80ddb0:	080fe840 	call	80fe84 <__umodsi3>
  80ddb4:	1004943a 	slli	r2,r2,16
  80ddb8:	e006d43a 	srli	r3,fp,16
  80ddbc:	10c4b03a 	or	r2,r2,r3
  80ddc0:	1440042e 	bgeu	r2,r17,80ddd4 <__udivdi3+0xf0>
  80ddc4:	14c5883a 	add	r2,r2,r19
  80ddc8:	843fffc4 	addi	r16,r16,-1
  80ddcc:	14c00136 	bltu	r2,r19,80ddd4 <__udivdi3+0xf0>
  80ddd0:	14415c36 	bltu	r2,r17,80e344 <__udivdi3+0x660>
  80ddd4:	1463c83a 	sub	r17,r2,r17
  80ddd8:	8809883a 	mov	r4,r17
  80dddc:	b80b883a 	mov	r5,r23
  80dde0:	080fe7c0 	call	80fe7c <__udivsi3>
  80dde4:	100b883a 	mov	r5,r2
  80dde8:	b009883a 	mov	r4,r22
  80ddec:	102b883a 	mov	r21,r2
  80ddf0:	080fe8c0 	call	80fe8c <__mulsi3>
  80ddf4:	8809883a 	mov	r4,r17
  80ddf8:	b80b883a 	mov	r5,r23
  80ddfc:	1025883a 	mov	r18,r2
  80de00:	080fe840 	call	80fe84 <__umodsi3>
  80de04:	1004943a 	slli	r2,r2,16
  80de08:	e0ffffcc 	andi	r3,fp,65535
  80de0c:	10c4b03a 	or	r2,r2,r3
  80de10:	1480042e 	bgeu	r2,r18,80de24 <__udivdi3+0x140>
  80de14:	9885883a 	add	r2,r19,r2
  80de18:	ad7fffc4 	addi	r21,r21,-1
  80de1c:	14c00136 	bltu	r2,r19,80de24 <__udivdi3+0x140>
  80de20:	14813c36 	bltu	r2,r18,80e314 <__udivdi3+0x630>
  80de24:	8004943a 	slli	r2,r16,16
  80de28:	a009883a 	mov	r4,r20
  80de2c:	a884b03a 	or	r2,r21,r2
  80de30:	00001506 	br	80de88 <__udivdi3+0x1a4>
  80de34:	380d883a 	mov	r6,r7
  80de38:	29c06c36 	bltu	r5,r7,80dfec <__udivdi3+0x308>
  80de3c:	00bfffd4 	movui	r2,65535
  80de40:	11c06436 	bltu	r2,r7,80dfd4 <__udivdi3+0x2f0>
  80de44:	00803fc4 	movi	r2,255
  80de48:	11c11836 	bltu	r2,r7,80e2ac <__udivdi3+0x5c8>
  80de4c:	000b883a 	mov	r5,zero
  80de50:	0005883a 	mov	r2,zero
  80de54:	3084d83a 	srl	r2,r6,r2
  80de58:	01002074 	movhi	r4,129
  80de5c:	21133e04 	addi	r4,r4,19704
  80de60:	01c00804 	movi	r7,32
  80de64:	1105883a 	add	r2,r2,r4
  80de68:	10c00003 	ldbu	r3,0(r2)
  80de6c:	28c7883a 	add	r3,r5,r3
  80de70:	38edc83a 	sub	r22,r7,r3
  80de74:	b000731e 	bne	r22,zero,80e044 <__udivdi3+0x360>
  80de78:	35400136 	bltu	r6,r21,80de80 <__udivdi3+0x19c>
  80de7c:	e4c05b36 	bltu	fp,r19,80dfec <__udivdi3+0x308>
  80de80:	00800044 	movi	r2,1
  80de84:	0009883a 	mov	r4,zero
  80de88:	d8800315 	stw	r2,12(sp)
  80de8c:	d9400317 	ldw	r5,12(sp)
  80de90:	d9000415 	stw	r4,16(sp)
  80de94:	2007883a 	mov	r3,r4
  80de98:	2805883a 	mov	r2,r5
  80de9c:	dfc00e17 	ldw	ra,56(sp)
  80dea0:	df000d17 	ldw	fp,52(sp)
  80dea4:	ddc00c17 	ldw	r23,48(sp)
  80dea8:	dd800b17 	ldw	r22,44(sp)
  80deac:	dd400a17 	ldw	r21,40(sp)
  80deb0:	dd000917 	ldw	r20,36(sp)
  80deb4:	dcc00817 	ldw	r19,32(sp)
  80deb8:	dc800717 	ldw	r18,28(sp)
  80debc:	dc400617 	ldw	r17,24(sp)
  80dec0:	dc000517 	ldw	r16,20(sp)
  80dec4:	dec00f04 	addi	sp,sp,60
  80dec8:	f800283a 	ret
  80decc:	00bfffd4 	movui	r2,65535
  80ded0:	12005636 	bltu	r2,r8,80e02c <__udivdi3+0x348>
  80ded4:	00803fc4 	movi	r2,255
  80ded8:	12010036 	bltu	r2,r8,80e2dc <__udivdi3+0x5f8>
  80dedc:	000b883a 	mov	r5,zero
  80dee0:	0005883a 	mov	r2,zero
  80dee4:	9884d83a 	srl	r2,r19,r2
  80dee8:	01002074 	movhi	r4,129
  80deec:	21133e04 	addi	r4,r4,19704
  80def0:	01800804 	movi	r6,32
  80def4:	1105883a 	add	r2,r2,r4
  80def8:	10c00003 	ldbu	r3,0(r2)
  80defc:	28c7883a 	add	r3,r5,r3
  80df00:	30cbc83a 	sub	r5,r6,r3
  80df04:	28000626 	beq	r5,zero,80df20 <__udivdi3+0x23c>
  80df08:	3145c83a 	sub	r2,r6,r5
  80df0c:	e084d83a 	srl	r2,fp,r2
  80df10:	a946983a 	sll	r3,r21,r5
  80df14:	e178983a 	sll	fp,fp,r5
  80df18:	9966983a 	sll	r19,r19,r5
  80df1c:	18aab03a 	or	r21,r3,r2
  80df20:	982ed43a 	srli	r23,r19,16
  80df24:	a809883a 	mov	r4,r21
  80df28:	9cbfffcc 	andi	r18,r19,65535
  80df2c:	b80b883a 	mov	r5,r23
  80df30:	080fe7c0 	call	80fe7c <__udivsi3>
  80df34:	100b883a 	mov	r5,r2
  80df38:	9009883a 	mov	r4,r18
  80df3c:	1021883a 	mov	r16,r2
  80df40:	080fe8c0 	call	80fe8c <__mulsi3>
  80df44:	a809883a 	mov	r4,r21
  80df48:	b80b883a 	mov	r5,r23
  80df4c:	1023883a 	mov	r17,r2
  80df50:	080fe840 	call	80fe84 <__umodsi3>
  80df54:	1004943a 	slli	r2,r2,16
  80df58:	e006d43a 	srli	r3,fp,16
  80df5c:	10c4b03a 	or	r2,r2,r3
  80df60:	1440042e 	bgeu	r2,r17,80df74 <__udivdi3+0x290>
  80df64:	14c5883a 	add	r2,r2,r19
  80df68:	843fffc4 	addi	r16,r16,-1
  80df6c:	14c00136 	bltu	r2,r19,80df74 <__udivdi3+0x290>
  80df70:	1440ea36 	bltu	r2,r17,80e31c <__udivdi3+0x638>
  80df74:	1463c83a 	sub	r17,r2,r17
  80df78:	8809883a 	mov	r4,r17
  80df7c:	b80b883a 	mov	r5,r23
  80df80:	080fe7c0 	call	80fe7c <__udivsi3>
  80df84:	100b883a 	mov	r5,r2
  80df88:	9009883a 	mov	r4,r18
  80df8c:	102b883a 	mov	r21,r2
  80df90:	080fe8c0 	call	80fe8c <__mulsi3>
  80df94:	8809883a 	mov	r4,r17
  80df98:	b80b883a 	mov	r5,r23
  80df9c:	1025883a 	mov	r18,r2
  80dfa0:	080fe840 	call	80fe84 <__umodsi3>
  80dfa4:	1004943a 	slli	r2,r2,16
  80dfa8:	e0ffffcc 	andi	r3,fp,65535
  80dfac:	10c4b03a 	or	r2,r2,r3
  80dfb0:	1480042e 	bgeu	r2,r18,80dfc4 <__udivdi3+0x2e0>
  80dfb4:	9885883a 	add	r2,r19,r2
  80dfb8:	ad7fffc4 	addi	r21,r21,-1
  80dfbc:	14c00136 	bltu	r2,r19,80dfc4 <__udivdi3+0x2e0>
  80dfc0:	1480d936 	bltu	r2,r18,80e328 <__udivdi3+0x644>
  80dfc4:	8004943a 	slli	r2,r16,16
  80dfc8:	0009883a 	mov	r4,zero
  80dfcc:	a884b03a 	or	r2,r21,r2
  80dfd0:	003fad06 	br	80de88 <__udivdi3+0x1a4>
  80dfd4:	00804034 	movhi	r2,256
  80dfd8:	10bfffc4 	addi	r2,r2,-1
  80dfdc:	11c0b636 	bltu	r2,r7,80e2b8 <__udivdi3+0x5d4>
  80dfe0:	01400404 	movi	r5,16
  80dfe4:	2805883a 	mov	r2,r5
  80dfe8:	003f9a06 	br	80de54 <__udivdi3+0x170>
  80dfec:	0005883a 	mov	r2,zero
  80dff0:	0009883a 	mov	r4,zero
  80dff4:	003fa406 	br	80de88 <__udivdi3+0x1a4>
  80dff8:	00804034 	movhi	r2,256
  80dffc:	10bfffc4 	addi	r2,r2,-1
  80e000:	14c0b336 	bltu	r2,r19,80e2d0 <__udivdi3+0x5ec>
  80e004:	01400404 	movi	r5,16
  80e008:	2805883a 	mov	r2,r5
  80e00c:	003f5106 	br	80dd54 <__udivdi3+0x70>
  80e010:	01000044 	movi	r4,1
  80e014:	000b883a 	mov	r5,zero
  80e018:	080fe7c0 	call	80fe7c <__udivsi3>
  80e01c:	1027883a 	mov	r19,r2
  80e020:	00bfffd4 	movui	r2,65535
  80e024:	14fff436 	bltu	r2,r19,80dff8 <__udivdi3+0x314>
  80e028:	003f4606 	br	80dd44 <__udivdi3+0x60>
  80e02c:	00804034 	movhi	r2,256
  80e030:	10bfffc4 	addi	r2,r2,-1
  80e034:	1200ac36 	bltu	r2,r8,80e2e8 <__udivdi3+0x604>
  80e038:	01400404 	movi	r5,16
  80e03c:	2805883a 	mov	r2,r5
  80e040:	003fa806 	br	80dee4 <__udivdi3+0x200>
  80e044:	3d85c83a 	sub	r2,r7,r22
  80e048:	3588983a 	sll	r4,r6,r22
  80e04c:	9886d83a 	srl	r3,r19,r2
  80e050:	a8a2d83a 	srl	r17,r21,r2
  80e054:	e084d83a 	srl	r2,fp,r2
  80e058:	20eeb03a 	or	r23,r4,r3
  80e05c:	b824d43a 	srli	r18,r23,16
  80e060:	ad86983a 	sll	r3,r21,r22
  80e064:	8809883a 	mov	r4,r17
  80e068:	900b883a 	mov	r5,r18
  80e06c:	1886b03a 	or	r3,r3,r2
  80e070:	d8c00115 	stw	r3,4(sp)
  80e074:	bc3fffcc 	andi	r16,r23,65535
  80e078:	080fe7c0 	call	80fe7c <__udivsi3>
  80e07c:	100b883a 	mov	r5,r2
  80e080:	8009883a 	mov	r4,r16
  80e084:	1029883a 	mov	r20,r2
  80e088:	080fe8c0 	call	80fe8c <__mulsi3>
  80e08c:	900b883a 	mov	r5,r18
  80e090:	8809883a 	mov	r4,r17
  80e094:	102b883a 	mov	r21,r2
  80e098:	080fe840 	call	80fe84 <__umodsi3>
  80e09c:	d9400117 	ldw	r5,4(sp)
  80e0a0:	1004943a 	slli	r2,r2,16
  80e0a4:	9da6983a 	sll	r19,r19,r22
  80e0a8:	2806d43a 	srli	r3,r5,16
  80e0ac:	10c4b03a 	or	r2,r2,r3
  80e0b0:	1540032e 	bgeu	r2,r21,80e0c0 <__udivdi3+0x3dc>
  80e0b4:	15c5883a 	add	r2,r2,r23
  80e0b8:	a53fffc4 	addi	r20,r20,-1
  80e0bc:	15c0912e 	bgeu	r2,r23,80e304 <__udivdi3+0x620>
  80e0c0:	1563c83a 	sub	r17,r2,r21
  80e0c4:	8809883a 	mov	r4,r17
  80e0c8:	900b883a 	mov	r5,r18
  80e0cc:	080fe7c0 	call	80fe7c <__udivsi3>
  80e0d0:	100b883a 	mov	r5,r2
  80e0d4:	8009883a 	mov	r4,r16
  80e0d8:	102b883a 	mov	r21,r2
  80e0dc:	080fe8c0 	call	80fe8c <__mulsi3>
  80e0e0:	8809883a 	mov	r4,r17
  80e0e4:	900b883a 	mov	r5,r18
  80e0e8:	1021883a 	mov	r16,r2
  80e0ec:	080fe840 	call	80fe84 <__umodsi3>
  80e0f0:	da800117 	ldw	r10,4(sp)
  80e0f4:	1004943a 	slli	r2,r2,16
  80e0f8:	50ffffcc 	andi	r3,r10,65535
  80e0fc:	10c6b03a 	or	r3,r2,r3
  80e100:	1c00032e 	bgeu	r3,r16,80e110 <__udivdi3+0x42c>
  80e104:	1dc7883a 	add	r3,r3,r23
  80e108:	ad7fffc4 	addi	r21,r21,-1
  80e10c:	1dc0792e 	bgeu	r3,r23,80e2f4 <__udivdi3+0x610>
  80e110:	a004943a 	slli	r2,r20,16
  80e114:	982ed43a 	srli	r23,r19,16
  80e118:	9cffffcc 	andi	r19,r19,65535
  80e11c:	a8a4b03a 	or	r18,r21,r2
  80e120:	947fffcc 	andi	r17,r18,65535
  80e124:	902ad43a 	srli	r21,r18,16
  80e128:	8809883a 	mov	r4,r17
  80e12c:	980b883a 	mov	r5,r19
  80e130:	1c21c83a 	sub	r16,r3,r16
  80e134:	080fe8c0 	call	80fe8c <__mulsi3>
  80e138:	8809883a 	mov	r4,r17
  80e13c:	b80b883a 	mov	r5,r23
  80e140:	1029883a 	mov	r20,r2
  80e144:	080fe8c0 	call	80fe8c <__mulsi3>
  80e148:	980b883a 	mov	r5,r19
  80e14c:	a809883a 	mov	r4,r21
  80e150:	1023883a 	mov	r17,r2
  80e154:	080fe8c0 	call	80fe8c <__mulsi3>
  80e158:	a809883a 	mov	r4,r21
  80e15c:	b80b883a 	mov	r5,r23
  80e160:	1027883a 	mov	r19,r2
  80e164:	080fe8c0 	call	80fe8c <__mulsi3>
  80e168:	1009883a 	mov	r4,r2
  80e16c:	a004d43a 	srli	r2,r20,16
  80e170:	8ce3883a 	add	r17,r17,r19
  80e174:	1447883a 	add	r3,r2,r17
  80e178:	1cc0022e 	bgeu	r3,r19,80e184 <__udivdi3+0x4a0>
  80e17c:	00800074 	movhi	r2,1
  80e180:	2089883a 	add	r4,r4,r2
  80e184:	1804d43a 	srli	r2,r3,16
  80e188:	2085883a 	add	r2,r4,r2
  80e18c:	80804436 	bltu	r16,r2,80e2a0 <__udivdi3+0x5bc>
  80e190:	80803e26 	beq	r16,r2,80e28c <__udivdi3+0x5a8>
  80e194:	9005883a 	mov	r2,r18
  80e198:	0009883a 	mov	r4,zero
  80e19c:	003f3a06 	br	80de88 <__udivdi3+0x1a4>
  80e1a0:	9d26983a 	sll	r19,r19,r20
  80e1a4:	3505c83a 	sub	r2,r6,r20
  80e1a8:	a8a2d83a 	srl	r17,r21,r2
  80e1ac:	982ed43a 	srli	r23,r19,16
  80e1b0:	e084d83a 	srl	r2,fp,r2
  80e1b4:	ad06983a 	sll	r3,r21,r20
  80e1b8:	8809883a 	mov	r4,r17
  80e1bc:	b80b883a 	mov	r5,r23
  80e1c0:	1886b03a 	or	r3,r3,r2
  80e1c4:	d8c00015 	stw	r3,0(sp)
  80e1c8:	9dbfffcc 	andi	r22,r19,65535
  80e1cc:	080fe7c0 	call	80fe7c <__udivsi3>
  80e1d0:	100b883a 	mov	r5,r2
  80e1d4:	b009883a 	mov	r4,r22
  80e1d8:	d8800215 	stw	r2,8(sp)
  80e1dc:	080fe8c0 	call	80fe8c <__mulsi3>
  80e1e0:	8809883a 	mov	r4,r17
  80e1e4:	b80b883a 	mov	r5,r23
  80e1e8:	102b883a 	mov	r21,r2
  80e1ec:	080fe840 	call	80fe84 <__umodsi3>
  80e1f0:	d9000017 	ldw	r4,0(sp)
  80e1f4:	1004943a 	slli	r2,r2,16
  80e1f8:	2006d43a 	srli	r3,r4,16
  80e1fc:	10c4b03a 	or	r2,r2,r3
  80e200:	1540052e 	bgeu	r2,r21,80e218 <__udivdi3+0x534>
  80e204:	d9400217 	ldw	r5,8(sp)
  80e208:	14c5883a 	add	r2,r2,r19
  80e20c:	297fffc4 	addi	r5,r5,-1
  80e210:	d9400215 	stw	r5,8(sp)
  80e214:	14c0462e 	bgeu	r2,r19,80e330 <__udivdi3+0x64c>
  80e218:	1563c83a 	sub	r17,r2,r21
  80e21c:	8809883a 	mov	r4,r17
  80e220:	b80b883a 	mov	r5,r23
  80e224:	080fe7c0 	call	80fe7c <__udivsi3>
  80e228:	100b883a 	mov	r5,r2
  80e22c:	b009883a 	mov	r4,r22
  80e230:	1025883a 	mov	r18,r2
  80e234:	080fe8c0 	call	80fe8c <__mulsi3>
  80e238:	8809883a 	mov	r4,r17
  80e23c:	b80b883a 	mov	r5,r23
  80e240:	1021883a 	mov	r16,r2
  80e244:	080fe840 	call	80fe84 <__umodsi3>
  80e248:	da800017 	ldw	r10,0(sp)
  80e24c:	1004943a 	slli	r2,r2,16
  80e250:	50ffffcc 	andi	r3,r10,65535
  80e254:	10c6b03a 	or	r3,r2,r3
  80e258:	1c00062e 	bgeu	r3,r16,80e274 <__udivdi3+0x590>
  80e25c:	1cc7883a 	add	r3,r3,r19
  80e260:	94bfffc4 	addi	r18,r18,-1
  80e264:	1cc00336 	bltu	r3,r19,80e274 <__udivdi3+0x590>
  80e268:	1c00022e 	bgeu	r3,r16,80e274 <__udivdi3+0x590>
  80e26c:	94bfffc4 	addi	r18,r18,-1
  80e270:	1cc7883a 	add	r3,r3,r19
  80e274:	d9000217 	ldw	r4,8(sp)
  80e278:	e538983a 	sll	fp,fp,r20
  80e27c:	1c2bc83a 	sub	r21,r3,r16
  80e280:	2004943a 	slli	r2,r4,16
  80e284:	90a8b03a 	or	r20,r18,r2
  80e288:	003ebf06 	br	80dd88 <__udivdi3+0xa4>
  80e28c:	1804943a 	slli	r2,r3,16
  80e290:	e588983a 	sll	r4,fp,r22
  80e294:	a0ffffcc 	andi	r3,r20,65535
  80e298:	10c5883a 	add	r2,r2,r3
  80e29c:	20bfbd2e 	bgeu	r4,r2,80e194 <__udivdi3+0x4b0>
  80e2a0:	90bfffc4 	addi	r2,r18,-1
  80e2a4:	0009883a 	mov	r4,zero
  80e2a8:	003ef706 	br	80de88 <__udivdi3+0x1a4>
  80e2ac:	01400204 	movi	r5,8
  80e2b0:	2805883a 	mov	r2,r5
  80e2b4:	003ee706 	br	80de54 <__udivdi3+0x170>
  80e2b8:	01400604 	movi	r5,24
  80e2bc:	2805883a 	mov	r2,r5
  80e2c0:	003ee406 	br	80de54 <__udivdi3+0x170>
  80e2c4:	01400204 	movi	r5,8
  80e2c8:	2805883a 	mov	r2,r5
  80e2cc:	003ea106 	br	80dd54 <__udivdi3+0x70>
  80e2d0:	01400604 	movi	r5,24
  80e2d4:	2805883a 	mov	r2,r5
  80e2d8:	003e9e06 	br	80dd54 <__udivdi3+0x70>
  80e2dc:	01400204 	movi	r5,8
  80e2e0:	2805883a 	mov	r2,r5
  80e2e4:	003eff06 	br	80dee4 <__udivdi3+0x200>
  80e2e8:	01400604 	movi	r5,24
  80e2ec:	2805883a 	mov	r2,r5
  80e2f0:	003efc06 	br	80dee4 <__udivdi3+0x200>
  80e2f4:	1c3f862e 	bgeu	r3,r16,80e110 <__udivdi3+0x42c>
  80e2f8:	1dc7883a 	add	r3,r3,r23
  80e2fc:	ad7fffc4 	addi	r21,r21,-1
  80e300:	003f8306 	br	80e110 <__udivdi3+0x42c>
  80e304:	157f6e2e 	bgeu	r2,r21,80e0c0 <__udivdi3+0x3dc>
  80e308:	a53fffc4 	addi	r20,r20,-1
  80e30c:	15c5883a 	add	r2,r2,r23
  80e310:	003f6b06 	br	80e0c0 <__udivdi3+0x3dc>
  80e314:	ad7fffc4 	addi	r21,r21,-1
  80e318:	003ec206 	br	80de24 <__udivdi3+0x140>
  80e31c:	843fffc4 	addi	r16,r16,-1
  80e320:	14c5883a 	add	r2,r2,r19
  80e324:	003f1306 	br	80df74 <__udivdi3+0x290>
  80e328:	ad7fffc4 	addi	r21,r21,-1
  80e32c:	003f2506 	br	80dfc4 <__udivdi3+0x2e0>
  80e330:	157fb92e 	bgeu	r2,r21,80e218 <__udivdi3+0x534>
  80e334:	297fffc4 	addi	r5,r5,-1
  80e338:	14c5883a 	add	r2,r2,r19
  80e33c:	d9400215 	stw	r5,8(sp)
  80e340:	003fb506 	br	80e218 <__udivdi3+0x534>
  80e344:	843fffc4 	addi	r16,r16,-1
  80e348:	14c5883a 	add	r2,r2,r19
  80e34c:	003ea106 	br	80ddd4 <__udivdi3+0xf0>

0080e350 <__umoddi3>:
  80e350:	defff004 	addi	sp,sp,-64
  80e354:	3011883a 	mov	r8,r6
  80e358:	000d883a 	mov	r6,zero
  80e35c:	dd400b15 	stw	r21,44(sp)
  80e360:	dcc00915 	stw	r19,36(sp)
  80e364:	dc000615 	stw	r16,24(sp)
  80e368:	dfc00f15 	stw	ra,60(sp)
  80e36c:	df000e15 	stw	fp,56(sp)
  80e370:	ddc00d15 	stw	r23,52(sp)
  80e374:	dd800c15 	stw	r22,48(sp)
  80e378:	dd000a15 	stw	r20,40(sp)
  80e37c:	dc800815 	stw	r18,32(sp)
  80e380:	dc400715 	stw	r17,28(sp)
  80e384:	2817883a 	mov	r11,r5
  80e388:	d9800415 	stw	r6,16(sp)
  80e38c:	4027883a 	mov	r19,r8
  80e390:	d9800515 	stw	r6,20(sp)
  80e394:	2021883a 	mov	r16,r4
  80e398:	282b883a 	mov	r21,r5
  80e39c:	38002c1e 	bne	r7,zero,80e450 <__umoddi3+0x100>
  80e3a0:	2a005636 	bltu	r5,r8,80e4fc <__umoddi3+0x1ac>
  80e3a4:	40009a26 	beq	r8,zero,80e610 <__umoddi3+0x2c0>
  80e3a8:	00bfffd4 	movui	r2,65535
  80e3ac:	14c09236 	bltu	r2,r19,80e5f8 <__umoddi3+0x2a8>
  80e3b0:	00803fc4 	movi	r2,255
  80e3b4:	14c15c36 	bltu	r2,r19,80e928 <__umoddi3+0x5d8>
  80e3b8:	000b883a 	mov	r5,zero
  80e3bc:	0005883a 	mov	r2,zero
  80e3c0:	9884d83a 	srl	r2,r19,r2
  80e3c4:	01002074 	movhi	r4,129
  80e3c8:	21133e04 	addi	r4,r4,19704
  80e3cc:	01800804 	movi	r6,32
  80e3d0:	1105883a 	add	r2,r2,r4
  80e3d4:	10c00003 	ldbu	r3,0(r2)
  80e3d8:	28c7883a 	add	r3,r5,r3
  80e3dc:	30e5c83a 	sub	r18,r6,r3
  80e3e0:	9000a41e 	bne	r18,zero,80e674 <__umoddi3+0x324>
  80e3e4:	982ed43a 	srli	r23,r19,16
  80e3e8:	acebc83a 	sub	r21,r21,r19
  80e3ec:	9d3fffcc 	andi	r20,r19,65535
  80e3f0:	002d883a 	mov	r22,zero
  80e3f4:	a809883a 	mov	r4,r21
  80e3f8:	b80b883a 	mov	r5,r23
  80e3fc:	080fe7c0 	call	80fe7c <__udivsi3>
  80e400:	100b883a 	mov	r5,r2
  80e404:	a009883a 	mov	r4,r20
  80e408:	080fe8c0 	call	80fe8c <__mulsi3>
  80e40c:	a809883a 	mov	r4,r21
  80e410:	b80b883a 	mov	r5,r23
  80e414:	1023883a 	mov	r17,r2
  80e418:	080fe840 	call	80fe84 <__umodsi3>
  80e41c:	1004943a 	slli	r2,r2,16
  80e420:	8006d43a 	srli	r3,r16,16
  80e424:	10c4b03a 	or	r2,r2,r3
  80e428:	1440032e 	bgeu	r2,r17,80e438 <__umoddi3+0xe8>
  80e42c:	14c5883a 	add	r2,r2,r19
  80e430:	14c00136 	bltu	r2,r19,80e438 <__umoddi3+0xe8>
  80e434:	14415836 	bltu	r2,r17,80e998 <__umoddi3+0x648>
  80e438:	1463c83a 	sub	r17,r2,r17
  80e43c:	8809883a 	mov	r4,r17
  80e440:	b80b883a 	mov	r5,r23
  80e444:	080fe7c0 	call	80fe7c <__udivsi3>
  80e448:	a009883a 	mov	r4,r20
  80e44c:	00005306 	br	80e59c <__umoddi3+0x24c>
  80e450:	380d883a 	mov	r6,r7
  80e454:	29c0132e 	bgeu	r5,r7,80e4a4 <__umoddi3+0x154>
  80e458:	d9000415 	stw	r4,16(sp)
  80e45c:	d9400515 	stw	r5,20(sp)
  80e460:	d9400417 	ldw	r5,16(sp)
  80e464:	5813883a 	mov	r9,r11
  80e468:	2811883a 	mov	r8,r5
  80e46c:	4005883a 	mov	r2,r8
  80e470:	4807883a 	mov	r3,r9
  80e474:	dfc00f17 	ldw	ra,60(sp)
  80e478:	df000e17 	ldw	fp,56(sp)
  80e47c:	ddc00d17 	ldw	r23,52(sp)
  80e480:	dd800c17 	ldw	r22,48(sp)
  80e484:	dd400b17 	ldw	r21,44(sp)
  80e488:	dd000a17 	ldw	r20,40(sp)
  80e48c:	dcc00917 	ldw	r19,36(sp)
  80e490:	dc800817 	ldw	r18,32(sp)
  80e494:	dc400717 	ldw	r17,28(sp)
  80e498:	dc000617 	ldw	r16,24(sp)
  80e49c:	dec01004 	addi	sp,sp,64
  80e4a0:	f800283a 	ret
  80e4a4:	00bfffd4 	movui	r2,65535
  80e4a8:	11c06636 	bltu	r2,r7,80e644 <__umoddi3+0x2f4>
  80e4ac:	00803fc4 	movi	r2,255
  80e4b0:	11c12036 	bltu	r2,r7,80e934 <__umoddi3+0x5e4>
  80e4b4:	000b883a 	mov	r5,zero
  80e4b8:	0005883a 	mov	r2,zero
  80e4bc:	3084d83a 	srl	r2,r6,r2
  80e4c0:	01002074 	movhi	r4,129
  80e4c4:	21133e04 	addi	r4,r4,19704
  80e4c8:	01c00804 	movi	r7,32
  80e4cc:	1105883a 	add	r2,r2,r4
  80e4d0:	10c00003 	ldbu	r3,0(r2)
  80e4d4:	28c7883a 	add	r3,r5,r3
  80e4d8:	38e5c83a 	sub	r18,r7,r3
  80e4dc:	9000941e 	bne	r18,zero,80e730 <__umoddi3+0x3e0>
  80e4e0:	35405e36 	bltu	r6,r21,80e65c <__umoddi3+0x30c>
  80e4e4:	84c05d2e 	bgeu	r16,r19,80e65c <__umoddi3+0x30c>
  80e4e8:	8011883a 	mov	r8,r16
  80e4ec:	a813883a 	mov	r9,r21
  80e4f0:	dc000415 	stw	r16,16(sp)
  80e4f4:	dd400515 	stw	r21,20(sp)
  80e4f8:	003fdc06 	br	80e46c <__umoddi3+0x11c>
  80e4fc:	00bfffd4 	movui	r2,65535
  80e500:	12004a36 	bltu	r2,r8,80e62c <__umoddi3+0x2dc>
  80e504:	00803fc4 	movi	r2,255
  80e508:	12010d36 	bltu	r2,r8,80e940 <__umoddi3+0x5f0>
  80e50c:	000b883a 	mov	r5,zero
  80e510:	0005883a 	mov	r2,zero
  80e514:	9884d83a 	srl	r2,r19,r2
  80e518:	01002074 	movhi	r4,129
  80e51c:	21133e04 	addi	r4,r4,19704
  80e520:	01800804 	movi	r6,32
  80e524:	1105883a 	add	r2,r2,r4
  80e528:	10c00003 	ldbu	r3,0(r2)
  80e52c:	28c7883a 	add	r3,r5,r3
  80e530:	30c7c83a 	sub	r3,r6,r3
  80e534:	1800dc1e 	bne	r3,zero,80e8a8 <__umoddi3+0x558>
  80e538:	002d883a 	mov	r22,zero
  80e53c:	982ed43a 	srli	r23,r19,16
  80e540:	a809883a 	mov	r4,r21
  80e544:	9cbfffcc 	andi	r18,r19,65535
  80e548:	b80b883a 	mov	r5,r23
  80e54c:	080fe7c0 	call	80fe7c <__udivsi3>
  80e550:	100b883a 	mov	r5,r2
  80e554:	9009883a 	mov	r4,r18
  80e558:	080fe8c0 	call	80fe8c <__mulsi3>
  80e55c:	a809883a 	mov	r4,r21
  80e560:	b80b883a 	mov	r5,r23
  80e564:	1023883a 	mov	r17,r2
  80e568:	080fe840 	call	80fe84 <__umodsi3>
  80e56c:	1004943a 	slli	r2,r2,16
  80e570:	8006d43a 	srli	r3,r16,16
  80e574:	10c4b03a 	or	r2,r2,r3
  80e578:	1440032e 	bgeu	r2,r17,80e588 <__umoddi3+0x238>
  80e57c:	14c5883a 	add	r2,r2,r19
  80e580:	14c00136 	bltu	r2,r19,80e588 <__umoddi3+0x238>
  80e584:	14410236 	bltu	r2,r17,80e990 <__umoddi3+0x640>
  80e588:	1463c83a 	sub	r17,r2,r17
  80e58c:	8809883a 	mov	r4,r17
  80e590:	b80b883a 	mov	r5,r23
  80e594:	080fe7c0 	call	80fe7c <__udivsi3>
  80e598:	9009883a 	mov	r4,r18
  80e59c:	100b883a 	mov	r5,r2
  80e5a0:	080fe8c0 	call	80fe8c <__mulsi3>
  80e5a4:	8809883a 	mov	r4,r17
  80e5a8:	b80b883a 	mov	r5,r23
  80e5ac:	102b883a 	mov	r21,r2
  80e5b0:	080fe840 	call	80fe84 <__umodsi3>
  80e5b4:	1004943a 	slli	r2,r2,16
  80e5b8:	80ffffcc 	andi	r3,r16,65535
  80e5bc:	10c4b03a 	or	r2,r2,r3
  80e5c0:	1540042e 	bgeu	r2,r21,80e5d4 <__umoddi3+0x284>
  80e5c4:	14c5883a 	add	r2,r2,r19
  80e5c8:	14c00236 	bltu	r2,r19,80e5d4 <__umoddi3+0x284>
  80e5cc:	1540012e 	bgeu	r2,r21,80e5d4 <__umoddi3+0x284>
  80e5d0:	14c5883a 	add	r2,r2,r19
  80e5d4:	1545c83a 	sub	r2,r2,r21
  80e5d8:	1584d83a 	srl	r2,r2,r22
  80e5dc:	0013883a 	mov	r9,zero
  80e5e0:	d8800415 	stw	r2,16(sp)
  80e5e4:	d8c00417 	ldw	r3,16(sp)
  80e5e8:	0005883a 	mov	r2,zero
  80e5ec:	d8800515 	stw	r2,20(sp)
  80e5f0:	1811883a 	mov	r8,r3
  80e5f4:	003f9d06 	br	80e46c <__umoddi3+0x11c>
  80e5f8:	00804034 	movhi	r2,256
  80e5fc:	10bfffc4 	addi	r2,r2,-1
  80e600:	14c0c636 	bltu	r2,r19,80e91c <__umoddi3+0x5cc>
  80e604:	01400404 	movi	r5,16
  80e608:	2805883a 	mov	r2,r5
  80e60c:	003f6c06 	br	80e3c0 <__umoddi3+0x70>
  80e610:	01000044 	movi	r4,1
  80e614:	000b883a 	mov	r5,zero
  80e618:	080fe7c0 	call	80fe7c <__udivsi3>
  80e61c:	1027883a 	mov	r19,r2
  80e620:	00bfffd4 	movui	r2,65535
  80e624:	14fff436 	bltu	r2,r19,80e5f8 <__umoddi3+0x2a8>
  80e628:	003f6106 	br	80e3b0 <__umoddi3+0x60>
  80e62c:	00804034 	movhi	r2,256
  80e630:	10bfffc4 	addi	r2,r2,-1
  80e634:	1200c536 	bltu	r2,r8,80e94c <__umoddi3+0x5fc>
  80e638:	01400404 	movi	r5,16
  80e63c:	2805883a 	mov	r2,r5
  80e640:	003fb406 	br	80e514 <__umoddi3+0x1c4>
  80e644:	00804034 	movhi	r2,256
  80e648:	10bfffc4 	addi	r2,r2,-1
  80e64c:	11c0c236 	bltu	r2,r7,80e958 <__umoddi3+0x608>
  80e650:	01400404 	movi	r5,16
  80e654:	2805883a 	mov	r2,r5
  80e658:	003f9806 	br	80e4bc <__umoddi3+0x16c>
  80e65c:	84c9c83a 	sub	r4,r16,r19
  80e660:	8105803a 	cmpltu	r2,r16,r4
  80e664:	a987c83a 	sub	r3,r21,r6
  80e668:	18abc83a 	sub	r21,r3,r2
  80e66c:	2021883a 	mov	r16,r4
  80e670:	003f9d06 	br	80e4e8 <__umoddi3+0x198>
  80e674:	9ca6983a 	sll	r19,r19,r18
  80e678:	3485c83a 	sub	r2,r6,r18
  80e67c:	a8a2d83a 	srl	r17,r21,r2
  80e680:	982ed43a 	srli	r23,r19,16
  80e684:	ac86983a 	sll	r3,r21,r18
  80e688:	8084d83a 	srl	r2,r16,r2
  80e68c:	8809883a 	mov	r4,r17
  80e690:	b80b883a 	mov	r5,r23
  80e694:	18b8b03a 	or	fp,r3,r2
  80e698:	9d3fffcc 	andi	r20,r19,65535
  80e69c:	080fe7c0 	call	80fe7c <__udivsi3>
  80e6a0:	100b883a 	mov	r5,r2
  80e6a4:	a009883a 	mov	r4,r20
  80e6a8:	080fe8c0 	call	80fe8c <__mulsi3>
  80e6ac:	8809883a 	mov	r4,r17
  80e6b0:	b80b883a 	mov	r5,r23
  80e6b4:	102b883a 	mov	r21,r2
  80e6b8:	080fe840 	call	80fe84 <__umodsi3>
  80e6bc:	1004943a 	slli	r2,r2,16
  80e6c0:	e006d43a 	srli	r3,fp,16
  80e6c4:	902d883a 	mov	r22,r18
  80e6c8:	10c4b03a 	or	r2,r2,r3
  80e6cc:	1540022e 	bgeu	r2,r21,80e6d8 <__umoddi3+0x388>
  80e6d0:	14c5883a 	add	r2,r2,r19
  80e6d4:	14c0ab2e 	bgeu	r2,r19,80e984 <__umoddi3+0x634>
  80e6d8:	1563c83a 	sub	r17,r2,r21
  80e6dc:	8809883a 	mov	r4,r17
  80e6e0:	b80b883a 	mov	r5,r23
  80e6e4:	080fe7c0 	call	80fe7c <__udivsi3>
  80e6e8:	100b883a 	mov	r5,r2
  80e6ec:	a009883a 	mov	r4,r20
  80e6f0:	080fe8c0 	call	80fe8c <__mulsi3>
  80e6f4:	8809883a 	mov	r4,r17
  80e6f8:	b80b883a 	mov	r5,r23
  80e6fc:	102b883a 	mov	r21,r2
  80e700:	080fe840 	call	80fe84 <__umodsi3>
  80e704:	1004943a 	slli	r2,r2,16
  80e708:	e0ffffcc 	andi	r3,fp,65535
  80e70c:	10c4b03a 	or	r2,r2,r3
  80e710:	1540042e 	bgeu	r2,r21,80e724 <__umoddi3+0x3d4>
  80e714:	14c5883a 	add	r2,r2,r19
  80e718:	14c00236 	bltu	r2,r19,80e724 <__umoddi3+0x3d4>
  80e71c:	1540012e 	bgeu	r2,r21,80e724 <__umoddi3+0x3d4>
  80e720:	14c5883a 	add	r2,r2,r19
  80e724:	84a0983a 	sll	r16,r16,r18
  80e728:	156bc83a 	sub	r21,r2,r21
  80e72c:	003f3106 	br	80e3f4 <__umoddi3+0xa4>
  80e730:	3c8fc83a 	sub	r7,r7,r18
  80e734:	3486983a 	sll	r3,r6,r18
  80e738:	99c4d83a 	srl	r2,r19,r7
  80e73c:	a9e2d83a 	srl	r17,r21,r7
  80e740:	ac8c983a 	sll	r6,r21,r18
  80e744:	18acb03a 	or	r22,r3,r2
  80e748:	b02ed43a 	srli	r23,r22,16
  80e74c:	81c4d83a 	srl	r2,r16,r7
  80e750:	8809883a 	mov	r4,r17
  80e754:	b80b883a 	mov	r5,r23
  80e758:	308cb03a 	or	r6,r6,r2
  80e75c:	d9c00315 	stw	r7,12(sp)
  80e760:	d9800215 	stw	r6,8(sp)
  80e764:	b53fffcc 	andi	r20,r22,65535
  80e768:	080fe7c0 	call	80fe7c <__udivsi3>
  80e76c:	100b883a 	mov	r5,r2
  80e770:	a009883a 	mov	r4,r20
  80e774:	1039883a 	mov	fp,r2
  80e778:	080fe8c0 	call	80fe8c <__mulsi3>
  80e77c:	8809883a 	mov	r4,r17
  80e780:	b80b883a 	mov	r5,r23
  80e784:	102b883a 	mov	r21,r2
  80e788:	080fe840 	call	80fe84 <__umodsi3>
  80e78c:	d9000217 	ldw	r4,8(sp)
  80e790:	1004943a 	slli	r2,r2,16
  80e794:	9ca6983a 	sll	r19,r19,r18
  80e798:	2006d43a 	srli	r3,r4,16
  80e79c:	84a0983a 	sll	r16,r16,r18
  80e7a0:	dcc00015 	stw	r19,0(sp)
  80e7a4:	10c4b03a 	or	r2,r2,r3
  80e7a8:	dc000115 	stw	r16,4(sp)
  80e7ac:	1540032e 	bgeu	r2,r21,80e7bc <__umoddi3+0x46c>
  80e7b0:	1585883a 	add	r2,r2,r22
  80e7b4:	e73fffc4 	addi	fp,fp,-1
  80e7b8:	15806e2e 	bgeu	r2,r22,80e974 <__umoddi3+0x624>
  80e7bc:	1563c83a 	sub	r17,r2,r21
  80e7c0:	8809883a 	mov	r4,r17
  80e7c4:	b80b883a 	mov	r5,r23
  80e7c8:	080fe7c0 	call	80fe7c <__udivsi3>
  80e7cc:	100b883a 	mov	r5,r2
  80e7d0:	a009883a 	mov	r4,r20
  80e7d4:	1021883a 	mov	r16,r2
  80e7d8:	080fe8c0 	call	80fe8c <__mulsi3>
  80e7dc:	b80b883a 	mov	r5,r23
  80e7e0:	8809883a 	mov	r4,r17
  80e7e4:	1029883a 	mov	r20,r2
  80e7e8:	080fe840 	call	80fe84 <__umodsi3>
  80e7ec:	d9400217 	ldw	r5,8(sp)
  80e7f0:	1004943a 	slli	r2,r2,16
  80e7f4:	28ffffcc 	andi	r3,r5,65535
  80e7f8:	10c4b03a 	or	r2,r2,r3
  80e7fc:	1500032e 	bgeu	r2,r20,80e80c <__umoddi3+0x4bc>
  80e800:	1585883a 	add	r2,r2,r22
  80e804:	843fffc4 	addi	r16,r16,-1
  80e808:	1580562e 	bgeu	r2,r22,80e964 <__umoddi3+0x614>
  80e80c:	d9800017 	ldw	r6,0(sp)
  80e810:	e022943a 	slli	r17,fp,16
  80e814:	302ed43a 	srli	r23,r6,16
  80e818:	8462b03a 	or	r17,r16,r17
  80e81c:	34ffffcc 	andi	r19,r6,65535
  80e820:	882ad43a 	srli	r21,r17,16
  80e824:	8c7fffcc 	andi	r17,r17,65535
  80e828:	8809883a 	mov	r4,r17
  80e82c:	980b883a 	mov	r5,r19
  80e830:	1521c83a 	sub	r16,r2,r20
  80e834:	080fe8c0 	call	80fe8c <__mulsi3>
  80e838:	8809883a 	mov	r4,r17
  80e83c:	b80b883a 	mov	r5,r23
  80e840:	1029883a 	mov	r20,r2
  80e844:	080fe8c0 	call	80fe8c <__mulsi3>
  80e848:	980b883a 	mov	r5,r19
  80e84c:	a809883a 	mov	r4,r21
  80e850:	1023883a 	mov	r17,r2
  80e854:	080fe8c0 	call	80fe8c <__mulsi3>
  80e858:	a809883a 	mov	r4,r21
  80e85c:	b80b883a 	mov	r5,r23
  80e860:	1027883a 	mov	r19,r2
  80e864:	080fe8c0 	call	80fe8c <__mulsi3>
  80e868:	100b883a 	mov	r5,r2
  80e86c:	a004d43a 	srli	r2,r20,16
  80e870:	8ce3883a 	add	r17,r17,r19
  80e874:	1449883a 	add	r4,r2,r17
  80e878:	24c0022e 	bgeu	r4,r19,80e884 <__umoddi3+0x534>
  80e87c:	00800074 	movhi	r2,1
  80e880:	288b883a 	add	r5,r5,r2
  80e884:	2004d43a 	srli	r2,r4,16
  80e888:	2008943a 	slli	r4,r4,16
  80e88c:	a0ffffcc 	andi	r3,r20,65535
  80e890:	288d883a 	add	r6,r5,r2
  80e894:	20c9883a 	add	r4,r4,r3
  80e898:	81800b36 	bltu	r16,r6,80e8c8 <__umoddi3+0x578>
  80e89c:	81804026 	beq	r16,r6,80e9a0 <__umoddi3+0x650>
  80e8a0:	818dc83a 	sub	r6,r16,r6
  80e8a4:	00000f06 	br	80e8e4 <__umoddi3+0x594>
  80e8a8:	30c5c83a 	sub	r2,r6,r3
  80e8ac:	182d883a 	mov	r22,r3
  80e8b0:	8084d83a 	srl	r2,r16,r2
  80e8b4:	a8c6983a 	sll	r3,r21,r3
  80e8b8:	9da6983a 	sll	r19,r19,r22
  80e8bc:	85a0983a 	sll	r16,r16,r22
  80e8c0:	18aab03a 	or	r21,r3,r2
  80e8c4:	003f1d06 	br	80e53c <__umoddi3+0x1ec>
  80e8c8:	d8c00017 	ldw	r3,0(sp)
  80e8cc:	20c5c83a 	sub	r2,r4,r3
  80e8d0:	2089803a 	cmpltu	r4,r4,r2
  80e8d4:	3587c83a 	sub	r3,r6,r22
  80e8d8:	1907c83a 	sub	r3,r3,r4
  80e8dc:	80cdc83a 	sub	r6,r16,r3
  80e8e0:	1009883a 	mov	r4,r2
  80e8e4:	d9400117 	ldw	r5,4(sp)
  80e8e8:	2905c83a 	sub	r2,r5,r4
  80e8ec:	2887803a 	cmpltu	r3,r5,r2
  80e8f0:	30c7c83a 	sub	r3,r6,r3
  80e8f4:	d9800317 	ldw	r6,12(sp)
  80e8f8:	1484d83a 	srl	r2,r2,r18
  80e8fc:	1988983a 	sll	r4,r3,r6
  80e900:	1c86d83a 	srl	r3,r3,r18
  80e904:	2088b03a 	or	r4,r4,r2
  80e908:	2011883a 	mov	r8,r4
  80e90c:	1813883a 	mov	r9,r3
  80e910:	d9000415 	stw	r4,16(sp)
  80e914:	d8c00515 	stw	r3,20(sp)
  80e918:	003ed406 	br	80e46c <__umoddi3+0x11c>
  80e91c:	01400604 	movi	r5,24
  80e920:	2805883a 	mov	r2,r5
  80e924:	003ea606 	br	80e3c0 <__umoddi3+0x70>
  80e928:	01400204 	movi	r5,8
  80e92c:	2805883a 	mov	r2,r5
  80e930:	003ea306 	br	80e3c0 <__umoddi3+0x70>
  80e934:	01400204 	movi	r5,8
  80e938:	2805883a 	mov	r2,r5
  80e93c:	003edf06 	br	80e4bc <__umoddi3+0x16c>
  80e940:	01400204 	movi	r5,8
  80e944:	2805883a 	mov	r2,r5
  80e948:	003ef206 	br	80e514 <__umoddi3+0x1c4>
  80e94c:	01400604 	movi	r5,24
  80e950:	2805883a 	mov	r2,r5
  80e954:	003eef06 	br	80e514 <__umoddi3+0x1c4>
  80e958:	01400604 	movi	r5,24
  80e95c:	2805883a 	mov	r2,r5
  80e960:	003ed606 	br	80e4bc <__umoddi3+0x16c>
  80e964:	153fa92e 	bgeu	r2,r20,80e80c <__umoddi3+0x4bc>
  80e968:	843fffc4 	addi	r16,r16,-1
  80e96c:	1585883a 	add	r2,r2,r22
  80e970:	003fa606 	br	80e80c <__umoddi3+0x4bc>
  80e974:	157f912e 	bgeu	r2,r21,80e7bc <__umoddi3+0x46c>
  80e978:	e73fffc4 	addi	fp,fp,-1
  80e97c:	1585883a 	add	r2,r2,r22
  80e980:	003f8e06 	br	80e7bc <__umoddi3+0x46c>
  80e984:	157f542e 	bgeu	r2,r21,80e6d8 <__umoddi3+0x388>
  80e988:	14c5883a 	add	r2,r2,r19
  80e98c:	003f5206 	br	80e6d8 <__umoddi3+0x388>
  80e990:	14c5883a 	add	r2,r2,r19
  80e994:	003efc06 	br	80e588 <__umoddi3+0x238>
  80e998:	14c5883a 	add	r2,r2,r19
  80e99c:	003ea606 	br	80e438 <__umoddi3+0xe8>
  80e9a0:	d8800117 	ldw	r2,4(sp)
  80e9a4:	113fc836 	bltu	r2,r4,80e8c8 <__umoddi3+0x578>
  80e9a8:	000d883a 	mov	r6,zero
  80e9ac:	003fcd06 	br	80e8e4 <__umoddi3+0x594>

0080e9b0 <__nesf2>:
  80e9b0:	defff304 	addi	sp,sp,-52
  80e9b4:	dc400b15 	stw	r17,44(sp)
  80e9b8:	dc400204 	addi	r17,sp,8
  80e9bc:	dc000a15 	stw	r16,40(sp)
  80e9c0:	d9000015 	stw	r4,0(sp)
  80e9c4:	d9400115 	stw	r5,4(sp)
  80e9c8:	d809883a 	mov	r4,sp
  80e9cc:	880b883a 	mov	r5,r17
  80e9d0:	dc000604 	addi	r16,sp,24
  80e9d4:	dfc00c15 	stw	ra,48(sp)
  80e9d8:	080ff440 	call	80ff44 <__unpack_f>
  80e9dc:	d9000104 	addi	r4,sp,4
  80e9e0:	800b883a 	mov	r5,r16
  80e9e4:	080ff440 	call	80ff44 <__unpack_f>
  80e9e8:	d8800217 	ldw	r2,8(sp)
  80e9ec:	00c00044 	movi	r3,1
  80e9f0:	180d883a 	mov	r6,r3
  80e9f4:	1880062e 	bgeu	r3,r2,80ea10 <__nesf2+0x60>
  80e9f8:	d8800617 	ldw	r2,24(sp)
  80e9fc:	8809883a 	mov	r4,r17
  80ea00:	800b883a 	mov	r5,r16
  80ea04:	1880022e 	bgeu	r3,r2,80ea10 <__nesf2+0x60>
  80ea08:	081000c0 	call	81000c <__fpcmp_parts_f>
  80ea0c:	100d883a 	mov	r6,r2
  80ea10:	3005883a 	mov	r2,r6
  80ea14:	dfc00c17 	ldw	ra,48(sp)
  80ea18:	dc400b17 	ldw	r17,44(sp)
  80ea1c:	dc000a17 	ldw	r16,40(sp)
  80ea20:	dec00d04 	addi	sp,sp,52
  80ea24:	f800283a 	ret

0080ea28 <__gtsf2>:
  80ea28:	defff304 	addi	sp,sp,-52
  80ea2c:	dc400b15 	stw	r17,44(sp)
  80ea30:	dc400204 	addi	r17,sp,8
  80ea34:	dc000a15 	stw	r16,40(sp)
  80ea38:	d9000015 	stw	r4,0(sp)
  80ea3c:	d9400115 	stw	r5,4(sp)
  80ea40:	d809883a 	mov	r4,sp
  80ea44:	880b883a 	mov	r5,r17
  80ea48:	dc000604 	addi	r16,sp,24
  80ea4c:	dfc00c15 	stw	ra,48(sp)
  80ea50:	080ff440 	call	80ff44 <__unpack_f>
  80ea54:	d9000104 	addi	r4,sp,4
  80ea58:	800b883a 	mov	r5,r16
  80ea5c:	080ff440 	call	80ff44 <__unpack_f>
  80ea60:	d8800217 	ldw	r2,8(sp)
  80ea64:	00c00044 	movi	r3,1
  80ea68:	01bfffc4 	movi	r6,-1
  80ea6c:	1880062e 	bgeu	r3,r2,80ea88 <__gtsf2+0x60>
  80ea70:	d8800617 	ldw	r2,24(sp)
  80ea74:	8809883a 	mov	r4,r17
  80ea78:	800b883a 	mov	r5,r16
  80ea7c:	1880022e 	bgeu	r3,r2,80ea88 <__gtsf2+0x60>
  80ea80:	081000c0 	call	81000c <__fpcmp_parts_f>
  80ea84:	100d883a 	mov	r6,r2
  80ea88:	3005883a 	mov	r2,r6
  80ea8c:	dfc00c17 	ldw	ra,48(sp)
  80ea90:	dc400b17 	ldw	r17,44(sp)
  80ea94:	dc000a17 	ldw	r16,40(sp)
  80ea98:	dec00d04 	addi	sp,sp,52
  80ea9c:	f800283a 	ret

0080eaa0 <__ltsf2>:
  80eaa0:	defff304 	addi	sp,sp,-52
  80eaa4:	dc400b15 	stw	r17,44(sp)
  80eaa8:	dc400204 	addi	r17,sp,8
  80eaac:	dc000a15 	stw	r16,40(sp)
  80eab0:	d9000015 	stw	r4,0(sp)
  80eab4:	d9400115 	stw	r5,4(sp)
  80eab8:	d809883a 	mov	r4,sp
  80eabc:	880b883a 	mov	r5,r17
  80eac0:	dc000604 	addi	r16,sp,24
  80eac4:	dfc00c15 	stw	ra,48(sp)
  80eac8:	080ff440 	call	80ff44 <__unpack_f>
  80eacc:	d9000104 	addi	r4,sp,4
  80ead0:	800b883a 	mov	r5,r16
  80ead4:	080ff440 	call	80ff44 <__unpack_f>
  80ead8:	d8800217 	ldw	r2,8(sp)
  80eadc:	00c00044 	movi	r3,1
  80eae0:	180d883a 	mov	r6,r3
  80eae4:	1880062e 	bgeu	r3,r2,80eb00 <__ltsf2+0x60>
  80eae8:	d8800617 	ldw	r2,24(sp)
  80eaec:	8809883a 	mov	r4,r17
  80eaf0:	800b883a 	mov	r5,r16
  80eaf4:	1880022e 	bgeu	r3,r2,80eb00 <__ltsf2+0x60>
  80eaf8:	081000c0 	call	81000c <__fpcmp_parts_f>
  80eafc:	100d883a 	mov	r6,r2
  80eb00:	3005883a 	mov	r2,r6
  80eb04:	dfc00c17 	ldw	ra,48(sp)
  80eb08:	dc400b17 	ldw	r17,44(sp)
  80eb0c:	dc000a17 	ldw	r16,40(sp)
  80eb10:	dec00d04 	addi	sp,sp,52
  80eb14:	f800283a 	ret

0080eb18 <_fpadd_parts>:
  80eb18:	defff804 	addi	sp,sp,-32
  80eb1c:	dcc00315 	stw	r19,12(sp)
  80eb20:	2027883a 	mov	r19,r4
  80eb24:	21000017 	ldw	r4,0(r4)
  80eb28:	00c00044 	movi	r3,1
  80eb2c:	dd400515 	stw	r21,20(sp)
  80eb30:	dd000415 	stw	r20,16(sp)
  80eb34:	ddc00715 	stw	r23,28(sp)
  80eb38:	dd800615 	stw	r22,24(sp)
  80eb3c:	dc800215 	stw	r18,8(sp)
  80eb40:	dc400115 	stw	r17,4(sp)
  80eb44:	dc000015 	stw	r16,0(sp)
  80eb48:	282b883a 	mov	r21,r5
  80eb4c:	3029883a 	mov	r20,r6
  80eb50:	1900632e 	bgeu	r3,r4,80ece0 <_fpadd_parts+0x1c8>
  80eb54:	28800017 	ldw	r2,0(r5)
  80eb58:	1880812e 	bgeu	r3,r2,80ed60 <_fpadd_parts+0x248>
  80eb5c:	00c00104 	movi	r3,4
  80eb60:	20c0dc26 	beq	r4,r3,80eed4 <_fpadd_parts+0x3bc>
  80eb64:	10c07e26 	beq	r2,r3,80ed60 <_fpadd_parts+0x248>
  80eb68:	00c00084 	movi	r3,2
  80eb6c:	10c06726 	beq	r2,r3,80ed0c <_fpadd_parts+0x1f4>
  80eb70:	20c07b26 	beq	r4,r3,80ed60 <_fpadd_parts+0x248>
  80eb74:	9dc00217 	ldw	r23,8(r19)
  80eb78:	28c00217 	ldw	r3,8(r5)
  80eb7c:	9c400317 	ldw	r17,12(r19)
  80eb80:	2bc00317 	ldw	r15,12(r5)
  80eb84:	b8cdc83a 	sub	r6,r23,r3
  80eb88:	9c800417 	ldw	r18,16(r19)
  80eb8c:	2c000417 	ldw	r16,16(r5)
  80eb90:	3009883a 	mov	r4,r6
  80eb94:	30009716 	blt	r6,zero,80edf4 <_fpadd_parts+0x2dc>
  80eb98:	00800fc4 	movi	r2,63
  80eb9c:	11806b16 	blt	r2,r6,80ed4c <_fpadd_parts+0x234>
  80eba0:	0100a40e 	bge	zero,r4,80ee34 <_fpadd_parts+0x31c>
  80eba4:	35bff804 	addi	r22,r6,-32
  80eba8:	b000bc16 	blt	r22,zero,80ee9c <_fpadd_parts+0x384>
  80ebac:	8596d83a 	srl	r11,r16,r22
  80ebb0:	0019883a 	mov	r12,zero
  80ebb4:	0013883a 	mov	r9,zero
  80ebb8:	01000044 	movi	r4,1
  80ebbc:	0015883a 	mov	r10,zero
  80ebc0:	b000be16 	blt	r22,zero,80eebc <_fpadd_parts+0x3a4>
  80ebc4:	2590983a 	sll	r8,r4,r22
  80ebc8:	000f883a 	mov	r7,zero
  80ebcc:	00bfffc4 	movi	r2,-1
  80ebd0:	3889883a 	add	r4,r7,r2
  80ebd4:	408b883a 	add	r5,r8,r2
  80ebd8:	21cd803a 	cmpltu	r6,r4,r7
  80ebdc:	314b883a 	add	r5,r6,r5
  80ebe0:	7904703a 	and	r2,r15,r4
  80ebe4:	8146703a 	and	r3,r16,r5
  80ebe8:	10c4b03a 	or	r2,r2,r3
  80ebec:	10000226 	beq	r2,zero,80ebf8 <_fpadd_parts+0xe0>
  80ebf0:	02400044 	movi	r9,1
  80ebf4:	0015883a 	mov	r10,zero
  80ebf8:	5a5eb03a 	or	r15,r11,r9
  80ebfc:	62a0b03a 	or	r16,r12,r10
  80ec00:	99400117 	ldw	r5,4(r19)
  80ec04:	a8800117 	ldw	r2,4(r21)
  80ec08:	28806e26 	beq	r5,r2,80edc4 <_fpadd_parts+0x2ac>
  80ec0c:	28006626 	beq	r5,zero,80eda8 <_fpadd_parts+0x290>
  80ec10:	7c45c83a 	sub	r2,r15,r17
  80ec14:	7889803a 	cmpltu	r4,r15,r2
  80ec18:	8487c83a 	sub	r3,r16,r18
  80ec1c:	1909c83a 	sub	r4,r3,r4
  80ec20:	100d883a 	mov	r6,r2
  80ec24:	200f883a 	mov	r7,r4
  80ec28:	38007716 	blt	r7,zero,80ee08 <_fpadd_parts+0x2f0>
  80ec2c:	a5c00215 	stw	r23,8(r20)
  80ec30:	a1c00415 	stw	r7,16(r20)
  80ec34:	a0000115 	stw	zero,4(r20)
  80ec38:	a1800315 	stw	r6,12(r20)
  80ec3c:	a2000317 	ldw	r8,12(r20)
  80ec40:	a2400417 	ldw	r9,16(r20)
  80ec44:	00bfffc4 	movi	r2,-1
  80ec48:	408b883a 	add	r5,r8,r2
  80ec4c:	2a09803a 	cmpltu	r4,r5,r8
  80ec50:	488d883a 	add	r6,r9,r2
  80ec54:	01c40034 	movhi	r7,4096
  80ec58:	39ffffc4 	addi	r7,r7,-1
  80ec5c:	218d883a 	add	r6,r4,r6
  80ec60:	39801736 	bltu	r7,r6,80ecc0 <_fpadd_parts+0x1a8>
  80ec64:	31c06526 	beq	r6,r7,80edfc <_fpadd_parts+0x2e4>
  80ec68:	a3000217 	ldw	r12,8(r20)
  80ec6c:	4209883a 	add	r4,r8,r8
  80ec70:	00bfffc4 	movi	r2,-1
  80ec74:	220f803a 	cmpltu	r7,r4,r8
  80ec78:	4a4b883a 	add	r5,r9,r9
  80ec7c:	394f883a 	add	r7,r7,r5
  80ec80:	2095883a 	add	r10,r4,r2
  80ec84:	3897883a 	add	r11,r7,r2
  80ec88:	510d803a 	cmpltu	r6,r10,r4
  80ec8c:	6099883a 	add	r12,r12,r2
  80ec90:	32d7883a 	add	r11,r6,r11
  80ec94:	00840034 	movhi	r2,4096
  80ec98:	10bfffc4 	addi	r2,r2,-1
  80ec9c:	2011883a 	mov	r8,r4
  80eca0:	3813883a 	mov	r9,r7
  80eca4:	a1000315 	stw	r4,12(r20)
  80eca8:	a1c00415 	stw	r7,16(r20)
  80ecac:	a3000215 	stw	r12,8(r20)
  80ecb0:	12c00336 	bltu	r2,r11,80ecc0 <_fpadd_parts+0x1a8>
  80ecb4:	58bfed1e 	bne	r11,r2,80ec6c <_fpadd_parts+0x154>
  80ecb8:	00bfff84 	movi	r2,-2
  80ecbc:	12bfeb2e 	bgeu	r2,r10,80ec6c <_fpadd_parts+0x154>
  80ecc0:	a2800417 	ldw	r10,16(r20)
  80ecc4:	008000c4 	movi	r2,3
  80ecc8:	00c80034 	movhi	r3,8192
  80eccc:	18ffffc4 	addi	r3,r3,-1
  80ecd0:	a2400317 	ldw	r9,12(r20)
  80ecd4:	a0800015 	stw	r2,0(r20)
  80ecd8:	1a802336 	bltu	r3,r10,80ed68 <_fpadd_parts+0x250>
  80ecdc:	a027883a 	mov	r19,r20
  80ece0:	9805883a 	mov	r2,r19
  80ece4:	ddc00717 	ldw	r23,28(sp)
  80ece8:	dd800617 	ldw	r22,24(sp)
  80ecec:	dd400517 	ldw	r21,20(sp)
  80ecf0:	dd000417 	ldw	r20,16(sp)
  80ecf4:	dcc00317 	ldw	r19,12(sp)
  80ecf8:	dc800217 	ldw	r18,8(sp)
  80ecfc:	dc400117 	ldw	r17,4(sp)
  80ed00:	dc000017 	ldw	r16,0(sp)
  80ed04:	dec00804 	addi	sp,sp,32
  80ed08:	f800283a 	ret
  80ed0c:	20fff41e 	bne	r4,r3,80ece0 <_fpadd_parts+0x1c8>
  80ed10:	31000015 	stw	r4,0(r6)
  80ed14:	98800117 	ldw	r2,4(r19)
  80ed18:	30800115 	stw	r2,4(r6)
  80ed1c:	98c00217 	ldw	r3,8(r19)
  80ed20:	30c00215 	stw	r3,8(r6)
  80ed24:	98800317 	ldw	r2,12(r19)
  80ed28:	30800315 	stw	r2,12(r6)
  80ed2c:	98c00417 	ldw	r3,16(r19)
  80ed30:	30c00415 	stw	r3,16(r6)
  80ed34:	98800117 	ldw	r2,4(r19)
  80ed38:	28c00117 	ldw	r3,4(r5)
  80ed3c:	3027883a 	mov	r19,r6
  80ed40:	10c4703a 	and	r2,r2,r3
  80ed44:	30800115 	stw	r2,4(r6)
  80ed48:	003fe506 	br	80ece0 <_fpadd_parts+0x1c8>
  80ed4c:	1dc02616 	blt	r3,r23,80ede8 <_fpadd_parts+0x2d0>
  80ed50:	0023883a 	mov	r17,zero
  80ed54:	182f883a 	mov	r23,r3
  80ed58:	0025883a 	mov	r18,zero
  80ed5c:	003fa806 	br	80ec00 <_fpadd_parts+0xe8>
  80ed60:	a827883a 	mov	r19,r21
  80ed64:	003fde06 	br	80ece0 <_fpadd_parts+0x1c8>
  80ed68:	01800044 	movi	r6,1
  80ed6c:	500497fa 	slli	r2,r10,31
  80ed70:	4808d07a 	srli	r4,r9,1
  80ed74:	518ad83a 	srl	r5,r10,r6
  80ed78:	a2000217 	ldw	r8,8(r20)
  80ed7c:	1108b03a 	or	r4,r2,r4
  80ed80:	0007883a 	mov	r3,zero
  80ed84:	4984703a 	and	r2,r9,r6
  80ed88:	208cb03a 	or	r6,r4,r2
  80ed8c:	28ceb03a 	or	r7,r5,r3
  80ed90:	42000044 	addi	r8,r8,1
  80ed94:	a027883a 	mov	r19,r20
  80ed98:	a1c00415 	stw	r7,16(r20)
  80ed9c:	a2000215 	stw	r8,8(r20)
  80eda0:	a1800315 	stw	r6,12(r20)
  80eda4:	003fce06 	br	80ece0 <_fpadd_parts+0x1c8>
  80eda8:	8bc5c83a 	sub	r2,r17,r15
  80edac:	8889803a 	cmpltu	r4,r17,r2
  80edb0:	9407c83a 	sub	r3,r18,r16
  80edb4:	1909c83a 	sub	r4,r3,r4
  80edb8:	100d883a 	mov	r6,r2
  80edbc:	200f883a 	mov	r7,r4
  80edc0:	003f9906 	br	80ec28 <_fpadd_parts+0x110>
  80edc4:	8bc5883a 	add	r2,r17,r15
  80edc8:	1449803a 	cmpltu	r4,r2,r17
  80edcc:	9407883a 	add	r3,r18,r16
  80edd0:	20c9883a 	add	r4,r4,r3
  80edd4:	a1400115 	stw	r5,4(r20)
  80edd8:	a5c00215 	stw	r23,8(r20)
  80eddc:	a0800315 	stw	r2,12(r20)
  80ede0:	a1000415 	stw	r4,16(r20)
  80ede4:	003fb606 	br	80ecc0 <_fpadd_parts+0x1a8>
  80ede8:	001f883a 	mov	r15,zero
  80edec:	0021883a 	mov	r16,zero
  80edf0:	003f8306 	br	80ec00 <_fpadd_parts+0xe8>
  80edf4:	018dc83a 	sub	r6,zero,r6
  80edf8:	003f6706 	br	80eb98 <_fpadd_parts+0x80>
  80edfc:	00bfff84 	movi	r2,-2
  80ee00:	117faf36 	bltu	r2,r5,80ecc0 <_fpadd_parts+0x1a8>
  80ee04:	003f9806 	br	80ec68 <_fpadd_parts+0x150>
  80ee08:	0005883a 	mov	r2,zero
  80ee0c:	1189c83a 	sub	r4,r2,r6
  80ee10:	1105803a 	cmpltu	r2,r2,r4
  80ee14:	01cbc83a 	sub	r5,zero,r7
  80ee18:	2885c83a 	sub	r2,r5,r2
  80ee1c:	01800044 	movi	r6,1
  80ee20:	a1800115 	stw	r6,4(r20)
  80ee24:	a5c00215 	stw	r23,8(r20)
  80ee28:	a1000315 	stw	r4,12(r20)
  80ee2c:	a0800415 	stw	r2,16(r20)
  80ee30:	003f8206 	br	80ec3c <_fpadd_parts+0x124>
  80ee34:	203f7226 	beq	r4,zero,80ec00 <_fpadd_parts+0xe8>
  80ee38:	35bff804 	addi	r22,r6,-32
  80ee3c:	b9af883a 	add	r23,r23,r6
  80ee40:	b0003116 	blt	r22,zero,80ef08 <_fpadd_parts+0x3f0>
  80ee44:	959ad83a 	srl	r13,r18,r22
  80ee48:	001d883a 	mov	r14,zero
  80ee4c:	000f883a 	mov	r7,zero
  80ee50:	01000044 	movi	r4,1
  80ee54:	0011883a 	mov	r8,zero
  80ee58:	b0002516 	blt	r22,zero,80eef0 <_fpadd_parts+0x3d8>
  80ee5c:	2594983a 	sll	r10,r4,r22
  80ee60:	0013883a 	mov	r9,zero
  80ee64:	00bfffc4 	movi	r2,-1
  80ee68:	4889883a 	add	r4,r9,r2
  80ee6c:	508b883a 	add	r5,r10,r2
  80ee70:	224d803a 	cmpltu	r6,r4,r9
  80ee74:	314b883a 	add	r5,r6,r5
  80ee78:	8904703a 	and	r2,r17,r4
  80ee7c:	9146703a 	and	r3,r18,r5
  80ee80:	10c4b03a 	or	r2,r2,r3
  80ee84:	10000226 	beq	r2,zero,80ee90 <_fpadd_parts+0x378>
  80ee88:	01c00044 	movi	r7,1
  80ee8c:	0011883a 	mov	r8,zero
  80ee90:	69e2b03a 	or	r17,r13,r7
  80ee94:	7224b03a 	or	r18,r14,r8
  80ee98:	003f5906 	br	80ec00 <_fpadd_parts+0xe8>
  80ee9c:	8407883a 	add	r3,r16,r16
  80eea0:	008007c4 	movi	r2,31
  80eea4:	1185c83a 	sub	r2,r2,r6
  80eea8:	1886983a 	sll	r3,r3,r2
  80eeac:	7996d83a 	srl	r11,r15,r6
  80eeb0:	8198d83a 	srl	r12,r16,r6
  80eeb4:	1ad6b03a 	or	r11,r3,r11
  80eeb8:	003f3e06 	br	80ebb4 <_fpadd_parts+0x9c>
  80eebc:	2006d07a 	srli	r3,r4,1
  80eec0:	008007c4 	movi	r2,31
  80eec4:	1185c83a 	sub	r2,r2,r6
  80eec8:	1890d83a 	srl	r8,r3,r2
  80eecc:	218e983a 	sll	r7,r4,r6
  80eed0:	003f3e06 	br	80ebcc <_fpadd_parts+0xb4>
  80eed4:	113f821e 	bne	r2,r4,80ece0 <_fpadd_parts+0x1c8>
  80eed8:	28c00117 	ldw	r3,4(r5)
  80eedc:	98800117 	ldw	r2,4(r19)
  80eee0:	10ff7f26 	beq	r2,r3,80ece0 <_fpadd_parts+0x1c8>
  80eee4:	04c02074 	movhi	r19,129
  80eee8:	9cd33904 	addi	r19,r19,19684
  80eeec:	003f7c06 	br	80ece0 <_fpadd_parts+0x1c8>
  80eef0:	2006d07a 	srli	r3,r4,1
  80eef4:	008007c4 	movi	r2,31
  80eef8:	1185c83a 	sub	r2,r2,r6
  80eefc:	1894d83a 	srl	r10,r3,r2
  80ef00:	2192983a 	sll	r9,r4,r6
  80ef04:	003fd706 	br	80ee64 <_fpadd_parts+0x34c>
  80ef08:	9487883a 	add	r3,r18,r18
  80ef0c:	008007c4 	movi	r2,31
  80ef10:	1185c83a 	sub	r2,r2,r6
  80ef14:	1886983a 	sll	r3,r3,r2
  80ef18:	899ad83a 	srl	r13,r17,r6
  80ef1c:	919cd83a 	srl	r14,r18,r6
  80ef20:	1b5ab03a 	or	r13,r3,r13
  80ef24:	003fc906 	br	80ee4c <_fpadd_parts+0x334>

0080ef28 <__subdf3>:
  80ef28:	deffea04 	addi	sp,sp,-88
  80ef2c:	dcc01415 	stw	r19,80(sp)
  80ef30:	dcc00404 	addi	r19,sp,16
  80ef34:	2011883a 	mov	r8,r4
  80ef38:	2813883a 	mov	r9,r5
  80ef3c:	dc401315 	stw	r17,76(sp)
  80ef40:	d809883a 	mov	r4,sp
  80ef44:	980b883a 	mov	r5,r19
  80ef48:	dc400904 	addi	r17,sp,36
  80ef4c:	dfc01515 	stw	ra,84(sp)
  80ef50:	da400115 	stw	r9,4(sp)
  80ef54:	d9c00315 	stw	r7,12(sp)
  80ef58:	da000015 	stw	r8,0(sp)
  80ef5c:	d9800215 	stw	r6,8(sp)
  80ef60:	08103f40 	call	8103f4 <__unpack_d>
  80ef64:	d9000204 	addi	r4,sp,8
  80ef68:	880b883a 	mov	r5,r17
  80ef6c:	08103f40 	call	8103f4 <__unpack_d>
  80ef70:	d8800a17 	ldw	r2,40(sp)
  80ef74:	880b883a 	mov	r5,r17
  80ef78:	9809883a 	mov	r4,r19
  80ef7c:	d9800e04 	addi	r6,sp,56
  80ef80:	1080005c 	xori	r2,r2,1
  80ef84:	d8800a15 	stw	r2,40(sp)
  80ef88:	080eb180 	call	80eb18 <_fpadd_parts>
  80ef8c:	1009883a 	mov	r4,r2
  80ef90:	08100e00 	call	8100e0 <__pack_d>
  80ef94:	dfc01517 	ldw	ra,84(sp)
  80ef98:	dcc01417 	ldw	r19,80(sp)
  80ef9c:	dc401317 	ldw	r17,76(sp)
  80efa0:	dec01604 	addi	sp,sp,88
  80efa4:	f800283a 	ret

0080efa8 <__adddf3>:
  80efa8:	deffea04 	addi	sp,sp,-88
  80efac:	dcc01415 	stw	r19,80(sp)
  80efb0:	dcc00404 	addi	r19,sp,16
  80efb4:	2011883a 	mov	r8,r4
  80efb8:	2813883a 	mov	r9,r5
  80efbc:	dc401315 	stw	r17,76(sp)
  80efc0:	d809883a 	mov	r4,sp
  80efc4:	980b883a 	mov	r5,r19
  80efc8:	dc400904 	addi	r17,sp,36
  80efcc:	dfc01515 	stw	ra,84(sp)
  80efd0:	da400115 	stw	r9,4(sp)
  80efd4:	d9c00315 	stw	r7,12(sp)
  80efd8:	da000015 	stw	r8,0(sp)
  80efdc:	d9800215 	stw	r6,8(sp)
  80efe0:	08103f40 	call	8103f4 <__unpack_d>
  80efe4:	d9000204 	addi	r4,sp,8
  80efe8:	880b883a 	mov	r5,r17
  80efec:	08103f40 	call	8103f4 <__unpack_d>
  80eff0:	d9800e04 	addi	r6,sp,56
  80eff4:	9809883a 	mov	r4,r19
  80eff8:	880b883a 	mov	r5,r17
  80effc:	080eb180 	call	80eb18 <_fpadd_parts>
  80f000:	1009883a 	mov	r4,r2
  80f004:	08100e00 	call	8100e0 <__pack_d>
  80f008:	dfc01517 	ldw	ra,84(sp)
  80f00c:	dcc01417 	ldw	r19,80(sp)
  80f010:	dc401317 	ldw	r17,76(sp)
  80f014:	dec01604 	addi	sp,sp,88
  80f018:	f800283a 	ret

0080f01c <__muldf3>:
  80f01c:	deffe004 	addi	sp,sp,-128
  80f020:	dc401815 	stw	r17,96(sp)
  80f024:	dc400404 	addi	r17,sp,16
  80f028:	2011883a 	mov	r8,r4
  80f02c:	2813883a 	mov	r9,r5
  80f030:	dc001715 	stw	r16,92(sp)
  80f034:	d809883a 	mov	r4,sp
  80f038:	880b883a 	mov	r5,r17
  80f03c:	dc000904 	addi	r16,sp,36
  80f040:	dfc01f15 	stw	ra,124(sp)
  80f044:	da400115 	stw	r9,4(sp)
  80f048:	d9c00315 	stw	r7,12(sp)
  80f04c:	da000015 	stw	r8,0(sp)
  80f050:	d9800215 	stw	r6,8(sp)
  80f054:	ddc01e15 	stw	r23,120(sp)
  80f058:	dd801d15 	stw	r22,116(sp)
  80f05c:	dd401c15 	stw	r21,112(sp)
  80f060:	dd001b15 	stw	r20,108(sp)
  80f064:	dcc01a15 	stw	r19,104(sp)
  80f068:	dc801915 	stw	r18,100(sp)
  80f06c:	08103f40 	call	8103f4 <__unpack_d>
  80f070:	d9000204 	addi	r4,sp,8
  80f074:	800b883a 	mov	r5,r16
  80f078:	08103f40 	call	8103f4 <__unpack_d>
  80f07c:	d9000417 	ldw	r4,16(sp)
  80f080:	00800044 	movi	r2,1
  80f084:	1100102e 	bgeu	r2,r4,80f0c8 <__muldf3+0xac>
  80f088:	d8c00917 	ldw	r3,36(sp)
  80f08c:	10c0062e 	bgeu	r2,r3,80f0a8 <__muldf3+0x8c>
  80f090:	00800104 	movi	r2,4
  80f094:	20800a26 	beq	r4,r2,80f0c0 <__muldf3+0xa4>
  80f098:	1880cc26 	beq	r3,r2,80f3cc <__muldf3+0x3b0>
  80f09c:	00800084 	movi	r2,2
  80f0a0:	20800926 	beq	r4,r2,80f0c8 <__muldf3+0xac>
  80f0a4:	1880191e 	bne	r3,r2,80f10c <__muldf3+0xf0>
  80f0a8:	d8c00a17 	ldw	r3,40(sp)
  80f0ac:	d8800517 	ldw	r2,20(sp)
  80f0b0:	8009883a 	mov	r4,r16
  80f0b4:	10c4c03a 	cmpne	r2,r2,r3
  80f0b8:	d8800a15 	stw	r2,40(sp)
  80f0bc:	00000706 	br	80f0dc <__muldf3+0xc0>
  80f0c0:	00800084 	movi	r2,2
  80f0c4:	1880c326 	beq	r3,r2,80f3d4 <__muldf3+0x3b8>
  80f0c8:	d8800517 	ldw	r2,20(sp)
  80f0cc:	d8c00a17 	ldw	r3,40(sp)
  80f0d0:	8809883a 	mov	r4,r17
  80f0d4:	10c4c03a 	cmpne	r2,r2,r3
  80f0d8:	d8800515 	stw	r2,20(sp)
  80f0dc:	08100e00 	call	8100e0 <__pack_d>
  80f0e0:	dfc01f17 	ldw	ra,124(sp)
  80f0e4:	ddc01e17 	ldw	r23,120(sp)
  80f0e8:	dd801d17 	ldw	r22,116(sp)
  80f0ec:	dd401c17 	ldw	r21,112(sp)
  80f0f0:	dd001b17 	ldw	r20,108(sp)
  80f0f4:	dcc01a17 	ldw	r19,104(sp)
  80f0f8:	dc801917 	ldw	r18,100(sp)
  80f0fc:	dc401817 	ldw	r17,96(sp)
  80f100:	dc001717 	ldw	r16,92(sp)
  80f104:	dec02004 	addi	sp,sp,128
  80f108:	f800283a 	ret
  80f10c:	dd800717 	ldw	r22,28(sp)
  80f110:	dc800c17 	ldw	r18,48(sp)
  80f114:	002b883a 	mov	r21,zero
  80f118:	0023883a 	mov	r17,zero
  80f11c:	a80b883a 	mov	r5,r21
  80f120:	b00d883a 	mov	r6,r22
  80f124:	880f883a 	mov	r7,r17
  80f128:	ddc00817 	ldw	r23,32(sp)
  80f12c:	dcc00d17 	ldw	r19,52(sp)
  80f130:	9009883a 	mov	r4,r18
  80f134:	080db1c0 	call	80db1c <__muldi3>
  80f138:	001b883a 	mov	r13,zero
  80f13c:	680f883a 	mov	r7,r13
  80f140:	b009883a 	mov	r4,r22
  80f144:	000b883a 	mov	r5,zero
  80f148:	980d883a 	mov	r6,r19
  80f14c:	b82d883a 	mov	r22,r23
  80f150:	002f883a 	mov	r23,zero
  80f154:	db401615 	stw	r13,88(sp)
  80f158:	d8801315 	stw	r2,76(sp)
  80f15c:	d8c01415 	stw	r3,80(sp)
  80f160:	dcc01515 	stw	r19,84(sp)
  80f164:	080db1c0 	call	80db1c <__muldi3>
  80f168:	b00d883a 	mov	r6,r22
  80f16c:	000b883a 	mov	r5,zero
  80f170:	9009883a 	mov	r4,r18
  80f174:	b80f883a 	mov	r7,r23
  80f178:	1021883a 	mov	r16,r2
  80f17c:	1823883a 	mov	r17,r3
  80f180:	080db1c0 	call	80db1c <__muldi3>
  80f184:	8085883a 	add	r2,r16,r2
  80f188:	140d803a 	cmpltu	r6,r2,r16
  80f18c:	88c7883a 	add	r3,r17,r3
  80f190:	30cd883a 	add	r6,r6,r3
  80f194:	1029883a 	mov	r20,r2
  80f198:	302b883a 	mov	r21,r6
  80f19c:	da801317 	ldw	r10,76(sp)
  80f1a0:	dac01417 	ldw	r11,80(sp)
  80f1a4:	db001517 	ldw	r12,84(sp)
  80f1a8:	db401617 	ldw	r13,88(sp)
  80f1ac:	3440612e 	bgeu	r6,r17,80f334 <__muldf3+0x318>
  80f1b0:	0009883a 	mov	r4,zero
  80f1b4:	5105883a 	add	r2,r10,r4
  80f1b8:	128d803a 	cmpltu	r6,r2,r10
  80f1bc:	5d07883a 	add	r3,r11,r20
  80f1c0:	30cd883a 	add	r6,r6,r3
  80f1c4:	0021883a 	mov	r16,zero
  80f1c8:	04400044 	movi	r17,1
  80f1cc:	1025883a 	mov	r18,r2
  80f1d0:	3027883a 	mov	r19,r6
  80f1d4:	32c06236 	bltu	r6,r11,80f360 <__muldf3+0x344>
  80f1d8:	59807a26 	beq	r11,r6,80f3c4 <__muldf3+0x3a8>
  80f1dc:	680b883a 	mov	r5,r13
  80f1e0:	b80f883a 	mov	r7,r23
  80f1e4:	6009883a 	mov	r4,r12
  80f1e8:	b00d883a 	mov	r6,r22
  80f1ec:	080db1c0 	call	80db1c <__muldi3>
  80f1f0:	1009883a 	mov	r4,r2
  80f1f4:	000f883a 	mov	r7,zero
  80f1f8:	1545883a 	add	r2,r2,r21
  80f1fc:	1111803a 	cmpltu	r8,r2,r4
  80f200:	19c7883a 	add	r3,r3,r7
  80f204:	40c7883a 	add	r3,r8,r3
  80f208:	88cb883a 	add	r5,r17,r3
  80f20c:	d8c00617 	ldw	r3,24(sp)
  80f210:	8089883a 	add	r4,r16,r2
  80f214:	d8800b17 	ldw	r2,44(sp)
  80f218:	18c00104 	addi	r3,r3,4
  80f21c:	240d803a 	cmpltu	r6,r4,r16
  80f220:	10c7883a 	add	r3,r2,r3
  80f224:	2013883a 	mov	r9,r4
  80f228:	d8800a17 	ldw	r2,40(sp)
  80f22c:	d9000517 	ldw	r4,20(sp)
  80f230:	314d883a 	add	r6,r6,r5
  80f234:	3015883a 	mov	r10,r6
  80f238:	2088c03a 	cmpne	r4,r4,r2
  80f23c:	00880034 	movhi	r2,8192
  80f240:	10bfffc4 	addi	r2,r2,-1
  80f244:	d9000f15 	stw	r4,60(sp)
  80f248:	d8c01015 	stw	r3,64(sp)
  80f24c:	1180162e 	bgeu	r2,r6,80f2a8 <__muldf3+0x28c>
  80f250:	1811883a 	mov	r8,r3
  80f254:	101f883a 	mov	r15,r2
  80f258:	980497fa 	slli	r2,r19,31
  80f25c:	9016d07a 	srli	r11,r18,1
  80f260:	500697fa 	slli	r3,r10,31
  80f264:	480cd07a 	srli	r6,r9,1
  80f268:	500ed07a 	srli	r7,r10,1
  80f26c:	12d6b03a 	or	r11,r2,r11
  80f270:	00800044 	movi	r2,1
  80f274:	198cb03a 	or	r6,r3,r6
  80f278:	4888703a 	and	r4,r9,r2
  80f27c:	9818d07a 	srli	r12,r19,1
  80f280:	001b883a 	mov	r13,zero
  80f284:	03a00034 	movhi	r14,32768
  80f288:	3013883a 	mov	r9,r6
  80f28c:	3815883a 	mov	r10,r7
  80f290:	4091883a 	add	r8,r8,r2
  80f294:	20000226 	beq	r4,zero,80f2a0 <__muldf3+0x284>
  80f298:	5b64b03a 	or	r18,r11,r13
  80f29c:	63a6b03a 	or	r19,r12,r14
  80f2a0:	7abfed36 	bltu	r15,r10,80f258 <__muldf3+0x23c>
  80f2a4:	da001015 	stw	r8,64(sp)
  80f2a8:	00840034 	movhi	r2,4096
  80f2ac:	10bfffc4 	addi	r2,r2,-1
  80f2b0:	12801436 	bltu	r2,r10,80f304 <__muldf3+0x2e8>
  80f2b4:	da001017 	ldw	r8,64(sp)
  80f2b8:	101f883a 	mov	r15,r2
  80f2bc:	4a45883a 	add	r2,r9,r9
  80f2c0:	124d803a 	cmpltu	r6,r2,r9
  80f2c4:	5287883a 	add	r3,r10,r10
  80f2c8:	9497883a 	add	r11,r18,r18
  80f2cc:	5c8f803a 	cmpltu	r7,r11,r18
  80f2d0:	9cd9883a 	add	r12,r19,r19
  80f2d4:	01000044 	movi	r4,1
  80f2d8:	30cd883a 	add	r6,r6,r3
  80f2dc:	3b0f883a 	add	r7,r7,r12
  80f2e0:	423fffc4 	addi	r8,r8,-1
  80f2e4:	1013883a 	mov	r9,r2
  80f2e8:	3015883a 	mov	r10,r6
  80f2ec:	111ab03a 	or	r13,r2,r4
  80f2f0:	98003016 	blt	r19,zero,80f3b4 <__muldf3+0x398>
  80f2f4:	5825883a 	mov	r18,r11
  80f2f8:	3827883a 	mov	r19,r7
  80f2fc:	7abfef2e 	bgeu	r15,r10,80f2bc <__muldf3+0x2a0>
  80f300:	da001015 	stw	r8,64(sp)
  80f304:	00803fc4 	movi	r2,255
  80f308:	488e703a 	and	r7,r9,r2
  80f30c:	00802004 	movi	r2,128
  80f310:	0007883a 	mov	r3,zero
  80f314:	0011883a 	mov	r8,zero
  80f318:	38801826 	beq	r7,r2,80f37c <__muldf3+0x360>
  80f31c:	008000c4 	movi	r2,3
  80f320:	d9000e04 	addi	r4,sp,56
  80f324:	da801215 	stw	r10,72(sp)
  80f328:	d8800e15 	stw	r2,56(sp)
  80f32c:	da401115 	stw	r9,68(sp)
  80f330:	003f6a06 	br	80f0dc <__muldf3+0xc0>
  80f334:	89802126 	beq	r17,r6,80f3bc <__muldf3+0x3a0>
  80f338:	0009883a 	mov	r4,zero
  80f33c:	5105883a 	add	r2,r10,r4
  80f340:	128d803a 	cmpltu	r6,r2,r10
  80f344:	5d07883a 	add	r3,r11,r20
  80f348:	30cd883a 	add	r6,r6,r3
  80f34c:	0021883a 	mov	r16,zero
  80f350:	0023883a 	mov	r17,zero
  80f354:	1025883a 	mov	r18,r2
  80f358:	3027883a 	mov	r19,r6
  80f35c:	32ff9e2e 	bgeu	r6,r11,80f1d8 <__muldf3+0x1bc>
  80f360:	00800044 	movi	r2,1
  80f364:	8089883a 	add	r4,r16,r2
  80f368:	240d803a 	cmpltu	r6,r4,r16
  80f36c:	344d883a 	add	r6,r6,r17
  80f370:	2021883a 	mov	r16,r4
  80f374:	3023883a 	mov	r17,r6
  80f378:	003f9806 	br	80f1dc <__muldf3+0x1c0>
  80f37c:	403fe71e 	bne	r8,zero,80f31c <__muldf3+0x300>
  80f380:	01004004 	movi	r4,256
  80f384:	4904703a 	and	r2,r9,r4
  80f388:	10c4b03a 	or	r2,r2,r3
  80f38c:	103fe31e 	bne	r2,zero,80f31c <__muldf3+0x300>
  80f390:	94c4b03a 	or	r2,r18,r19
  80f394:	103fe126 	beq	r2,zero,80f31c <__muldf3+0x300>
  80f398:	49c5883a 	add	r2,r9,r7
  80f39c:	1251803a 	cmpltu	r8,r2,r9
  80f3a0:	4291883a 	add	r8,r8,r10
  80f3a4:	013fc004 	movi	r4,-256
  80f3a8:	1112703a 	and	r9,r2,r4
  80f3ac:	4015883a 	mov	r10,r8
  80f3b0:	003fda06 	br	80f31c <__muldf3+0x300>
  80f3b4:	6813883a 	mov	r9,r13
  80f3b8:	003fce06 	br	80f2f4 <__muldf3+0x2d8>
  80f3bc:	143f7c36 	bltu	r2,r16,80f1b0 <__muldf3+0x194>
  80f3c0:	003fdd06 	br	80f338 <__muldf3+0x31c>
  80f3c4:	12bf852e 	bgeu	r2,r10,80f1dc <__muldf3+0x1c0>
  80f3c8:	003fe506 	br	80f360 <__muldf3+0x344>
  80f3cc:	00800084 	movi	r2,2
  80f3d0:	20bf351e 	bne	r4,r2,80f0a8 <__muldf3+0x8c>
  80f3d4:	01002074 	movhi	r4,129
  80f3d8:	21133904 	addi	r4,r4,19684
  80f3dc:	003f3f06 	br	80f0dc <__muldf3+0xc0>

0080f3e0 <__divdf3>:
  80f3e0:	deffed04 	addi	sp,sp,-76
  80f3e4:	dcc01115 	stw	r19,68(sp)
  80f3e8:	dcc00404 	addi	r19,sp,16
  80f3ec:	2011883a 	mov	r8,r4
  80f3f0:	2813883a 	mov	r9,r5
  80f3f4:	dc000e15 	stw	r16,56(sp)
  80f3f8:	d809883a 	mov	r4,sp
  80f3fc:	980b883a 	mov	r5,r19
  80f400:	dc000904 	addi	r16,sp,36
  80f404:	dfc01215 	stw	ra,72(sp)
  80f408:	da400115 	stw	r9,4(sp)
  80f40c:	d9c00315 	stw	r7,12(sp)
  80f410:	da000015 	stw	r8,0(sp)
  80f414:	d9800215 	stw	r6,8(sp)
  80f418:	dc801015 	stw	r18,64(sp)
  80f41c:	dc400f15 	stw	r17,60(sp)
  80f420:	08103f40 	call	8103f4 <__unpack_d>
  80f424:	d9000204 	addi	r4,sp,8
  80f428:	800b883a 	mov	r5,r16
  80f42c:	08103f40 	call	8103f4 <__unpack_d>
  80f430:	d9000417 	ldw	r4,16(sp)
  80f434:	00800044 	movi	r2,1
  80f438:	11000b2e 	bgeu	r2,r4,80f468 <__divdf3+0x88>
  80f43c:	d9400917 	ldw	r5,36(sp)
  80f440:	1140762e 	bgeu	r2,r5,80f61c <__divdf3+0x23c>
  80f444:	d8800517 	ldw	r2,20(sp)
  80f448:	d8c00a17 	ldw	r3,40(sp)
  80f44c:	01800104 	movi	r6,4
  80f450:	10c4f03a 	xor	r2,r2,r3
  80f454:	d8800515 	stw	r2,20(sp)
  80f458:	21800226 	beq	r4,r6,80f464 <__divdf3+0x84>
  80f45c:	00800084 	movi	r2,2
  80f460:	2080141e 	bne	r4,r2,80f4b4 <__divdf3+0xd4>
  80f464:	29000926 	beq	r5,r4,80f48c <__divdf3+0xac>
  80f468:	9809883a 	mov	r4,r19
  80f46c:	08100e00 	call	8100e0 <__pack_d>
  80f470:	dfc01217 	ldw	ra,72(sp)
  80f474:	dcc01117 	ldw	r19,68(sp)
  80f478:	dc801017 	ldw	r18,64(sp)
  80f47c:	dc400f17 	ldw	r17,60(sp)
  80f480:	dc000e17 	ldw	r16,56(sp)
  80f484:	dec01304 	addi	sp,sp,76
  80f488:	f800283a 	ret
  80f48c:	01002074 	movhi	r4,129
  80f490:	21133904 	addi	r4,r4,19684
  80f494:	08100e00 	call	8100e0 <__pack_d>
  80f498:	dfc01217 	ldw	ra,72(sp)
  80f49c:	dcc01117 	ldw	r19,68(sp)
  80f4a0:	dc801017 	ldw	r18,64(sp)
  80f4a4:	dc400f17 	ldw	r17,60(sp)
  80f4a8:	dc000e17 	ldw	r16,56(sp)
  80f4ac:	dec01304 	addi	sp,sp,76
  80f4b0:	f800283a 	ret
  80f4b4:	29805b26 	beq	r5,r6,80f624 <__divdf3+0x244>
  80f4b8:	28802d26 	beq	r5,r2,80f570 <__divdf3+0x190>
  80f4bc:	d8c00617 	ldw	r3,24(sp)
  80f4c0:	d8800b17 	ldw	r2,44(sp)
  80f4c4:	d9c00817 	ldw	r7,32(sp)
  80f4c8:	dc400d17 	ldw	r17,52(sp)
  80f4cc:	188bc83a 	sub	r5,r3,r2
  80f4d0:	d9800717 	ldw	r6,28(sp)
  80f4d4:	dc000c17 	ldw	r16,48(sp)
  80f4d8:	d9400615 	stw	r5,24(sp)
  80f4dc:	3c403836 	bltu	r7,r17,80f5c0 <__divdf3+0x1e0>
  80f4e0:	89c03626 	beq	r17,r7,80f5bc <__divdf3+0x1dc>
  80f4e4:	0015883a 	mov	r10,zero
  80f4e8:	001d883a 	mov	r14,zero
  80f4ec:	02c40034 	movhi	r11,4096
  80f4f0:	001f883a 	mov	r15,zero
  80f4f4:	003f883a 	mov	ra,zero
  80f4f8:	04800f44 	movi	r18,61
  80f4fc:	00000f06 	br	80f53c <__divdf3+0x15c>
  80f500:	601d883a 	mov	r14,r12
  80f504:	681f883a 	mov	r15,r13
  80f508:	400d883a 	mov	r6,r8
  80f50c:	100f883a 	mov	r7,r2
  80f510:	3191883a 	add	r8,r6,r6
  80f514:	5808d07a 	srli	r4,r11,1
  80f518:	4185803a 	cmpltu	r2,r8,r6
  80f51c:	39d3883a 	add	r9,r7,r7
  80f520:	28c6b03a 	or	r3,r5,r3
  80f524:	1245883a 	add	r2,r2,r9
  80f528:	1815883a 	mov	r10,r3
  80f52c:	2017883a 	mov	r11,r4
  80f530:	400d883a 	mov	r6,r8
  80f534:	100f883a 	mov	r7,r2
  80f538:	fc801726 	beq	ra,r18,80f598 <__divdf3+0x1b8>
  80f53c:	580a97fa 	slli	r5,r11,31
  80f540:	5006d07a 	srli	r3,r10,1
  80f544:	ffc00044 	addi	ra,ra,1
  80f548:	3c7ff136 	bltu	r7,r17,80f510 <__divdf3+0x130>
  80f54c:	3411c83a 	sub	r8,r6,r16
  80f550:	3205803a 	cmpltu	r2,r6,r8
  80f554:	3c53c83a 	sub	r9,r7,r17
  80f558:	7298b03a 	or	r12,r14,r10
  80f55c:	7adab03a 	or	r13,r15,r11
  80f560:	4885c83a 	sub	r2,r9,r2
  80f564:	89ffe61e 	bne	r17,r7,80f500 <__divdf3+0x120>
  80f568:	343fe936 	bltu	r6,r16,80f510 <__divdf3+0x130>
  80f56c:	003fe406 	br	80f500 <__divdf3+0x120>
  80f570:	9809883a 	mov	r4,r19
  80f574:	d9800415 	stw	r6,16(sp)
  80f578:	08100e00 	call	8100e0 <__pack_d>
  80f57c:	dfc01217 	ldw	ra,72(sp)
  80f580:	dcc01117 	ldw	r19,68(sp)
  80f584:	dc801017 	ldw	r18,64(sp)
  80f588:	dc400f17 	ldw	r17,60(sp)
  80f58c:	dc000e17 	ldw	r16,56(sp)
  80f590:	dec01304 	addi	sp,sp,76
  80f594:	f800283a 	ret
  80f598:	00803fc4 	movi	r2,255
  80f59c:	7090703a 	and	r8,r14,r2
  80f5a0:	00802004 	movi	r2,128
  80f5a4:	0007883a 	mov	r3,zero
  80f5a8:	0013883a 	mov	r9,zero
  80f5ac:	40800d26 	beq	r8,r2,80f5e4 <__divdf3+0x204>
  80f5b0:	dbc00815 	stw	r15,32(sp)
  80f5b4:	db800715 	stw	r14,28(sp)
  80f5b8:	003fab06 	br	80f468 <__divdf3+0x88>
  80f5bc:	343fc92e 	bgeu	r6,r16,80f4e4 <__divdf3+0x104>
  80f5c0:	3185883a 	add	r2,r6,r6
  80f5c4:	1189803a 	cmpltu	r4,r2,r6
  80f5c8:	39c7883a 	add	r3,r7,r7
  80f5cc:	20c9883a 	add	r4,r4,r3
  80f5d0:	297fffc4 	addi	r5,r5,-1
  80f5d4:	100d883a 	mov	r6,r2
  80f5d8:	200f883a 	mov	r7,r4
  80f5dc:	d9400615 	stw	r5,24(sp)
  80f5e0:	003fc006 	br	80f4e4 <__divdf3+0x104>
  80f5e4:	483ff21e 	bne	r9,zero,80f5b0 <__divdf3+0x1d0>
  80f5e8:	01004004 	movi	r4,256
  80f5ec:	7104703a 	and	r2,r14,r4
  80f5f0:	10c4b03a 	or	r2,r2,r3
  80f5f4:	103fee1e 	bne	r2,zero,80f5b0 <__divdf3+0x1d0>
  80f5f8:	31c4b03a 	or	r2,r6,r7
  80f5fc:	103fec26 	beq	r2,zero,80f5b0 <__divdf3+0x1d0>
  80f600:	7205883a 	add	r2,r14,r8
  80f604:	1391803a 	cmpltu	r8,r2,r14
  80f608:	43d1883a 	add	r8,r8,r15
  80f60c:	013fc004 	movi	r4,-256
  80f610:	111c703a 	and	r14,r2,r4
  80f614:	401f883a 	mov	r15,r8
  80f618:	003fe506 	br	80f5b0 <__divdf3+0x1d0>
  80f61c:	8009883a 	mov	r4,r16
  80f620:	003f9206 	br	80f46c <__divdf3+0x8c>
  80f624:	9809883a 	mov	r4,r19
  80f628:	d8000715 	stw	zero,28(sp)
  80f62c:	d8000815 	stw	zero,32(sp)
  80f630:	d8000615 	stw	zero,24(sp)
  80f634:	003f8d06 	br	80f46c <__divdf3+0x8c>

0080f638 <__eqdf2>:
  80f638:	deffef04 	addi	sp,sp,-68
  80f63c:	dc400f15 	stw	r17,60(sp)
  80f640:	dc400404 	addi	r17,sp,16
  80f644:	2005883a 	mov	r2,r4
  80f648:	2807883a 	mov	r3,r5
  80f64c:	dc000e15 	stw	r16,56(sp)
  80f650:	d809883a 	mov	r4,sp
  80f654:	880b883a 	mov	r5,r17
  80f658:	dc000904 	addi	r16,sp,36
  80f65c:	d8c00115 	stw	r3,4(sp)
  80f660:	d8800015 	stw	r2,0(sp)
  80f664:	d9800215 	stw	r6,8(sp)
  80f668:	dfc01015 	stw	ra,64(sp)
  80f66c:	d9c00315 	stw	r7,12(sp)
  80f670:	08103f40 	call	8103f4 <__unpack_d>
  80f674:	d9000204 	addi	r4,sp,8
  80f678:	800b883a 	mov	r5,r16
  80f67c:	08103f40 	call	8103f4 <__unpack_d>
  80f680:	d8800417 	ldw	r2,16(sp)
  80f684:	00c00044 	movi	r3,1
  80f688:	180d883a 	mov	r6,r3
  80f68c:	1880062e 	bgeu	r3,r2,80f6a8 <__eqdf2+0x70>
  80f690:	d8800917 	ldw	r2,36(sp)
  80f694:	8809883a 	mov	r4,r17
  80f698:	800b883a 	mov	r5,r16
  80f69c:	1880022e 	bgeu	r3,r2,80f6a8 <__eqdf2+0x70>
  80f6a0:	081052c0 	call	81052c <__fpcmp_parts_d>
  80f6a4:	100d883a 	mov	r6,r2
  80f6a8:	3005883a 	mov	r2,r6
  80f6ac:	dfc01017 	ldw	ra,64(sp)
  80f6b0:	dc400f17 	ldw	r17,60(sp)
  80f6b4:	dc000e17 	ldw	r16,56(sp)
  80f6b8:	dec01104 	addi	sp,sp,68
  80f6bc:	f800283a 	ret

0080f6c0 <__nedf2>:
  80f6c0:	deffef04 	addi	sp,sp,-68
  80f6c4:	dc400f15 	stw	r17,60(sp)
  80f6c8:	dc400404 	addi	r17,sp,16
  80f6cc:	2005883a 	mov	r2,r4
  80f6d0:	2807883a 	mov	r3,r5
  80f6d4:	dc000e15 	stw	r16,56(sp)
  80f6d8:	d809883a 	mov	r4,sp
  80f6dc:	880b883a 	mov	r5,r17
  80f6e0:	dc000904 	addi	r16,sp,36
  80f6e4:	d8c00115 	stw	r3,4(sp)
  80f6e8:	d8800015 	stw	r2,0(sp)
  80f6ec:	d9800215 	stw	r6,8(sp)
  80f6f0:	dfc01015 	stw	ra,64(sp)
  80f6f4:	d9c00315 	stw	r7,12(sp)
  80f6f8:	08103f40 	call	8103f4 <__unpack_d>
  80f6fc:	d9000204 	addi	r4,sp,8
  80f700:	800b883a 	mov	r5,r16
  80f704:	08103f40 	call	8103f4 <__unpack_d>
  80f708:	d8800417 	ldw	r2,16(sp)
  80f70c:	00c00044 	movi	r3,1
  80f710:	180d883a 	mov	r6,r3
  80f714:	1880062e 	bgeu	r3,r2,80f730 <__nedf2+0x70>
  80f718:	d8800917 	ldw	r2,36(sp)
  80f71c:	8809883a 	mov	r4,r17
  80f720:	800b883a 	mov	r5,r16
  80f724:	1880022e 	bgeu	r3,r2,80f730 <__nedf2+0x70>
  80f728:	081052c0 	call	81052c <__fpcmp_parts_d>
  80f72c:	100d883a 	mov	r6,r2
  80f730:	3005883a 	mov	r2,r6
  80f734:	dfc01017 	ldw	ra,64(sp)
  80f738:	dc400f17 	ldw	r17,60(sp)
  80f73c:	dc000e17 	ldw	r16,56(sp)
  80f740:	dec01104 	addi	sp,sp,68
  80f744:	f800283a 	ret

0080f748 <__gtdf2>:
  80f748:	deffef04 	addi	sp,sp,-68
  80f74c:	dc400f15 	stw	r17,60(sp)
  80f750:	dc400404 	addi	r17,sp,16
  80f754:	2005883a 	mov	r2,r4
  80f758:	2807883a 	mov	r3,r5
  80f75c:	dc000e15 	stw	r16,56(sp)
  80f760:	d809883a 	mov	r4,sp
  80f764:	880b883a 	mov	r5,r17
  80f768:	dc000904 	addi	r16,sp,36
  80f76c:	d8c00115 	stw	r3,4(sp)
  80f770:	d8800015 	stw	r2,0(sp)
  80f774:	d9800215 	stw	r6,8(sp)
  80f778:	dfc01015 	stw	ra,64(sp)
  80f77c:	d9c00315 	stw	r7,12(sp)
  80f780:	08103f40 	call	8103f4 <__unpack_d>
  80f784:	d9000204 	addi	r4,sp,8
  80f788:	800b883a 	mov	r5,r16
  80f78c:	08103f40 	call	8103f4 <__unpack_d>
  80f790:	d8800417 	ldw	r2,16(sp)
  80f794:	00c00044 	movi	r3,1
  80f798:	01bfffc4 	movi	r6,-1
  80f79c:	1880062e 	bgeu	r3,r2,80f7b8 <__gtdf2+0x70>
  80f7a0:	d8800917 	ldw	r2,36(sp)
  80f7a4:	8809883a 	mov	r4,r17
  80f7a8:	800b883a 	mov	r5,r16
  80f7ac:	1880022e 	bgeu	r3,r2,80f7b8 <__gtdf2+0x70>
  80f7b0:	081052c0 	call	81052c <__fpcmp_parts_d>
  80f7b4:	100d883a 	mov	r6,r2
  80f7b8:	3005883a 	mov	r2,r6
  80f7bc:	dfc01017 	ldw	ra,64(sp)
  80f7c0:	dc400f17 	ldw	r17,60(sp)
  80f7c4:	dc000e17 	ldw	r16,56(sp)
  80f7c8:	dec01104 	addi	sp,sp,68
  80f7cc:	f800283a 	ret

0080f7d0 <__gedf2>:
  80f7d0:	deffef04 	addi	sp,sp,-68
  80f7d4:	dc400f15 	stw	r17,60(sp)
  80f7d8:	dc400404 	addi	r17,sp,16
  80f7dc:	2005883a 	mov	r2,r4
  80f7e0:	2807883a 	mov	r3,r5
  80f7e4:	dc000e15 	stw	r16,56(sp)
  80f7e8:	d809883a 	mov	r4,sp
  80f7ec:	880b883a 	mov	r5,r17
  80f7f0:	dc000904 	addi	r16,sp,36
  80f7f4:	d8c00115 	stw	r3,4(sp)
  80f7f8:	d8800015 	stw	r2,0(sp)
  80f7fc:	d9800215 	stw	r6,8(sp)
  80f800:	dfc01015 	stw	ra,64(sp)
  80f804:	d9c00315 	stw	r7,12(sp)
  80f808:	08103f40 	call	8103f4 <__unpack_d>
  80f80c:	d9000204 	addi	r4,sp,8
  80f810:	800b883a 	mov	r5,r16
  80f814:	08103f40 	call	8103f4 <__unpack_d>
  80f818:	d8800417 	ldw	r2,16(sp)
  80f81c:	00c00044 	movi	r3,1
  80f820:	01bfffc4 	movi	r6,-1
  80f824:	1880062e 	bgeu	r3,r2,80f840 <__gedf2+0x70>
  80f828:	d8800917 	ldw	r2,36(sp)
  80f82c:	8809883a 	mov	r4,r17
  80f830:	800b883a 	mov	r5,r16
  80f834:	1880022e 	bgeu	r3,r2,80f840 <__gedf2+0x70>
  80f838:	081052c0 	call	81052c <__fpcmp_parts_d>
  80f83c:	100d883a 	mov	r6,r2
  80f840:	3005883a 	mov	r2,r6
  80f844:	dfc01017 	ldw	ra,64(sp)
  80f848:	dc400f17 	ldw	r17,60(sp)
  80f84c:	dc000e17 	ldw	r16,56(sp)
  80f850:	dec01104 	addi	sp,sp,68
  80f854:	f800283a 	ret

0080f858 <__ltdf2>:
  80f858:	deffef04 	addi	sp,sp,-68
  80f85c:	dc400f15 	stw	r17,60(sp)
  80f860:	dc400404 	addi	r17,sp,16
  80f864:	2005883a 	mov	r2,r4
  80f868:	2807883a 	mov	r3,r5
  80f86c:	dc000e15 	stw	r16,56(sp)
  80f870:	d809883a 	mov	r4,sp
  80f874:	880b883a 	mov	r5,r17
  80f878:	dc000904 	addi	r16,sp,36
  80f87c:	d8c00115 	stw	r3,4(sp)
  80f880:	d8800015 	stw	r2,0(sp)
  80f884:	d9800215 	stw	r6,8(sp)
  80f888:	dfc01015 	stw	ra,64(sp)
  80f88c:	d9c00315 	stw	r7,12(sp)
  80f890:	08103f40 	call	8103f4 <__unpack_d>
  80f894:	d9000204 	addi	r4,sp,8
  80f898:	800b883a 	mov	r5,r16
  80f89c:	08103f40 	call	8103f4 <__unpack_d>
  80f8a0:	d8800417 	ldw	r2,16(sp)
  80f8a4:	00c00044 	movi	r3,1
  80f8a8:	180d883a 	mov	r6,r3
  80f8ac:	1880062e 	bgeu	r3,r2,80f8c8 <__ltdf2+0x70>
  80f8b0:	d8800917 	ldw	r2,36(sp)
  80f8b4:	8809883a 	mov	r4,r17
  80f8b8:	800b883a 	mov	r5,r16
  80f8bc:	1880022e 	bgeu	r3,r2,80f8c8 <__ltdf2+0x70>
  80f8c0:	081052c0 	call	81052c <__fpcmp_parts_d>
  80f8c4:	100d883a 	mov	r6,r2
  80f8c8:	3005883a 	mov	r2,r6
  80f8cc:	dfc01017 	ldw	ra,64(sp)
  80f8d0:	dc400f17 	ldw	r17,60(sp)
  80f8d4:	dc000e17 	ldw	r16,56(sp)
  80f8d8:	dec01104 	addi	sp,sp,68
  80f8dc:	f800283a 	ret

0080f8e0 <__ledf2>:
  80f8e0:	deffef04 	addi	sp,sp,-68
  80f8e4:	dc400f15 	stw	r17,60(sp)
  80f8e8:	dc400404 	addi	r17,sp,16
  80f8ec:	2005883a 	mov	r2,r4
  80f8f0:	2807883a 	mov	r3,r5
  80f8f4:	dc000e15 	stw	r16,56(sp)
  80f8f8:	d809883a 	mov	r4,sp
  80f8fc:	880b883a 	mov	r5,r17
  80f900:	dc000904 	addi	r16,sp,36
  80f904:	d8c00115 	stw	r3,4(sp)
  80f908:	d8800015 	stw	r2,0(sp)
  80f90c:	d9800215 	stw	r6,8(sp)
  80f910:	dfc01015 	stw	ra,64(sp)
  80f914:	d9c00315 	stw	r7,12(sp)
  80f918:	08103f40 	call	8103f4 <__unpack_d>
  80f91c:	d9000204 	addi	r4,sp,8
  80f920:	800b883a 	mov	r5,r16
  80f924:	08103f40 	call	8103f4 <__unpack_d>
  80f928:	d8800417 	ldw	r2,16(sp)
  80f92c:	00c00044 	movi	r3,1
  80f930:	180d883a 	mov	r6,r3
  80f934:	1880062e 	bgeu	r3,r2,80f950 <__ledf2+0x70>
  80f938:	d8800917 	ldw	r2,36(sp)
  80f93c:	8809883a 	mov	r4,r17
  80f940:	800b883a 	mov	r5,r16
  80f944:	1880022e 	bgeu	r3,r2,80f950 <__ledf2+0x70>
  80f948:	081052c0 	call	81052c <__fpcmp_parts_d>
  80f94c:	100d883a 	mov	r6,r2
  80f950:	3005883a 	mov	r2,r6
  80f954:	dfc01017 	ldw	ra,64(sp)
  80f958:	dc400f17 	ldw	r17,60(sp)
  80f95c:	dc000e17 	ldw	r16,56(sp)
  80f960:	dec01104 	addi	sp,sp,68
  80f964:	f800283a 	ret

0080f968 <__floatsidf>:
  80f968:	2006d7fa 	srli	r3,r4,31
  80f96c:	defff604 	addi	sp,sp,-40
  80f970:	008000c4 	movi	r2,3
  80f974:	dfc00915 	stw	ra,36(sp)
  80f978:	dcc00815 	stw	r19,32(sp)
  80f97c:	dc800715 	stw	r18,28(sp)
  80f980:	dc400615 	stw	r17,24(sp)
  80f984:	dc000515 	stw	r16,20(sp)
  80f988:	d8800015 	stw	r2,0(sp)
  80f98c:	d8c00115 	stw	r3,4(sp)
  80f990:	20000f1e 	bne	r4,zero,80f9d0 <__floatsidf+0x68>
  80f994:	00800084 	movi	r2,2
  80f998:	d8800015 	stw	r2,0(sp)
  80f99c:	d809883a 	mov	r4,sp
  80f9a0:	08100e00 	call	8100e0 <__pack_d>
  80f9a4:	1009883a 	mov	r4,r2
  80f9a8:	180b883a 	mov	r5,r3
  80f9ac:	2005883a 	mov	r2,r4
  80f9b0:	2807883a 	mov	r3,r5
  80f9b4:	dfc00917 	ldw	ra,36(sp)
  80f9b8:	dcc00817 	ldw	r19,32(sp)
  80f9bc:	dc800717 	ldw	r18,28(sp)
  80f9c0:	dc400617 	ldw	r17,24(sp)
  80f9c4:	dc000517 	ldw	r16,20(sp)
  80f9c8:	dec00a04 	addi	sp,sp,40
  80f9cc:	f800283a 	ret
  80f9d0:	00800f04 	movi	r2,60
  80f9d4:	1807003a 	cmpeq	r3,r3,zero
  80f9d8:	d8800215 	stw	r2,8(sp)
  80f9dc:	18001126 	beq	r3,zero,80fa24 <__floatsidf+0xbc>
  80f9e0:	0027883a 	mov	r19,zero
  80f9e4:	2025883a 	mov	r18,r4
  80f9e8:	d9000315 	stw	r4,12(sp)
  80f9ec:	dcc00415 	stw	r19,16(sp)
  80f9f0:	080fec40 	call	80fec4 <__clzsi2>
  80f9f4:	11000744 	addi	r4,r2,29
  80f9f8:	013fe80e 	bge	zero,r4,80f99c <__floatsidf+0x34>
  80f9fc:	10bfff44 	addi	r2,r2,-3
  80fa00:	10000c16 	blt	r2,zero,80fa34 <__floatsidf+0xcc>
  80fa04:	90a2983a 	sll	r17,r18,r2
  80fa08:	0021883a 	mov	r16,zero
  80fa0c:	d8800217 	ldw	r2,8(sp)
  80fa10:	dc400415 	stw	r17,16(sp)
  80fa14:	dc000315 	stw	r16,12(sp)
  80fa18:	1105c83a 	sub	r2,r2,r4
  80fa1c:	d8800215 	stw	r2,8(sp)
  80fa20:	003fde06 	br	80f99c <__floatsidf+0x34>
  80fa24:	00a00034 	movhi	r2,32768
  80fa28:	20800a26 	beq	r4,r2,80fa54 <__floatsidf+0xec>
  80fa2c:	0109c83a 	sub	r4,zero,r4
  80fa30:	003feb06 	br	80f9e0 <__floatsidf+0x78>
  80fa34:	9006d07a 	srli	r3,r18,1
  80fa38:	008007c4 	movi	r2,31
  80fa3c:	1105c83a 	sub	r2,r2,r4
  80fa40:	1886d83a 	srl	r3,r3,r2
  80fa44:	9922983a 	sll	r17,r19,r4
  80fa48:	9120983a 	sll	r16,r18,r4
  80fa4c:	1c62b03a 	or	r17,r3,r17
  80fa50:	003fee06 	br	80fa0c <__floatsidf+0xa4>
  80fa54:	0009883a 	mov	r4,zero
  80fa58:	01707834 	movhi	r5,49632
  80fa5c:	003fd306 	br	80f9ac <__floatsidf+0x44>

0080fa60 <__fixdfsi>:
  80fa60:	defff804 	addi	sp,sp,-32
  80fa64:	2005883a 	mov	r2,r4
  80fa68:	2807883a 	mov	r3,r5
  80fa6c:	d809883a 	mov	r4,sp
  80fa70:	d9400204 	addi	r5,sp,8
  80fa74:	d8c00115 	stw	r3,4(sp)
  80fa78:	d8800015 	stw	r2,0(sp)
  80fa7c:	dfc00715 	stw	ra,28(sp)
  80fa80:	08103f40 	call	8103f4 <__unpack_d>
  80fa84:	d8c00217 	ldw	r3,8(sp)
  80fa88:	00800084 	movi	r2,2
  80fa8c:	1880051e 	bne	r3,r2,80faa4 <__fixdfsi+0x44>
  80fa90:	0007883a 	mov	r3,zero
  80fa94:	1805883a 	mov	r2,r3
  80fa98:	dfc00717 	ldw	ra,28(sp)
  80fa9c:	dec00804 	addi	sp,sp,32
  80faa0:	f800283a 	ret
  80faa4:	00800044 	movi	r2,1
  80faa8:	10fff92e 	bgeu	r2,r3,80fa90 <__fixdfsi+0x30>
  80faac:	00800104 	movi	r2,4
  80fab0:	18800426 	beq	r3,r2,80fac4 <__fixdfsi+0x64>
  80fab4:	d8c00417 	ldw	r3,16(sp)
  80fab8:	183ff516 	blt	r3,zero,80fa90 <__fixdfsi+0x30>
  80fabc:	00800784 	movi	r2,30
  80fac0:	10c0080e 	bge	r2,r3,80fae4 <__fixdfsi+0x84>
  80fac4:	d8800317 	ldw	r2,12(sp)
  80fac8:	1000121e 	bne	r2,zero,80fb14 <__fixdfsi+0xb4>
  80facc:	00e00034 	movhi	r3,32768
  80fad0:	18ffffc4 	addi	r3,r3,-1
  80fad4:	1805883a 	mov	r2,r3
  80fad8:	dfc00717 	ldw	ra,28(sp)
  80fadc:	dec00804 	addi	sp,sp,32
  80fae0:	f800283a 	ret
  80fae4:	00800f04 	movi	r2,60
  80fae8:	10d1c83a 	sub	r8,r2,r3
  80faec:	40bff804 	addi	r2,r8,-32
  80faf0:	d9800517 	ldw	r6,20(sp)
  80faf4:	d9c00617 	ldw	r7,24(sp)
  80faf8:	10000816 	blt	r2,zero,80fb1c <__fixdfsi+0xbc>
  80fafc:	3888d83a 	srl	r4,r7,r2
  80fb00:	d8800317 	ldw	r2,12(sp)
  80fb04:	2007883a 	mov	r3,r4
  80fb08:	103fe226 	beq	r2,zero,80fa94 <__fixdfsi+0x34>
  80fb0c:	0107c83a 	sub	r3,zero,r4
  80fb10:	003fe006 	br	80fa94 <__fixdfsi+0x34>
  80fb14:	00e00034 	movhi	r3,32768
  80fb18:	003fde06 	br	80fa94 <__fixdfsi+0x34>
  80fb1c:	39c7883a 	add	r3,r7,r7
  80fb20:	008007c4 	movi	r2,31
  80fb24:	1205c83a 	sub	r2,r2,r8
  80fb28:	1886983a 	sll	r3,r3,r2
  80fb2c:	3208d83a 	srl	r4,r6,r8
  80fb30:	1908b03a 	or	r4,r3,r4
  80fb34:	003ff206 	br	80fb00 <__fixdfsi+0xa0>

0080fb38 <__truncdfsf2>:
  80fb38:	defff804 	addi	sp,sp,-32
  80fb3c:	2005883a 	mov	r2,r4
  80fb40:	2807883a 	mov	r3,r5
  80fb44:	d809883a 	mov	r4,sp
  80fb48:	d9400204 	addi	r5,sp,8
  80fb4c:	d8c00115 	stw	r3,4(sp)
  80fb50:	d8800015 	stw	r2,0(sp)
  80fb54:	dfc00715 	stw	ra,28(sp)
  80fb58:	08103f40 	call	8103f4 <__unpack_d>
  80fb5c:	d9c00517 	ldw	r7,20(sp)
  80fb60:	da000617 	ldw	r8,24(sp)
  80fb64:	02d00034 	movhi	r11,16384
  80fb68:	5affffc4 	addi	r11,r11,-1
  80fb6c:	3812d7ba 	srli	r9,r7,30
  80fb70:	401a90ba 	slli	r13,r8,2
  80fb74:	3ac4703a 	and	r2,r7,r11
  80fb78:	0007883a 	mov	r3,zero
  80fb7c:	6a52b03a 	or	r9,r13,r9
  80fb80:	10c4b03a 	or	r2,r2,r3
  80fb84:	d9000217 	ldw	r4,8(sp)
  80fb88:	d9400317 	ldw	r5,12(sp)
  80fb8c:	d9800417 	ldw	r6,16(sp)
  80fb90:	480f883a 	mov	r7,r9
  80fb94:	10000126 	beq	r2,zero,80fb9c <__truncdfsf2+0x64>
  80fb98:	49c00054 	ori	r7,r9,1
  80fb9c:	08100b40 	call	8100b4 <__make_fp>
  80fba0:	dfc00717 	ldw	ra,28(sp)
  80fba4:	dec00804 	addi	sp,sp,32
  80fba8:	f800283a 	ret

0080fbac <__floatunsidf>:
  80fbac:	defff204 	addi	sp,sp,-56
  80fbb0:	dfc00d15 	stw	ra,52(sp)
  80fbb4:	ddc00c15 	stw	r23,48(sp)
  80fbb8:	dd800b15 	stw	r22,44(sp)
  80fbbc:	dd400a15 	stw	r21,40(sp)
  80fbc0:	dd000915 	stw	r20,36(sp)
  80fbc4:	dcc00815 	stw	r19,32(sp)
  80fbc8:	dc800715 	stw	r18,28(sp)
  80fbcc:	dc400615 	stw	r17,24(sp)
  80fbd0:	dc000515 	stw	r16,20(sp)
  80fbd4:	d8000115 	stw	zero,4(sp)
  80fbd8:	20000f1e 	bne	r4,zero,80fc18 <__floatunsidf+0x6c>
  80fbdc:	00800084 	movi	r2,2
  80fbe0:	d8800015 	stw	r2,0(sp)
  80fbe4:	d809883a 	mov	r4,sp
  80fbe8:	08100e00 	call	8100e0 <__pack_d>
  80fbec:	dfc00d17 	ldw	ra,52(sp)
  80fbf0:	ddc00c17 	ldw	r23,48(sp)
  80fbf4:	dd800b17 	ldw	r22,44(sp)
  80fbf8:	dd400a17 	ldw	r21,40(sp)
  80fbfc:	dd000917 	ldw	r20,36(sp)
  80fc00:	dcc00817 	ldw	r19,32(sp)
  80fc04:	dc800717 	ldw	r18,28(sp)
  80fc08:	dc400617 	ldw	r17,24(sp)
  80fc0c:	dc000517 	ldw	r16,20(sp)
  80fc10:	dec00e04 	addi	sp,sp,56
  80fc14:	f800283a 	ret
  80fc18:	008000c4 	movi	r2,3
  80fc1c:	00c00f04 	movi	r3,60
  80fc20:	002f883a 	mov	r23,zero
  80fc24:	202d883a 	mov	r22,r4
  80fc28:	d8800015 	stw	r2,0(sp)
  80fc2c:	d8c00215 	stw	r3,8(sp)
  80fc30:	d9000315 	stw	r4,12(sp)
  80fc34:	ddc00415 	stw	r23,16(sp)
  80fc38:	080fec40 	call	80fec4 <__clzsi2>
  80fc3c:	12400744 	addi	r9,r2,29
  80fc40:	48000b16 	blt	r9,zero,80fc70 <__floatunsidf+0xc4>
  80fc44:	483fe726 	beq	r9,zero,80fbe4 <__floatunsidf+0x38>
  80fc48:	10bfff44 	addi	r2,r2,-3
  80fc4c:	10002e16 	blt	r2,zero,80fd08 <__floatunsidf+0x15c>
  80fc50:	b0a2983a 	sll	r17,r22,r2
  80fc54:	0021883a 	mov	r16,zero
  80fc58:	d8800217 	ldw	r2,8(sp)
  80fc5c:	dc400415 	stw	r17,16(sp)
  80fc60:	dc000315 	stw	r16,12(sp)
  80fc64:	1245c83a 	sub	r2,r2,r9
  80fc68:	d8800215 	stw	r2,8(sp)
  80fc6c:	003fdd06 	br	80fbe4 <__floatunsidf+0x38>
  80fc70:	0255c83a 	sub	r10,zero,r9
  80fc74:	51bff804 	addi	r6,r10,-32
  80fc78:	30001b16 	blt	r6,zero,80fce8 <__floatunsidf+0x13c>
  80fc7c:	b9a8d83a 	srl	r20,r23,r6
  80fc80:	002b883a 	mov	r21,zero
  80fc84:	000f883a 	mov	r7,zero
  80fc88:	01000044 	movi	r4,1
  80fc8c:	0011883a 	mov	r8,zero
  80fc90:	30002516 	blt	r6,zero,80fd28 <__floatunsidf+0x17c>
  80fc94:	21a6983a 	sll	r19,r4,r6
  80fc98:	0025883a 	mov	r18,zero
  80fc9c:	00bfffc4 	movi	r2,-1
  80fca0:	9089883a 	add	r4,r18,r2
  80fca4:	988b883a 	add	r5,r19,r2
  80fca8:	248d803a 	cmpltu	r6,r4,r18
  80fcac:	314b883a 	add	r5,r6,r5
  80fcb0:	b104703a 	and	r2,r22,r4
  80fcb4:	b946703a 	and	r3,r23,r5
  80fcb8:	10c4b03a 	or	r2,r2,r3
  80fcbc:	10000226 	beq	r2,zero,80fcc8 <__floatunsidf+0x11c>
  80fcc0:	01c00044 	movi	r7,1
  80fcc4:	0011883a 	mov	r8,zero
  80fcc8:	d9000217 	ldw	r4,8(sp)
  80fccc:	a1c4b03a 	or	r2,r20,r7
  80fcd0:	aa06b03a 	or	r3,r21,r8
  80fcd4:	2249c83a 	sub	r4,r4,r9
  80fcd8:	d8c00415 	stw	r3,16(sp)
  80fcdc:	d9000215 	stw	r4,8(sp)
  80fce0:	d8800315 	stw	r2,12(sp)
  80fce4:	003fbf06 	br	80fbe4 <__floatunsidf+0x38>
  80fce8:	bdc7883a 	add	r3,r23,r23
  80fcec:	008007c4 	movi	r2,31
  80fcf0:	1285c83a 	sub	r2,r2,r10
  80fcf4:	1886983a 	sll	r3,r3,r2
  80fcf8:	b2a8d83a 	srl	r20,r22,r10
  80fcfc:	baaad83a 	srl	r21,r23,r10
  80fd00:	1d28b03a 	or	r20,r3,r20
  80fd04:	003fdf06 	br	80fc84 <__floatunsidf+0xd8>
  80fd08:	b006d07a 	srli	r3,r22,1
  80fd0c:	008007c4 	movi	r2,31
  80fd10:	1245c83a 	sub	r2,r2,r9
  80fd14:	1886d83a 	srl	r3,r3,r2
  80fd18:	ba62983a 	sll	r17,r23,r9
  80fd1c:	b260983a 	sll	r16,r22,r9
  80fd20:	1c62b03a 	or	r17,r3,r17
  80fd24:	003fcc06 	br	80fc58 <__floatunsidf+0xac>
  80fd28:	2006d07a 	srli	r3,r4,1
  80fd2c:	008007c4 	movi	r2,31
  80fd30:	1285c83a 	sub	r2,r2,r10
  80fd34:	18a6d83a 	srl	r19,r3,r2
  80fd38:	22a4983a 	sll	r18,r4,r10
  80fd3c:	003fd706 	br	80fc9c <__floatunsidf+0xf0>

0080fd40 <udivmodsi4>:
  80fd40:	29001b2e 	bgeu	r5,r4,80fdb0 <udivmodsi4+0x70>
  80fd44:	28001a16 	blt	r5,zero,80fdb0 <udivmodsi4+0x70>
  80fd48:	00800044 	movi	r2,1
  80fd4c:	0007883a 	mov	r3,zero
  80fd50:	01c007c4 	movi	r7,31
  80fd54:	00000306 	br	80fd64 <udivmodsi4+0x24>
  80fd58:	19c01326 	beq	r3,r7,80fda8 <udivmodsi4+0x68>
  80fd5c:	18c00044 	addi	r3,r3,1
  80fd60:	28000416 	blt	r5,zero,80fd74 <udivmodsi4+0x34>
  80fd64:	294b883a 	add	r5,r5,r5
  80fd68:	1085883a 	add	r2,r2,r2
  80fd6c:	293ffa36 	bltu	r5,r4,80fd58 <udivmodsi4+0x18>
  80fd70:	10000d26 	beq	r2,zero,80fda8 <udivmodsi4+0x68>
  80fd74:	0007883a 	mov	r3,zero
  80fd78:	21400236 	bltu	r4,r5,80fd84 <udivmodsi4+0x44>
  80fd7c:	2149c83a 	sub	r4,r4,r5
  80fd80:	1886b03a 	or	r3,r3,r2
  80fd84:	1004d07a 	srli	r2,r2,1
  80fd88:	280ad07a 	srli	r5,r5,1
  80fd8c:	103ffa1e 	bne	r2,zero,80fd78 <udivmodsi4+0x38>
  80fd90:	30000226 	beq	r6,zero,80fd9c <udivmodsi4+0x5c>
  80fd94:	2005883a 	mov	r2,r4
  80fd98:	f800283a 	ret
  80fd9c:	1809883a 	mov	r4,r3
  80fda0:	2005883a 	mov	r2,r4
  80fda4:	f800283a 	ret
  80fda8:	0007883a 	mov	r3,zero
  80fdac:	003ff806 	br	80fd90 <udivmodsi4+0x50>
  80fdb0:	00800044 	movi	r2,1
  80fdb4:	0007883a 	mov	r3,zero
  80fdb8:	003fef06 	br	80fd78 <udivmodsi4+0x38>

0080fdbc <__divsi3>:
  80fdbc:	defffe04 	addi	sp,sp,-8
  80fdc0:	dc000015 	stw	r16,0(sp)
  80fdc4:	dfc00115 	stw	ra,4(sp)
  80fdc8:	0021883a 	mov	r16,zero
  80fdcc:	20000c16 	blt	r4,zero,80fe00 <__divsi3+0x44>
  80fdd0:	000d883a 	mov	r6,zero
  80fdd4:	28000e16 	blt	r5,zero,80fe10 <__divsi3+0x54>
  80fdd8:	080fd400 	call	80fd40 <udivmodsi4>
  80fddc:	1007883a 	mov	r3,r2
  80fde0:	8005003a 	cmpeq	r2,r16,zero
  80fde4:	1000011e 	bne	r2,zero,80fdec <__divsi3+0x30>
  80fde8:	00c7c83a 	sub	r3,zero,r3
  80fdec:	1805883a 	mov	r2,r3
  80fdf0:	dfc00117 	ldw	ra,4(sp)
  80fdf4:	dc000017 	ldw	r16,0(sp)
  80fdf8:	dec00204 	addi	sp,sp,8
  80fdfc:	f800283a 	ret
  80fe00:	0109c83a 	sub	r4,zero,r4
  80fe04:	04000044 	movi	r16,1
  80fe08:	000d883a 	mov	r6,zero
  80fe0c:	283ff20e 	bge	r5,zero,80fdd8 <__divsi3+0x1c>
  80fe10:	014bc83a 	sub	r5,zero,r5
  80fe14:	8021003a 	cmpeq	r16,r16,zero
  80fe18:	003fef06 	br	80fdd8 <__divsi3+0x1c>

0080fe1c <__modsi3>:
  80fe1c:	deffff04 	addi	sp,sp,-4
  80fe20:	dfc00015 	stw	ra,0(sp)
  80fe24:	01800044 	movi	r6,1
  80fe28:	2807883a 	mov	r3,r5
  80fe2c:	20000416 	blt	r4,zero,80fe40 <__modsi3+0x24>
  80fe30:	28000c16 	blt	r5,zero,80fe64 <__modsi3+0x48>
  80fe34:	dfc00017 	ldw	ra,0(sp)
  80fe38:	dec00104 	addi	sp,sp,4
  80fe3c:	080fd401 	jmpi	80fd40 <udivmodsi4>
  80fe40:	0109c83a 	sub	r4,zero,r4
  80fe44:	28000b16 	blt	r5,zero,80fe74 <__modsi3+0x58>
  80fe48:	180b883a 	mov	r5,r3
  80fe4c:	01800044 	movi	r6,1
  80fe50:	080fd400 	call	80fd40 <udivmodsi4>
  80fe54:	0085c83a 	sub	r2,zero,r2
  80fe58:	dfc00017 	ldw	ra,0(sp)
  80fe5c:	dec00104 	addi	sp,sp,4
  80fe60:	f800283a 	ret
  80fe64:	014bc83a 	sub	r5,zero,r5
  80fe68:	dfc00017 	ldw	ra,0(sp)
  80fe6c:	dec00104 	addi	sp,sp,4
  80fe70:	080fd401 	jmpi	80fd40 <udivmodsi4>
  80fe74:	0147c83a 	sub	r3,zero,r5
  80fe78:	003ff306 	br	80fe48 <__modsi3+0x2c>

0080fe7c <__udivsi3>:
  80fe7c:	000d883a 	mov	r6,zero
  80fe80:	080fd401 	jmpi	80fd40 <udivmodsi4>

0080fe84 <__umodsi3>:
  80fe84:	01800044 	movi	r6,1
  80fe88:	080fd401 	jmpi	80fd40 <udivmodsi4>

0080fe8c <__mulsi3>:
  80fe8c:	20000a26 	beq	r4,zero,80feb8 <__mulsi3+0x2c>
  80fe90:	0007883a 	mov	r3,zero
  80fe94:	2080004c 	andi	r2,r4,1
  80fe98:	1005003a 	cmpeq	r2,r2,zero
  80fe9c:	2008d07a 	srli	r4,r4,1
  80fea0:	1000011e 	bne	r2,zero,80fea8 <__mulsi3+0x1c>
  80fea4:	1947883a 	add	r3,r3,r5
  80fea8:	294b883a 	add	r5,r5,r5
  80feac:	203ff91e 	bne	r4,zero,80fe94 <__mulsi3+0x8>
  80feb0:	1805883a 	mov	r2,r3
  80feb4:	f800283a 	ret
  80feb8:	0007883a 	mov	r3,zero
  80febc:	1805883a 	mov	r2,r3
  80fec0:	f800283a 	ret

0080fec4 <__clzsi2>:
  80fec4:	00bfffd4 	movui	r2,65535
  80fec8:	11000e36 	bltu	r2,r4,80ff04 <__clzsi2+0x40>
  80fecc:	00803fc4 	movi	r2,255
  80fed0:	01400204 	movi	r5,8
  80fed4:	0007883a 	mov	r3,zero
  80fed8:	11001036 	bltu	r2,r4,80ff1c <__clzsi2+0x58>
  80fedc:	000b883a 	mov	r5,zero
  80fee0:	20c6d83a 	srl	r3,r4,r3
  80fee4:	00802074 	movhi	r2,129
  80fee8:	10933e04 	addi	r2,r2,19704
  80feec:	1887883a 	add	r3,r3,r2
  80fef0:	18800003 	ldbu	r2,0(r3)
  80fef4:	00c00804 	movi	r3,32
  80fef8:	2885883a 	add	r2,r5,r2
  80fefc:	1885c83a 	sub	r2,r3,r2
  80ff00:	f800283a 	ret
  80ff04:	01400404 	movi	r5,16
  80ff08:	00804034 	movhi	r2,256
  80ff0c:	10bfffc4 	addi	r2,r2,-1
  80ff10:	2807883a 	mov	r3,r5
  80ff14:	113ff22e 	bgeu	r2,r4,80fee0 <__clzsi2+0x1c>
  80ff18:	01400604 	movi	r5,24
  80ff1c:	2807883a 	mov	r3,r5
  80ff20:	20c6d83a 	srl	r3,r4,r3
  80ff24:	00802074 	movhi	r2,129
  80ff28:	10933e04 	addi	r2,r2,19704
  80ff2c:	1887883a 	add	r3,r3,r2
  80ff30:	18800003 	ldbu	r2,0(r3)
  80ff34:	00c00804 	movi	r3,32
  80ff38:	2885883a 	add	r2,r5,r2
  80ff3c:	1885c83a 	sub	r2,r3,r2
  80ff40:	f800283a 	ret

0080ff44 <__unpack_f>:
  80ff44:	21800017 	ldw	r6,0(r4)
  80ff48:	00c02034 	movhi	r3,128
  80ff4c:	18ffffc4 	addi	r3,r3,-1
  80ff50:	3004d5fa 	srli	r2,r6,23
  80ff54:	3008d7fa 	srli	r4,r6,31
  80ff58:	30ce703a 	and	r7,r6,r3
  80ff5c:	10c03fcc 	andi	r3,r2,255
  80ff60:	29000115 	stw	r4,4(r5)
  80ff64:	1800131e 	bne	r3,zero,80ffb4 <__unpack_f+0x70>
  80ff68:	38000f26 	beq	r7,zero,80ffa8 <__unpack_f+0x64>
  80ff6c:	380691fa 	slli	r3,r7,7
  80ff70:	01bfe084 	movi	r6,-126
  80ff74:	008000c4 	movi	r2,3
  80ff78:	01100034 	movhi	r4,16384
  80ff7c:	213fffc4 	addi	r4,r4,-1
  80ff80:	28800015 	stw	r2,0(r5)
  80ff84:	29800215 	stw	r6,8(r5)
  80ff88:	20c00536 	bltu	r4,r3,80ffa0 <__unpack_f+0x5c>
  80ff8c:	3005883a 	mov	r2,r6
  80ff90:	18c7883a 	add	r3,r3,r3
  80ff94:	10bfffc4 	addi	r2,r2,-1
  80ff98:	20fffd2e 	bgeu	r4,r3,80ff90 <__unpack_f+0x4c>
  80ff9c:	28800215 	stw	r2,8(r5)
  80ffa0:	28c00315 	stw	r3,12(r5)
  80ffa4:	f800283a 	ret
  80ffa8:	00800084 	movi	r2,2
  80ffac:	28800015 	stw	r2,0(r5)
  80ffb0:	f800283a 	ret
  80ffb4:	00803fc4 	movi	r2,255
  80ffb8:	18800826 	beq	r3,r2,80ffdc <__unpack_f+0x98>
  80ffbc:	380491fa 	slli	r2,r7,7
  80ffc0:	18ffe044 	addi	r3,r3,-127
  80ffc4:	28c00215 	stw	r3,8(r5)
  80ffc8:	10900034 	orhi	r2,r2,16384
  80ffcc:	28800315 	stw	r2,12(r5)
  80ffd0:	008000c4 	movi	r2,3
  80ffd4:	28800015 	stw	r2,0(r5)
  80ffd8:	f800283a 	ret
  80ffdc:	3800031e 	bne	r7,zero,80ffec <__unpack_f+0xa8>
  80ffe0:	00800104 	movi	r2,4
  80ffe4:	28800015 	stw	r2,0(r5)
  80ffe8:	f800283a 	ret
  80ffec:	3080042c 	andhi	r2,r6,16
  80fff0:	10000426 	beq	r2,zero,810004 <__unpack_f+0xc0>
  80fff4:	00800044 	movi	r2,1
  80fff8:	28800015 	stw	r2,0(r5)
  80fffc:	29c00315 	stw	r7,12(r5)
  810000:	f800283a 	ret
  810004:	28000015 	stw	zero,0(r5)
  810008:	003ffc06 	br	80fffc <__unpack_f+0xb8>

0081000c <__fpcmp_parts_f>:
  81000c:	21800017 	ldw	r6,0(r4)
  810010:	00c00044 	movi	r3,1
  810014:	19800a2e 	bgeu	r3,r6,810040 <__fpcmp_parts_f+0x34>
  810018:	28800017 	ldw	r2,0(r5)
  81001c:	1880082e 	bgeu	r3,r2,810040 <__fpcmp_parts_f+0x34>
  810020:	00c00104 	movi	r3,4
  810024:	30c01e26 	beq	r6,r3,8100a0 <__fpcmp_parts_f+0x94>
  810028:	10c01a26 	beq	r2,r3,810094 <__fpcmp_parts_f+0x88>
  81002c:	00c00084 	movi	r3,2
  810030:	30c00526 	beq	r6,r3,810048 <__fpcmp_parts_f+0x3c>
  810034:	10c0071e 	bne	r2,r3,810054 <__fpcmp_parts_f+0x48>
  810038:	20800117 	ldw	r2,4(r4)
  81003c:	1000091e 	bne	r2,zero,810064 <__fpcmp_parts_f+0x58>
  810040:	00800044 	movi	r2,1
  810044:	f800283a 	ret
  810048:	10c0121e 	bne	r2,r3,810094 <__fpcmp_parts_f+0x88>
  81004c:	0005883a 	mov	r2,zero
  810050:	f800283a 	ret
  810054:	20c00117 	ldw	r3,4(r4)
  810058:	28800117 	ldw	r2,4(r5)
  81005c:	18800326 	beq	r3,r2,81006c <__fpcmp_parts_f+0x60>
  810060:	183ff726 	beq	r3,zero,810040 <__fpcmp_parts_f+0x34>
  810064:	00bfffc4 	movi	r2,-1
  810068:	f800283a 	ret
  81006c:	21800217 	ldw	r6,8(r4)
  810070:	28800217 	ldw	r2,8(r5)
  810074:	11bffa16 	blt	r2,r6,810060 <__fpcmp_parts_f+0x54>
  810078:	30800416 	blt	r6,r2,81008c <__fpcmp_parts_f+0x80>
  81007c:	21000317 	ldw	r4,12(r4)
  810080:	29400317 	ldw	r5,12(r5)
  810084:	293ff636 	bltu	r5,r4,810060 <__fpcmp_parts_f+0x54>
  810088:	217ff02e 	bgeu	r4,r5,81004c <__fpcmp_parts_f+0x40>
  81008c:	183fec1e 	bne	r3,zero,810040 <__fpcmp_parts_f+0x34>
  810090:	003ff406 	br	810064 <__fpcmp_parts_f+0x58>
  810094:	28800117 	ldw	r2,4(r5)
  810098:	103fe91e 	bne	r2,zero,810040 <__fpcmp_parts_f+0x34>
  81009c:	003ff106 	br	810064 <__fpcmp_parts_f+0x58>
  8100a0:	11bfe51e 	bne	r2,r6,810038 <__fpcmp_parts_f+0x2c>
  8100a4:	28c00117 	ldw	r3,4(r5)
  8100a8:	20800117 	ldw	r2,4(r4)
  8100ac:	1885c83a 	sub	r2,r3,r2
  8100b0:	f800283a 	ret

008100b4 <__make_fp>:
  8100b4:	defffb04 	addi	sp,sp,-20
  8100b8:	d9000015 	stw	r4,0(sp)
  8100bc:	d809883a 	mov	r4,sp
  8100c0:	dfc00415 	stw	ra,16(sp)
  8100c4:	d9400115 	stw	r5,4(sp)
  8100c8:	d9800215 	stw	r6,8(sp)
  8100cc:	d9c00315 	stw	r7,12(sp)
  8100d0:	08105f40 	call	8105f4 <__pack_f>
  8100d4:	dfc00417 	ldw	ra,16(sp)
  8100d8:	dec00504 	addi	sp,sp,20
  8100dc:	f800283a 	ret

008100e0 <__pack_d>:
  8100e0:	20c00017 	ldw	r3,0(r4)
  8100e4:	defffd04 	addi	sp,sp,-12
  8100e8:	dc000015 	stw	r16,0(sp)
  8100ec:	dc800215 	stw	r18,8(sp)
  8100f0:	dc400115 	stw	r17,4(sp)
  8100f4:	00800044 	movi	r2,1
  8100f8:	22000317 	ldw	r8,12(r4)
  8100fc:	001f883a 	mov	r15,zero
  810100:	22400417 	ldw	r9,16(r4)
  810104:	24000117 	ldw	r16,4(r4)
  810108:	10c0552e 	bgeu	r2,r3,810260 <__pack_d+0x180>
  81010c:	00800104 	movi	r2,4
  810110:	18804f26 	beq	r3,r2,810250 <__pack_d+0x170>
  810114:	00800084 	movi	r2,2
  810118:	18800226 	beq	r3,r2,810124 <__pack_d+0x44>
  81011c:	4244b03a 	or	r2,r8,r9
  810120:	10001a1e 	bne	r2,zero,81018c <__pack_d+0xac>
  810124:	000d883a 	mov	r6,zero
  810128:	000f883a 	mov	r7,zero
  81012c:	0011883a 	mov	r8,zero
  810130:	00800434 	movhi	r2,16
  810134:	10bfffc4 	addi	r2,r2,-1
  810138:	301d883a 	mov	r14,r6
  81013c:	3884703a 	and	r2,r7,r2
  810140:	400a953a 	slli	r5,r8,20
  810144:	79bffc2c 	andhi	r6,r15,65520
  810148:	308cb03a 	or	r6,r6,r2
  81014c:	00e00434 	movhi	r3,32784
  810150:	18ffffc4 	addi	r3,r3,-1
  810154:	800497fa 	slli	r2,r16,31
  810158:	30c6703a 	and	r3,r6,r3
  81015c:	1946b03a 	or	r3,r3,r5
  810160:	01600034 	movhi	r5,32768
  810164:	297fffc4 	addi	r5,r5,-1
  810168:	194a703a 	and	r5,r3,r5
  81016c:	288ab03a 	or	r5,r5,r2
  810170:	2807883a 	mov	r3,r5
  810174:	7005883a 	mov	r2,r14
  810178:	dc800217 	ldw	r18,8(sp)
  81017c:	dc400117 	ldw	r17,4(sp)
  810180:	dc000017 	ldw	r16,0(sp)
  810184:	dec00304 	addi	sp,sp,12
  810188:	f800283a 	ret
  81018c:	21000217 	ldw	r4,8(r4)
  810190:	00bf0084 	movi	r2,-1022
  810194:	20803f16 	blt	r4,r2,810294 <__pack_d+0x1b4>
  810198:	0080ffc4 	movi	r2,1023
  81019c:	11002c16 	blt	r2,r4,810250 <__pack_d+0x170>
  8101a0:	00803fc4 	movi	r2,255
  8101a4:	408c703a 	and	r6,r8,r2
  8101a8:	00802004 	movi	r2,128
  8101ac:	0007883a 	mov	r3,zero
  8101b0:	000f883a 	mov	r7,zero
  8101b4:	2280ffc4 	addi	r10,r4,1023
  8101b8:	30801e26 	beq	r6,r2,810234 <__pack_d+0x154>
  8101bc:	00801fc4 	movi	r2,127
  8101c0:	4089883a 	add	r4,r8,r2
  8101c4:	220d803a 	cmpltu	r6,r4,r8
  8101c8:	324d883a 	add	r6,r6,r9
  8101cc:	2011883a 	mov	r8,r4
  8101d0:	3013883a 	mov	r9,r6
  8101d4:	00880034 	movhi	r2,8192
  8101d8:	10bfffc4 	addi	r2,r2,-1
  8101dc:	12400d36 	bltu	r2,r9,810214 <__pack_d+0x134>
  8101e0:	4804963a 	slli	r2,r9,24
  8101e4:	400cd23a 	srli	r6,r8,8
  8101e8:	480ed23a 	srli	r7,r9,8
  8101ec:	013fffc4 	movi	r4,-1
  8101f0:	118cb03a 	or	r6,r2,r6
  8101f4:	01400434 	movhi	r5,16
  8101f8:	297fffc4 	addi	r5,r5,-1
  8101fc:	3104703a 	and	r2,r6,r4
  810200:	3946703a 	and	r3,r7,r5
  810204:	5201ffcc 	andi	r8,r10,2047
  810208:	100d883a 	mov	r6,r2
  81020c:	180f883a 	mov	r7,r3
  810210:	003fc706 	br	810130 <__pack_d+0x50>
  810214:	480897fa 	slli	r4,r9,31
  810218:	4004d07a 	srli	r2,r8,1
  81021c:	4806d07a 	srli	r3,r9,1
  810220:	52800044 	addi	r10,r10,1
  810224:	2084b03a 	or	r2,r4,r2
  810228:	1011883a 	mov	r8,r2
  81022c:	1813883a 	mov	r9,r3
  810230:	003feb06 	br	8101e0 <__pack_d+0x100>
  810234:	383fe11e 	bne	r7,zero,8101bc <__pack_d+0xdc>
  810238:	01004004 	movi	r4,256
  81023c:	4104703a 	and	r2,r8,r4
  810240:	10c4b03a 	or	r2,r2,r3
  810244:	103fe326 	beq	r2,zero,8101d4 <__pack_d+0xf4>
  810248:	3005883a 	mov	r2,r6
  81024c:	003fdc06 	br	8101c0 <__pack_d+0xe0>
  810250:	000d883a 	mov	r6,zero
  810254:	000f883a 	mov	r7,zero
  810258:	0201ffc4 	movi	r8,2047
  81025c:	003fb406 	br	810130 <__pack_d+0x50>
  810260:	0005883a 	mov	r2,zero
  810264:	00c00234 	movhi	r3,8
  810268:	408cb03a 	or	r6,r8,r2
  81026c:	48ceb03a 	or	r7,r9,r3
  810270:	013fffc4 	movi	r4,-1
  810274:	01400434 	movhi	r5,16
  810278:	297fffc4 	addi	r5,r5,-1
  81027c:	3104703a 	and	r2,r6,r4
  810280:	3946703a 	and	r3,r7,r5
  810284:	100d883a 	mov	r6,r2
  810288:	180f883a 	mov	r7,r3
  81028c:	0201ffc4 	movi	r8,2047
  810290:	003fa706 	br	810130 <__pack_d+0x50>
  810294:	1109c83a 	sub	r4,r2,r4
  810298:	00800e04 	movi	r2,56
  81029c:	11004316 	blt	r2,r4,8103ac <__pack_d+0x2cc>
  8102a0:	21fff804 	addi	r7,r4,-32
  8102a4:	38004516 	blt	r7,zero,8103bc <__pack_d+0x2dc>
  8102a8:	49d8d83a 	srl	r12,r9,r7
  8102ac:	001b883a 	mov	r13,zero
  8102b0:	0023883a 	mov	r17,zero
  8102b4:	01400044 	movi	r5,1
  8102b8:	0025883a 	mov	r18,zero
  8102bc:	38004716 	blt	r7,zero,8103dc <__pack_d+0x2fc>
  8102c0:	29d6983a 	sll	r11,r5,r7
  8102c4:	0015883a 	mov	r10,zero
  8102c8:	00bfffc4 	movi	r2,-1
  8102cc:	5089883a 	add	r4,r10,r2
  8102d0:	588b883a 	add	r5,r11,r2
  8102d4:	228d803a 	cmpltu	r6,r4,r10
  8102d8:	314b883a 	add	r5,r6,r5
  8102dc:	4104703a 	and	r2,r8,r4
  8102e0:	4946703a 	and	r3,r9,r5
  8102e4:	10c4b03a 	or	r2,r2,r3
  8102e8:	10000226 	beq	r2,zero,8102f4 <__pack_d+0x214>
  8102ec:	04400044 	movi	r17,1
  8102f0:	0025883a 	mov	r18,zero
  8102f4:	00803fc4 	movi	r2,255
  8102f8:	644eb03a 	or	r7,r12,r17
  8102fc:	3892703a 	and	r9,r7,r2
  810300:	00802004 	movi	r2,128
  810304:	6c90b03a 	or	r8,r13,r18
  810308:	0015883a 	mov	r10,zero
  81030c:	48801626 	beq	r9,r2,810368 <__pack_d+0x288>
  810310:	01001fc4 	movi	r4,127
  810314:	3905883a 	add	r2,r7,r4
  810318:	11cd803a 	cmpltu	r6,r2,r7
  81031c:	320d883a 	add	r6,r6,r8
  810320:	100f883a 	mov	r7,r2
  810324:	00840034 	movhi	r2,4096
  810328:	10bfffc4 	addi	r2,r2,-1
  81032c:	3011883a 	mov	r8,r6
  810330:	0007883a 	mov	r3,zero
  810334:	11801b36 	bltu	r2,r6,8103a4 <__pack_d+0x2c4>
  810338:	4004963a 	slli	r2,r8,24
  81033c:	3808d23a 	srli	r4,r7,8
  810340:	400ad23a 	srli	r5,r8,8
  810344:	1813883a 	mov	r9,r3
  810348:	1108b03a 	or	r4,r2,r4
  81034c:	00bfffc4 	movi	r2,-1
  810350:	00c00434 	movhi	r3,16
  810354:	18ffffc4 	addi	r3,r3,-1
  810358:	208c703a 	and	r6,r4,r2
  81035c:	28ce703a 	and	r7,r5,r3
  810360:	4a01ffcc 	andi	r8,r9,2047
  810364:	003f7206 	br	810130 <__pack_d+0x50>
  810368:	503fe91e 	bne	r10,zero,810310 <__pack_d+0x230>
  81036c:	01004004 	movi	r4,256
  810370:	3904703a 	and	r2,r7,r4
  810374:	0007883a 	mov	r3,zero
  810378:	10c4b03a 	or	r2,r2,r3
  81037c:	10000626 	beq	r2,zero,810398 <__pack_d+0x2b8>
  810380:	3a45883a 	add	r2,r7,r9
  810384:	11cd803a 	cmpltu	r6,r2,r7
  810388:	320d883a 	add	r6,r6,r8
  81038c:	100f883a 	mov	r7,r2
  810390:	3011883a 	mov	r8,r6
  810394:	0007883a 	mov	r3,zero
  810398:	00840034 	movhi	r2,4096
  81039c:	10bfffc4 	addi	r2,r2,-1
  8103a0:	123fe52e 	bgeu	r2,r8,810338 <__pack_d+0x258>
  8103a4:	00c00044 	movi	r3,1
  8103a8:	003fe306 	br	810338 <__pack_d+0x258>
  8103ac:	0009883a 	mov	r4,zero
  8103b0:	0013883a 	mov	r9,zero
  8103b4:	000b883a 	mov	r5,zero
  8103b8:	003fe406 	br	81034c <__pack_d+0x26c>
  8103bc:	4a47883a 	add	r3,r9,r9
  8103c0:	008007c4 	movi	r2,31
  8103c4:	1105c83a 	sub	r2,r2,r4
  8103c8:	1886983a 	sll	r3,r3,r2
  8103cc:	4118d83a 	srl	r12,r8,r4
  8103d0:	491ad83a 	srl	r13,r9,r4
  8103d4:	1b18b03a 	or	r12,r3,r12
  8103d8:	003fb506 	br	8102b0 <__pack_d+0x1d0>
  8103dc:	2806d07a 	srli	r3,r5,1
  8103e0:	008007c4 	movi	r2,31
  8103e4:	1105c83a 	sub	r2,r2,r4
  8103e8:	1896d83a 	srl	r11,r3,r2
  8103ec:	2914983a 	sll	r10,r5,r4
  8103f0:	003fb506 	br	8102c8 <__pack_d+0x1e8>

008103f4 <__unpack_d>:
  8103f4:	20c00117 	ldw	r3,4(r4)
  8103f8:	22400017 	ldw	r9,0(r4)
  8103fc:	00800434 	movhi	r2,16
  810400:	10bfffc4 	addi	r2,r2,-1
  810404:	1808d53a 	srli	r4,r3,20
  810408:	180cd7fa 	srli	r6,r3,31
  81040c:	1894703a 	and	r10,r3,r2
  810410:	2201ffcc 	andi	r8,r4,2047
  810414:	281b883a 	mov	r13,r5
  810418:	4817883a 	mov	r11,r9
  81041c:	29800115 	stw	r6,4(r5)
  810420:	5019883a 	mov	r12,r10
  810424:	40001e1e 	bne	r8,zero,8104a0 <__unpack_d+0xac>
  810428:	4a84b03a 	or	r2,r9,r10
  81042c:	10001926 	beq	r2,zero,810494 <__unpack_d+0xa0>
  810430:	4804d63a 	srli	r2,r9,24
  810434:	500c923a 	slli	r6,r10,8
  810438:	013f0084 	movi	r4,-1022
  81043c:	00c40034 	movhi	r3,4096
  810440:	18ffffc4 	addi	r3,r3,-1
  810444:	118cb03a 	or	r6,r2,r6
  810448:	008000c4 	movi	r2,3
  81044c:	480a923a 	slli	r5,r9,8
  810450:	68800015 	stw	r2,0(r13)
  810454:	69000215 	stw	r4,8(r13)
  810458:	19800b36 	bltu	r3,r6,810488 <__unpack_d+0x94>
  81045c:	200f883a 	mov	r7,r4
  810460:	1811883a 	mov	r8,r3
  810464:	2945883a 	add	r2,r5,r5
  810468:	1149803a 	cmpltu	r4,r2,r5
  81046c:	3187883a 	add	r3,r6,r6
  810470:	20c9883a 	add	r4,r4,r3
  810474:	100b883a 	mov	r5,r2
  810478:	200d883a 	mov	r6,r4
  81047c:	39ffffc4 	addi	r7,r7,-1
  810480:	413ff82e 	bgeu	r8,r4,810464 <__unpack_d+0x70>
  810484:	69c00215 	stw	r7,8(r13)
  810488:	69800415 	stw	r6,16(r13)
  81048c:	69400315 	stw	r5,12(r13)
  810490:	f800283a 	ret
  810494:	00800084 	movi	r2,2
  810498:	28800015 	stw	r2,0(r5)
  81049c:	f800283a 	ret
  8104a0:	0081ffc4 	movi	r2,2047
  8104a4:	40800f26 	beq	r8,r2,8104e4 <__unpack_d+0xf0>
  8104a8:	480cd63a 	srli	r6,r9,24
  8104ac:	5006923a 	slli	r3,r10,8
  8104b0:	4804923a 	slli	r2,r9,8
  8104b4:	0009883a 	mov	r4,zero
  8104b8:	30c6b03a 	or	r3,r6,r3
  8104bc:	01440034 	movhi	r5,4096
  8104c0:	110cb03a 	or	r6,r2,r4
  8104c4:	423f0044 	addi	r8,r8,-1023
  8104c8:	194eb03a 	or	r7,r3,r5
  8104cc:	008000c4 	movi	r2,3
  8104d0:	69c00415 	stw	r7,16(r13)
  8104d4:	6a000215 	stw	r8,8(r13)
  8104d8:	68800015 	stw	r2,0(r13)
  8104dc:	69800315 	stw	r6,12(r13)
  8104e0:	f800283a 	ret
  8104e4:	4a84b03a 	or	r2,r9,r10
  8104e8:	1000031e 	bne	r2,zero,8104f8 <__unpack_d+0x104>
  8104ec:	00800104 	movi	r2,4
  8104f0:	28800015 	stw	r2,0(r5)
  8104f4:	f800283a 	ret
  8104f8:	0009883a 	mov	r4,zero
  8104fc:	01400234 	movhi	r5,8
  810500:	4904703a 	and	r2,r9,r4
  810504:	5146703a 	and	r3,r10,r5
  810508:	10c4b03a 	or	r2,r2,r3
  81050c:	10000526 	beq	r2,zero,810524 <__unpack_d+0x130>
  810510:	00800044 	movi	r2,1
  810514:	68800015 	stw	r2,0(r13)
  810518:	6b000415 	stw	r12,16(r13)
  81051c:	6ac00315 	stw	r11,12(r13)
  810520:	f800283a 	ret
  810524:	68000015 	stw	zero,0(r13)
  810528:	003ffb06 	br	810518 <__unpack_d+0x124>

0081052c <__fpcmp_parts_d>:
  81052c:	21800017 	ldw	r6,0(r4)
  810530:	00c00044 	movi	r3,1
  810534:	19800a2e 	bgeu	r3,r6,810560 <__fpcmp_parts_d+0x34>
  810538:	28800017 	ldw	r2,0(r5)
  81053c:	1880082e 	bgeu	r3,r2,810560 <__fpcmp_parts_d+0x34>
  810540:	00c00104 	movi	r3,4
  810544:	30c02626 	beq	r6,r3,8105e0 <__fpcmp_parts_d+0xb4>
  810548:	10c02226 	beq	r2,r3,8105d4 <__fpcmp_parts_d+0xa8>
  81054c:	00c00084 	movi	r3,2
  810550:	30c00526 	beq	r6,r3,810568 <__fpcmp_parts_d+0x3c>
  810554:	10c0071e 	bne	r2,r3,810574 <__fpcmp_parts_d+0x48>
  810558:	20800117 	ldw	r2,4(r4)
  81055c:	1000091e 	bne	r2,zero,810584 <__fpcmp_parts_d+0x58>
  810560:	00800044 	movi	r2,1
  810564:	f800283a 	ret
  810568:	10c01a1e 	bne	r2,r3,8105d4 <__fpcmp_parts_d+0xa8>
  81056c:	0005883a 	mov	r2,zero
  810570:	f800283a 	ret
  810574:	22000117 	ldw	r8,4(r4)
  810578:	28800117 	ldw	r2,4(r5)
  81057c:	40800326 	beq	r8,r2,81058c <__fpcmp_parts_d+0x60>
  810580:	403ff726 	beq	r8,zero,810560 <__fpcmp_parts_d+0x34>
  810584:	00bfffc4 	movi	r2,-1
  810588:	f800283a 	ret
  81058c:	20c00217 	ldw	r3,8(r4)
  810590:	28800217 	ldw	r2,8(r5)
  810594:	10fffa16 	blt	r2,r3,810580 <__fpcmp_parts_d+0x54>
  810598:	18800916 	blt	r3,r2,8105c0 <__fpcmp_parts_d+0x94>
  81059c:	21c00417 	ldw	r7,16(r4)
  8105a0:	28c00417 	ldw	r3,16(r5)
  8105a4:	21800317 	ldw	r6,12(r4)
  8105a8:	28800317 	ldw	r2,12(r5)
  8105ac:	19fff436 	bltu	r3,r7,810580 <__fpcmp_parts_d+0x54>
  8105b0:	38c00526 	beq	r7,r3,8105c8 <__fpcmp_parts_d+0x9c>
  8105b4:	38c00236 	bltu	r7,r3,8105c0 <__fpcmp_parts_d+0x94>
  8105b8:	19ffec1e 	bne	r3,r7,81056c <__fpcmp_parts_d+0x40>
  8105bc:	30bfeb2e 	bgeu	r6,r2,81056c <__fpcmp_parts_d+0x40>
  8105c0:	403fe71e 	bne	r8,zero,810560 <__fpcmp_parts_d+0x34>
  8105c4:	003fef06 	br	810584 <__fpcmp_parts_d+0x58>
  8105c8:	11bffa2e 	bgeu	r2,r6,8105b4 <__fpcmp_parts_d+0x88>
  8105cc:	403fe426 	beq	r8,zero,810560 <__fpcmp_parts_d+0x34>
  8105d0:	003fec06 	br	810584 <__fpcmp_parts_d+0x58>
  8105d4:	28800117 	ldw	r2,4(r5)
  8105d8:	103fe11e 	bne	r2,zero,810560 <__fpcmp_parts_d+0x34>
  8105dc:	003fe906 	br	810584 <__fpcmp_parts_d+0x58>
  8105e0:	11bfdd1e 	bne	r2,r6,810558 <__fpcmp_parts_d+0x2c>
  8105e4:	28c00117 	ldw	r3,4(r5)
  8105e8:	20800117 	ldw	r2,4(r4)
  8105ec:	1885c83a 	sub	r2,r3,r2
  8105f0:	f800283a 	ret

008105f4 <__pack_f>:
  8105f4:	20c00017 	ldw	r3,0(r4)
  8105f8:	01c00044 	movi	r7,1
  8105fc:	21800317 	ldw	r6,12(r4)
  810600:	21400117 	ldw	r5,4(r4)
  810604:	38c02d2e 	bgeu	r7,r3,8106bc <__pack_f+0xc8>
  810608:	00800104 	movi	r2,4
  81060c:	18802826 	beq	r3,r2,8106b0 <__pack_f+0xbc>
  810610:	00800084 	movi	r2,2
  810614:	18800126 	beq	r3,r2,81061c <__pack_f+0x28>
  810618:	3000101e 	bne	r6,zero,81065c <__pack_f+0x68>
  81061c:	000d883a 	mov	r6,zero
  810620:	0007883a 	mov	r3,zero
  810624:	19003fcc 	andi	r4,r3,255
  810628:	200895fa 	slli	r4,r4,23
  81062c:	00c02034 	movhi	r3,128
  810630:	18ffffc4 	addi	r3,r3,-1
  810634:	30c6703a 	and	r3,r6,r3
  810638:	10a0002c 	andhi	r2,r2,32768
  81063c:	10c4b03a 	or	r2,r2,r3
  810640:	280a97fa 	slli	r5,r5,31
  810644:	1104b03a 	or	r2,r2,r4
  810648:	00e00034 	movhi	r3,32768
  81064c:	18ffffc4 	addi	r3,r3,-1
  810650:	10c4703a 	and	r2,r2,r3
  810654:	1144b03a 	or	r2,r2,r5
  810658:	f800283a 	ret
  81065c:	21000217 	ldw	r4,8(r4)
  810660:	00bfe084 	movi	r2,-126
  810664:	20801b16 	blt	r4,r2,8106d4 <__pack_f+0xe0>
  810668:	00801fc4 	movi	r2,127
  81066c:	11001016 	blt	r2,r4,8106b0 <__pack_f+0xbc>
  810670:	308e703a 	and	r7,r6,r2
  810674:	2087883a 	add	r3,r4,r2
  810678:	00801004 	movi	r2,64
  81067c:	38800526 	beq	r7,r2,810694 <__pack_f+0xa0>
  810680:	31800fc4 	addi	r6,r6,63
  810684:	30000716 	blt	r6,zero,8106a4 <__pack_f+0xb0>
  810688:	300490ba 	slli	r2,r6,2
  81068c:	100cd27a 	srli	r6,r2,9
  810690:	003fe406 	br	810624 <__pack_f+0x30>
  810694:	3080200c 	andi	r2,r6,128
  810698:	103ffa26 	beq	r2,zero,810684 <__pack_f+0x90>
  81069c:	31cd883a 	add	r6,r6,r7
  8106a0:	003ff806 	br	810684 <__pack_f+0x90>
  8106a4:	300cd07a 	srli	r6,r6,1
  8106a8:	18c00044 	addi	r3,r3,1
  8106ac:	003ff606 	br	810688 <__pack_f+0x94>
  8106b0:	000d883a 	mov	r6,zero
  8106b4:	00ffffc4 	movi	r3,-1
  8106b8:	003fda06 	br	810624 <__pack_f+0x30>
  8106bc:	31800434 	orhi	r6,r6,16
  8106c0:	00802034 	movhi	r2,128
  8106c4:	10bfffc4 	addi	r2,r2,-1
  8106c8:	308c703a 	and	r6,r6,r2
  8106cc:	00ffffc4 	movi	r3,-1
  8106d0:	003fd406 	br	810624 <__pack_f+0x30>
  8106d4:	1109c83a 	sub	r4,r2,r4
  8106d8:	00800644 	movi	r2,25
  8106dc:	11001216 	blt	r2,r4,810728 <__pack_f+0x134>
  8106e0:	3904983a 	sll	r2,r7,r4
  8106e4:	3106d83a 	srl	r3,r6,r4
  8106e8:	10bfffc4 	addi	r2,r2,-1
  8106ec:	3084703a 	and	r2,r6,r2
  8106f0:	1004c03a 	cmpne	r2,r2,zero
  8106f4:	1886b03a 	or	r3,r3,r2
  8106f8:	19001fcc 	andi	r4,r3,127
  8106fc:	00801004 	movi	r2,64
  810700:	20800c26 	beq	r4,r2,810734 <__pack_f+0x140>
  810704:	18c00fc4 	addi	r3,r3,63
  810708:	00900034 	movhi	r2,16384
  81070c:	10bfffc4 	addi	r2,r2,-1
  810710:	180cd1fa 	srli	r6,r3,7
  810714:	10c7803a 	cmpltu	r3,r2,r3
  810718:	00802034 	movhi	r2,128
  81071c:	10bfffc4 	addi	r2,r2,-1
  810720:	308c703a 	and	r6,r6,r2
  810724:	003fbf06 	br	810624 <__pack_f+0x30>
  810728:	0007883a 	mov	r3,zero
  81072c:	000d883a 	mov	r6,zero
  810730:	003ff906 	br	810718 <__pack_f+0x124>
  810734:	1880200c 	andi	r2,r3,128
  810738:	10000126 	beq	r2,zero,810740 <__pack_f+0x14c>
  81073c:	1907883a 	add	r3,r3,r4
  810740:	180cd1fa 	srli	r6,r3,7
  810744:	00900034 	movhi	r2,16384
  810748:	10bfffc4 	addi	r2,r2,-1
  81074c:	10c7803a 	cmpltu	r3,r2,r3
  810750:	003ff106 	br	810718 <__pack_f+0x124>

00810754 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810754:	defff804 	addi	sp,sp,-32
  810758:	dfc00715 	stw	ra,28(sp)
  81075c:	df000615 	stw	fp,24(sp)
  810760:	df000604 	addi	fp,sp,24
  810764:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810768:	e0bffc17 	ldw	r2,-16(fp)
  81076c:	1004803a 	cmplt	r2,r2,zero
  810770:	1000091e 	bne	r2,zero,810798 <close+0x44>
  810774:	e13ffc17 	ldw	r4,-16(fp)
  810778:	01400304 	movi	r5,12
  81077c:	080fe8c0 	call	80fe8c <__mulsi3>
  810780:	1007883a 	mov	r3,r2
  810784:	00802074 	movhi	r2,129
  810788:	1095a904 	addi	r2,r2,22180
  81078c:	1887883a 	add	r3,r3,r2
  810790:	e0ffff15 	stw	r3,-4(fp)
  810794:	00000106 	br	81079c <close+0x48>
  810798:	e03fff15 	stw	zero,-4(fp)
  81079c:	e0bfff17 	ldw	r2,-4(fp)
  8107a0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8107a4:	e0bffb17 	ldw	r2,-20(fp)
  8107a8:	1005003a 	cmpeq	r2,r2,zero
  8107ac:	10001d1e 	bne	r2,zero,810824 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8107b0:	e0bffb17 	ldw	r2,-20(fp)
  8107b4:	10800017 	ldw	r2,0(r2)
  8107b8:	10800417 	ldw	r2,16(r2)
  8107bc:	1005003a 	cmpeq	r2,r2,zero
  8107c0:	1000071e 	bne	r2,zero,8107e0 <close+0x8c>
  8107c4:	e0bffb17 	ldw	r2,-20(fp)
  8107c8:	10800017 	ldw	r2,0(r2)
  8107cc:	10800417 	ldw	r2,16(r2)
  8107d0:	e13ffb17 	ldw	r4,-20(fp)
  8107d4:	103ee83a 	callr	r2
  8107d8:	e0bffe15 	stw	r2,-8(fp)
  8107dc:	00000106 	br	8107e4 <close+0x90>
  8107e0:	e03ffe15 	stw	zero,-8(fp)
  8107e4:	e0bffe17 	ldw	r2,-8(fp)
  8107e8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8107ec:	e13ffc17 	ldw	r4,-16(fp)
  8107f0:	081155c0 	call	81155c <alt_release_fd>
    if (rval < 0)
  8107f4:	e0bffa17 	ldw	r2,-24(fp)
  8107f8:	1004403a 	cmpge	r2,r2,zero
  8107fc:	1000071e 	bne	r2,zero,81081c <close+0xc8>
    {
      ALT_ERRNO = -rval;
  810800:	08108540 	call	810854 <alt_get_errno>
  810804:	e0fffa17 	ldw	r3,-24(fp)
  810808:	00c7c83a 	sub	r3,zero,r3
  81080c:	10c00015 	stw	r3,0(r2)
      return -1;
  810810:	00bfffc4 	movi	r2,-1
  810814:	e0bffd15 	stw	r2,-12(fp)
  810818:	00000806 	br	81083c <close+0xe8>
    }
    return 0;
  81081c:	e03ffd15 	stw	zero,-12(fp)
  810820:	00000606 	br	81083c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810824:	08108540 	call	810854 <alt_get_errno>
  810828:	1007883a 	mov	r3,r2
  81082c:	00801444 	movi	r2,81
  810830:	18800015 	stw	r2,0(r3)
    return -1;
  810834:	00bfffc4 	movi	r2,-1
  810838:	e0bffd15 	stw	r2,-12(fp)
  81083c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  810840:	e037883a 	mov	sp,fp
  810844:	dfc00117 	ldw	ra,4(sp)
  810848:	df000017 	ldw	fp,0(sp)
  81084c:	dec00204 	addi	sp,sp,8
  810850:	f800283a 	ret

00810854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810854:	defffd04 	addi	sp,sp,-12
  810858:	dfc00215 	stw	ra,8(sp)
  81085c:	df000115 	stw	fp,4(sp)
  810860:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810864:	00802074 	movhi	r2,129
  810868:	109a7504 	addi	r2,r2,27092
  81086c:	10800017 	ldw	r2,0(r2)
  810870:	1005003a 	cmpeq	r2,r2,zero
  810874:	1000061e 	bne	r2,zero,810890 <alt_get_errno+0x3c>
  810878:	00802074 	movhi	r2,129
  81087c:	109a7504 	addi	r2,r2,27092
  810880:	10800017 	ldw	r2,0(r2)
  810884:	103ee83a 	callr	r2
  810888:	e0bfff15 	stw	r2,-4(fp)
  81088c:	00000306 	br	81089c <alt_get_errno+0x48>
  810890:	008020b4 	movhi	r2,130
  810894:	10a16b04 	addi	r2,r2,-31316
  810898:	e0bfff15 	stw	r2,-4(fp)
  81089c:	e0bfff17 	ldw	r2,-4(fp)
}
  8108a0:	e037883a 	mov	sp,fp
  8108a4:	dfc00117 	ldw	ra,4(sp)
  8108a8:	df000017 	ldw	fp,0(sp)
  8108ac:	dec00204 	addi	sp,sp,8
  8108b0:	f800283a 	ret

008108b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8108b4:	defffc04 	addi	sp,sp,-16
  8108b8:	df000315 	stw	fp,12(sp)
  8108bc:	df000304 	addi	fp,sp,12
  8108c0:	e13ffd15 	stw	r4,-12(fp)
  8108c4:	e17ffe15 	stw	r5,-8(fp)
  8108c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8108cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8108d0:	e037883a 	mov	sp,fp
  8108d4:	df000017 	ldw	fp,0(sp)
  8108d8:	dec00104 	addi	sp,sp,4
  8108dc:	f800283a 	ret

008108e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8108e0:	defff904 	addi	sp,sp,-28
  8108e4:	dfc00615 	stw	ra,24(sp)
  8108e8:	df000515 	stw	fp,20(sp)
  8108ec:	df000504 	addi	fp,sp,20
  8108f0:	e13ffc15 	stw	r4,-16(fp)
  8108f4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8108f8:	e0bffc17 	ldw	r2,-16(fp)
  8108fc:	1004803a 	cmplt	r2,r2,zero
  810900:	1000091e 	bne	r2,zero,810928 <fstat+0x48>
  810904:	e13ffc17 	ldw	r4,-16(fp)
  810908:	01400304 	movi	r5,12
  81090c:	080fe8c0 	call	80fe8c <__mulsi3>
  810910:	1007883a 	mov	r3,r2
  810914:	00802074 	movhi	r2,129
  810918:	1095a904 	addi	r2,r2,22180
  81091c:	1887883a 	add	r3,r3,r2
  810920:	e0ffff15 	stw	r3,-4(fp)
  810924:	00000106 	br	81092c <fstat+0x4c>
  810928:	e03fff15 	stw	zero,-4(fp)
  81092c:	e0bfff17 	ldw	r2,-4(fp)
  810930:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810934:	e0bffb17 	ldw	r2,-20(fp)
  810938:	1005003a 	cmpeq	r2,r2,zero
  81093c:	1000121e 	bne	r2,zero,810988 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  810940:	e0bffb17 	ldw	r2,-20(fp)
  810944:	10800017 	ldw	r2,0(r2)
  810948:	10800817 	ldw	r2,32(r2)
  81094c:	1005003a 	cmpeq	r2,r2,zero
  810950:	1000081e 	bne	r2,zero,810974 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  810954:	e0bffb17 	ldw	r2,-20(fp)
  810958:	10800017 	ldw	r2,0(r2)
  81095c:	10800817 	ldw	r2,32(r2)
  810960:	e13ffb17 	ldw	r4,-20(fp)
  810964:	e17ffd17 	ldw	r5,-12(fp)
  810968:	103ee83a 	callr	r2
  81096c:	e0bffe15 	stw	r2,-8(fp)
  810970:	00000b06 	br	8109a0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  810974:	e0fffd17 	ldw	r3,-12(fp)
  810978:	00880004 	movi	r2,8192
  81097c:	18800115 	stw	r2,4(r3)
      return 0;
  810980:	e03ffe15 	stw	zero,-8(fp)
  810984:	00000606 	br	8109a0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810988:	08109b80 	call	8109b8 <alt_get_errno>
  81098c:	1007883a 	mov	r3,r2
  810990:	00801444 	movi	r2,81
  810994:	18800015 	stw	r2,0(r3)
    return -1;
  810998:	00bfffc4 	movi	r2,-1
  81099c:	e0bffe15 	stw	r2,-8(fp)
  8109a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8109a4:	e037883a 	mov	sp,fp
  8109a8:	dfc00117 	ldw	ra,4(sp)
  8109ac:	df000017 	ldw	fp,0(sp)
  8109b0:	dec00204 	addi	sp,sp,8
  8109b4:	f800283a 	ret

008109b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8109b8:	defffd04 	addi	sp,sp,-12
  8109bc:	dfc00215 	stw	ra,8(sp)
  8109c0:	df000115 	stw	fp,4(sp)
  8109c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8109c8:	00802074 	movhi	r2,129
  8109cc:	109a7504 	addi	r2,r2,27092
  8109d0:	10800017 	ldw	r2,0(r2)
  8109d4:	1005003a 	cmpeq	r2,r2,zero
  8109d8:	1000061e 	bne	r2,zero,8109f4 <alt_get_errno+0x3c>
  8109dc:	00802074 	movhi	r2,129
  8109e0:	109a7504 	addi	r2,r2,27092
  8109e4:	10800017 	ldw	r2,0(r2)
  8109e8:	103ee83a 	callr	r2
  8109ec:	e0bfff15 	stw	r2,-4(fp)
  8109f0:	00000306 	br	810a00 <alt_get_errno+0x48>
  8109f4:	008020b4 	movhi	r2,130
  8109f8:	10a16b04 	addi	r2,r2,-31316
  8109fc:	e0bfff15 	stw	r2,-4(fp)
  810a00:	e0bfff17 	ldw	r2,-4(fp)
}
  810a04:	e037883a 	mov	sp,fp
  810a08:	dfc00117 	ldw	ra,4(sp)
  810a0c:	df000017 	ldw	fp,0(sp)
  810a10:	dec00204 	addi	sp,sp,8
  810a14:	f800283a 	ret

00810a18 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810a18:	defff904 	addi	sp,sp,-28
  810a1c:	dfc00615 	stw	ra,24(sp)
  810a20:	df000515 	stw	fp,20(sp)
  810a24:	df000504 	addi	fp,sp,20
  810a28:	e13ffc15 	stw	r4,-16(fp)
  810a2c:	e17ffd15 	stw	r5,-12(fp)
  810a30:	e1bffe15 	stw	r6,-8(fp)
  810a34:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810a38:	e0800217 	ldw	r2,8(fp)
  810a3c:	d8800015 	stw	r2,0(sp)
  810a40:	e13ffc17 	ldw	r4,-16(fp)
  810a44:	e17ffd17 	ldw	r5,-12(fp)
  810a48:	e1bffe17 	ldw	r6,-8(fp)
  810a4c:	e1ffff17 	ldw	r7,-4(fp)
  810a50:	0810bec0 	call	810bec <alt_iic_isr_register>
}  
  810a54:	e037883a 	mov	sp,fp
  810a58:	dfc00117 	ldw	ra,4(sp)
  810a5c:	df000017 	ldw	fp,0(sp)
  810a60:	dec00204 	addi	sp,sp,8
  810a64:	f800283a 	ret

00810a68 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810a68:	defff904 	addi	sp,sp,-28
  810a6c:	df000615 	stw	fp,24(sp)
  810a70:	df000604 	addi	fp,sp,24
  810a74:	e13ffe15 	stw	r4,-8(fp)
  810a78:	e17fff15 	stw	r5,-4(fp)
  810a7c:	e0bfff17 	ldw	r2,-4(fp)
  810a80:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a84:	0005303a 	rdctl	r2,status
  810a88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a8c:	e0fffb17 	ldw	r3,-20(fp)
  810a90:	00bfff84 	movi	r2,-2
  810a94:	1884703a 	and	r2,r3,r2
  810a98:	1001703a 	wrctl	status,r2
  
  return context;
  810a9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810aa0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  810aa4:	e0fffc17 	ldw	r3,-16(fp)
  810aa8:	00800044 	movi	r2,1
  810aac:	10c4983a 	sll	r2,r2,r3
  810ab0:	1007883a 	mov	r3,r2
  810ab4:	008020b4 	movhi	r2,130
  810ab8:	10a17204 	addi	r2,r2,-31288
  810abc:	10800017 	ldw	r2,0(r2)
  810ac0:	1886b03a 	or	r3,r3,r2
  810ac4:	008020b4 	movhi	r2,130
  810ac8:	10a17204 	addi	r2,r2,-31288
  810acc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810ad0:	008020b4 	movhi	r2,130
  810ad4:	10a17204 	addi	r2,r2,-31288
  810ad8:	10800017 	ldw	r2,0(r2)
  810adc:	100170fa 	wrctl	ienable,r2
  810ae0:	e0bffd17 	ldw	r2,-12(fp)
  810ae4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ae8:	e0bffa17 	ldw	r2,-24(fp)
  810aec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810af0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  810af4:	e037883a 	mov	sp,fp
  810af8:	df000017 	ldw	fp,0(sp)
  810afc:	dec00104 	addi	sp,sp,4
  810b00:	f800283a 	ret

00810b04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  810b04:	defff904 	addi	sp,sp,-28
  810b08:	df000615 	stw	fp,24(sp)
  810b0c:	df000604 	addi	fp,sp,24
  810b10:	e13ffe15 	stw	r4,-8(fp)
  810b14:	e17fff15 	stw	r5,-4(fp)
  810b18:	e0bfff17 	ldw	r2,-4(fp)
  810b1c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b20:	0005303a 	rdctl	r2,status
  810b24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b28:	e0fffb17 	ldw	r3,-20(fp)
  810b2c:	00bfff84 	movi	r2,-2
  810b30:	1884703a 	and	r2,r3,r2
  810b34:	1001703a 	wrctl	status,r2
  
  return context;
  810b38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810b3c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  810b40:	e0fffc17 	ldw	r3,-16(fp)
  810b44:	00800044 	movi	r2,1
  810b48:	10c4983a 	sll	r2,r2,r3
  810b4c:	0084303a 	nor	r2,zero,r2
  810b50:	1007883a 	mov	r3,r2
  810b54:	008020b4 	movhi	r2,130
  810b58:	10a17204 	addi	r2,r2,-31288
  810b5c:	10800017 	ldw	r2,0(r2)
  810b60:	1886703a 	and	r3,r3,r2
  810b64:	008020b4 	movhi	r2,130
  810b68:	10a17204 	addi	r2,r2,-31288
  810b6c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810b70:	008020b4 	movhi	r2,130
  810b74:	10a17204 	addi	r2,r2,-31288
  810b78:	10800017 	ldw	r2,0(r2)
  810b7c:	100170fa 	wrctl	ienable,r2
  810b80:	e0bffd17 	ldw	r2,-12(fp)
  810b84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b88:	e0bffa17 	ldw	r2,-24(fp)
  810b8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810b90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  810b94:	e037883a 	mov	sp,fp
  810b98:	df000017 	ldw	fp,0(sp)
  810b9c:	dec00104 	addi	sp,sp,4
  810ba0:	f800283a 	ret

00810ba4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  810ba4:	defffc04 	addi	sp,sp,-16
  810ba8:	df000315 	stw	fp,12(sp)
  810bac:	df000304 	addi	fp,sp,12
  810bb0:	e13ffe15 	stw	r4,-8(fp)
  810bb4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810bb8:	000530fa 	rdctl	r2,ienable
  810bbc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  810bc0:	e0ffff17 	ldw	r3,-4(fp)
  810bc4:	00800044 	movi	r2,1
  810bc8:	10c4983a 	sll	r2,r2,r3
  810bcc:	1007883a 	mov	r3,r2
  810bd0:	e0bffd17 	ldw	r2,-12(fp)
  810bd4:	1884703a 	and	r2,r3,r2
  810bd8:	1004c03a 	cmpne	r2,r2,zero
}
  810bdc:	e037883a 	mov	sp,fp
  810be0:	df000017 	ldw	fp,0(sp)
  810be4:	dec00104 	addi	sp,sp,4
  810be8:	f800283a 	ret

00810bec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810bec:	defff404 	addi	sp,sp,-48
  810bf0:	dfc00b15 	stw	ra,44(sp)
  810bf4:	df000a15 	stw	fp,40(sp)
  810bf8:	df000a04 	addi	fp,sp,40
  810bfc:	e13ffb15 	stw	r4,-20(fp)
  810c00:	e17ffc15 	stw	r5,-16(fp)
  810c04:	e1bffd15 	stw	r6,-12(fp)
  810c08:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  810c0c:	00bffa84 	movi	r2,-22
  810c10:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  810c14:	e0bffc17 	ldw	r2,-16(fp)
  810c18:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810c1c:	e0bff917 	ldw	r2,-28(fp)
  810c20:	10800808 	cmpgei	r2,r2,32
  810c24:	1000291e 	bne	r2,zero,810ccc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c28:	0005303a 	rdctl	r2,status
  810c2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c30:	e0fff717 	ldw	r3,-36(fp)
  810c34:	00bfff84 	movi	r2,-2
  810c38:	1884703a 	and	r2,r3,r2
  810c3c:	1001703a 	wrctl	status,r2
  
  return context;
  810c40:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  810c44:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  810c48:	e0bff917 	ldw	r2,-28(fp)
  810c4c:	00c020b4 	movhi	r3,130
  810c50:	18e1c204 	addi	r3,r3,-30968
  810c54:	100490fa 	slli	r2,r2,3
  810c58:	10c7883a 	add	r3,r2,r3
  810c5c:	e0bffd17 	ldw	r2,-12(fp)
  810c60:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  810c64:	e0bff917 	ldw	r2,-28(fp)
  810c68:	00c020b4 	movhi	r3,130
  810c6c:	18e1c204 	addi	r3,r3,-30968
  810c70:	100490fa 	slli	r2,r2,3
  810c74:	10c5883a 	add	r2,r2,r3
  810c78:	10c00104 	addi	r3,r2,4
  810c7c:	e0bffe17 	ldw	r2,-8(fp)
  810c80:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  810c84:	e0bffd17 	ldw	r2,-12(fp)
  810c88:	1005003a 	cmpeq	r2,r2,zero
  810c8c:	1000051e 	bne	r2,zero,810ca4 <alt_iic_isr_register+0xb8>
  810c90:	e17ff917 	ldw	r5,-28(fp)
  810c94:	e13ffb17 	ldw	r4,-20(fp)
  810c98:	0810a680 	call	810a68 <alt_ic_irq_enable>
  810c9c:	e0bfff15 	stw	r2,-4(fp)
  810ca0:	00000406 	br	810cb4 <alt_iic_isr_register+0xc8>
  810ca4:	e17ff917 	ldw	r5,-28(fp)
  810ca8:	e13ffb17 	ldw	r4,-20(fp)
  810cac:	0810b040 	call	810b04 <alt_ic_irq_disable>
  810cb0:	e0bfff15 	stw	r2,-4(fp)
  810cb4:	e0bfff17 	ldw	r2,-4(fp)
  810cb8:	e0bffa15 	stw	r2,-24(fp)
  810cbc:	e0bff817 	ldw	r2,-32(fp)
  810cc0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810cc4:	e0bff617 	ldw	r2,-40(fp)
  810cc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  810ccc:	e0bffa17 	ldw	r2,-24(fp)
}
  810cd0:	e037883a 	mov	sp,fp
  810cd4:	dfc00117 	ldw	ra,4(sp)
  810cd8:	df000017 	ldw	fp,0(sp)
  810cdc:	dec00204 	addi	sp,sp,8
  810ce0:	f800283a 	ret

00810ce4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810ce4:	deffeb04 	addi	sp,sp,-84
  810ce8:	dfc01415 	stw	ra,80(sp)
  810cec:	df001315 	stw	fp,76(sp)
  810cf0:	df001304 	addi	fp,sp,76
  810cf4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810cf8:	e0bffd17 	ldw	r2,-12(fp)
  810cfc:	1004803a 	cmplt	r2,r2,zero
  810d00:	1000091e 	bne	r2,zero,810d28 <isatty+0x44>
  810d04:	e13ffd17 	ldw	r4,-12(fp)
  810d08:	01400304 	movi	r5,12
  810d0c:	080fe8c0 	call	80fe8c <__mulsi3>
  810d10:	1007883a 	mov	r3,r2
  810d14:	00802074 	movhi	r2,129
  810d18:	1095a904 	addi	r2,r2,22180
  810d1c:	1887883a 	add	r3,r3,r2
  810d20:	e0ffff15 	stw	r3,-4(fp)
  810d24:	00000106 	br	810d2c <isatty+0x48>
  810d28:	e03fff15 	stw	zero,-4(fp)
  810d2c:	e0bfff17 	ldw	r2,-4(fp)
  810d30:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  810d34:	e0bfed17 	ldw	r2,-76(fp)
  810d38:	1005003a 	cmpeq	r2,r2,zero
  810d3c:	10000f1e 	bne	r2,zero,810d7c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810d40:	e0bfed17 	ldw	r2,-76(fp)
  810d44:	10800017 	ldw	r2,0(r2)
  810d48:	10800817 	ldw	r2,32(r2)
  810d4c:	1004c03a 	cmpne	r2,r2,zero
  810d50:	1000031e 	bne	r2,zero,810d60 <isatty+0x7c>
    {
      return 1;
  810d54:	00800044 	movi	r2,1
  810d58:	e0bffe15 	stw	r2,-8(fp)
  810d5c:	00000c06 	br	810d90 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810d60:	e17fee04 	addi	r5,fp,-72
  810d64:	e13ffd17 	ldw	r4,-12(fp)
  810d68:	08108e00 	call	8108e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810d6c:	e0bfef17 	ldw	r2,-68(fp)
  810d70:	10880020 	cmpeqi	r2,r2,8192
  810d74:	e0bffe15 	stw	r2,-8(fp)
  810d78:	00000506 	br	810d90 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810d7c:	0810da80 	call	810da8 <alt_get_errno>
  810d80:	1007883a 	mov	r3,r2
  810d84:	00801444 	movi	r2,81
  810d88:	18800015 	stw	r2,0(r3)
    return 0;
  810d8c:	e03ffe15 	stw	zero,-8(fp)
  810d90:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810d94:	e037883a 	mov	sp,fp
  810d98:	dfc00117 	ldw	ra,4(sp)
  810d9c:	df000017 	ldw	fp,0(sp)
  810da0:	dec00204 	addi	sp,sp,8
  810da4:	f800283a 	ret

00810da8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810da8:	defffd04 	addi	sp,sp,-12
  810dac:	dfc00215 	stw	ra,8(sp)
  810db0:	df000115 	stw	fp,4(sp)
  810db4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810db8:	00802074 	movhi	r2,129
  810dbc:	109a7504 	addi	r2,r2,27092
  810dc0:	10800017 	ldw	r2,0(r2)
  810dc4:	1005003a 	cmpeq	r2,r2,zero
  810dc8:	1000061e 	bne	r2,zero,810de4 <alt_get_errno+0x3c>
  810dcc:	00802074 	movhi	r2,129
  810dd0:	109a7504 	addi	r2,r2,27092
  810dd4:	10800017 	ldw	r2,0(r2)
  810dd8:	103ee83a 	callr	r2
  810ddc:	e0bfff15 	stw	r2,-4(fp)
  810de0:	00000306 	br	810df0 <alt_get_errno+0x48>
  810de4:	008020b4 	movhi	r2,130
  810de8:	10a16b04 	addi	r2,r2,-31316
  810dec:	e0bfff15 	stw	r2,-4(fp)
  810df0:	e0bfff17 	ldw	r2,-4(fp)
}
  810df4:	e037883a 	mov	sp,fp
  810df8:	dfc00117 	ldw	ra,4(sp)
  810dfc:	df000017 	ldw	fp,0(sp)
  810e00:	dec00204 	addi	sp,sp,8
  810e04:	f800283a 	ret

00810e08 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810e08:	defffe04 	addi	sp,sp,-8
  810e0c:	dfc00115 	stw	ra,4(sp)
  810e10:	df000015 	stw	fp,0(sp)
  810e14:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810e18:	01002074 	movhi	r4,129
  810e1c:	211a7b04 	addi	r4,r4,27116
  810e20:	01402074 	movhi	r5,129
  810e24:	29539004 	addi	r5,r5,20032
  810e28:	01802074 	movhi	r6,129
  810e2c:	319a7b04 	addi	r6,r6,27116
  810e30:	0810e880 	call	810e88 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810e34:	01002034 	movhi	r4,128
  810e38:	21000804 	addi	r4,r4,32
  810e3c:	01402034 	movhi	r5,128
  810e40:	29400804 	addi	r5,r5,32
  810e44:	01802034 	movhi	r6,128
  810e48:	31806d04 	addi	r6,r6,436
  810e4c:	0810e880 	call	810e88 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810e50:	01002074 	movhi	r4,129
  810e54:	21110804 	addi	r4,r4,17440
  810e58:	01402074 	movhi	r5,129
  810e5c:	29510804 	addi	r5,r5,17440
  810e60:	01802074 	movhi	r6,129
  810e64:	31939004 	addi	r6,r6,20032
  810e68:	0810e880 	call	810e88 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810e6c:	08137580 	call	813758 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810e70:	0813bd40 	call	813bd4 <alt_icache_flush_all>
}
  810e74:	e037883a 	mov	sp,fp
  810e78:	dfc00117 	ldw	ra,4(sp)
  810e7c:	df000017 	ldw	fp,0(sp)
  810e80:	dec00204 	addi	sp,sp,8
  810e84:	f800283a 	ret

00810e88 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810e88:	defffc04 	addi	sp,sp,-16
  810e8c:	df000315 	stw	fp,12(sp)
  810e90:	df000304 	addi	fp,sp,12
  810e94:	e13ffd15 	stw	r4,-12(fp)
  810e98:	e17ffe15 	stw	r5,-8(fp)
  810e9c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810ea0:	e0fffe17 	ldw	r3,-8(fp)
  810ea4:	e0bffd17 	ldw	r2,-12(fp)
  810ea8:	18800e26 	beq	r3,r2,810ee4 <alt_load_section+0x5c>
  {
    while( to != end )
  810eac:	00000a06 	br	810ed8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  810eb0:	e0bffd17 	ldw	r2,-12(fp)
  810eb4:	10c00017 	ldw	r3,0(r2)
  810eb8:	e0bffe17 	ldw	r2,-8(fp)
  810ebc:	10c00015 	stw	r3,0(r2)
  810ec0:	e0bffe17 	ldw	r2,-8(fp)
  810ec4:	10800104 	addi	r2,r2,4
  810ec8:	e0bffe15 	stw	r2,-8(fp)
  810ecc:	e0bffd17 	ldw	r2,-12(fp)
  810ed0:	10800104 	addi	r2,r2,4
  810ed4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810ed8:	e0fffe17 	ldw	r3,-8(fp)
  810edc:	e0bfff17 	ldw	r2,-4(fp)
  810ee0:	18bff31e 	bne	r3,r2,810eb0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  810ee4:	e037883a 	mov	sp,fp
  810ee8:	df000017 	ldw	fp,0(sp)
  810eec:	dec00104 	addi	sp,sp,4
  810ef0:	f800283a 	ret

00810ef4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810ef4:	defff804 	addi	sp,sp,-32
  810ef8:	dfc00715 	stw	ra,28(sp)
  810efc:	df000615 	stw	fp,24(sp)
  810f00:	df000604 	addi	fp,sp,24
  810f04:	e13ffc15 	stw	r4,-16(fp)
  810f08:	e17ffd15 	stw	r5,-12(fp)
  810f0c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810f10:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810f14:	e0bffc17 	ldw	r2,-16(fp)
  810f18:	1004803a 	cmplt	r2,r2,zero
  810f1c:	1000091e 	bne	r2,zero,810f44 <lseek+0x50>
  810f20:	e13ffc17 	ldw	r4,-16(fp)
  810f24:	01400304 	movi	r5,12
  810f28:	080fe8c0 	call	80fe8c <__mulsi3>
  810f2c:	1007883a 	mov	r3,r2
  810f30:	00802074 	movhi	r2,129
  810f34:	1095a904 	addi	r2,r2,22180
  810f38:	1887883a 	add	r3,r3,r2
  810f3c:	e0ffff15 	stw	r3,-4(fp)
  810f40:	00000106 	br	810f48 <lseek+0x54>
  810f44:	e03fff15 	stw	zero,-4(fp)
  810f48:	e0bfff17 	ldw	r2,-4(fp)
  810f4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  810f50:	e0bffb17 	ldw	r2,-20(fp)
  810f54:	1005003a 	cmpeq	r2,r2,zero
  810f58:	1000111e 	bne	r2,zero,810fa0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810f5c:	e0bffb17 	ldw	r2,-20(fp)
  810f60:	10800017 	ldw	r2,0(r2)
  810f64:	10800717 	ldw	r2,28(r2)
  810f68:	1005003a 	cmpeq	r2,r2,zero
  810f6c:	1000091e 	bne	r2,zero,810f94 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810f70:	e0bffb17 	ldw	r2,-20(fp)
  810f74:	10800017 	ldw	r2,0(r2)
  810f78:	10800717 	ldw	r2,28(r2)
  810f7c:	e13ffb17 	ldw	r4,-20(fp)
  810f80:	e17ffd17 	ldw	r5,-12(fp)
  810f84:	e1bffe17 	ldw	r6,-8(fp)
  810f88:	103ee83a 	callr	r2
  810f8c:	e0bffa15 	stw	r2,-24(fp)
  810f90:	00000506 	br	810fa8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810f94:	00bfde84 	movi	r2,-134
  810f98:	e0bffa15 	stw	r2,-24(fp)
  810f9c:	00000206 	br	810fa8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  810fa0:	00bfebc4 	movi	r2,-81
  810fa4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810fa8:	e0bffa17 	ldw	r2,-24(fp)
  810fac:	1004403a 	cmpge	r2,r2,zero
  810fb0:	1000071e 	bne	r2,zero,810fd0 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  810fb4:	0810fe80 	call	810fe8 <alt_get_errno>
  810fb8:	1007883a 	mov	r3,r2
  810fbc:	e0bffa17 	ldw	r2,-24(fp)
  810fc0:	0085c83a 	sub	r2,zero,r2
  810fc4:	18800015 	stw	r2,0(r3)
    rc = -1;
  810fc8:	00bfffc4 	movi	r2,-1
  810fcc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  810fd0:	e0bffa17 	ldw	r2,-24(fp)
}
  810fd4:	e037883a 	mov	sp,fp
  810fd8:	dfc00117 	ldw	ra,4(sp)
  810fdc:	df000017 	ldw	fp,0(sp)
  810fe0:	dec00204 	addi	sp,sp,8
  810fe4:	f800283a 	ret

00810fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810fe8:	defffd04 	addi	sp,sp,-12
  810fec:	dfc00215 	stw	ra,8(sp)
  810ff0:	df000115 	stw	fp,4(sp)
  810ff4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810ff8:	00802074 	movhi	r2,129
  810ffc:	109a7504 	addi	r2,r2,27092
  811000:	10800017 	ldw	r2,0(r2)
  811004:	1005003a 	cmpeq	r2,r2,zero
  811008:	1000061e 	bne	r2,zero,811024 <alt_get_errno+0x3c>
  81100c:	00802074 	movhi	r2,129
  811010:	109a7504 	addi	r2,r2,27092
  811014:	10800017 	ldw	r2,0(r2)
  811018:	103ee83a 	callr	r2
  81101c:	e0bfff15 	stw	r2,-4(fp)
  811020:	00000306 	br	811030 <alt_get_errno+0x48>
  811024:	008020b4 	movhi	r2,130
  811028:	10a16b04 	addi	r2,r2,-31316
  81102c:	e0bfff15 	stw	r2,-4(fp)
  811030:	e0bfff17 	ldw	r2,-4(fp)
}
  811034:	e037883a 	mov	sp,fp
  811038:	dfc00117 	ldw	ra,4(sp)
  81103c:	df000017 	ldw	fp,0(sp)
  811040:	dec00204 	addi	sp,sp,8
  811044:	f800283a 	ret

00811048 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  811048:	defffd04 	addi	sp,sp,-12
  81104c:	dfc00215 	stw	ra,8(sp)
  811050:	df000115 	stw	fp,4(sp)
  811054:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  811058:	0009883a 	mov	r4,zero
  81105c:	08118440 	call	811844 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  811060:	08118780 	call	811878 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  811064:	01002074 	movhi	r4,129
  811068:	21138104 	addi	r4,r4,19972
  81106c:	01402074 	movhi	r5,129
  811070:	29538104 	addi	r5,r5,19972
  811074:	01802074 	movhi	r6,129
  811078:	31938104 	addi	r6,r6,19972
  81107c:	0813cdc0 	call	813cdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  811080:	08138880 	call	813888 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  811084:	01002074 	movhi	r4,129
  811088:	210e3b04 	addi	r4,r4,14572
  81108c:	0813fa80 	call	813fa8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  811090:	d1270a17 	ldw	r4,-25560(gp)
  811094:	d1670b17 	ldw	r5,-25556(gp)
  811098:	d1a70c17 	ldw	r6,-25552(gp)
  81109c:	08009ac0 	call	8009ac <main>
  8110a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8110a4:	01000044 	movi	r4,1
  8110a8:	08107540 	call	810754 <close>
  exit (result);
  8110ac:	e13fff17 	ldw	r4,-4(fp)
  8110b0:	0813fbc0 	call	813fbc <exit>

008110b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8110b4:	defffe04 	addi	sp,sp,-8
  8110b8:	df000115 	stw	fp,4(sp)
  8110bc:	df000104 	addi	fp,sp,4
  8110c0:	e13fff15 	stw	r4,-4(fp)
}
  8110c4:	e037883a 	mov	sp,fp
  8110c8:	df000017 	ldw	fp,0(sp)
  8110cc:	dec00104 	addi	sp,sp,4
  8110d0:	f800283a 	ret

008110d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8110d4:	defffe04 	addi	sp,sp,-8
  8110d8:	df000115 	stw	fp,4(sp)
  8110dc:	df000104 	addi	fp,sp,4
  8110e0:	e13fff15 	stw	r4,-4(fp)
}
  8110e4:	e037883a 	mov	sp,fp
  8110e8:	df000017 	ldw	fp,0(sp)
  8110ec:	dec00104 	addi	sp,sp,4
  8110f0:	f800283a 	ret

008110f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8110f4:	defffa04 	addi	sp,sp,-24
  8110f8:	dfc00515 	stw	ra,20(sp)
  8110fc:	df000415 	stw	fp,16(sp)
  811100:	dc000315 	stw	r16,12(sp)
  811104:	df000304 	addi	fp,sp,12
  811108:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81110c:	e0bffe17 	ldw	r2,-8(fp)
  811110:	10800217 	ldw	r2,8(r2)
  811114:	10d00034 	orhi	r3,r2,16384
  811118:	e0bffe17 	ldw	r2,-8(fp)
  81111c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811120:	e03ffd15 	stw	zero,-12(fp)
  811124:	00002306 	br	8111b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811128:	e13ffd17 	ldw	r4,-12(fp)
  81112c:	04002074 	movhi	r16,129
  811130:	8415a904 	addi	r16,r16,22180
  811134:	01400304 	movi	r5,12
  811138:	080fe8c0 	call	80fe8c <__mulsi3>
  81113c:	1405883a 	add	r2,r2,r16
  811140:	10c00017 	ldw	r3,0(r2)
  811144:	e0bffe17 	ldw	r2,-8(fp)
  811148:	10800017 	ldw	r2,0(r2)
  81114c:	1880161e 	bne	r3,r2,8111a8 <alt_file_locked+0xb4>
  811150:	e13ffd17 	ldw	r4,-12(fp)
  811154:	04002074 	movhi	r16,129
  811158:	8415a904 	addi	r16,r16,22180
  81115c:	01400304 	movi	r5,12
  811160:	080fe8c0 	call	80fe8c <__mulsi3>
  811164:	1405883a 	add	r2,r2,r16
  811168:	10800204 	addi	r2,r2,8
  81116c:	10800017 	ldw	r2,0(r2)
  811170:	1004403a 	cmpge	r2,r2,zero
  811174:	10000c1e 	bne	r2,zero,8111a8 <alt_file_locked+0xb4>
  811178:	e13ffd17 	ldw	r4,-12(fp)
  81117c:	01400304 	movi	r5,12
  811180:	080fe8c0 	call	80fe8c <__mulsi3>
  811184:	1007883a 	mov	r3,r2
  811188:	00802074 	movhi	r2,129
  81118c:	1095a904 	addi	r2,r2,22180
  811190:	1887883a 	add	r3,r3,r2
  811194:	e0bffe17 	ldw	r2,-8(fp)
  811198:	18800326 	beq	r3,r2,8111a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81119c:	00bffcc4 	movi	r2,-13
  8111a0:	e0bfff15 	stw	r2,-4(fp)
  8111a4:	00000a06 	br	8111d0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8111a8:	e0bffd17 	ldw	r2,-12(fp)
  8111ac:	10800044 	addi	r2,r2,1
  8111b0:	e0bffd15 	stw	r2,-12(fp)
  8111b4:	00802074 	movhi	r2,129
  8111b8:	109a7404 	addi	r2,r2,27088
  8111bc:	10800017 	ldw	r2,0(r2)
  8111c0:	1007883a 	mov	r3,r2
  8111c4:	e0bffd17 	ldw	r2,-12(fp)
  8111c8:	18bfd72e 	bgeu	r3,r2,811128 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8111cc:	e03fff15 	stw	zero,-4(fp)
  8111d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8111d4:	e037883a 	mov	sp,fp
  8111d8:	dfc00217 	ldw	ra,8(sp)
  8111dc:	df000117 	ldw	fp,4(sp)
  8111e0:	dc000017 	ldw	r16,0(sp)
  8111e4:	dec00304 	addi	sp,sp,12
  8111e8:	f800283a 	ret

008111ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8111ec:	defff404 	addi	sp,sp,-48
  8111f0:	dfc00b15 	stw	ra,44(sp)
  8111f4:	df000a15 	stw	fp,40(sp)
  8111f8:	df000a04 	addi	fp,sp,40
  8111fc:	e13ffb15 	stw	r4,-20(fp)
  811200:	e17ffc15 	stw	r5,-16(fp)
  811204:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811208:	00bfffc4 	movi	r2,-1
  81120c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  811210:	00bffb44 	movi	r2,-19
  811214:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  811218:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81121c:	e13ffb17 	ldw	r4,-20(fp)
  811220:	01402074 	movhi	r5,129
  811224:	295a7204 	addi	r5,r5,27080
  811228:	08139500 	call	813950 <alt_find_dev>
  81122c:	e0bffa15 	stw	r2,-24(fp)
  811230:	e0bffa17 	ldw	r2,-24(fp)
  811234:	1004c03a 	cmpne	r2,r2,zero
  811238:	1000051e 	bne	r2,zero,811250 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81123c:	e13ffb17 	ldw	r4,-20(fp)
  811240:	08139e40 	call	8139e4 <alt_find_file>
  811244:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  811248:	00800044 	movi	r2,1
  81124c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811250:	e0bffa17 	ldw	r2,-24(fp)
  811254:	1005003a 	cmpeq	r2,r2,zero
  811258:	1000311e 	bne	r2,zero,811320 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81125c:	e13ffa17 	ldw	r4,-24(fp)
  811260:	0813b040 	call	813b04 <alt_get_fd>
  811264:	e0bff815 	stw	r2,-32(fp)
  811268:	e0bff817 	ldw	r2,-32(fp)
  81126c:	1004403a 	cmpge	r2,r2,zero
  811270:	1000031e 	bne	r2,zero,811280 <open+0x94>
    {
      status = index;
  811274:	e0bff817 	ldw	r2,-32(fp)
  811278:	e0bff715 	stw	r2,-36(fp)
  81127c:	00002a06 	br	811328 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811280:	e13ff817 	ldw	r4,-32(fp)
  811284:	01400304 	movi	r5,12
  811288:	080fe8c0 	call	80fe8c <__mulsi3>
  81128c:	1007883a 	mov	r3,r2
  811290:	00802074 	movhi	r2,129
  811294:	1095a904 	addi	r2,r2,22180
  811298:	1885883a 	add	r2,r3,r2
  81129c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8112a0:	e0fffc17 	ldw	r3,-16(fp)
  8112a4:	00900034 	movhi	r2,16384
  8112a8:	10bfffc4 	addi	r2,r2,-1
  8112ac:	1886703a 	and	r3,r3,r2
  8112b0:	e0bff917 	ldw	r2,-28(fp)
  8112b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8112b8:	e0bff617 	ldw	r2,-40(fp)
  8112bc:	1004c03a 	cmpne	r2,r2,zero
  8112c0:	1000061e 	bne	r2,zero,8112dc <open+0xf0>
  8112c4:	e13ff917 	ldw	r4,-28(fp)
  8112c8:	08110f40 	call	8110f4 <alt_file_locked>
  8112cc:	e0bff715 	stw	r2,-36(fp)
  8112d0:	e0bff717 	ldw	r2,-36(fp)
  8112d4:	1004803a 	cmplt	r2,r2,zero
  8112d8:	1000131e 	bne	r2,zero,811328 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8112dc:	e0bffa17 	ldw	r2,-24(fp)
  8112e0:	10800317 	ldw	r2,12(r2)
  8112e4:	1005003a 	cmpeq	r2,r2,zero
  8112e8:	1000091e 	bne	r2,zero,811310 <open+0x124>
  8112ec:	e0bffa17 	ldw	r2,-24(fp)
  8112f0:	10800317 	ldw	r2,12(r2)
  8112f4:	e13ff917 	ldw	r4,-28(fp)
  8112f8:	e17ffb17 	ldw	r5,-20(fp)
  8112fc:	e1bffc17 	ldw	r6,-16(fp)
  811300:	e1fffd17 	ldw	r7,-12(fp)
  811304:	103ee83a 	callr	r2
  811308:	e0bfff15 	stw	r2,-4(fp)
  81130c:	00000106 	br	811314 <open+0x128>
  811310:	e03fff15 	stw	zero,-4(fp)
  811314:	e0bfff17 	ldw	r2,-4(fp)
  811318:	e0bff715 	stw	r2,-36(fp)
  81131c:	00000206 	br	811328 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811320:	00bffb44 	movi	r2,-19
  811324:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811328:	e0bff717 	ldw	r2,-36(fp)
  81132c:	1004403a 	cmpge	r2,r2,zero
  811330:	1000091e 	bne	r2,zero,811358 <open+0x16c>
  {
    alt_release_fd (index);  
  811334:	e13ff817 	ldw	r4,-32(fp)
  811338:	081155c0 	call	81155c <alt_release_fd>
    ALT_ERRNO = -status;
  81133c:	08113780 	call	811378 <alt_get_errno>
  811340:	e0fff717 	ldw	r3,-36(fp)
  811344:	00c7c83a 	sub	r3,zero,r3
  811348:	10c00015 	stw	r3,0(r2)
    return -1;
  81134c:	00bfffc4 	movi	r2,-1
  811350:	e0bffe15 	stw	r2,-8(fp)
  811354:	00000206 	br	811360 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  811358:	e0bff817 	ldw	r2,-32(fp)
  81135c:	e0bffe15 	stw	r2,-8(fp)
  811360:	e0bffe17 	ldw	r2,-8(fp)
}
  811364:	e037883a 	mov	sp,fp
  811368:	dfc00117 	ldw	ra,4(sp)
  81136c:	df000017 	ldw	fp,0(sp)
  811370:	dec00204 	addi	sp,sp,8
  811374:	f800283a 	ret

00811378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811378:	defffd04 	addi	sp,sp,-12
  81137c:	dfc00215 	stw	ra,8(sp)
  811380:	df000115 	stw	fp,4(sp)
  811384:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811388:	00802074 	movhi	r2,129
  81138c:	109a7504 	addi	r2,r2,27092
  811390:	10800017 	ldw	r2,0(r2)
  811394:	1005003a 	cmpeq	r2,r2,zero
  811398:	1000061e 	bne	r2,zero,8113b4 <alt_get_errno+0x3c>
  81139c:	00802074 	movhi	r2,129
  8113a0:	109a7504 	addi	r2,r2,27092
  8113a4:	10800017 	ldw	r2,0(r2)
  8113a8:	103ee83a 	callr	r2
  8113ac:	e0bfff15 	stw	r2,-4(fp)
  8113b0:	00000306 	br	8113c0 <alt_get_errno+0x48>
  8113b4:	008020b4 	movhi	r2,130
  8113b8:	10a16b04 	addi	r2,r2,-31316
  8113bc:	e0bfff15 	stw	r2,-4(fp)
  8113c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8113c4:	e037883a 	mov	sp,fp
  8113c8:	dfc00117 	ldw	ra,4(sp)
  8113cc:	df000017 	ldw	fp,0(sp)
  8113d0:	dec00204 	addi	sp,sp,8
  8113d4:	f800283a 	ret

008113d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8113d8:	defff704 	addi	sp,sp,-36
  8113dc:	dfc00815 	stw	ra,32(sp)
  8113e0:	df000715 	stw	fp,28(sp)
  8113e4:	df000704 	addi	fp,sp,28
  8113e8:	e13ffb15 	stw	r4,-20(fp)
  8113ec:	e17ffc15 	stw	r5,-16(fp)
  8113f0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8113f4:	e0bffb17 	ldw	r2,-20(fp)
  8113f8:	1004803a 	cmplt	r2,r2,zero
  8113fc:	1000091e 	bne	r2,zero,811424 <read+0x4c>
  811400:	e13ffb17 	ldw	r4,-20(fp)
  811404:	01400304 	movi	r5,12
  811408:	080fe8c0 	call	80fe8c <__mulsi3>
  81140c:	1007883a 	mov	r3,r2
  811410:	00802074 	movhi	r2,129
  811414:	1095a904 	addi	r2,r2,22180
  811418:	1887883a 	add	r3,r3,r2
  81141c:	e0ffff15 	stw	r3,-4(fp)
  811420:	00000106 	br	811428 <read+0x50>
  811424:	e03fff15 	stw	zero,-4(fp)
  811428:	e0bfff17 	ldw	r2,-4(fp)
  81142c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811430:	e0bffa17 	ldw	r2,-24(fp)
  811434:	1005003a 	cmpeq	r2,r2,zero
  811438:	1000241e 	bne	r2,zero,8114cc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81143c:	e0bffa17 	ldw	r2,-24(fp)
  811440:	10800217 	ldw	r2,8(r2)
  811444:	108000cc 	andi	r2,r2,3
  811448:	10800060 	cmpeqi	r2,r2,1
  81144c:	10001a1e 	bne	r2,zero,8114b8 <read+0xe0>
  811450:	e0bffa17 	ldw	r2,-24(fp)
  811454:	10800017 	ldw	r2,0(r2)
  811458:	10800517 	ldw	r2,20(r2)
  81145c:	1005003a 	cmpeq	r2,r2,zero
  811460:	1000151e 	bne	r2,zero,8114b8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811464:	e0bffa17 	ldw	r2,-24(fp)
  811468:	10800017 	ldw	r2,0(r2)
  81146c:	10800517 	ldw	r2,20(r2)
  811470:	e17ffc17 	ldw	r5,-16(fp)
  811474:	e1bffd17 	ldw	r6,-12(fp)
  811478:	e13ffa17 	ldw	r4,-24(fp)
  81147c:	103ee83a 	callr	r2
  811480:	e0bff915 	stw	r2,-28(fp)
  811484:	e0bff917 	ldw	r2,-28(fp)
  811488:	1004403a 	cmpge	r2,r2,zero
  81148c:	1000071e 	bne	r2,zero,8114ac <read+0xd4>
        {
          ALT_ERRNO = -rval;
  811490:	08114fc0 	call	8114fc <alt_get_errno>
  811494:	e0fff917 	ldw	r3,-28(fp)
  811498:	00c7c83a 	sub	r3,zero,r3
  81149c:	10c00015 	stw	r3,0(r2)
          return -1;
  8114a0:	00bfffc4 	movi	r2,-1
  8114a4:	e0bffe15 	stw	r2,-8(fp)
  8114a8:	00000e06 	br	8114e4 <read+0x10c>
        }
        return rval;
  8114ac:	e0bff917 	ldw	r2,-28(fp)
  8114b0:	e0bffe15 	stw	r2,-8(fp)
  8114b4:	00000b06 	br	8114e4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8114b8:	08114fc0 	call	8114fc <alt_get_errno>
  8114bc:	1007883a 	mov	r3,r2
  8114c0:	00800344 	movi	r2,13
  8114c4:	18800015 	stw	r2,0(r3)
  8114c8:	00000406 	br	8114dc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8114cc:	08114fc0 	call	8114fc <alt_get_errno>
  8114d0:	1007883a 	mov	r3,r2
  8114d4:	00801444 	movi	r2,81
  8114d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8114dc:	00bfffc4 	movi	r2,-1
  8114e0:	e0bffe15 	stw	r2,-8(fp)
  8114e4:	e0bffe17 	ldw	r2,-8(fp)
}
  8114e8:	e037883a 	mov	sp,fp
  8114ec:	dfc00117 	ldw	ra,4(sp)
  8114f0:	df000017 	ldw	fp,0(sp)
  8114f4:	dec00204 	addi	sp,sp,8
  8114f8:	f800283a 	ret

008114fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8114fc:	defffd04 	addi	sp,sp,-12
  811500:	dfc00215 	stw	ra,8(sp)
  811504:	df000115 	stw	fp,4(sp)
  811508:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81150c:	00802074 	movhi	r2,129
  811510:	109a7504 	addi	r2,r2,27092
  811514:	10800017 	ldw	r2,0(r2)
  811518:	1005003a 	cmpeq	r2,r2,zero
  81151c:	1000061e 	bne	r2,zero,811538 <alt_get_errno+0x3c>
  811520:	00802074 	movhi	r2,129
  811524:	109a7504 	addi	r2,r2,27092
  811528:	10800017 	ldw	r2,0(r2)
  81152c:	103ee83a 	callr	r2
  811530:	e0bfff15 	stw	r2,-4(fp)
  811534:	00000306 	br	811544 <alt_get_errno+0x48>
  811538:	008020b4 	movhi	r2,130
  81153c:	10a16b04 	addi	r2,r2,-31316
  811540:	e0bfff15 	stw	r2,-4(fp)
  811544:	e0bfff17 	ldw	r2,-4(fp)
}
  811548:	e037883a 	mov	sp,fp
  81154c:	dfc00117 	ldw	ra,4(sp)
  811550:	df000017 	ldw	fp,0(sp)
  811554:	dec00204 	addi	sp,sp,8
  811558:	f800283a 	ret

0081155c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  81155c:	defffc04 	addi	sp,sp,-16
  811560:	dfc00315 	stw	ra,12(sp)
  811564:	df000215 	stw	fp,8(sp)
  811568:	dc000115 	stw	r16,4(sp)
  81156c:	df000104 	addi	fp,sp,4
  811570:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  811574:	e0bfff17 	ldw	r2,-4(fp)
  811578:	108000d0 	cmplti	r2,r2,3
  81157c:	10000f1e 	bne	r2,zero,8115bc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  811580:	e13fff17 	ldw	r4,-4(fp)
  811584:	04002074 	movhi	r16,129
  811588:	8415a904 	addi	r16,r16,22180
  81158c:	01400304 	movi	r5,12
  811590:	080fe8c0 	call	80fe8c <__mulsi3>
  811594:	1405883a 	add	r2,r2,r16
  811598:	10800204 	addi	r2,r2,8
  81159c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8115a0:	e13fff17 	ldw	r4,-4(fp)
  8115a4:	04002074 	movhi	r16,129
  8115a8:	8415a904 	addi	r16,r16,22180
  8115ac:	01400304 	movi	r5,12
  8115b0:	080fe8c0 	call	80fe8c <__mulsi3>
  8115b4:	1405883a 	add	r2,r2,r16
  8115b8:	10000015 	stw	zero,0(r2)
  }
}
  8115bc:	e037883a 	mov	sp,fp
  8115c0:	dfc00217 	ldw	ra,8(sp)
  8115c4:	df000117 	ldw	fp,4(sp)
  8115c8:	dc000017 	ldw	r16,0(sp)
  8115cc:	dec00304 	addi	sp,sp,12
  8115d0:	f800283a 	ret

008115d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8115d4:	defff804 	addi	sp,sp,-32
  8115d8:	df000715 	stw	fp,28(sp)
  8115dc:	df000704 	addi	fp,sp,28
  8115e0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8115e4:	0005303a 	rdctl	r2,status
  8115e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115ec:	e0fffb17 	ldw	r3,-20(fp)
  8115f0:	00bfff84 	movi	r2,-2
  8115f4:	1884703a 	and	r2,r3,r2
  8115f8:	1001703a 	wrctl	status,r2
  
  return context;
  8115fc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811600:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811604:	d0a00e17 	ldw	r2,-32712(gp)
  811608:	10c000c4 	addi	r3,r2,3
  81160c:	00bfff04 	movi	r2,-4
  811610:	1884703a 	and	r2,r3,r2
  811614:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811618:	d0e00e17 	ldw	r3,-32712(gp)
  81161c:	e0bffe17 	ldw	r2,-8(fp)
  811620:	1887883a 	add	r3,r3,r2
  811624:	00804034 	movhi	r2,256
  811628:	10800004 	addi	r2,r2,0
  81162c:	10c0072e 	bgeu	r2,r3,81164c <sbrk+0x78>
  811630:	e0bffd17 	ldw	r2,-12(fp)
  811634:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811638:	e0bffa17 	ldw	r2,-24(fp)
  81163c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811640:	00bfffc4 	movi	r2,-1
  811644:	e0bfff15 	stw	r2,-4(fp)
  811648:	00000c06 	br	81167c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  81164c:	d0a00e17 	ldw	r2,-32712(gp)
  811650:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811654:	d0e00e17 	ldw	r3,-32712(gp)
  811658:	e0bffe17 	ldw	r2,-8(fp)
  81165c:	1885883a 	add	r2,r3,r2
  811660:	d0a00e15 	stw	r2,-32712(gp)
  811664:	e0bffd17 	ldw	r2,-12(fp)
  811668:	e0bff915 	stw	r2,-28(fp)
  81166c:	e0bff917 	ldw	r2,-28(fp)
  811670:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  811674:	e0bffc17 	ldw	r2,-16(fp)
  811678:	e0bfff15 	stw	r2,-4(fp)
  81167c:	e0bfff17 	ldw	r2,-4(fp)
} 
  811680:	e037883a 	mov	sp,fp
  811684:	df000017 	ldw	fp,0(sp)
  811688:	dec00104 	addi	sp,sp,4
  81168c:	f800283a 	ret

00811690 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  811690:	defffd04 	addi	sp,sp,-12
  811694:	dfc00215 	stw	ra,8(sp)
  811698:	df000115 	stw	fp,4(sp)
  81169c:	df000104 	addi	fp,sp,4
  8116a0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8116a4:	e13fff17 	ldw	r4,-4(fp)
  8116a8:	08135fc0 	call	8135fc <alt_busy_sleep>
}
  8116ac:	e037883a 	mov	sp,fp
  8116b0:	dfc00117 	ldw	ra,4(sp)
  8116b4:	df000017 	ldw	fp,0(sp)
  8116b8:	dec00204 	addi	sp,sp,8
  8116bc:	f800283a 	ret

008116c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8116c0:	defff704 	addi	sp,sp,-36
  8116c4:	dfc00815 	stw	ra,32(sp)
  8116c8:	df000715 	stw	fp,28(sp)
  8116cc:	df000704 	addi	fp,sp,28
  8116d0:	e13ffb15 	stw	r4,-20(fp)
  8116d4:	e17ffc15 	stw	r5,-16(fp)
  8116d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8116dc:	e0bffb17 	ldw	r2,-20(fp)
  8116e0:	1004803a 	cmplt	r2,r2,zero
  8116e4:	1000091e 	bne	r2,zero,81170c <write+0x4c>
  8116e8:	e13ffb17 	ldw	r4,-20(fp)
  8116ec:	01400304 	movi	r5,12
  8116f0:	080fe8c0 	call	80fe8c <__mulsi3>
  8116f4:	1007883a 	mov	r3,r2
  8116f8:	00802074 	movhi	r2,129
  8116fc:	1095a904 	addi	r2,r2,22180
  811700:	1887883a 	add	r3,r3,r2
  811704:	e0ffff15 	stw	r3,-4(fp)
  811708:	00000106 	br	811710 <write+0x50>
  81170c:	e03fff15 	stw	zero,-4(fp)
  811710:	e0bfff17 	ldw	r2,-4(fp)
  811714:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811718:	e0bffa17 	ldw	r2,-24(fp)
  81171c:	1005003a 	cmpeq	r2,r2,zero
  811720:	1000241e 	bne	r2,zero,8117b4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  811724:	e0bffa17 	ldw	r2,-24(fp)
  811728:	10800217 	ldw	r2,8(r2)
  81172c:	108000cc 	andi	r2,r2,3
  811730:	1005003a 	cmpeq	r2,r2,zero
  811734:	10001a1e 	bne	r2,zero,8117a0 <write+0xe0>
  811738:	e0bffa17 	ldw	r2,-24(fp)
  81173c:	10800017 	ldw	r2,0(r2)
  811740:	10800617 	ldw	r2,24(r2)
  811744:	1005003a 	cmpeq	r2,r2,zero
  811748:	1000151e 	bne	r2,zero,8117a0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  81174c:	e0bffa17 	ldw	r2,-24(fp)
  811750:	10800017 	ldw	r2,0(r2)
  811754:	10800617 	ldw	r2,24(r2)
  811758:	e17ffc17 	ldw	r5,-16(fp)
  81175c:	e1bffd17 	ldw	r6,-12(fp)
  811760:	e13ffa17 	ldw	r4,-24(fp)
  811764:	103ee83a 	callr	r2
  811768:	e0bff915 	stw	r2,-28(fp)
  81176c:	e0bff917 	ldw	r2,-28(fp)
  811770:	1004403a 	cmpge	r2,r2,zero
  811774:	1000071e 	bne	r2,zero,811794 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  811778:	08117e40 	call	8117e4 <alt_get_errno>
  81177c:	e0fff917 	ldw	r3,-28(fp)
  811780:	00c7c83a 	sub	r3,zero,r3
  811784:	10c00015 	stw	r3,0(r2)
        return -1;
  811788:	00bfffc4 	movi	r2,-1
  81178c:	e0bffe15 	stw	r2,-8(fp)
  811790:	00000e06 	br	8117cc <write+0x10c>
      }
      return rval;
  811794:	e0bff917 	ldw	r2,-28(fp)
  811798:	e0bffe15 	stw	r2,-8(fp)
  81179c:	00000b06 	br	8117cc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8117a0:	08117e40 	call	8117e4 <alt_get_errno>
  8117a4:	1007883a 	mov	r3,r2
  8117a8:	00800344 	movi	r2,13
  8117ac:	18800015 	stw	r2,0(r3)
  8117b0:	00000406 	br	8117c4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8117b4:	08117e40 	call	8117e4 <alt_get_errno>
  8117b8:	1007883a 	mov	r3,r2
  8117bc:	00801444 	movi	r2,81
  8117c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8117c4:	00bfffc4 	movi	r2,-1
  8117c8:	e0bffe15 	stw	r2,-8(fp)
  8117cc:	e0bffe17 	ldw	r2,-8(fp)
}
  8117d0:	e037883a 	mov	sp,fp
  8117d4:	dfc00117 	ldw	ra,4(sp)
  8117d8:	df000017 	ldw	fp,0(sp)
  8117dc:	dec00204 	addi	sp,sp,8
  8117e0:	f800283a 	ret

008117e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8117e4:	defffd04 	addi	sp,sp,-12
  8117e8:	dfc00215 	stw	ra,8(sp)
  8117ec:	df000115 	stw	fp,4(sp)
  8117f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8117f4:	00802074 	movhi	r2,129
  8117f8:	109a7504 	addi	r2,r2,27092
  8117fc:	10800017 	ldw	r2,0(r2)
  811800:	1005003a 	cmpeq	r2,r2,zero
  811804:	1000061e 	bne	r2,zero,811820 <alt_get_errno+0x3c>
  811808:	00802074 	movhi	r2,129
  81180c:	109a7504 	addi	r2,r2,27092
  811810:	10800017 	ldw	r2,0(r2)
  811814:	103ee83a 	callr	r2
  811818:	e0bfff15 	stw	r2,-4(fp)
  81181c:	00000306 	br	81182c <alt_get_errno+0x48>
  811820:	008020b4 	movhi	r2,130
  811824:	10a16b04 	addi	r2,r2,-31316
  811828:	e0bfff15 	stw	r2,-4(fp)
  81182c:	e0bfff17 	ldw	r2,-4(fp)
}
  811830:	e037883a 	mov	sp,fp
  811834:	dfc00117 	ldw	ra,4(sp)
  811838:	df000017 	ldw	fp,0(sp)
  81183c:	dec00204 	addi	sp,sp,8
  811840:	f800283a 	ret

00811844 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  811844:	defffd04 	addi	sp,sp,-12
  811848:	dfc00215 	stw	ra,8(sp)
  81184c:	df000115 	stw	fp,4(sp)
  811850:	df000104 	addi	fp,sp,4
  811854:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  811858:	0813ef80 	call	813ef8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81185c:	00800044 	movi	r2,1
  811860:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  811864:	e037883a 	mov	sp,fp
  811868:	dfc00117 	ldw	ra,4(sp)
  81186c:	df000017 	ldw	fp,0(sp)
  811870:	dec00204 	addi	sp,sp,8
  811874:	f800283a 	ret

00811878 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811878:	defffe04 	addi	sp,sp,-8
  81187c:	dfc00115 	stw	ra,4(sp)
  811880:	df000015 	stw	fp,0(sp)
  811884:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  811888:	01004034 	movhi	r4,256
  81188c:	21040004 	addi	r4,r4,4096
  811890:	000b883a 	mov	r5,zero
  811894:	01800084 	movi	r6,2
  811898:	01c0fa04 	movi	r7,1000
  81189c:	08134180 	call	813418 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8118a0:	01002074 	movhi	r4,129
  8118a4:	21161304 	addi	r4,r4,22604
  8118a8:	000b883a 	mov	r5,zero
  8118ac:	000d883a 	mov	r6,zero
  8118b0:	0811a6c0 	call	811a6c <altera_avalon_jtag_uart_init>
  8118b4:	01002074 	movhi	r4,129
  8118b8:	21160904 	addi	r4,r4,22564
  8118bc:	08118ec0 	call	8118ec <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  8118c0:	01002074 	movhi	r4,129
  8118c4:	211a2b04 	addi	r4,r4,26796
  8118c8:	08132140 	call	813214 <altera_avalon_lcd_16207_init>
  8118cc:	01002074 	movhi	r4,129
  8118d0:	211a2104 	addi	r4,r4,26756
  8118d4:	08118ec0 	call	8118ec <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
  8118d8:	e037883a 	mov	sp,fp
  8118dc:	dfc00117 	ldw	ra,4(sp)
  8118e0:	df000017 	ldw	fp,0(sp)
  8118e4:	dec00204 	addi	sp,sp,8
  8118e8:	f800283a 	ret

008118ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8118ec:	defffd04 	addi	sp,sp,-12
  8118f0:	dfc00215 	stw	ra,8(sp)
  8118f4:	df000115 	stw	fp,4(sp)
  8118f8:	df000104 	addi	fp,sp,4
  8118fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  811900:	e13fff17 	ldw	r4,-4(fp)
  811904:	01402074 	movhi	r5,129
  811908:	295a7204 	addi	r5,r5,27080
  81190c:	08137740 	call	813774 <alt_dev_llist_insert>
}
  811910:	e037883a 	mov	sp,fp
  811914:	dfc00117 	ldw	ra,4(sp)
  811918:	df000017 	ldw	fp,0(sp)
  81191c:	dec00204 	addi	sp,sp,8
  811920:	f800283a 	ret

00811924 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811924:	defffa04 	addi	sp,sp,-24
  811928:	dfc00515 	stw	ra,20(sp)
  81192c:	df000415 	stw	fp,16(sp)
  811930:	df000404 	addi	fp,sp,16
  811934:	e13ffd15 	stw	r4,-12(fp)
  811938:	e17ffe15 	stw	r5,-8(fp)
  81193c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811940:	e0bffd17 	ldw	r2,-12(fp)
  811944:	10800017 	ldw	r2,0(r2)
  811948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81194c:	e0bffc17 	ldw	r2,-16(fp)
  811950:	11000a04 	addi	r4,r2,40
  811954:	e0bffd17 	ldw	r2,-12(fp)
  811958:	11c00217 	ldw	r7,8(r2)
  81195c:	e17ffe17 	ldw	r5,-8(fp)
  811960:	e1bfff17 	ldw	r6,-4(fp)
  811964:	0811f6c0 	call	811f6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811968:	e037883a 	mov	sp,fp
  81196c:	dfc00117 	ldw	ra,4(sp)
  811970:	df000017 	ldw	fp,0(sp)
  811974:	dec00204 	addi	sp,sp,8
  811978:	f800283a 	ret

0081197c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81197c:	defffa04 	addi	sp,sp,-24
  811980:	dfc00515 	stw	ra,20(sp)
  811984:	df000415 	stw	fp,16(sp)
  811988:	df000404 	addi	fp,sp,16
  81198c:	e13ffd15 	stw	r4,-12(fp)
  811990:	e17ffe15 	stw	r5,-8(fp)
  811994:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811998:	e0bffd17 	ldw	r2,-12(fp)
  81199c:	10800017 	ldw	r2,0(r2)
  8119a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8119a4:	e0bffc17 	ldw	r2,-16(fp)
  8119a8:	11000a04 	addi	r4,r2,40
  8119ac:	e0bffd17 	ldw	r2,-12(fp)
  8119b0:	11c00217 	ldw	r7,8(r2)
  8119b4:	e17ffe17 	ldw	r5,-8(fp)
  8119b8:	e1bfff17 	ldw	r6,-4(fp)
  8119bc:	08121900 	call	812190 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8119c0:	e037883a 	mov	sp,fp
  8119c4:	dfc00117 	ldw	ra,4(sp)
  8119c8:	df000017 	ldw	fp,0(sp)
  8119cc:	dec00204 	addi	sp,sp,8
  8119d0:	f800283a 	ret

008119d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8119d4:	defffc04 	addi	sp,sp,-16
  8119d8:	dfc00315 	stw	ra,12(sp)
  8119dc:	df000215 	stw	fp,8(sp)
  8119e0:	df000204 	addi	fp,sp,8
  8119e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8119e8:	e0bfff17 	ldw	r2,-4(fp)
  8119ec:	10800017 	ldw	r2,0(r2)
  8119f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8119f4:	e0bffe17 	ldw	r2,-8(fp)
  8119f8:	11000a04 	addi	r4,r2,40
  8119fc:	e0bfff17 	ldw	r2,-4(fp)
  811a00:	11400217 	ldw	r5,8(r2)
  811a04:	0811e040 	call	811e04 <altera_avalon_jtag_uart_close>
}
  811a08:	e037883a 	mov	sp,fp
  811a0c:	dfc00117 	ldw	ra,4(sp)
  811a10:	df000017 	ldw	fp,0(sp)
  811a14:	dec00204 	addi	sp,sp,8
  811a18:	f800283a 	ret

00811a1c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811a1c:	defffa04 	addi	sp,sp,-24
  811a20:	dfc00515 	stw	ra,20(sp)
  811a24:	df000415 	stw	fp,16(sp)
  811a28:	df000404 	addi	fp,sp,16
  811a2c:	e13ffd15 	stw	r4,-12(fp)
  811a30:	e17ffe15 	stw	r5,-8(fp)
  811a34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811a38:	e0bffd17 	ldw	r2,-12(fp)
  811a3c:	10800017 	ldw	r2,0(r2)
  811a40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811a44:	e0bffc17 	ldw	r2,-16(fp)
  811a48:	11000a04 	addi	r4,r2,40
  811a4c:	e17ffe17 	ldw	r5,-8(fp)
  811a50:	e1bfff17 	ldw	r6,-4(fp)
  811a54:	0811e780 	call	811e78 <altera_avalon_jtag_uart_ioctl>
}
  811a58:	e037883a 	mov	sp,fp
  811a5c:	dfc00117 	ldw	ra,4(sp)
  811a60:	df000017 	ldw	fp,0(sp)
  811a64:	dec00204 	addi	sp,sp,8
  811a68:	f800283a 	ret

00811a6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811a6c:	defffa04 	addi	sp,sp,-24
  811a70:	dfc00515 	stw	ra,20(sp)
  811a74:	df000415 	stw	fp,16(sp)
  811a78:	df000404 	addi	fp,sp,16
  811a7c:	e13ffd15 	stw	r4,-12(fp)
  811a80:	e17ffe15 	stw	r5,-8(fp)
  811a84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811a88:	e0fffd17 	ldw	r3,-12(fp)
  811a8c:	00800044 	movi	r2,1
  811a90:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811a94:	e0bffd17 	ldw	r2,-12(fp)
  811a98:	10800017 	ldw	r2,0(r2)
  811a9c:	11000104 	addi	r4,r2,4
  811aa0:	e0bffd17 	ldw	r2,-12(fp)
  811aa4:	10800817 	ldw	r2,32(r2)
  811aa8:	1007883a 	mov	r3,r2
  811aac:	2005883a 	mov	r2,r4
  811ab0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811ab4:	e13ffe17 	ldw	r4,-8(fp)
  811ab8:	e17fff17 	ldw	r5,-4(fp)
  811abc:	d8000015 	stw	zero,0(sp)
  811ac0:	01802074 	movhi	r6,129
  811ac4:	3186cb04 	addi	r6,r6,6956
  811ac8:	e1fffd17 	ldw	r7,-12(fp)
  811acc:	0810a180 	call	810a18 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811ad0:	e0bffd17 	ldw	r2,-12(fp)
  811ad4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811ad8:	e0bffd17 	ldw	r2,-12(fp)
  811adc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811ae0:	008020b4 	movhi	r2,130
  811ae4:	10a17604 	addi	r2,r2,-31272
  811ae8:	10800017 	ldw	r2,0(r2)
  811aec:	100b883a 	mov	r5,r2
  811af0:	01802074 	movhi	r6,129
  811af4:	31875504 	addi	r6,r6,7508
  811af8:	e1fffd17 	ldw	r7,-12(fp)
  811afc:	08134a80 	call	8134a8 <alt_alarm_start>
  811b00:	1004403a 	cmpge	r2,r2,zero
  811b04:	1000041e 	bne	r2,zero,811b18 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811b08:	e0fffd17 	ldw	r3,-12(fp)
  811b0c:	00a00034 	movhi	r2,32768
  811b10:	10bfffc4 	addi	r2,r2,-1
  811b14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811b18:	e037883a 	mov	sp,fp
  811b1c:	dfc00117 	ldw	ra,4(sp)
  811b20:	df000017 	ldw	fp,0(sp)
  811b24:	dec00204 	addi	sp,sp,8
  811b28:	f800283a 	ret

00811b2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811b2c:	defff804 	addi	sp,sp,-32
  811b30:	df000715 	stw	fp,28(sp)
  811b34:	df000704 	addi	fp,sp,28
  811b38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811b3c:	e0bfff17 	ldw	r2,-4(fp)
  811b40:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  811b44:	e0bffe17 	ldw	r2,-8(fp)
  811b48:	10800017 	ldw	r2,0(r2)
  811b4c:	e0bffd15 	stw	r2,-12(fp)
  811b50:	00000006 	br	811b54 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811b54:	e0bffd17 	ldw	r2,-12(fp)
  811b58:	10800104 	addi	r2,r2,4
  811b5c:	10800037 	ldwio	r2,0(r2)
  811b60:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811b64:	e0bffc17 	ldw	r2,-16(fp)
  811b68:	1080c00c 	andi	r2,r2,768
  811b6c:	1005003a 	cmpeq	r2,r2,zero
  811b70:	1000741e 	bne	r2,zero,811d44 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811b74:	e0bffc17 	ldw	r2,-16(fp)
  811b78:	1080400c 	andi	r2,r2,256
  811b7c:	1005003a 	cmpeq	r2,r2,zero
  811b80:	1000351e 	bne	r2,zero,811c58 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811b84:	00800074 	movhi	r2,1
  811b88:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811b8c:	e0bffe17 	ldw	r2,-8(fp)
  811b90:	10800a17 	ldw	r2,40(r2)
  811b94:	10800044 	addi	r2,r2,1
  811b98:	1081ffcc 	andi	r2,r2,2047
  811b9c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  811ba0:	e0bffe17 	ldw	r2,-8(fp)
  811ba4:	10c00b17 	ldw	r3,44(r2)
  811ba8:	e0bffa17 	ldw	r2,-24(fp)
  811bac:	18801626 	beq	r3,r2,811c08 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811bb0:	e0bffd17 	ldw	r2,-12(fp)
  811bb4:	10800037 	ldwio	r2,0(r2)
  811bb8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811bbc:	e0bffb17 	ldw	r2,-20(fp)
  811bc0:	10a0000c 	andi	r2,r2,32768
  811bc4:	1005003a 	cmpeq	r2,r2,zero
  811bc8:	10000f1e 	bne	r2,zero,811c08 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811bcc:	e0bffe17 	ldw	r2,-8(fp)
  811bd0:	10c00a17 	ldw	r3,40(r2)
  811bd4:	e0bffb17 	ldw	r2,-20(fp)
  811bd8:	1009883a 	mov	r4,r2
  811bdc:	e0bffe17 	ldw	r2,-8(fp)
  811be0:	1885883a 	add	r2,r3,r2
  811be4:	10800e04 	addi	r2,r2,56
  811be8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811bec:	e0bffe17 	ldw	r2,-8(fp)
  811bf0:	10800a17 	ldw	r2,40(r2)
  811bf4:	10800044 	addi	r2,r2,1
  811bf8:	10c1ffcc 	andi	r3,r2,2047
  811bfc:	e0bffe17 	ldw	r2,-8(fp)
  811c00:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811c04:	003fe106 	br	811b8c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811c08:	e0bffb17 	ldw	r2,-20(fp)
  811c0c:	10bfffec 	andhi	r2,r2,65535
  811c10:	1005003a 	cmpeq	r2,r2,zero
  811c14:	1000101e 	bne	r2,zero,811c58 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811c18:	e0bffe17 	ldw	r2,-8(fp)
  811c1c:	10c00817 	ldw	r3,32(r2)
  811c20:	00bfff84 	movi	r2,-2
  811c24:	1886703a 	and	r3,r3,r2
  811c28:	e0bffe17 	ldw	r2,-8(fp)
  811c2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811c30:	e0bffd17 	ldw	r2,-12(fp)
  811c34:	11000104 	addi	r4,r2,4
  811c38:	e0bffe17 	ldw	r2,-8(fp)
  811c3c:	10800817 	ldw	r2,32(r2)
  811c40:	1007883a 	mov	r3,r2
  811c44:	2005883a 	mov	r2,r4
  811c48:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811c4c:	e0bffd17 	ldw	r2,-12(fp)
  811c50:	10800104 	addi	r2,r2,4
  811c54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811c58:	e0bffc17 	ldw	r2,-16(fp)
  811c5c:	1080800c 	andi	r2,r2,512
  811c60:	1005003a 	cmpeq	r2,r2,zero
  811c64:	103fbb1e 	bne	r2,zero,811b54 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811c68:	e0bffc17 	ldw	r2,-16(fp)
  811c6c:	10bfffec 	andhi	r2,r2,65535
  811c70:	1004d43a 	srli	r2,r2,16
  811c74:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811c78:	00001506 	br	811cd0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811c7c:	e13ffd17 	ldw	r4,-12(fp)
  811c80:	e0bffe17 	ldw	r2,-8(fp)
  811c84:	10c00d17 	ldw	r3,52(r2)
  811c88:	e0bffe17 	ldw	r2,-8(fp)
  811c8c:	1885883a 	add	r2,r3,r2
  811c90:	10820e04 	addi	r2,r2,2104
  811c94:	10800003 	ldbu	r2,0(r2)
  811c98:	10c03fcc 	andi	r3,r2,255
  811c9c:	18c0201c 	xori	r3,r3,128
  811ca0:	18ffe004 	addi	r3,r3,-128
  811ca4:	2005883a 	mov	r2,r4
  811ca8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811cac:	e0bffe17 	ldw	r2,-8(fp)
  811cb0:	10800d17 	ldw	r2,52(r2)
  811cb4:	10800044 	addi	r2,r2,1
  811cb8:	10c1ffcc 	andi	r3,r2,2047
  811cbc:	e0bffe17 	ldw	r2,-8(fp)
  811cc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811cc4:	e0bff917 	ldw	r2,-28(fp)
  811cc8:	10bfffc4 	addi	r2,r2,-1
  811ccc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811cd0:	e0bff917 	ldw	r2,-28(fp)
  811cd4:	1005003a 	cmpeq	r2,r2,zero
  811cd8:	1000051e 	bne	r2,zero,811cf0 <altera_avalon_jtag_uart_irq+0x1c4>
  811cdc:	e0bffe17 	ldw	r2,-8(fp)
  811ce0:	10c00d17 	ldw	r3,52(r2)
  811ce4:	e0bffe17 	ldw	r2,-8(fp)
  811ce8:	10800c17 	ldw	r2,48(r2)
  811cec:	18bfe31e 	bne	r3,r2,811c7c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811cf0:	e0bff917 	ldw	r2,-28(fp)
  811cf4:	1005003a 	cmpeq	r2,r2,zero
  811cf8:	103f961e 	bne	r2,zero,811b54 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811cfc:	e0bffe17 	ldw	r2,-8(fp)
  811d00:	10c00817 	ldw	r3,32(r2)
  811d04:	00bfff44 	movi	r2,-3
  811d08:	1886703a 	and	r3,r3,r2
  811d0c:	e0bffe17 	ldw	r2,-8(fp)
  811d10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811d14:	e0bffe17 	ldw	r2,-8(fp)
  811d18:	10800017 	ldw	r2,0(r2)
  811d1c:	11000104 	addi	r4,r2,4
  811d20:	e0bffe17 	ldw	r2,-8(fp)
  811d24:	10800817 	ldw	r2,32(r2)
  811d28:	1007883a 	mov	r3,r2
  811d2c:	2005883a 	mov	r2,r4
  811d30:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811d34:	e0bffd17 	ldw	r2,-12(fp)
  811d38:	10800104 	addi	r2,r2,4
  811d3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811d40:	003f8406 	br	811b54 <altera_avalon_jtag_uart_irq+0x28>
}
  811d44:	e037883a 	mov	sp,fp
  811d48:	df000017 	ldw	fp,0(sp)
  811d4c:	dec00104 	addi	sp,sp,4
  811d50:	f800283a 	ret

00811d54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811d54:	defffc04 	addi	sp,sp,-16
  811d58:	df000315 	stw	fp,12(sp)
  811d5c:	df000304 	addi	fp,sp,12
  811d60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811d64:	e0bfff17 	ldw	r2,-4(fp)
  811d68:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811d6c:	e0bffe17 	ldw	r2,-8(fp)
  811d70:	10800017 	ldw	r2,0(r2)
  811d74:	10800104 	addi	r2,r2,4
  811d78:	10800037 	ldwio	r2,0(r2)
  811d7c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811d80:	e0bffd17 	ldw	r2,-12(fp)
  811d84:	1081000c 	andi	r2,r2,1024
  811d88:	1005003a 	cmpeq	r2,r2,zero
  811d8c:	10000c1e 	bne	r2,zero,811dc0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811d90:	e0bffe17 	ldw	r2,-8(fp)
  811d94:	10800017 	ldw	r2,0(r2)
  811d98:	11000104 	addi	r4,r2,4
  811d9c:	e0bffe17 	ldw	r2,-8(fp)
  811da0:	10800817 	ldw	r2,32(r2)
  811da4:	10810014 	ori	r2,r2,1024
  811da8:	1007883a 	mov	r3,r2
  811dac:	2005883a 	mov	r2,r4
  811db0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811db4:	e0bffe17 	ldw	r2,-8(fp)
  811db8:	10000915 	stw	zero,36(r2)
  811dbc:	00000a06 	br	811de8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811dc0:	e0bffe17 	ldw	r2,-8(fp)
  811dc4:	10c00917 	ldw	r3,36(r2)
  811dc8:	00a00034 	movhi	r2,32768
  811dcc:	10bfff04 	addi	r2,r2,-4
  811dd0:	10c00536 	bltu	r2,r3,811de8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  811dd4:	e0bffe17 	ldw	r2,-8(fp)
  811dd8:	10800917 	ldw	r2,36(r2)
  811ddc:	10c00044 	addi	r3,r2,1
  811de0:	e0bffe17 	ldw	r2,-8(fp)
  811de4:	10c00915 	stw	r3,36(r2)
  811de8:	008020b4 	movhi	r2,130
  811dec:	10a17604 	addi	r2,r2,-31272
  811df0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811df4:	e037883a 	mov	sp,fp
  811df8:	df000017 	ldw	fp,0(sp)
  811dfc:	dec00104 	addi	sp,sp,4
  811e00:	f800283a 	ret

00811e04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811e04:	defffc04 	addi	sp,sp,-16
  811e08:	df000315 	stw	fp,12(sp)
  811e0c:	df000304 	addi	fp,sp,12
  811e10:	e13ffd15 	stw	r4,-12(fp)
  811e14:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811e18:	00000706 	br	811e38 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811e1c:	e0bffe17 	ldw	r2,-8(fp)
  811e20:	1090000c 	andi	r2,r2,16384
  811e24:	1005003a 	cmpeq	r2,r2,zero
  811e28:	1000031e 	bne	r2,zero,811e38 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811e2c:	00bffd44 	movi	r2,-11
  811e30:	e0bfff15 	stw	r2,-4(fp)
  811e34:	00000b06 	br	811e64 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811e38:	e0bffd17 	ldw	r2,-12(fp)
  811e3c:	10c00d17 	ldw	r3,52(r2)
  811e40:	e0bffd17 	ldw	r2,-12(fp)
  811e44:	10800c17 	ldw	r2,48(r2)
  811e48:	18800526 	beq	r3,r2,811e60 <altera_avalon_jtag_uart_close+0x5c>
  811e4c:	e0bffd17 	ldw	r2,-12(fp)
  811e50:	10c00917 	ldw	r3,36(r2)
  811e54:	e0bffd17 	ldw	r2,-12(fp)
  811e58:	10800117 	ldw	r2,4(r2)
  811e5c:	18bfef36 	bltu	r3,r2,811e1c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811e60:	e03fff15 	stw	zero,-4(fp)
  811e64:	e0bfff17 	ldw	r2,-4(fp)
}
  811e68:	e037883a 	mov	sp,fp
  811e6c:	df000017 	ldw	fp,0(sp)
  811e70:	dec00104 	addi	sp,sp,4
  811e74:	f800283a 	ret

00811e78 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811e78:	defff804 	addi	sp,sp,-32
  811e7c:	df000715 	stw	fp,28(sp)
  811e80:	df000704 	addi	fp,sp,28
  811e84:	e13ffb15 	stw	r4,-20(fp)
  811e88:	e17ffc15 	stw	r5,-16(fp)
  811e8c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811e90:	00bff9c4 	movi	r2,-25
  811e94:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811e98:	e0bffc17 	ldw	r2,-16(fp)
  811e9c:	e0bfff15 	stw	r2,-4(fp)
  811ea0:	e0ffff17 	ldw	r3,-4(fp)
  811ea4:	189a8060 	cmpeqi	r2,r3,27137
  811ea8:	1000041e 	bne	r2,zero,811ebc <altera_avalon_jtag_uart_ioctl+0x44>
  811eac:	e0ffff17 	ldw	r3,-4(fp)
  811eb0:	189a80a0 	cmpeqi	r2,r3,27138
  811eb4:	10001b1e 	bne	r2,zero,811f24 <altera_avalon_jtag_uart_ioctl+0xac>
  811eb8:	00002706 	br	811f58 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811ebc:	e0bffb17 	ldw	r2,-20(fp)
  811ec0:	10c00117 	ldw	r3,4(r2)
  811ec4:	00a00034 	movhi	r2,32768
  811ec8:	10bfffc4 	addi	r2,r2,-1
  811ecc:	18802226 	beq	r3,r2,811f58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811ed0:	e0bffd17 	ldw	r2,-12(fp)
  811ed4:	10800017 	ldw	r2,0(r2)
  811ed8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811edc:	e0bff917 	ldw	r2,-28(fp)
  811ee0:	10800090 	cmplti	r2,r2,2
  811ee4:	1000071e 	bne	r2,zero,811f04 <altera_avalon_jtag_uart_ioctl+0x8c>
  811ee8:	e0fff917 	ldw	r3,-28(fp)
  811eec:	00a00034 	movhi	r2,32768
  811ef0:	10bfffc4 	addi	r2,r2,-1
  811ef4:	18800326 	beq	r3,r2,811f04 <altera_avalon_jtag_uart_ioctl+0x8c>
  811ef8:	e0bff917 	ldw	r2,-28(fp)
  811efc:	e0bffe15 	stw	r2,-8(fp)
  811f00:	00000306 	br	811f10 <altera_avalon_jtag_uart_ioctl+0x98>
  811f04:	00e00034 	movhi	r3,32768
  811f08:	18ffff84 	addi	r3,r3,-2
  811f0c:	e0fffe15 	stw	r3,-8(fp)
  811f10:	e0bffb17 	ldw	r2,-20(fp)
  811f14:	e0fffe17 	ldw	r3,-8(fp)
  811f18:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811f1c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811f20:	00000d06 	br	811f58 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811f24:	e0bffb17 	ldw	r2,-20(fp)
  811f28:	10c00117 	ldw	r3,4(r2)
  811f2c:	00a00034 	movhi	r2,32768
  811f30:	10bfffc4 	addi	r2,r2,-1
  811f34:	18800826 	beq	r3,r2,811f58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811f38:	e13ffd17 	ldw	r4,-12(fp)
  811f3c:	e0bffb17 	ldw	r2,-20(fp)
  811f40:	10c00917 	ldw	r3,36(r2)
  811f44:	e0bffb17 	ldw	r2,-20(fp)
  811f48:	10800117 	ldw	r2,4(r2)
  811f4c:	1885803a 	cmpltu	r2,r3,r2
  811f50:	20800015 	stw	r2,0(r4)
      rc = 0;
  811f54:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811f58:	e0bffa17 	ldw	r2,-24(fp)
}
  811f5c:	e037883a 	mov	sp,fp
  811f60:	df000017 	ldw	fp,0(sp)
  811f64:	dec00104 	addi	sp,sp,4
  811f68:	f800283a 	ret

00811f6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811f6c:	defff204 	addi	sp,sp,-56
  811f70:	dfc00d15 	stw	ra,52(sp)
  811f74:	df000c15 	stw	fp,48(sp)
  811f78:	df000c04 	addi	fp,sp,48
  811f7c:	e13ffb15 	stw	r4,-20(fp)
  811f80:	e17ffc15 	stw	r5,-16(fp)
  811f84:	e1bffd15 	stw	r6,-12(fp)
  811f88:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811f8c:	e0bffc17 	ldw	r2,-16(fp)
  811f90:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811f94:	00004806 	br	8120b8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811f98:	e0bffb17 	ldw	r2,-20(fp)
  811f9c:	10800a17 	ldw	r2,40(r2)
  811fa0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811fa4:	e0bffb17 	ldw	r2,-20(fp)
  811fa8:	10800b17 	ldw	r2,44(r2)
  811fac:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  811fb0:	e0fff717 	ldw	r3,-36(fp)
  811fb4:	e0bff617 	ldw	r2,-40(fp)
  811fb8:	18800536 	bltu	r3,r2,811fd0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811fbc:	e0bff717 	ldw	r2,-36(fp)
  811fc0:	e0fff617 	ldw	r3,-40(fp)
  811fc4:	10c5c83a 	sub	r2,r2,r3
  811fc8:	e0bff815 	stw	r2,-32(fp)
  811fcc:	00000406 	br	811fe0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811fd0:	00820004 	movi	r2,2048
  811fd4:	e0fff617 	ldw	r3,-40(fp)
  811fd8:	10c5c83a 	sub	r2,r2,r3
  811fdc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  811fe0:	e0bff817 	ldw	r2,-32(fp)
  811fe4:	1005003a 	cmpeq	r2,r2,zero
  811fe8:	10001f1e 	bne	r2,zero,812068 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  811fec:	e0fffd17 	ldw	r3,-12(fp)
  811ff0:	e0bff817 	ldw	r2,-32(fp)
  811ff4:	1880022e 	bgeu	r3,r2,812000 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  811ff8:	e0bffd17 	ldw	r2,-12(fp)
  811ffc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  812000:	e0bffb17 	ldw	r2,-20(fp)
  812004:	10c00e04 	addi	r3,r2,56
  812008:	e0bff617 	ldw	r2,-40(fp)
  81200c:	1887883a 	add	r3,r3,r2
  812010:	e0bffa17 	ldw	r2,-24(fp)
  812014:	1009883a 	mov	r4,r2
  812018:	180b883a 	mov	r5,r3
  81201c:	e1bff817 	ldw	r6,-32(fp)
  812020:	0808b480 	call	808b48 <memcpy>
      ptr   += n;
  812024:	e0fff817 	ldw	r3,-32(fp)
  812028:	e0bffa17 	ldw	r2,-24(fp)
  81202c:	10c5883a 	add	r2,r2,r3
  812030:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  812034:	e0fffd17 	ldw	r3,-12(fp)
  812038:	e0bff817 	ldw	r2,-32(fp)
  81203c:	1885c83a 	sub	r2,r3,r2
  812040:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812044:	e0fff617 	ldw	r3,-40(fp)
  812048:	e0bff817 	ldw	r2,-32(fp)
  81204c:	1885883a 	add	r2,r3,r2
  812050:	10c1ffcc 	andi	r3,r2,2047
  812054:	e0bffb17 	ldw	r2,-20(fp)
  812058:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  81205c:	e0bffd17 	ldw	r2,-12(fp)
  812060:	10800048 	cmpgei	r2,r2,1
  812064:	103fcc1e 	bne	r2,zero,811f98 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  812068:	e0fffa17 	ldw	r3,-24(fp)
  81206c:	e0bffc17 	ldw	r2,-16(fp)
  812070:	1880141e 	bne	r3,r2,8120c4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  812074:	e0bffe17 	ldw	r2,-8(fp)
  812078:	1090000c 	andi	r2,r2,16384
  81207c:	1004c03a 	cmpne	r2,r2,zero
  812080:	1000101e 	bne	r2,zero,8120c4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812084:	e0bffb17 	ldw	r2,-20(fp)
  812088:	10c00a17 	ldw	r3,40(r2)
  81208c:	e0bff717 	ldw	r2,-36(fp)
  812090:	1880051e 	bne	r3,r2,8120a8 <altera_avalon_jtag_uart_read+0x13c>
  812094:	e0bffb17 	ldw	r2,-20(fp)
  812098:	10c00917 	ldw	r3,36(r2)
  81209c:	e0bffb17 	ldw	r2,-20(fp)
  8120a0:	10800117 	ldw	r2,4(r2)
  8120a4:	18bff736 	bltu	r3,r2,812084 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8120a8:	e0bffb17 	ldw	r2,-20(fp)
  8120ac:	10c00a17 	ldw	r3,40(r2)
  8120b0:	e0bff717 	ldw	r2,-36(fp)
  8120b4:	18800326 	beq	r3,r2,8120c4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8120b8:	e0bffd17 	ldw	r2,-12(fp)
  8120bc:	10800048 	cmpgei	r2,r2,1
  8120c0:	103fb51e 	bne	r2,zero,811f98 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8120c4:	e0fffa17 	ldw	r3,-24(fp)
  8120c8:	e0bffc17 	ldw	r2,-16(fp)
  8120cc:	18801926 	beq	r3,r2,812134 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120d0:	0005303a 	rdctl	r2,status
  8120d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120d8:	e0fff517 	ldw	r3,-44(fp)
  8120dc:	00bfff84 	movi	r2,-2
  8120e0:	1884703a 	and	r2,r3,r2
  8120e4:	1001703a 	wrctl	status,r2
  
  return context;
  8120e8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8120ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8120f0:	e0bffb17 	ldw	r2,-20(fp)
  8120f4:	10800817 	ldw	r2,32(r2)
  8120f8:	10c00054 	ori	r3,r2,1
  8120fc:	e0bffb17 	ldw	r2,-20(fp)
  812100:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812104:	e0bffb17 	ldw	r2,-20(fp)
  812108:	10800017 	ldw	r2,0(r2)
  81210c:	11000104 	addi	r4,r2,4
  812110:	e0bffb17 	ldw	r2,-20(fp)
  812114:	10800817 	ldw	r2,32(r2)
  812118:	1007883a 	mov	r3,r2
  81211c:	2005883a 	mov	r2,r4
  812120:	10c00035 	stwio	r3,0(r2)
  812124:	e0bff917 	ldw	r2,-28(fp)
  812128:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81212c:	e0bff417 	ldw	r2,-48(fp)
  812130:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  812134:	e0fffa17 	ldw	r3,-24(fp)
  812138:	e0bffc17 	ldw	r2,-16(fp)
  81213c:	18800526 	beq	r3,r2,812154 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  812140:	e0fffa17 	ldw	r3,-24(fp)
  812144:	e0bffc17 	ldw	r2,-16(fp)
  812148:	1887c83a 	sub	r3,r3,r2
  81214c:	e0ffff15 	stw	r3,-4(fp)
  812150:	00000906 	br	812178 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  812154:	e0bffe17 	ldw	r2,-8(fp)
  812158:	1090000c 	andi	r2,r2,16384
  81215c:	1005003a 	cmpeq	r2,r2,zero
  812160:	1000031e 	bne	r2,zero,812170 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  812164:	00bffd44 	movi	r2,-11
  812168:	e0bfff15 	stw	r2,-4(fp)
  81216c:	00000206 	br	812178 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812170:	00bffec4 	movi	r2,-5
  812174:	e0bfff15 	stw	r2,-4(fp)
  812178:	e0bfff17 	ldw	r2,-4(fp)
}
  81217c:	e037883a 	mov	sp,fp
  812180:	dfc00117 	ldw	ra,4(sp)
  812184:	df000017 	ldw	fp,0(sp)
  812188:	dec00204 	addi	sp,sp,8
  81218c:	f800283a 	ret

00812190 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812190:	defff204 	addi	sp,sp,-56
  812194:	dfc00d15 	stw	ra,52(sp)
  812198:	df000c15 	stw	fp,48(sp)
  81219c:	df000c04 	addi	fp,sp,48
  8121a0:	e13ffb15 	stw	r4,-20(fp)
  8121a4:	e17ffc15 	stw	r5,-16(fp)
  8121a8:	e1bffd15 	stw	r6,-12(fp)
  8121ac:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8121b0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8121b4:	e0bffc17 	ldw	r2,-16(fp)
  8121b8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8121bc:	00003a06 	br	8122a8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8121c0:	e0bffb17 	ldw	r2,-20(fp)
  8121c4:	10800c17 	ldw	r2,48(r2)
  8121c8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  8121cc:	e0bffb17 	ldw	r2,-20(fp)
  8121d0:	10800d17 	ldw	r2,52(r2)
  8121d4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  8121d8:	e0fffa17 	ldw	r3,-24(fp)
  8121dc:	e0bff917 	ldw	r2,-28(fp)
  8121e0:	1880062e 	bgeu	r3,r2,8121fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8121e4:	e0fff917 	ldw	r3,-28(fp)
  8121e8:	e0bffa17 	ldw	r2,-24(fp)
  8121ec:	1885c83a 	sub	r2,r3,r2
  8121f0:	10bfffc4 	addi	r2,r2,-1
  8121f4:	e0bff815 	stw	r2,-32(fp)
  8121f8:	00000c06 	br	81222c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  8121fc:	e0bff917 	ldw	r2,-28(fp)
  812200:	1005003a 	cmpeq	r2,r2,zero
  812204:	1000051e 	bne	r2,zero,81221c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  812208:	00820004 	movi	r2,2048
  81220c:	e0fffa17 	ldw	r3,-24(fp)
  812210:	10c5c83a 	sub	r2,r2,r3
  812214:	e0bff815 	stw	r2,-32(fp)
  812218:	00000406 	br	81222c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81221c:	0081ffc4 	movi	r2,2047
  812220:	e0fffa17 	ldw	r3,-24(fp)
  812224:	10c5c83a 	sub	r2,r2,r3
  812228:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81222c:	e0bff817 	ldw	r2,-32(fp)
  812230:	1005003a 	cmpeq	r2,r2,zero
  812234:	10001f1e 	bne	r2,zero,8122b4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  812238:	e0fffd17 	ldw	r3,-12(fp)
  81223c:	e0bff817 	ldw	r2,-32(fp)
  812240:	1880022e 	bgeu	r3,r2,81224c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  812244:	e0bffd17 	ldw	r2,-12(fp)
  812248:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81224c:	e0bffb17 	ldw	r2,-20(fp)
  812250:	10c20e04 	addi	r3,r2,2104
  812254:	e0bffa17 	ldw	r2,-24(fp)
  812258:	1885883a 	add	r2,r3,r2
  81225c:	e0fffc17 	ldw	r3,-16(fp)
  812260:	1009883a 	mov	r4,r2
  812264:	180b883a 	mov	r5,r3
  812268:	e1bff817 	ldw	r6,-32(fp)
  81226c:	0808b480 	call	808b48 <memcpy>
      ptr   += n;
  812270:	e0fff817 	ldw	r3,-32(fp)
  812274:	e0bffc17 	ldw	r2,-16(fp)
  812278:	10c5883a 	add	r2,r2,r3
  81227c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  812280:	e0fffd17 	ldw	r3,-12(fp)
  812284:	e0bff817 	ldw	r2,-32(fp)
  812288:	1885c83a 	sub	r2,r3,r2
  81228c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812290:	e0fffa17 	ldw	r3,-24(fp)
  812294:	e0bff817 	ldw	r2,-32(fp)
  812298:	1885883a 	add	r2,r3,r2
  81229c:	10c1ffcc 	andi	r3,r2,2047
  8122a0:	e0bffb17 	ldw	r2,-20(fp)
  8122a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8122a8:	e0bffd17 	ldw	r2,-12(fp)
  8122ac:	10800048 	cmpgei	r2,r2,1
  8122b0:	103fc31e 	bne	r2,zero,8121c0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8122b4:	0005303a 	rdctl	r2,status
  8122b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8122bc:	e0fff517 	ldw	r3,-44(fp)
  8122c0:	00bfff84 	movi	r2,-2
  8122c4:	1884703a 	and	r2,r3,r2
  8122c8:	1001703a 	wrctl	status,r2
  
  return context;
  8122cc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8122d0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8122d4:	e0bffb17 	ldw	r2,-20(fp)
  8122d8:	10800817 	ldw	r2,32(r2)
  8122dc:	10c00094 	ori	r3,r2,2
  8122e0:	e0bffb17 	ldw	r2,-20(fp)
  8122e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8122e8:	e0bffb17 	ldw	r2,-20(fp)
  8122ec:	10800017 	ldw	r2,0(r2)
  8122f0:	11000104 	addi	r4,r2,4
  8122f4:	e0bffb17 	ldw	r2,-20(fp)
  8122f8:	10800817 	ldw	r2,32(r2)
  8122fc:	1007883a 	mov	r3,r2
  812300:	2005883a 	mov	r2,r4
  812304:	10c00035 	stwio	r3,0(r2)
  812308:	e0bff717 	ldw	r2,-36(fp)
  81230c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812310:	e0bff417 	ldw	r2,-48(fp)
  812314:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  812318:	e0bffd17 	ldw	r2,-12(fp)
  81231c:	10800050 	cmplti	r2,r2,1
  812320:	1000111e 	bne	r2,zero,812368 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  812324:	e0bffe17 	ldw	r2,-8(fp)
  812328:	1090000c 	andi	r2,r2,16384
  81232c:	1004c03a 	cmpne	r2,r2,zero
  812330:	1000101e 	bne	r2,zero,812374 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  812334:	e0bffb17 	ldw	r2,-20(fp)
  812338:	10c00d17 	ldw	r3,52(r2)
  81233c:	e0bff917 	ldw	r2,-28(fp)
  812340:	1880051e 	bne	r3,r2,812358 <altera_avalon_jtag_uart_write+0x1c8>
  812344:	e0bffb17 	ldw	r2,-20(fp)
  812348:	10c00917 	ldw	r3,36(r2)
  81234c:	e0bffb17 	ldw	r2,-20(fp)
  812350:	10800117 	ldw	r2,4(r2)
  812354:	18bff736 	bltu	r3,r2,812334 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  812358:	e0bffb17 	ldw	r2,-20(fp)
  81235c:	10c00d17 	ldw	r3,52(r2)
  812360:	e0bff917 	ldw	r2,-28(fp)
  812364:	18800326 	beq	r3,r2,812374 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  812368:	e0bffd17 	ldw	r2,-12(fp)
  81236c:	10800048 	cmpgei	r2,r2,1
  812370:	103fcd1e 	bne	r2,zero,8122a8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  812374:	e0fffc17 	ldw	r3,-16(fp)
  812378:	e0bff617 	ldw	r2,-40(fp)
  81237c:	18800526 	beq	r3,r2,812394 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  812380:	e0fffc17 	ldw	r3,-16(fp)
  812384:	e0bff617 	ldw	r2,-40(fp)
  812388:	1887c83a 	sub	r3,r3,r2
  81238c:	e0ffff15 	stw	r3,-4(fp)
  812390:	00000906 	br	8123b8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  812394:	e0bffe17 	ldw	r2,-8(fp)
  812398:	1090000c 	andi	r2,r2,16384
  81239c:	1005003a 	cmpeq	r2,r2,zero
  8123a0:	1000031e 	bne	r2,zero,8123b0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8123a4:	00bffd44 	movi	r2,-11
  8123a8:	e0bfff15 	stw	r2,-4(fp)
  8123ac:	00000206 	br	8123b8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  8123b0:	00bffec4 	movi	r2,-5
  8123b4:	e0bfff15 	stw	r2,-4(fp)
  8123b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8123bc:	e037883a 	mov	sp,fp
  8123c0:	dfc00117 	ldw	ra,4(sp)
  8123c4:	df000017 	ldw	fp,0(sp)
  8123c8:	dec00204 	addi	sp,sp,8
  8123cc:	f800283a 	ret

008123d0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8123d0:	defffa04 	addi	sp,sp,-24
  8123d4:	dfc00515 	stw	ra,20(sp)
  8123d8:	df000415 	stw	fp,16(sp)
  8123dc:	df000404 	addi	fp,sp,16
  8123e0:	e13ffe15 	stw	r4,-8(fp)
  8123e4:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8123e8:	e0bffe17 	ldw	r2,-8(fp)
  8123ec:	10800017 	ldw	r2,0(r2)
  8123f0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8123f4:	008003f4 	movhi	r2,15
  8123f8:	10909004 	addi	r2,r2,16960
  8123fc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812400:	e0bffe17 	ldw	r2,-8(fp)
  812404:	10800803 	ldbu	r2,32(r2)
  812408:	10803fcc 	andi	r2,r2,255
  81240c:	1080201c 	xori	r2,r2,128
  812410:	10bfe004 	addi	r2,r2,-128
  812414:	1004c03a 	cmpne	r2,r2,zero
  812418:	1000161e 	bne	r2,zero,812474 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81241c:	00000a06 	br	812448 <lcd_write_command+0x78>
    if (--i == 0)
  812420:	e0bffc17 	ldw	r2,-16(fp)
  812424:	10bfffc4 	addi	r2,r2,-1
  812428:	e0bffc15 	stw	r2,-16(fp)
  81242c:	e0bffc17 	ldw	r2,-16(fp)
  812430:	1004c03a 	cmpne	r2,r2,zero
  812434:	1000041e 	bne	r2,zero,812448 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  812438:	e0fffe17 	ldw	r3,-8(fp)
  81243c:	00800044 	movi	r2,1
  812440:	18800805 	stb	r2,32(r3)
      return;
  812444:	00000b06 	br	812474 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812448:	e0bffd17 	ldw	r2,-12(fp)
  81244c:	10800104 	addi	r2,r2,4
  812450:	10800037 	ldwio	r2,0(r2)
  812454:	1080200c 	andi	r2,r2,128
  812458:	1004c03a 	cmpne	r2,r2,zero
  81245c:	103ff01e 	bne	r2,zero,812420 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812460:	01001904 	movi	r4,100
  812464:	08116900 	call	811690 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  812468:	e0bffd17 	ldw	r2,-12(fp)
  81246c:	e0ffff03 	ldbu	r3,-4(fp)
  812470:	10c00035 	stwio	r3,0(r2)
}
  812474:	e037883a 	mov	sp,fp
  812478:	dfc00117 	ldw	ra,4(sp)
  81247c:	df000017 	ldw	fp,0(sp)
  812480:	dec00204 	addi	sp,sp,8
  812484:	f800283a 	ret

00812488 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  812488:	defffa04 	addi	sp,sp,-24
  81248c:	dfc00515 	stw	ra,20(sp)
  812490:	df000415 	stw	fp,16(sp)
  812494:	df000404 	addi	fp,sp,16
  812498:	e13ffe15 	stw	r4,-8(fp)
  81249c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8124a0:	e0bffe17 	ldw	r2,-8(fp)
  8124a4:	10800017 	ldw	r2,0(r2)
  8124a8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8124ac:	008003f4 	movhi	r2,15
  8124b0:	10909004 	addi	r2,r2,16960
  8124b4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8124b8:	e0bffe17 	ldw	r2,-8(fp)
  8124bc:	10800803 	ldbu	r2,32(r2)
  8124c0:	10803fcc 	andi	r2,r2,255
  8124c4:	1080201c 	xori	r2,r2,128
  8124c8:	10bfe004 	addi	r2,r2,-128
  8124cc:	1004c03a 	cmpne	r2,r2,zero
  8124d0:	10001d1e 	bne	r2,zero,812548 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8124d4:	00000a06 	br	812500 <lcd_write_data+0x78>
    if (--i == 0)
  8124d8:	e0bffc17 	ldw	r2,-16(fp)
  8124dc:	10bfffc4 	addi	r2,r2,-1
  8124e0:	e0bffc15 	stw	r2,-16(fp)
  8124e4:	e0bffc17 	ldw	r2,-16(fp)
  8124e8:	1004c03a 	cmpne	r2,r2,zero
  8124ec:	1000041e 	bne	r2,zero,812500 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8124f0:	e0fffe17 	ldw	r3,-8(fp)
  8124f4:	00800044 	movi	r2,1
  8124f8:	18800805 	stb	r2,32(r3)
      return;
  8124fc:	00001206 	br	812548 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812500:	e0bffd17 	ldw	r2,-12(fp)
  812504:	10800104 	addi	r2,r2,4
  812508:	10800037 	ldwio	r2,0(r2)
  81250c:	1080200c 	andi	r2,r2,128
  812510:	1004c03a 	cmpne	r2,r2,zero
  812514:	103ff01e 	bne	r2,zero,8124d8 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812518:	01001904 	movi	r4,100
  81251c:	08116900 	call	811690 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  812520:	e0bffd17 	ldw	r2,-12(fp)
  812524:	10800204 	addi	r2,r2,8
  812528:	e0ffff03 	ldbu	r3,-4(fp)
  81252c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  812530:	e0bffe17 	ldw	r2,-8(fp)
  812534:	108008c3 	ldbu	r2,35(r2)
  812538:	10800044 	addi	r2,r2,1
  81253c:	1007883a 	mov	r3,r2
  812540:	e0bffe17 	ldw	r2,-8(fp)
  812544:	10c008c5 	stb	r3,35(r2)
}
  812548:	e037883a 	mov	sp,fp
  81254c:	dfc00117 	ldw	ra,4(sp)
  812550:	df000017 	ldw	fp,0(sp)
  812554:	dec00204 	addi	sp,sp,8
  812558:	f800283a 	ret

0081255c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  81255c:	defffb04 	addi	sp,sp,-20
  812560:	dfc00415 	stw	ra,16(sp)
  812564:	df000315 	stw	fp,12(sp)
  812568:	dc000215 	stw	r16,8(sp)
  81256c:	df000204 	addi	fp,sp,8
  812570:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  812574:	e13fff17 	ldw	r4,-4(fp)
  812578:	01400044 	movi	r5,1
  81257c:	08123d00 	call	8123d0 <lcd_write_command>

  sp->x = 0;
  812580:	e0bfff17 	ldw	r2,-4(fp)
  812584:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  812588:	e0bfff17 	ldw	r2,-4(fp)
  81258c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  812590:	e0bfff17 	ldw	r2,-4(fp)
  812594:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812598:	e03ffe15 	stw	zero,-8(fp)
  81259c:	00001c06 	br	812610 <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8125a0:	e13ffe17 	ldw	r4,-8(fp)
  8125a4:	014018c4 	movi	r5,99
  8125a8:	080fe8c0 	call	80fe8c <__mulsi3>
  8125ac:	10c01004 	addi	r3,r2,64
  8125b0:	e0bfff17 	ldw	r2,-4(fp)
  8125b4:	1889883a 	add	r4,r3,r2
  8125b8:	01400804 	movi	r5,32
  8125bc:	01801444 	movi	r6,81
  8125c0:	080273c0 	call	80273c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8125c4:	e13ffe17 	ldw	r4,-8(fp)
  8125c8:	014018c4 	movi	r5,99
  8125cc:	080fe8c0 	call	80fe8c <__mulsi3>
  8125d0:	10c00c04 	addi	r3,r2,48
  8125d4:	e0bfff17 	ldw	r2,-4(fp)
  8125d8:	1889883a 	add	r4,r3,r2
  8125dc:	01400804 	movi	r5,32
  8125e0:	01800404 	movi	r6,16
  8125e4:	080273c0 	call	80273c <memset>
    sp->line[y].width = 0;
  8125e8:	e13ffe17 	ldw	r4,-8(fp)
  8125ec:	e43fff17 	ldw	r16,-4(fp)
  8125f0:	014018c4 	movi	r5,99
  8125f4:	080fe8c0 	call	80fe8c <__mulsi3>
  8125f8:	1405883a 	add	r2,r2,r16
  8125fc:	10802404 	addi	r2,r2,144
  812600:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812604:	e0bffe17 	ldw	r2,-8(fp)
  812608:	10800044 	addi	r2,r2,1
  81260c:	e0bffe15 	stw	r2,-8(fp)
  812610:	e0bffe17 	ldw	r2,-8(fp)
  812614:	10800090 	cmplti	r2,r2,2
  812618:	103fe11e 	bne	r2,zero,8125a0 <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81261c:	e037883a 	mov	sp,fp
  812620:	dfc00217 	ldw	ra,8(sp)
  812624:	df000117 	ldw	fp,4(sp)
  812628:	dc000017 	ldw	r16,0(sp)
  81262c:	dec00304 	addi	sp,sp,12
  812630:	f800283a 	ret

00812634 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  812634:	defff404 	addi	sp,sp,-48
  812638:	dfc00b15 	stw	ra,44(sp)
  81263c:	df000a15 	stw	fp,40(sp)
  812640:	dc800915 	stw	r18,36(sp)
  812644:	dc400815 	stw	r17,32(sp)
  812648:	dc000715 	stw	r16,28(sp)
  81264c:	df000704 	addi	fp,sp,28
  812650:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812654:	e0bfff17 	ldw	r2,-4(fp)
  812658:	10800943 	ldbu	r2,37(r2)
  81265c:	10803fcc 	andi	r2,r2,255
  812660:	1080201c 	xori	r2,r2,128
  812664:	10bfe004 	addi	r2,r2,-128
  812668:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81266c:	e03ffe15 	stw	zero,-8(fp)
  812670:	00006a06 	br	81281c <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
  812674:	e13ffe17 	ldw	r4,-8(fp)
  812678:	e43fff17 	ldw	r16,-4(fp)
  81267c:	014018c4 	movi	r5,99
  812680:	080fe8c0 	call	80fe8c <__mulsi3>
  812684:	1405883a 	add	r2,r2,r16
  812688:	10802404 	addi	r2,r2,144
  81268c:	10800043 	ldbu	r2,1(r2)
  812690:	10803fcc 	andi	r2,r2,255
  812694:	1080201c 	xori	r2,r2,128
  812698:	10bfe004 	addi	r2,r2,-128
  81269c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8126a0:	e13ffe17 	ldw	r4,-8(fp)
  8126a4:	e43fff17 	ldw	r16,-4(fp)
  8126a8:	014018c4 	movi	r5,99
  8126ac:	080fe8c0 	call	80fe8c <__mulsi3>
  8126b0:	1405883a 	add	r2,r2,r16
  8126b4:	10802404 	addi	r2,r2,144
  8126b8:	10800083 	ldbu	r2,2(r2)
  8126bc:	11003fcc 	andi	r4,r2,255
  8126c0:	e17ffc17 	ldw	r5,-16(fp)
  8126c4:	080fe8c0 	call	80fe8c <__mulsi3>
  8126c8:	1005d23a 	srai	r2,r2,8
  8126cc:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  8126d0:	e0fffa17 	ldw	r3,-24(fp)
  8126d4:	e0bffb17 	ldw	r2,-20(fp)
  8126d8:	18800116 	blt	r3,r2,8126e0 <lcd_repaint_screen+0xac>
      offset = 0;
  8126dc:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8126e0:	e03ffd15 	stw	zero,-12(fp)
  8126e4:	00004706 	br	812804 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8126e8:	e47ffe17 	ldw	r17,-8(fp)
  8126ec:	e0fffd17 	ldw	r3,-12(fp)
  8126f0:	e0bffa17 	ldw	r2,-24(fp)
  8126f4:	1889883a 	add	r4,r3,r2
  8126f8:	e17ffb17 	ldw	r5,-20(fp)
  8126fc:	080fe1c0 	call	80fe1c <__modsi3>
  812700:	1025883a 	mov	r18,r2
  812704:	e43fff17 	ldw	r16,-4(fp)
  812708:	8809883a 	mov	r4,r17
  81270c:	014018c4 	movi	r5,99
  812710:	080fe8c0 	call	80fe8c <__mulsi3>
  812714:	1405883a 	add	r2,r2,r16
  812718:	1485883a 	add	r2,r2,r18
  81271c:	10801004 	addi	r2,r2,64
  812720:	10800003 	ldbu	r2,0(r2)
  812724:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  812728:	e13ffe17 	ldw	r4,-8(fp)
  81272c:	e47ffd17 	ldw	r17,-12(fp)
  812730:	e43fff17 	ldw	r16,-4(fp)
  812734:	014018c4 	movi	r5,99
  812738:	080fe8c0 	call	80fe8c <__mulsi3>
  81273c:	1405883a 	add	r2,r2,r16
  812740:	1445883a 	add	r2,r2,r17
  812744:	10800c04 	addi	r2,r2,48
  812748:	10800003 	ldbu	r2,0(r2)
  81274c:	10c03fcc 	andi	r3,r2,255
  812750:	18c0201c 	xori	r3,r3,128
  812754:	18ffe004 	addi	r3,r3,-128
  812758:	e0bff947 	ldb	r2,-27(fp)
  81275c:	18802626 	beq	r3,r2,8127f8 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
  812760:	e0fffe17 	ldw	r3,-8(fp)
  812764:	d0a00f04 	addi	r2,gp,-32708
  812768:	1885883a 	add	r2,r3,r2
  81276c:	10800003 	ldbu	r2,0(r2)
  812770:	1007883a 	mov	r3,r2
  812774:	e0bffd17 	ldw	r2,-12(fp)
  812778:	1885883a 	add	r2,r3,r2
  81277c:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  812780:	e0fff903 	ldbu	r3,-28(fp)
  812784:	e0bfff17 	ldw	r2,-4(fp)
  812788:	108008c3 	ldbu	r2,35(r2)
  81278c:	10803fcc 	andi	r2,r2,255
  812790:	1080201c 	xori	r2,r2,128
  812794:	10bfe004 	addi	r2,r2,-128
  812798:	18800926 	beq	r3,r2,8127c0 <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  81279c:	e0fff903 	ldbu	r3,-28(fp)
  8127a0:	00bfe004 	movi	r2,-128
  8127a4:	1884b03a 	or	r2,r3,r2
  8127a8:	11403fcc 	andi	r5,r2,255
  8127ac:	e13fff17 	ldw	r4,-4(fp)
  8127b0:	08123d00 	call	8123d0 <lcd_write_command>
          sp->address = address;
  8127b4:	e0fff903 	ldbu	r3,-28(fp)
  8127b8:	e0bfff17 	ldw	r2,-4(fp)
  8127bc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8127c0:	e0bff943 	ldbu	r2,-27(fp)
  8127c4:	11403fcc 	andi	r5,r2,255
  8127c8:	e13fff17 	ldw	r4,-4(fp)
  8127cc:	08124880 	call	812488 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8127d0:	e13ffe17 	ldw	r4,-8(fp)
  8127d4:	e47ffd17 	ldw	r17,-12(fp)
  8127d8:	e43fff17 	ldw	r16,-4(fp)
  8127dc:	014018c4 	movi	r5,99
  8127e0:	080fe8c0 	call	80fe8c <__mulsi3>
  8127e4:	1405883a 	add	r2,r2,r16
  8127e8:	1445883a 	add	r2,r2,r17
  8127ec:	10c00c04 	addi	r3,r2,48
  8127f0:	e0bff943 	ldbu	r2,-27(fp)
  8127f4:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8127f8:	e0bffd17 	ldw	r2,-12(fp)
  8127fc:	10800044 	addi	r2,r2,1
  812800:	e0bffd15 	stw	r2,-12(fp)
  812804:	e0bffd17 	ldw	r2,-12(fp)
  812808:	10800410 	cmplti	r2,r2,16
  81280c:	103fb61e 	bne	r2,zero,8126e8 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812810:	e0bffe17 	ldw	r2,-8(fp)
  812814:	10800044 	addi	r2,r2,1
  812818:	e0bffe15 	stw	r2,-8(fp)
  81281c:	e0bffe17 	ldw	r2,-8(fp)
  812820:	10800090 	cmplti	r2,r2,2
  812824:	103f931e 	bne	r2,zero,812674 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  812828:	e037883a 	mov	sp,fp
  81282c:	dfc00417 	ldw	ra,16(sp)
  812830:	df000317 	ldw	fp,12(sp)
  812834:	dc800217 	ldw	r18,8(sp)
  812838:	dc400117 	ldw	r17,4(sp)
  81283c:	dc000017 	ldw	r16,0(sp)
  812840:	dec00504 	addi	sp,sp,20
  812844:	f800283a 	ret

00812848 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  812848:	defffb04 	addi	sp,sp,-20
  81284c:	dfc00415 	stw	ra,16(sp)
  812850:	df000315 	stw	fp,12(sp)
  812854:	dc000215 	stw	r16,8(sp)
  812858:	df000204 	addi	fp,sp,8
  81285c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812860:	e03ffe15 	stw	zero,-8(fp)
  812864:	00002106 	br	8128ec <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812868:	e0bffe17 	ldw	r2,-8(fp)
  81286c:	10800048 	cmpgei	r2,r2,1
  812870:	1000121e 	bne	r2,zero,8128bc <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  812874:	e13ffe17 	ldw	r4,-8(fp)
  812878:	014018c4 	movi	r5,99
  81287c:	080fe8c0 	call	80fe8c <__mulsi3>
  812880:	10c01004 	addi	r3,r2,64
  812884:	e0bfff17 	ldw	r2,-4(fp)
  812888:	18a1883a 	add	r16,r3,r2
  81288c:	e0bffe17 	ldw	r2,-8(fp)
  812890:	11000044 	addi	r4,r2,1
  812894:	014018c4 	movi	r5,99
  812898:	080fe8c0 	call	80fe8c <__mulsi3>
  81289c:	10c01004 	addi	r3,r2,64
  8128a0:	e0bfff17 	ldw	r2,-4(fp)
  8128a4:	1885883a 	add	r2,r3,r2
  8128a8:	8009883a 	mov	r4,r16
  8128ac:	100b883a 	mov	r5,r2
  8128b0:	01801404 	movi	r6,80
  8128b4:	0808b480 	call	808b48 <memcpy>
  8128b8:	00000906 	br	8128e0 <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8128bc:	e13ffe17 	ldw	r4,-8(fp)
  8128c0:	014018c4 	movi	r5,99
  8128c4:	080fe8c0 	call	80fe8c <__mulsi3>
  8128c8:	10c01004 	addi	r3,r2,64
  8128cc:	e0bfff17 	ldw	r2,-4(fp)
  8128d0:	1889883a 	add	r4,r3,r2
  8128d4:	01400804 	movi	r5,32
  8128d8:	01801404 	movi	r6,80
  8128dc:	080273c0 	call	80273c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8128e0:	e0bffe17 	ldw	r2,-8(fp)
  8128e4:	10800044 	addi	r2,r2,1
  8128e8:	e0bffe15 	stw	r2,-8(fp)
  8128ec:	e0bffe17 	ldw	r2,-8(fp)
  8128f0:	10800090 	cmplti	r2,r2,2
  8128f4:	103fdc1e 	bne	r2,zero,812868 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8128f8:	e0bfff17 	ldw	r2,-4(fp)
  8128fc:	10800883 	ldbu	r2,34(r2)
  812900:	10bfffc4 	addi	r2,r2,-1
  812904:	1007883a 	mov	r3,r2
  812908:	e0bfff17 	ldw	r2,-4(fp)
  81290c:	10c00885 	stb	r3,34(r2)
}
  812910:	e037883a 	mov	sp,fp
  812914:	dfc00217 	ldw	ra,8(sp)
  812918:	df000117 	ldw	fp,4(sp)
  81291c:	dc000017 	ldw	r16,0(sp)
  812920:	dec00304 	addi	sp,sp,12
  812924:	f800283a 	ret

00812928 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812928:	defff804 	addi	sp,sp,-32
  81292c:	dfc00715 	stw	ra,28(sp)
  812930:	df000615 	stw	fp,24(sp)
  812934:	df000604 	addi	fp,sp,24
  812938:	e13ffd15 	stw	r4,-12(fp)
  81293c:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  812940:	e03ffc15 	stw	zero,-16(fp)
  812944:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  812948:	e0bffd17 	ldw	r2,-12(fp)
  81294c:	10800a03 	ldbu	r2,40(r2)
  812950:	10803fcc 	andi	r2,r2,255
  812954:	1080201c 	xori	r2,r2,128
  812958:	10bfe004 	addi	r2,r2,-128
  81295c:	108016d8 	cmpnei	r2,r2,91
  812960:	10004d1e 	bne	r2,zero,812a98 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
  812964:	e0bffd17 	ldw	r2,-12(fp)
  812968:	10800a04 	addi	r2,r2,40
  81296c:	10800044 	addi	r2,r2,1
  812970:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  812974:	00000f06 	br	8129b4 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  812978:	e13ffc17 	ldw	r4,-16(fp)
  81297c:	01400284 	movi	r5,10
  812980:	080fe8c0 	call	80fe8c <__mulsi3>
  812984:	1007883a 	mov	r3,r2
  812988:	e0bffa17 	ldw	r2,-24(fp)
  81298c:	10800003 	ldbu	r2,0(r2)
  812990:	10803fcc 	andi	r2,r2,255
  812994:	1080201c 	xori	r2,r2,128
  812998:	10bfe004 	addi	r2,r2,-128
  81299c:	1885883a 	add	r2,r3,r2
  8129a0:	10bff404 	addi	r2,r2,-48
  8129a4:	e0bffc15 	stw	r2,-16(fp)
  8129a8:	e0bffa17 	ldw	r2,-24(fp)
  8129ac:	10800044 	addi	r2,r2,1
  8129b0:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8129b4:	e0bffa17 	ldw	r2,-24(fp)
  8129b8:	10800003 	ldbu	r2,0(r2)
  8129bc:	10803fcc 	andi	r2,r2,255
  8129c0:	1080201c 	xori	r2,r2,128
  8129c4:	10bfe004 	addi	r2,r2,-128
  8129c8:	1007883a 	mov	r3,r2
  8129cc:	00802074 	movhi	r2,129
  8129d0:	109a6d04 	addi	r2,r2,27060
  8129d4:	10800017 	ldw	r2,0(r2)
  8129d8:	1885883a 	add	r2,r3,r2
  8129dc:	10800003 	ldbu	r2,0(r2)
  8129e0:	10803fcc 	andi	r2,r2,255
  8129e4:	1080010c 	andi	r2,r2,4
  8129e8:	1004c03a 	cmpne	r2,r2,zero
  8129ec:	103fe21e 	bne	r2,zero,812978 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8129f0:	e0bffa17 	ldw	r2,-24(fp)
  8129f4:	10800003 	ldbu	r2,0(r2)
  8129f8:	10803fcc 	andi	r2,r2,255
  8129fc:	1080201c 	xori	r2,r2,128
  812a00:	10bfe004 	addi	r2,r2,-128
  812a04:	10800ed8 	cmpnei	r2,r2,59
  812a08:	1000251e 	bne	r2,zero,812aa0 <lcd_handle_escape+0x178>
    {
      ptr++;
  812a0c:	e0bffa17 	ldw	r2,-24(fp)
  812a10:	10800044 	addi	r2,r2,1
  812a14:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  812a18:	00000f06 	br	812a58 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812a1c:	e13ffb17 	ldw	r4,-20(fp)
  812a20:	01400284 	movi	r5,10
  812a24:	080fe8c0 	call	80fe8c <__mulsi3>
  812a28:	1007883a 	mov	r3,r2
  812a2c:	e0bffa17 	ldw	r2,-24(fp)
  812a30:	10800003 	ldbu	r2,0(r2)
  812a34:	10803fcc 	andi	r2,r2,255
  812a38:	1080201c 	xori	r2,r2,128
  812a3c:	10bfe004 	addi	r2,r2,-128
  812a40:	1885883a 	add	r2,r3,r2
  812a44:	10bff404 	addi	r2,r2,-48
  812a48:	e0bffb15 	stw	r2,-20(fp)
  812a4c:	e0bffa17 	ldw	r2,-24(fp)
  812a50:	10800044 	addi	r2,r2,1
  812a54:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  812a58:	e0bffa17 	ldw	r2,-24(fp)
  812a5c:	10800003 	ldbu	r2,0(r2)
  812a60:	10803fcc 	andi	r2,r2,255
  812a64:	1080201c 	xori	r2,r2,128
  812a68:	10bfe004 	addi	r2,r2,-128
  812a6c:	1007883a 	mov	r3,r2
  812a70:	00802074 	movhi	r2,129
  812a74:	109a6d04 	addi	r2,r2,27060
  812a78:	10800017 	ldw	r2,0(r2)
  812a7c:	1885883a 	add	r2,r3,r2
  812a80:	10800003 	ldbu	r2,0(r2)
  812a84:	10803fcc 	andi	r2,r2,255
  812a88:	1080010c 	andi	r2,r2,4
  812a8c:	1004c03a 	cmpne	r2,r2,zero
  812a90:	103fe21e 	bne	r2,zero,812a1c <lcd_handle_escape+0xf4>
  812a94:	00000206 	br	812aa0 <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  812a98:	00bfffc4 	movi	r2,-1
  812a9c:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  812aa0:	e0bffe07 	ldb	r2,-8(fp)
  812aa4:	e0bfff15 	stw	r2,-4(fp)
  812aa8:	e0ffff17 	ldw	r3,-4(fp)
  812aac:	188012a0 	cmpeqi	r2,r3,74
  812ab0:	10002f1e 	bne	r2,zero,812b70 <lcd_handle_escape+0x248>
  812ab4:	e0ffff17 	ldw	r3,-4(fp)
  812ab8:	188012c8 	cmpgei	r2,r3,75
  812abc:	1000041e 	bne	r2,zero,812ad0 <lcd_handle_escape+0x1a8>
  812ac0:	e0ffff17 	ldw	r3,-4(fp)
  812ac4:	18801220 	cmpeqi	r2,r3,72
  812ac8:	1000081e 	bne	r2,zero,812aec <lcd_handle_escape+0x1c4>
  812acc:	00004a06 	br	812bf8 <lcd_handle_escape+0x2d0>
  812ad0:	e0ffff17 	ldw	r3,-4(fp)
  812ad4:	188012e0 	cmpeqi	r2,r3,75
  812ad8:	10002b1e 	bne	r2,zero,812b88 <lcd_handle_escape+0x260>
  812adc:	e0ffff17 	ldw	r3,-4(fp)
  812ae0:	188019a0 	cmpeqi	r2,r3,102
  812ae4:	1000011e 	bne	r2,zero,812aec <lcd_handle_escape+0x1c4>
  812ae8:	00004306 	br	812bf8 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812aec:	e0bffb17 	ldw	r2,-20(fp)
  812af0:	10800050 	cmplti	r2,r2,1
  812af4:	1000051e 	bne	r2,zero,812b0c <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
  812af8:	e0bffb17 	ldw	r2,-20(fp)
  812afc:	10bfffc4 	addi	r2,r2,-1
  812b00:	1007883a 	mov	r3,r2
  812b04:	e0bffd17 	ldw	r2,-12(fp)
  812b08:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812b0c:	e0bffc17 	ldw	r2,-16(fp)
  812b10:	10800050 	cmplti	r2,r2,1
  812b14:	1000381e 	bne	r2,zero,812bf8 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
  812b18:	e0bffc17 	ldw	r2,-16(fp)
  812b1c:	10bfffc4 	addi	r2,r2,-1
  812b20:	1007883a 	mov	r3,r2
  812b24:	e0bffd17 	ldw	r2,-12(fp)
  812b28:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812b2c:	e0bffd17 	ldw	r2,-12(fp)
  812b30:	10800883 	ldbu	r2,34(r2)
  812b34:	10803fcc 	andi	r2,r2,255
  812b38:	10800170 	cmpltui	r2,r2,5
  812b3c:	1000061e 	bne	r2,zero,812b58 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
  812b40:	e0fffd17 	ldw	r3,-12(fp)
  812b44:	00800104 	movi	r2,4
  812b48:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  812b4c:	00000206 	br	812b58 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
  812b50:	e13ffd17 	ldw	r4,-12(fp)
  812b54:	08128480 	call	812848 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812b58:	e0bffd17 	ldw	r2,-12(fp)
  812b5c:	10800883 	ldbu	r2,34(r2)
  812b60:	10803fcc 	andi	r2,r2,255
  812b64:	108000e8 	cmpgeui	r2,r2,3
  812b68:	103ff91e 	bne	r2,zero,812b50 <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
  812b6c:	00002206 	br	812bf8 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812b70:	e0bffc17 	ldw	r2,-16(fp)
  812b74:	10800098 	cmpnei	r2,r2,2
  812b78:	10001f1e 	bne	r2,zero,812bf8 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
  812b7c:	e13ffd17 	ldw	r4,-12(fp)
  812b80:	081255c0 	call	81255c <lcd_clear_screen>
    break;
  812b84:	00001c06 	br	812bf8 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812b88:	e0bffc17 	ldw	r2,-16(fp)
  812b8c:	10800048 	cmpgei	r2,r2,1
  812b90:	1000191e 	bne	r2,zero,812bf8 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812b94:	e0bffd17 	ldw	r2,-12(fp)
  812b98:	10800843 	ldbu	r2,33(r2)
  812b9c:	10803fcc 	andi	r2,r2,255
  812ba0:	10801428 	cmpgeui	r2,r2,80
  812ba4:	1000141e 	bne	r2,zero,812bf8 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812ba8:	e0bffd17 	ldw	r2,-12(fp)
  812bac:	10800883 	ldbu	r2,34(r2)
  812bb0:	11003fcc 	andi	r4,r2,255
  812bb4:	014018c4 	movi	r5,99
  812bb8:	080fe8c0 	call	80fe8c <__mulsi3>
  812bbc:	10c01004 	addi	r3,r2,64
  812bc0:	e0bffd17 	ldw	r2,-12(fp)
  812bc4:	1887883a 	add	r3,r3,r2
  812bc8:	e0bffd17 	ldw	r2,-12(fp)
  812bcc:	10800843 	ldbu	r2,33(r2)
  812bd0:	10803fcc 	andi	r2,r2,255
  812bd4:	1889883a 	add	r4,r3,r2
  812bd8:	e0bffd17 	ldw	r2,-12(fp)
  812bdc:	10800843 	ldbu	r2,33(r2)
  812be0:	10c03fcc 	andi	r3,r2,255
  812be4:	00801404 	movi	r2,80
  812be8:	10c5c83a 	sub	r2,r2,r3
  812bec:	100d883a 	mov	r6,r2
  812bf0:	01400804 	movi	r5,32
  812bf4:	080273c0 	call	80273c <memset>
    }
    break;
  }
}
  812bf8:	e037883a 	mov	sp,fp
  812bfc:	dfc00117 	ldw	ra,4(sp)
  812c00:	df000017 	ldw	fp,0(sp)
  812c04:	dec00204 	addi	sp,sp,8
  812c08:	f800283a 	ret

00812c0c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812c0c:	defff004 	addi	sp,sp,-64
  812c10:	dfc00f15 	stw	ra,60(sp)
  812c14:	df000e15 	stw	fp,56(sp)
  812c18:	dc800d15 	stw	r18,52(sp)
  812c1c:	dc400c15 	stw	r17,48(sp)
  812c20:	dc000b15 	stw	r16,44(sp)
  812c24:	df000b04 	addi	fp,sp,44
  812c28:	e13ffc15 	stw	r4,-16(fp)
  812c2c:	e17ffd15 	stw	r5,-12(fp)
  812c30:	e1bffe15 	stw	r6,-8(fp)
  812c34:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812c38:	e0bffe17 	ldw	r2,-8(fp)
  812c3c:	1007883a 	mov	r3,r2
  812c40:	e0bffd17 	ldw	r2,-12(fp)
  812c44:	10c5883a 	add	r2,r2,r3
  812c48:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812c4c:	e0fffc17 	ldw	r3,-16(fp)
  812c50:	00800044 	movi	r2,1
  812c54:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  812c58:	0000a306 	br	812ee8 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
  812c5c:	e0bffd17 	ldw	r2,-12(fp)
  812c60:	10800003 	ldbu	r2,0(r2)
  812c64:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  812c68:	e0bffc17 	ldw	r2,-16(fp)
  812c6c:	10800903 	ldbu	r2,36(r2)
  812c70:	10803fcc 	andi	r2,r2,255
  812c74:	1080201c 	xori	r2,r2,128
  812c78:	10bfe004 	addi	r2,r2,-128
  812c7c:	1004803a 	cmplt	r2,r2,zero
  812c80:	10003b1e 	bne	r2,zero,812d70 <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
  812c84:	e0bffc17 	ldw	r2,-16(fp)
  812c88:	10800903 	ldbu	r2,36(r2)
  812c8c:	10803fcc 	andi	r2,r2,255
  812c90:	1080201c 	xori	r2,r2,128
  812c94:	10bfe004 	addi	r2,r2,-128
  812c98:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812c9c:	e0bff717 	ldw	r2,-36(fp)
  812ca0:	1004c03a 	cmpne	r2,r2,zero
  812ca4:	1000031e 	bne	r2,zero,812cb4 <altera_avalon_lcd_16207_write+0xa8>
  812ca8:	e0bff807 	ldb	r2,-32(fp)
  812cac:	108016d8 	cmpnei	r2,r2,91
  812cb0:	1000111e 	bne	r2,zero,812cf8 <altera_avalon_lcd_16207_write+0xec>
  812cb4:	e0bff717 	ldw	r2,-36(fp)
  812cb8:	1005003a 	cmpeq	r2,r2,zero
  812cbc:	10001a1e 	bne	r2,zero,812d28 <altera_avalon_lcd_16207_write+0x11c>
  812cc0:	e0bff807 	ldb	r2,-32(fp)
  812cc4:	1007883a 	mov	r3,r2
  812cc8:	00802074 	movhi	r2,129
  812ccc:	109a6d04 	addi	r2,r2,27060
  812cd0:	10800017 	ldw	r2,0(r2)
  812cd4:	1885883a 	add	r2,r3,r2
  812cd8:	10800003 	ldbu	r2,0(r2)
  812cdc:	10803fcc 	andi	r2,r2,255
  812ce0:	1080010c 	andi	r2,r2,4
  812ce4:	1004c03a 	cmpne	r2,r2,zero
  812ce8:	10000f1e 	bne	r2,zero,812d28 <altera_avalon_lcd_16207_write+0x11c>
  812cec:	e0bff807 	ldb	r2,-32(fp)
  812cf0:	10800ee0 	cmpeqi	r2,r2,59
  812cf4:	10000c1e 	bne	r2,zero,812d28 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  812cf8:	e0fff717 	ldw	r3,-36(fp)
  812cfc:	e0bffc17 	ldw	r2,-16(fp)
  812d00:	1885883a 	add	r2,r3,r2
  812d04:	10800a04 	addi	r2,r2,40
  812d08:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812d0c:	e17ff807 	ldb	r5,-32(fp)
  812d10:	e13ffc17 	ldw	r4,-16(fp)
  812d14:	08129280 	call	812928 <lcd_handle_escape>

        sp->esccount = -1;
  812d18:	e0fffc17 	ldw	r3,-16(fp)
  812d1c:	00bfffc4 	movi	r2,-1
  812d20:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812d24:	00006d06 	br	812edc <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812d28:	e0bffc17 	ldw	r2,-16(fp)
  812d2c:	10800903 	ldbu	r2,36(r2)
  812d30:	10803fcc 	andi	r2,r2,255
  812d34:	108001e8 	cmpgeui	r2,r2,7
  812d38:	1000681e 	bne	r2,zero,812edc <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
  812d3c:	e0fff717 	ldw	r3,-36(fp)
  812d40:	e0bffc17 	ldw	r2,-16(fp)
  812d44:	1885883a 	add	r2,r3,r2
  812d48:	10c00a04 	addi	r3,r2,40
  812d4c:	e0bff803 	ldbu	r2,-32(fp)
  812d50:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  812d54:	e0bffc17 	ldw	r2,-16(fp)
  812d58:	10800903 	ldbu	r2,36(r2)
  812d5c:	10800044 	addi	r2,r2,1
  812d60:	1007883a 	mov	r3,r2
  812d64:	e0bffc17 	ldw	r2,-16(fp)
  812d68:	10c00905 	stb	r3,36(r2)
  812d6c:	00005b06 	br	812edc <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
  812d70:	e0bff807 	ldb	r2,-32(fp)
  812d74:	108006d8 	cmpnei	r2,r2,27
  812d78:	1000031e 	bne	r2,zero,812d88 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
  812d7c:	e0bffc17 	ldw	r2,-16(fp)
  812d80:	10000905 	stb	zero,36(r2)
  812d84:	00005506 	br	812edc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
  812d88:	e0bff807 	ldb	r2,-32(fp)
  812d8c:	10800358 	cmpnei	r2,r2,13
  812d90:	1000031e 	bne	r2,zero,812da0 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
  812d94:	e0bffc17 	ldw	r2,-16(fp)
  812d98:	10000845 	stb	zero,33(r2)
  812d9c:	00004f06 	br	812edc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
  812da0:	e0bff807 	ldb	r2,-32(fp)
  812da4:	10800298 	cmpnei	r2,r2,10
  812da8:	1000101e 	bne	r2,zero,812dec <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
  812dac:	e0bffc17 	ldw	r2,-16(fp)
  812db0:	10000845 	stb	zero,33(r2)
      sp->y++;
  812db4:	e0bffc17 	ldw	r2,-16(fp)
  812db8:	10800883 	ldbu	r2,34(r2)
  812dbc:	10800044 	addi	r2,r2,1
  812dc0:	1007883a 	mov	r3,r2
  812dc4:	e0bffc17 	ldw	r2,-16(fp)
  812dc8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812dcc:	e0bffc17 	ldw	r2,-16(fp)
  812dd0:	10800883 	ldbu	r2,34(r2)
  812dd4:	10803fcc 	andi	r2,r2,255
  812dd8:	108000f0 	cmpltui	r2,r2,3
  812ddc:	10003f1e 	bne	r2,zero,812edc <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
  812de0:	e13ffc17 	ldw	r4,-16(fp)
  812de4:	08128480 	call	812848 <lcd_scroll_up>
  812de8:	00003c06 	br	812edc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
  812dec:	e0bff807 	ldb	r2,-32(fp)
  812df0:	10800218 	cmpnei	r2,r2,8
  812df4:	10000c1e 	bne	r2,zero,812e28 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
  812df8:	e0bffc17 	ldw	r2,-16(fp)
  812dfc:	10800843 	ldbu	r2,33(r2)
  812e00:	10803fcc 	andi	r2,r2,255
  812e04:	1005003a 	cmpeq	r2,r2,zero
  812e08:	1000341e 	bne	r2,zero,812edc <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
  812e0c:	e0bffc17 	ldw	r2,-16(fp)
  812e10:	10800843 	ldbu	r2,33(r2)
  812e14:	10bfffc4 	addi	r2,r2,-1
  812e18:	1007883a 	mov	r3,r2
  812e1c:	e0bffc17 	ldw	r2,-16(fp)
  812e20:	10c00845 	stb	r3,33(r2)
  812e24:	00002d06 	br	812edc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
  812e28:	e0bff807 	ldb	r2,-32(fp)
  812e2c:	1007883a 	mov	r3,r2
  812e30:	00802074 	movhi	r2,129
  812e34:	109a6d04 	addi	r2,r2,27060
  812e38:	10800017 	ldw	r2,0(r2)
  812e3c:	1885883a 	add	r2,r3,r2
  812e40:	10800003 	ldbu	r2,0(r2)
  812e44:	10803fcc 	andi	r2,r2,255
  812e48:	1080201c 	xori	r2,r2,128
  812e4c:	10bfe004 	addi	r2,r2,-128
  812e50:	108025cc 	andi	r2,r2,151
  812e54:	1005003a 	cmpeq	r2,r2,zero
  812e58:	1000201e 	bne	r2,zero,812edc <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812e5c:	e0bffc17 	ldw	r2,-16(fp)
  812e60:	10800883 	ldbu	r2,34(r2)
  812e64:	10803fcc 	andi	r2,r2,255
  812e68:	108000b0 	cmpltui	r2,r2,2
  812e6c:	1000021e 	bne	r2,zero,812e78 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
  812e70:	e13ffc17 	ldw	r4,-16(fp)
  812e74:	08128480 	call	812848 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812e78:	e0bffc17 	ldw	r2,-16(fp)
  812e7c:	10800843 	ldbu	r2,33(r2)
  812e80:	10803fcc 	andi	r2,r2,255
  812e84:	10801428 	cmpgeui	r2,r2,80
  812e88:	10000e1e 	bne	r2,zero,812ec4 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
  812e8c:	e0bffc17 	ldw	r2,-16(fp)
  812e90:	10800883 	ldbu	r2,34(r2)
  812e94:	11003fcc 	andi	r4,r2,255
  812e98:	e0bffc17 	ldw	r2,-16(fp)
  812e9c:	10800843 	ldbu	r2,33(r2)
  812ea0:	14403fcc 	andi	r17,r2,255
  812ea4:	e43ffc17 	ldw	r16,-16(fp)
  812ea8:	014018c4 	movi	r5,99
  812eac:	080fe8c0 	call	80fe8c <__mulsi3>
  812eb0:	1405883a 	add	r2,r2,r16
  812eb4:	1445883a 	add	r2,r2,r17
  812eb8:	10c01004 	addi	r3,r2,64
  812ebc:	e0bff803 	ldbu	r2,-32(fp)
  812ec0:	18800005 	stb	r2,0(r3)

      sp->x++;
  812ec4:	e0bffc17 	ldw	r2,-16(fp)
  812ec8:	10800843 	ldbu	r2,33(r2)
  812ecc:	10800044 	addi	r2,r2,1
  812ed0:	1007883a 	mov	r3,r2
  812ed4:	e0bffc17 	ldw	r2,-16(fp)
  812ed8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812edc:	e0bffd17 	ldw	r2,-12(fp)
  812ee0:	10800044 	addi	r2,r2,1
  812ee4:	e0bffd15 	stw	r2,-12(fp)
  812ee8:	e0fffd17 	ldw	r3,-12(fp)
  812eec:	e0bffb17 	ldw	r2,-20(fp)
  812ef0:	18bf5a36 	bltu	r3,r2,812c5c <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812ef4:	00800404 	movi	r2,16
  812ef8:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812efc:	e03ffa15 	stw	zero,-24(fp)
  812f00:	00003906 	br	812fe8 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812f04:	00801404 	movi	r2,80
  812f08:	e0bff615 	stw	r2,-40(fp)
  812f0c:	00001206 	br	812f58 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
  812f10:	e13ffa17 	ldw	r4,-24(fp)
  812f14:	e0bff617 	ldw	r2,-40(fp)
  812f18:	147fffc4 	addi	r17,r2,-1
  812f1c:	e43ffc17 	ldw	r16,-16(fp)
  812f20:	014018c4 	movi	r5,99
  812f24:	080fe8c0 	call	80fe8c <__mulsi3>
  812f28:	1405883a 	add	r2,r2,r16
  812f2c:	1445883a 	add	r2,r2,r17
  812f30:	10801004 	addi	r2,r2,64
  812f34:	10800003 	ldbu	r2,0(r2)
  812f38:	10803fcc 	andi	r2,r2,255
  812f3c:	1080201c 	xori	r2,r2,128
  812f40:	10bfe004 	addi	r2,r2,-128
  812f44:	10800818 	cmpnei	r2,r2,32
  812f48:	1000061e 	bne	r2,zero,812f64 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812f4c:	e0bff617 	ldw	r2,-40(fp)
  812f50:	10bfffc4 	addi	r2,r2,-1
  812f54:	e0bff615 	stw	r2,-40(fp)
  812f58:	e0bff617 	ldw	r2,-40(fp)
  812f5c:	10800048 	cmpgei	r2,r2,1
  812f60:	103feb1e 	bne	r2,zero,812f10 <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812f64:	e0bff617 	ldw	r2,-40(fp)
  812f68:	10800448 	cmpgei	r2,r2,17
  812f6c:	1000031e 	bne	r2,zero,812f7c <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
  812f70:	00800404 	movi	r2,16
  812f74:	e0bff615 	stw	r2,-40(fp)
  812f78:	00000306 	br	812f88 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
  812f7c:	e0bff617 	ldw	r2,-40(fp)
  812f80:	10800044 	addi	r2,r2,1
  812f84:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  812f88:	e13ffa17 	ldw	r4,-24(fp)
  812f8c:	e0bff617 	ldw	r2,-40(fp)
  812f90:	1023883a 	mov	r17,r2
  812f94:	e43ffc17 	ldw	r16,-16(fp)
  812f98:	014018c4 	movi	r5,99
  812f9c:	080fe8c0 	call	80fe8c <__mulsi3>
  812fa0:	1405883a 	add	r2,r2,r16
  812fa4:	10802404 	addi	r2,r2,144
  812fa8:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
  812fac:	e0fff917 	ldw	r3,-28(fp)
  812fb0:	e0bff617 	ldw	r2,-40(fp)
  812fb4:	1880020e 	bge	r3,r2,812fc0 <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
  812fb8:	e0bff617 	ldw	r2,-40(fp)
  812fbc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812fc0:	e13ffa17 	ldw	r4,-24(fp)
  812fc4:	e43ffc17 	ldw	r16,-16(fp)
  812fc8:	014018c4 	movi	r5,99
  812fcc:	080fe8c0 	call	80fe8c <__mulsi3>
  812fd0:	1405883a 	add	r2,r2,r16
  812fd4:	10802404 	addi	r2,r2,144
  812fd8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812fdc:	e0bffa17 	ldw	r2,-24(fp)
  812fe0:	10800044 	addi	r2,r2,1
  812fe4:	e0bffa15 	stw	r2,-24(fp)
  812fe8:	e0bffa17 	ldw	r2,-24(fp)
  812fec:	10800090 	cmplti	r2,r2,2
  812ff0:	103fc41e 	bne	r2,zero,812f04 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812ff4:	e0bff917 	ldw	r2,-28(fp)
  812ff8:	10800448 	cmpgei	r2,r2,17
  812ffc:	1000031e 	bne	r2,zero,81300c <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
  813000:	e0bffc17 	ldw	r2,-16(fp)
  813004:	10000985 	stb	zero,38(r2)
  813008:	00003106 	br	8130d0 <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
  81300c:	e0bff917 	ldw	r2,-28(fp)
  813010:	1085883a 	add	r2,r2,r2
  813014:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  813018:	e0bff917 	ldw	r2,-28(fp)
  81301c:	1007883a 	mov	r3,r2
  813020:	e0bffc17 	ldw	r2,-16(fp)
  813024:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813028:	e03ffa15 	stw	zero,-24(fp)
  81302c:	00002506 	br	8130c4 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  813030:	e13ffa17 	ldw	r4,-24(fp)
  813034:	e43ffc17 	ldw	r16,-16(fp)
  813038:	014018c4 	movi	r5,99
  81303c:	080fe8c0 	call	80fe8c <__mulsi3>
  813040:	1405883a 	add	r2,r2,r16
  813044:	10802404 	addi	r2,r2,144
  813048:	10800043 	ldbu	r2,1(r2)
  81304c:	10803fcc 	andi	r2,r2,255
  813050:	1080201c 	xori	r2,r2,128
  813054:	10bfe004 	addi	r2,r2,-128
  813058:	10800450 	cmplti	r2,r2,17
  81305c:	1000161e 	bne	r2,zero,8130b8 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  813060:	e4bffa17 	ldw	r18,-24(fp)
  813064:	e13ffa17 	ldw	r4,-24(fp)
  813068:	e43ffc17 	ldw	r16,-16(fp)
  81306c:	014018c4 	movi	r5,99
  813070:	080fe8c0 	call	80fe8c <__mulsi3>
  813074:	1405883a 	add	r2,r2,r16
  813078:	10802404 	addi	r2,r2,144
  81307c:	10800043 	ldbu	r2,1(r2)
  813080:	10803fcc 	andi	r2,r2,255
  813084:	1080201c 	xori	r2,r2,128
  813088:	10bfe004 	addi	r2,r2,-128
  81308c:	1008923a 	slli	r4,r2,8
  813090:	e17ff917 	ldw	r5,-28(fp)
  813094:	080fdbc0 	call	80fdbc <__divsi3>
  813098:	1023883a 	mov	r17,r2
  81309c:	e43ffc17 	ldw	r16,-16(fp)
  8130a0:	9009883a 	mov	r4,r18
  8130a4:	014018c4 	movi	r5,99
  8130a8:	080fe8c0 	call	80fe8c <__mulsi3>
  8130ac:	1405883a 	add	r2,r2,r16
  8130b0:	10802404 	addi	r2,r2,144
  8130b4:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8130b8:	e0bffa17 	ldw	r2,-24(fp)
  8130bc:	10800044 	addi	r2,r2,1
  8130c0:	e0bffa15 	stw	r2,-24(fp)
  8130c4:	e0bffa17 	ldw	r2,-24(fp)
  8130c8:	10800090 	cmplti	r2,r2,2
  8130cc:	103fd81e 	bne	r2,zero,813030 <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8130d0:	e0bffc17 	ldw	r2,-16(fp)
  8130d4:	10800943 	ldbu	r2,37(r2)
  8130d8:	10803fcc 	andi	r2,r2,255
  8130dc:	1080201c 	xori	r2,r2,128
  8130e0:	10bfe004 	addi	r2,r2,-128
  8130e4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  8130e8:	e13ffc17 	ldw	r4,-16(fp)
  8130ec:	08126340 	call	812634 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8130f0:	e0bffc17 	ldw	r2,-16(fp)
  8130f4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8130f8:	e0bffc17 	ldw	r2,-16(fp)
  8130fc:	10800943 	ldbu	r2,37(r2)
  813100:	10c03fcc 	andi	r3,r2,255
  813104:	18c0201c 	xori	r3,r3,128
  813108:	18ffe004 	addi	r3,r3,-128
  81310c:	e0bff517 	ldw	r2,-44(fp)
  813110:	18800426 	beq	r3,r2,813124 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  813114:	e0fffc17 	ldw	r3,-16(fp)
  813118:	00800044 	movi	r2,1
  81311c:	188009c5 	stb	r2,39(r3)
  }
  813120:	003feb06 	br	8130d0 <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  813124:	e0bffe17 	ldw	r2,-8(fp)
}
  813128:	e037883a 	mov	sp,fp
  81312c:	dfc00417 	ldw	ra,16(sp)
  813130:	df000317 	ldw	fp,12(sp)
  813134:	dc800217 	ldw	r18,8(sp)
  813138:	dc400117 	ldw	r17,4(sp)
  81313c:	dc000017 	ldw	r16,0(sp)
  813140:	dec00504 	addi	sp,sp,20
  813144:	f800283a 	ret

00813148 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  813148:	defffc04 	addi	sp,sp,-16
  81314c:	dfc00315 	stw	ra,12(sp)
  813150:	df000215 	stw	fp,8(sp)
  813154:	df000204 	addi	fp,sp,8
  813158:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  81315c:	e0bfff17 	ldw	r2,-4(fp)
  813160:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  813164:	e0bffe17 	ldw	r2,-8(fp)
  813168:	10800943 	ldbu	r2,37(r2)
  81316c:	10803fcc 	andi	r2,r2,255
  813170:	1080201c 	xori	r2,r2,128
  813174:	10bfe004 	addi	r2,r2,-128
  813178:	10c00044 	addi	r3,r2,1
  81317c:	e0bffe17 	ldw	r2,-8(fp)
  813180:	10800983 	ldbu	r2,38(r2)
  813184:	10803fcc 	andi	r2,r2,255
  813188:	1080201c 	xori	r2,r2,128
  81318c:	10bfe004 	addi	r2,r2,-128
  813190:	18800316 	blt	r3,r2,8131a0 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  813194:	e0bffe17 	ldw	r2,-8(fp)
  813198:	10000945 	stb	zero,37(r2)
  81319c:	00000606 	br	8131b8 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8131a0:	e0bffe17 	ldw	r2,-8(fp)
  8131a4:	10800943 	ldbu	r2,37(r2)
  8131a8:	10800044 	addi	r2,r2,1
  8131ac:	1007883a 	mov	r3,r2
  8131b0:	e0bffe17 	ldw	r2,-8(fp)
  8131b4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8131b8:	e0bffe17 	ldw	r2,-8(fp)
  8131bc:	10800983 	ldbu	r2,38(r2)
  8131c0:	10803fcc 	andi	r2,r2,255
  8131c4:	1080201c 	xori	r2,r2,128
  8131c8:	10bfe004 	addi	r2,r2,-128
  8131cc:	10800050 	cmplti	r2,r2,1
  8131d0:	1000091e 	bne	r2,zero,8131f8 <alt_lcd_16207_timeout+0xb0>
  8131d4:	e0bffe17 	ldw	r2,-8(fp)
  8131d8:	108009c3 	ldbu	r2,39(r2)
  8131dc:	10803fcc 	andi	r2,r2,255
  8131e0:	1080201c 	xori	r2,r2,128
  8131e4:	10bfe004 	addi	r2,r2,-128
  8131e8:	1004c03a 	cmpne	r2,r2,zero
  8131ec:	1000021e 	bne	r2,zero,8131f8 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  8131f0:	e13ffe17 	ldw	r4,-8(fp)
  8131f4:	08126340 	call	812634 <lcd_repaint_screen>

  return sp->period;
  8131f8:	e0bffe17 	ldw	r2,-8(fp)
  8131fc:	10800717 	ldw	r2,28(r2)
}
  813200:	e037883a 	mov	sp,fp
  813204:	dfc00117 	ldw	ra,4(sp)
  813208:	df000017 	ldw	fp,0(sp)
  81320c:	dec00204 	addi	sp,sp,8
  813210:	f800283a 	ret

00813214 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  813214:	defffc04 	addi	sp,sp,-16
  813218:	dfc00315 	stw	ra,12(sp)
  81321c:	df000215 	stw	fp,8(sp)
  813220:	df000204 	addi	fp,sp,8
  813224:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  813228:	e0bfff17 	ldw	r2,-4(fp)
  81322c:	10800017 	ldw	r2,0(r2)
  813230:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  813234:	e0bfff17 	ldw	r2,-4(fp)
  813238:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  81323c:	010ea604 	movi	r4,15000
  813240:	08116900 	call	811690 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813244:	e0bffe17 	ldw	r2,-8(fp)
  813248:	1007883a 	mov	r3,r2
  81324c:	00800c04 	movi	r2,48
  813250:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  813254:	01040104 	movi	r4,4100
  813258:	08116900 	call	811690 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81325c:	e0bffe17 	ldw	r2,-8(fp)
  813260:	1007883a 	mov	r3,r2
  813264:	00800c04 	movi	r2,48
  813268:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  81326c:	0100fa04 	movi	r4,1000
  813270:	08116900 	call	811690 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813274:	e0bffe17 	ldw	r2,-8(fp)
  813278:	1007883a 	mov	r3,r2
  81327c:	00800c04 	movi	r2,48
  813280:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  813284:	e13fff17 	ldw	r4,-4(fp)
  813288:	01400e04 	movi	r5,56
  81328c:	08123d00 	call	8123d0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  813290:	e13fff17 	ldw	r4,-4(fp)
  813294:	01400204 	movi	r5,8
  813298:	08123d00 	call	8123d0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81329c:	e13fff17 	ldw	r4,-4(fp)
  8132a0:	081255c0 	call	81255c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8132a4:	e13fff17 	ldw	r4,-4(fp)
  8132a8:	01400184 	movi	r5,6
  8132ac:	08123d00 	call	8123d0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8132b0:	e13fff17 	ldw	r4,-4(fp)
  8132b4:	01400304 	movi	r5,12
  8132b8:	08123d00 	call	8123d0 <lcd_write_command>

  sp->esccount = -1;
  8132bc:	e0ffff17 	ldw	r3,-4(fp)
  8132c0:	00bfffc4 	movi	r2,-1
  8132c4:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8132c8:	e0bfff17 	ldw	r2,-4(fp)
  8132cc:	11000a04 	addi	r4,r2,40
  8132d0:	000b883a 	mov	r5,zero
  8132d4:	01800204 	movi	r6,8
  8132d8:	080273c0 	call	80273c <memset>

  sp->scrollpos = 0;
  8132dc:	e0bfff17 	ldw	r2,-4(fp)
  8132e0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8132e4:	e0bfff17 	ldw	r2,-4(fp)
  8132e8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8132ec:	e0bfff17 	ldw	r2,-4(fp)
  8132f0:	100009c5 	stb	zero,39(r2)
  8132f4:	008020b4 	movhi	r2,130
  8132f8:	10a17604 	addi	r2,r2,-31272
  8132fc:	10800017 	ldw	r2,0(r2)
  813300:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  813304:	01400284 	movi	r5,10
  813308:	080fe7c0 	call	80fe7c <__udivsi3>
  81330c:	1007883a 	mov	r3,r2
  813310:	e0bfff17 	ldw	r2,-4(fp)
  813314:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  813318:	e0bfff17 	ldw	r2,-4(fp)
  81331c:	11000104 	addi	r4,r2,4
  813320:	e0bfff17 	ldw	r2,-4(fp)
  813324:	10800717 	ldw	r2,28(r2)
  813328:	100b883a 	mov	r5,r2
  81332c:	01802074 	movhi	r6,129
  813330:	318c5204 	addi	r6,r6,12616
  813334:	e1ffff17 	ldw	r7,-4(fp)
  813338:	08134a80 	call	8134a8 <alt_alarm_start>
}
  81333c:	e037883a 	mov	sp,fp
  813340:	dfc00117 	ldw	ra,4(sp)
  813344:	df000017 	ldw	fp,0(sp)
  813348:	dec00204 	addi	sp,sp,8
  81334c:	f800283a 	ret

00813350 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813350:	defffa04 	addi	sp,sp,-24
  813354:	dfc00515 	stw	ra,20(sp)
  813358:	df000415 	stw	fp,16(sp)
  81335c:	df000404 	addi	fp,sp,16
  813360:	e13ffd15 	stw	r4,-12(fp)
  813364:	e17ffe15 	stw	r5,-8(fp)
  813368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  81336c:	e0bffd17 	ldw	r2,-12(fp)
  813370:	10800017 	ldw	r2,0(r2)
  813374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  813378:	e0bffc17 	ldw	r2,-16(fp)
  81337c:	11000a04 	addi	r4,r2,40
  813380:	e0bffd17 	ldw	r2,-12(fp)
  813384:	11c00217 	ldw	r7,8(r2)
  813388:	e17ffe17 	ldw	r5,-8(fp)
  81338c:	e1bfff17 	ldw	r6,-4(fp)
  813390:	0812c0c0 	call	812c0c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  813394:	e037883a 	mov	sp,fp
  813398:	dfc00117 	ldw	ra,4(sp)
  81339c:	df000017 	ldw	fp,0(sp)
  8133a0:	dec00204 	addi	sp,sp,8
  8133a4:	f800283a 	ret

008133a8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8133a8:	defffa04 	addi	sp,sp,-24
  8133ac:	dfc00515 	stw	ra,20(sp)
  8133b0:	df000415 	stw	fp,16(sp)
  8133b4:	df000404 	addi	fp,sp,16
  8133b8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8133bc:	e0bfff17 	ldw	r2,-4(fp)
  8133c0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8133c4:	e0bfff17 	ldw	r2,-4(fp)
  8133c8:	10800104 	addi	r2,r2,4
  8133cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133d0:	0005303a 	rdctl	r2,status
  8133d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133d8:	e0fffd17 	ldw	r3,-12(fp)
  8133dc:	00bfff84 	movi	r2,-2
  8133e0:	1884703a 	and	r2,r3,r2
  8133e4:	1001703a 	wrctl	status,r2
  
  return context;
  8133e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8133ec:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8133f0:	0813dec0 	call	813dec <alt_tick>
  8133f4:	e0bffe17 	ldw	r2,-8(fp)
  8133f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133fc:	e0bffc17 	ldw	r2,-16(fp)
  813400:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813404:	e037883a 	mov	sp,fp
  813408:	dfc00117 	ldw	ra,4(sp)
  81340c:	df000017 	ldw	fp,0(sp)
  813410:	dec00204 	addi	sp,sp,8
  813414:	f800283a 	ret

00813418 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813418:	defff804 	addi	sp,sp,-32
  81341c:	dfc00715 	stw	ra,28(sp)
  813420:	df000615 	stw	fp,24(sp)
  813424:	df000604 	addi	fp,sp,24
  813428:	e13ffc15 	stw	r4,-16(fp)
  81342c:	e17ffd15 	stw	r5,-12(fp)
  813430:	e1bffe15 	stw	r6,-8(fp)
  813434:	e1ffff15 	stw	r7,-4(fp)
  813438:	e0bfff17 	ldw	r2,-4(fp)
  81343c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813440:	008020b4 	movhi	r2,130
  813444:	10a17604 	addi	r2,r2,-31272
  813448:	10800017 	ldw	r2,0(r2)
  81344c:	1004c03a 	cmpne	r2,r2,zero
  813450:	1000041e 	bne	r2,zero,813464 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813454:	00c020b4 	movhi	r3,130
  813458:	18e17604 	addi	r3,r3,-31272
  81345c:	e0bffb17 	ldw	r2,-20(fp)
  813460:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813464:	e0bffc17 	ldw	r2,-16(fp)
  813468:	10800104 	addi	r2,r2,4
  81346c:	1007883a 	mov	r3,r2
  813470:	008001c4 	movi	r2,7
  813474:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  813478:	d8000015 	stw	zero,0(sp)
  81347c:	e13ffd17 	ldw	r4,-12(fp)
  813480:	e17ffe17 	ldw	r5,-8(fp)
  813484:	01802074 	movhi	r6,129
  813488:	318cea04 	addi	r6,r6,13224
  81348c:	e1fffc17 	ldw	r7,-16(fp)
  813490:	0810a180 	call	810a18 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  813494:	e037883a 	mov	sp,fp
  813498:	dfc00117 	ldw	ra,4(sp)
  81349c:	df000017 	ldw	fp,0(sp)
  8134a0:	dec00204 	addi	sp,sp,8
  8134a4:	f800283a 	ret

008134a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8134a8:	defff404 	addi	sp,sp,-48
  8134ac:	df000b15 	stw	fp,44(sp)
  8134b0:	df000b04 	addi	fp,sp,44
  8134b4:	e13ffb15 	stw	r4,-20(fp)
  8134b8:	e17ffc15 	stw	r5,-16(fp)
  8134bc:	e1bffd15 	stw	r6,-12(fp)
  8134c0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8134c4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8134c8:	008020b4 	movhi	r2,130
  8134cc:	10a17604 	addi	r2,r2,-31272
  8134d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8134d4:	1005003a 	cmpeq	r2,r2,zero
  8134d8:	1000411e 	bne	r2,zero,8135e0 <alt_alarm_start+0x138>
  {
    if (alarm)
  8134dc:	e0bffb17 	ldw	r2,-20(fp)
  8134e0:	1005003a 	cmpeq	r2,r2,zero
  8134e4:	10003b1e 	bne	r2,zero,8135d4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8134e8:	e0fffb17 	ldw	r3,-20(fp)
  8134ec:	e0bffd17 	ldw	r2,-12(fp)
  8134f0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8134f4:	e0fffb17 	ldw	r3,-20(fp)
  8134f8:	e0bffe17 	ldw	r2,-8(fp)
  8134fc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813500:	0005303a 	rdctl	r2,status
  813504:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813508:	e0fff817 	ldw	r3,-32(fp)
  81350c:	00bfff84 	movi	r2,-2
  813510:	1884703a 	and	r2,r3,r2
  813514:	1001703a 	wrctl	status,r2
  
  return context;
  813518:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81351c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813520:	008020b4 	movhi	r2,130
  813524:	10a17704 	addi	r2,r2,-31268
  813528:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81352c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  813530:	e0fffc17 	ldw	r3,-16(fp)
  813534:	e0bff917 	ldw	r2,-28(fp)
  813538:	1885883a 	add	r2,r3,r2
  81353c:	10c00044 	addi	r3,r2,1
  813540:	e0bffb17 	ldw	r2,-20(fp)
  813544:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  813548:	e0bffb17 	ldw	r2,-20(fp)
  81354c:	10c00217 	ldw	r3,8(r2)
  813550:	e0bff917 	ldw	r2,-28(fp)
  813554:	1880042e 	bgeu	r3,r2,813568 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  813558:	e0fffb17 	ldw	r3,-20(fp)
  81355c:	00800044 	movi	r2,1
  813560:	18800405 	stb	r2,16(r3)
  813564:	00000206 	br	813570 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  813568:	e0bffb17 	ldw	r2,-20(fp)
  81356c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  813570:	e0fffb17 	ldw	r3,-20(fp)
  813574:	00802074 	movhi	r2,129
  813578:	109a7904 	addi	r2,r2,27108
  81357c:	e0bff615 	stw	r2,-40(fp)
  813580:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813584:	e0fff717 	ldw	r3,-36(fp)
  813588:	e0bff617 	ldw	r2,-40(fp)
  81358c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813590:	e0bff617 	ldw	r2,-40(fp)
  813594:	10c00017 	ldw	r3,0(r2)
  813598:	e0bff717 	ldw	r2,-36(fp)
  81359c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8135a0:	e0bff617 	ldw	r2,-40(fp)
  8135a4:	10c00017 	ldw	r3,0(r2)
  8135a8:	e0bff717 	ldw	r2,-36(fp)
  8135ac:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8135b0:	e0fff617 	ldw	r3,-40(fp)
  8135b4:	e0bff717 	ldw	r2,-36(fp)
  8135b8:	18800015 	stw	r2,0(r3)
  8135bc:	e0bffa17 	ldw	r2,-24(fp)
  8135c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8135c4:	e0bff517 	ldw	r2,-44(fp)
  8135c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8135cc:	e03fff15 	stw	zero,-4(fp)
  8135d0:	00000506 	br	8135e8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8135d4:	00bffa84 	movi	r2,-22
  8135d8:	e0bfff15 	stw	r2,-4(fp)
  8135dc:	00000206 	br	8135e8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8135e0:	00bfde84 	movi	r2,-134
  8135e4:	e0bfff15 	stw	r2,-4(fp)
  8135e8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8135ec:	e037883a 	mov	sp,fp
  8135f0:	df000017 	ldw	fp,0(sp)
  8135f4:	dec00104 	addi	sp,sp,4
  8135f8:	f800283a 	ret

008135fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8135fc:	defffa04 	addi	sp,sp,-24
  813600:	dfc00515 	stw	ra,20(sp)
  813604:	df000415 	stw	fp,16(sp)
  813608:	df000404 	addi	fp,sp,16
  81360c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  813610:	008000c4 	movi	r2,3
  813614:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  813618:	e13ffc17 	ldw	r4,-16(fp)
  81361c:	014003f4 	movhi	r5,15
  813620:	29509004 	addi	r5,r5,16960
  813624:	080fe8c0 	call	80fe8c <__mulsi3>
  813628:	100b883a 	mov	r5,r2
  81362c:	0100bef4 	movhi	r4,763
  813630:	213c2004 	addi	r4,r4,-3968
  813634:	080fe7c0 	call	80fe7c <__udivsi3>
  813638:	100b883a 	mov	r5,r2
  81363c:	01200034 	movhi	r4,32768
  813640:	213fffc4 	addi	r4,r4,-1
  813644:	080fe7c0 	call	80fe7c <__udivsi3>
  813648:	100b883a 	mov	r5,r2
  81364c:	e13fff17 	ldw	r4,-4(fp)
  813650:	080fe7c0 	call	80fe7c <__udivsi3>
  813654:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  813658:	e0bffd17 	ldw	r2,-12(fp)
  81365c:	1005003a 	cmpeq	r2,r2,zero
  813660:	10002a1e 	bne	r2,zero,81370c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  813664:	e03ffe15 	stw	zero,-8(fp)
  813668:	00001706 	br	8136c8 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81366c:	00a00034 	movhi	r2,32768
  813670:	10bfffc4 	addi	r2,r2,-1
  813674:	10bfffc4 	addi	r2,r2,-1
  813678:	103ffe1e 	bne	r2,zero,813674 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81367c:	e13ffc17 	ldw	r4,-16(fp)
  813680:	014003f4 	movhi	r5,15
  813684:	29509004 	addi	r5,r5,16960
  813688:	080fe8c0 	call	80fe8c <__mulsi3>
  81368c:	100b883a 	mov	r5,r2
  813690:	0100bef4 	movhi	r4,763
  813694:	213c2004 	addi	r4,r4,-3968
  813698:	080fe7c0 	call	80fe7c <__udivsi3>
  81369c:	100b883a 	mov	r5,r2
  8136a0:	01200034 	movhi	r4,32768
  8136a4:	213fffc4 	addi	r4,r4,-1
  8136a8:	080fe7c0 	call	80fe7c <__udivsi3>
  8136ac:	1007883a 	mov	r3,r2
  8136b0:	e0bfff17 	ldw	r2,-4(fp)
  8136b4:	10c5c83a 	sub	r2,r2,r3
  8136b8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8136bc:	e0bffe17 	ldw	r2,-8(fp)
  8136c0:	10800044 	addi	r2,r2,1
  8136c4:	e0bffe15 	stw	r2,-8(fp)
  8136c8:	e0fffe17 	ldw	r3,-8(fp)
  8136cc:	e0bffd17 	ldw	r2,-12(fp)
  8136d0:	18bfe616 	blt	r3,r2,81366c <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8136d4:	e13ffc17 	ldw	r4,-16(fp)
  8136d8:	014003f4 	movhi	r5,15
  8136dc:	29509004 	addi	r5,r5,16960
  8136e0:	080fe8c0 	call	80fe8c <__mulsi3>
  8136e4:	100b883a 	mov	r5,r2
  8136e8:	0100bef4 	movhi	r4,763
  8136ec:	213c2004 	addi	r4,r4,-3968
  8136f0:	080fe7c0 	call	80fe7c <__udivsi3>
  8136f4:	1009883a 	mov	r4,r2
  8136f8:	e17fff17 	ldw	r5,-4(fp)
  8136fc:	080fe8c0 	call	80fe8c <__mulsi3>
  813700:	10bfffc4 	addi	r2,r2,-1
  813704:	103ffe1e 	bne	r2,zero,813700 <alt_busy_sleep+0x104>
  813708:	00000d06 	br	813740 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81370c:	e13ffc17 	ldw	r4,-16(fp)
  813710:	014003f4 	movhi	r5,15
  813714:	29509004 	addi	r5,r5,16960
  813718:	080fe8c0 	call	80fe8c <__mulsi3>
  81371c:	100b883a 	mov	r5,r2
  813720:	0100bef4 	movhi	r4,763
  813724:	213c2004 	addi	r4,r4,-3968
  813728:	080fe7c0 	call	80fe7c <__udivsi3>
  81372c:	1009883a 	mov	r4,r2
  813730:	e17fff17 	ldw	r5,-4(fp)
  813734:	080fe8c0 	call	80fe8c <__mulsi3>
  813738:	10bfffc4 	addi	r2,r2,-1
  81373c:	00bffe16 	blt	zero,r2,813738 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  813740:	0005883a 	mov	r2,zero
}
  813744:	e037883a 	mov	sp,fp
  813748:	dfc00117 	ldw	ra,4(sp)
  81374c:	df000017 	ldw	fp,0(sp)
  813750:	dec00204 	addi	sp,sp,8
  813754:	f800283a 	ret

00813758 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813758:	deffff04 	addi	sp,sp,-4
  81375c:	df000015 	stw	fp,0(sp)
  813760:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813764:	e037883a 	mov	sp,fp
  813768:	df000017 	ldw	fp,0(sp)
  81376c:	dec00104 	addi	sp,sp,4
  813770:	f800283a 	ret

00813774 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813774:	defff904 	addi	sp,sp,-28
  813778:	dfc00615 	stw	ra,24(sp)
  81377c:	df000515 	stw	fp,20(sp)
  813780:	df000504 	addi	fp,sp,20
  813784:	e13ffd15 	stw	r4,-12(fp)
  813788:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81378c:	e0bffd17 	ldw	r2,-12(fp)
  813790:	1005003a 	cmpeq	r2,r2,zero
  813794:	1000041e 	bne	r2,zero,8137a8 <alt_dev_llist_insert+0x34>
  813798:	e0bffd17 	ldw	r2,-12(fp)
  81379c:	10800217 	ldw	r2,8(r2)
  8137a0:	1004c03a 	cmpne	r2,r2,zero
  8137a4:	1000071e 	bne	r2,zero,8137c4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  8137a8:	08138280 	call	813828 <alt_get_errno>
  8137ac:	1007883a 	mov	r3,r2
  8137b0:	00800584 	movi	r2,22
  8137b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8137b8:	00bffa84 	movi	r2,-22
  8137bc:	e0bfff15 	stw	r2,-4(fp)
  8137c0:	00001306 	br	813810 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8137c4:	e0fffd17 	ldw	r3,-12(fp)
  8137c8:	e0bffe17 	ldw	r2,-8(fp)
  8137cc:	e0bffb15 	stw	r2,-20(fp)
  8137d0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8137d4:	e0fffc17 	ldw	r3,-16(fp)
  8137d8:	e0bffb17 	ldw	r2,-20(fp)
  8137dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8137e0:	e0bffb17 	ldw	r2,-20(fp)
  8137e4:	10c00017 	ldw	r3,0(r2)
  8137e8:	e0bffc17 	ldw	r2,-16(fp)
  8137ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8137f0:	e0bffb17 	ldw	r2,-20(fp)
  8137f4:	10c00017 	ldw	r3,0(r2)
  8137f8:	e0bffc17 	ldw	r2,-16(fp)
  8137fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813800:	e0fffb17 	ldw	r3,-20(fp)
  813804:	e0bffc17 	ldw	r2,-16(fp)
  813808:	18800015 	stw	r2,0(r3)

  return 0;  
  81380c:	e03fff15 	stw	zero,-4(fp)
  813810:	e0bfff17 	ldw	r2,-4(fp)
}
  813814:	e037883a 	mov	sp,fp
  813818:	dfc00117 	ldw	ra,4(sp)
  81381c:	df000017 	ldw	fp,0(sp)
  813820:	dec00204 	addi	sp,sp,8
  813824:	f800283a 	ret

00813828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813828:	defffd04 	addi	sp,sp,-12
  81382c:	dfc00215 	stw	ra,8(sp)
  813830:	df000115 	stw	fp,4(sp)
  813834:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813838:	00802074 	movhi	r2,129
  81383c:	109a7504 	addi	r2,r2,27092
  813840:	10800017 	ldw	r2,0(r2)
  813844:	1005003a 	cmpeq	r2,r2,zero
  813848:	1000061e 	bne	r2,zero,813864 <alt_get_errno+0x3c>
  81384c:	00802074 	movhi	r2,129
  813850:	109a7504 	addi	r2,r2,27092
  813854:	10800017 	ldw	r2,0(r2)
  813858:	103ee83a 	callr	r2
  81385c:	e0bfff15 	stw	r2,-4(fp)
  813860:	00000306 	br	813870 <alt_get_errno+0x48>
  813864:	008020b4 	movhi	r2,130
  813868:	10a16b04 	addi	r2,r2,-31316
  81386c:	e0bfff15 	stw	r2,-4(fp)
  813870:	e0bfff17 	ldw	r2,-4(fp)
}
  813874:	e037883a 	mov	sp,fp
  813878:	dfc00117 	ldw	ra,4(sp)
  81387c:	df000017 	ldw	fp,0(sp)
  813880:	dec00204 	addi	sp,sp,8
  813884:	f800283a 	ret

00813888 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813888:	defffd04 	addi	sp,sp,-12
  81388c:	dfc00215 	stw	ra,8(sp)
  813890:	df000115 	stw	fp,4(sp)
  813894:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813898:	00bfff04 	movi	r2,-4
  81389c:	00c02074 	movhi	r3,129
  8138a0:	18d10804 	addi	r3,r3,17440
  8138a4:	1885883a 	add	r2,r3,r2
  8138a8:	e0bfff15 	stw	r2,-4(fp)
  8138ac:	00000606 	br	8138c8 <_do_ctors+0x40>
        (*ctor) (); 
  8138b0:	e0bfff17 	ldw	r2,-4(fp)
  8138b4:	10800017 	ldw	r2,0(r2)
  8138b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8138bc:	e0bfff17 	ldw	r2,-4(fp)
  8138c0:	10bfff04 	addi	r2,r2,-4
  8138c4:	e0bfff15 	stw	r2,-4(fp)
  8138c8:	e0ffff17 	ldw	r3,-4(fp)
  8138cc:	00802074 	movhi	r2,129
  8138d0:	10910704 	addi	r2,r2,17436
  8138d4:	18bff62e 	bgeu	r3,r2,8138b0 <_do_ctors+0x28>
        (*ctor) (); 
}
  8138d8:	e037883a 	mov	sp,fp
  8138dc:	dfc00117 	ldw	ra,4(sp)
  8138e0:	df000017 	ldw	fp,0(sp)
  8138e4:	dec00204 	addi	sp,sp,8
  8138e8:	f800283a 	ret

008138ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8138ec:	defffd04 	addi	sp,sp,-12
  8138f0:	dfc00215 	stw	ra,8(sp)
  8138f4:	df000115 	stw	fp,4(sp)
  8138f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8138fc:	00bfff04 	movi	r2,-4
  813900:	00c02074 	movhi	r3,129
  813904:	18d10804 	addi	r3,r3,17440
  813908:	1885883a 	add	r2,r3,r2
  81390c:	e0bfff15 	stw	r2,-4(fp)
  813910:	00000606 	br	81392c <_do_dtors+0x40>
        (*dtor) (); 
  813914:	e0bfff17 	ldw	r2,-4(fp)
  813918:	10800017 	ldw	r2,0(r2)
  81391c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813920:	e0bfff17 	ldw	r2,-4(fp)
  813924:	10bfff04 	addi	r2,r2,-4
  813928:	e0bfff15 	stw	r2,-4(fp)
  81392c:	e0ffff17 	ldw	r3,-4(fp)
  813930:	00802074 	movhi	r2,129
  813934:	10910804 	addi	r2,r2,17440
  813938:	18bff62e 	bgeu	r3,r2,813914 <_do_dtors+0x28>
        (*dtor) (); 
}
  81393c:	e037883a 	mov	sp,fp
  813940:	dfc00117 	ldw	ra,4(sp)
  813944:	df000017 	ldw	fp,0(sp)
  813948:	dec00204 	addi	sp,sp,8
  81394c:	f800283a 	ret

00813950 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813950:	defff904 	addi	sp,sp,-28
  813954:	dfc00615 	stw	ra,24(sp)
  813958:	df000515 	stw	fp,20(sp)
  81395c:	df000504 	addi	fp,sp,20
  813960:	e13ffd15 	stw	r4,-12(fp)
  813964:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813968:	e0bffe17 	ldw	r2,-8(fp)
  81396c:	10800017 	ldw	r2,0(r2)
  813970:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813974:	e13ffd17 	ldw	r4,-12(fp)
  813978:	0802eac0 	call	802eac <strlen>
  81397c:	10800044 	addi	r2,r2,1
  813980:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813984:	00000d06 	br	8139bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813988:	e0bffc17 	ldw	r2,-16(fp)
  81398c:	11000217 	ldw	r4,8(r2)
  813990:	e1bffb17 	ldw	r6,-20(fp)
  813994:	e17ffd17 	ldw	r5,-12(fp)
  813998:	0813ff40 	call	813ff4 <memcmp>
  81399c:	1004c03a 	cmpne	r2,r2,zero
  8139a0:	1000031e 	bne	r2,zero,8139b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8139a4:	e0bffc17 	ldw	r2,-16(fp)
  8139a8:	e0bfff15 	stw	r2,-4(fp)
  8139ac:	00000706 	br	8139cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8139b0:	e0bffc17 	ldw	r2,-16(fp)
  8139b4:	10800017 	ldw	r2,0(r2)
  8139b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8139bc:	e0fffe17 	ldw	r3,-8(fp)
  8139c0:	e0bffc17 	ldw	r2,-16(fp)
  8139c4:	10fff01e 	bne	r2,r3,813988 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8139c8:	e03fff15 	stw	zero,-4(fp)
  8139cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8139d0:	e037883a 	mov	sp,fp
  8139d4:	dfc00117 	ldw	ra,4(sp)
  8139d8:	df000017 	ldw	fp,0(sp)
  8139dc:	dec00204 	addi	sp,sp,8
  8139e0:	f800283a 	ret

008139e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8139e4:	defffa04 	addi	sp,sp,-24
  8139e8:	dfc00515 	stw	ra,20(sp)
  8139ec:	df000415 	stw	fp,16(sp)
  8139f0:	df000404 	addi	fp,sp,16
  8139f4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8139f8:	00802074 	movhi	r2,129
  8139fc:	109a7004 	addi	r2,r2,27072
  813a00:	10800017 	ldw	r2,0(r2)
  813a04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813a08:	00003306 	br	813ad8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813a0c:	e0bffd17 	ldw	r2,-12(fp)
  813a10:	11000217 	ldw	r4,8(r2)
  813a14:	0802eac0 	call	802eac <strlen>
  813a18:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813a1c:	e0bffd17 	ldw	r2,-12(fp)
  813a20:	10c00217 	ldw	r3,8(r2)
  813a24:	e0bffc17 	ldw	r2,-16(fp)
  813a28:	1885883a 	add	r2,r3,r2
  813a2c:	10bfffc4 	addi	r2,r2,-1
  813a30:	10800003 	ldbu	r2,0(r2)
  813a34:	10803fcc 	andi	r2,r2,255
  813a38:	1080201c 	xori	r2,r2,128
  813a3c:	10bfe004 	addi	r2,r2,-128
  813a40:	10800bd8 	cmpnei	r2,r2,47
  813a44:	1000031e 	bne	r2,zero,813a54 <alt_find_file+0x70>
    {
      len -= 1;
  813a48:	e0bffc17 	ldw	r2,-16(fp)
  813a4c:	10bfffc4 	addi	r2,r2,-1
  813a50:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813a54:	e0bffc17 	ldw	r2,-16(fp)
  813a58:	1007883a 	mov	r3,r2
  813a5c:	e0bffe17 	ldw	r2,-8(fp)
  813a60:	1885883a 	add	r2,r3,r2
  813a64:	10800003 	ldbu	r2,0(r2)
  813a68:	10803fcc 	andi	r2,r2,255
  813a6c:	1080201c 	xori	r2,r2,128
  813a70:	10bfe004 	addi	r2,r2,-128
  813a74:	10800be0 	cmpeqi	r2,r2,47
  813a78:	10000a1e 	bne	r2,zero,813aa4 <alt_find_file+0xc0>
  813a7c:	e0bffc17 	ldw	r2,-16(fp)
  813a80:	1007883a 	mov	r3,r2
  813a84:	e0bffe17 	ldw	r2,-8(fp)
  813a88:	1885883a 	add	r2,r3,r2
  813a8c:	10800003 	ldbu	r2,0(r2)
  813a90:	10803fcc 	andi	r2,r2,255
  813a94:	1080201c 	xori	r2,r2,128
  813a98:	10bfe004 	addi	r2,r2,-128
  813a9c:	1004c03a 	cmpne	r2,r2,zero
  813aa0:	10000a1e 	bne	r2,zero,813acc <alt_find_file+0xe8>
  813aa4:	e0bffd17 	ldw	r2,-12(fp)
  813aa8:	11000217 	ldw	r4,8(r2)
  813aac:	e1bffc17 	ldw	r6,-16(fp)
  813ab0:	e17ffe17 	ldw	r5,-8(fp)
  813ab4:	0813ff40 	call	813ff4 <memcmp>
  813ab8:	1004c03a 	cmpne	r2,r2,zero
  813abc:	1000031e 	bne	r2,zero,813acc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813ac0:	e0bffd17 	ldw	r2,-12(fp)
  813ac4:	e0bfff15 	stw	r2,-4(fp)
  813ac8:	00000806 	br	813aec <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  813acc:	e0bffd17 	ldw	r2,-12(fp)
  813ad0:	10800017 	ldw	r2,0(r2)
  813ad4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813ad8:	00c02074 	movhi	r3,129
  813adc:	18da7004 	addi	r3,r3,27072
  813ae0:	e0bffd17 	ldw	r2,-12(fp)
  813ae4:	10ffc91e 	bne	r2,r3,813a0c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813ae8:	e03fff15 	stw	zero,-4(fp)
  813aec:	e0bfff17 	ldw	r2,-4(fp)
}
  813af0:	e037883a 	mov	sp,fp
  813af4:	dfc00117 	ldw	ra,4(sp)
  813af8:	df000017 	ldw	fp,0(sp)
  813afc:	dec00204 	addi	sp,sp,8
  813b00:	f800283a 	ret

00813b04 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813b04:	defffa04 	addi	sp,sp,-24
  813b08:	dfc00515 	stw	ra,20(sp)
  813b0c:	df000415 	stw	fp,16(sp)
  813b10:	dc000315 	stw	r16,12(sp)
  813b14:	df000304 	addi	fp,sp,12
  813b18:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813b1c:	00bffa04 	movi	r2,-24
  813b20:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813b24:	e03ffe15 	stw	zero,-8(fp)
  813b28:	00002006 	br	813bac <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  813b2c:	e13ffe17 	ldw	r4,-8(fp)
  813b30:	04002074 	movhi	r16,129
  813b34:	8415a904 	addi	r16,r16,22180
  813b38:	01400304 	movi	r5,12
  813b3c:	080fe8c0 	call	80fe8c <__mulsi3>
  813b40:	1405883a 	add	r2,r2,r16
  813b44:	10800017 	ldw	r2,0(r2)
  813b48:	1004c03a 	cmpne	r2,r2,zero
  813b4c:	1000141e 	bne	r2,zero,813ba0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  813b50:	e13ffe17 	ldw	r4,-8(fp)
  813b54:	04002074 	movhi	r16,129
  813b58:	8415a904 	addi	r16,r16,22180
  813b5c:	01400304 	movi	r5,12
  813b60:	080fe8c0 	call	80fe8c <__mulsi3>
  813b64:	1407883a 	add	r3,r2,r16
  813b68:	e0bfff17 	ldw	r2,-4(fp)
  813b6c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  813b70:	00802074 	movhi	r2,129
  813b74:	109a7404 	addi	r2,r2,27088
  813b78:	10c00017 	ldw	r3,0(r2)
  813b7c:	e0bffe17 	ldw	r2,-8(fp)
  813b80:	1880040e 	bge	r3,r2,813b94 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  813b84:	00c02074 	movhi	r3,129
  813b88:	18da7404 	addi	r3,r3,27088
  813b8c:	e0bffe17 	ldw	r2,-8(fp)
  813b90:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  813b94:	e0bffe17 	ldw	r2,-8(fp)
  813b98:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  813b9c:	00000606 	br	813bb8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813ba0:	e0bffe17 	ldw	r2,-8(fp)
  813ba4:	10800044 	addi	r2,r2,1
  813ba8:	e0bffe15 	stw	r2,-8(fp)
  813bac:	e0bffe17 	ldw	r2,-8(fp)
  813bb0:	10800810 	cmplti	r2,r2,32
  813bb4:	103fdd1e 	bne	r2,zero,813b2c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813bb8:	e0bffd17 	ldw	r2,-12(fp)
}
  813bbc:	e037883a 	mov	sp,fp
  813bc0:	dfc00217 	ldw	ra,8(sp)
  813bc4:	df000117 	ldw	fp,4(sp)
  813bc8:	dc000017 	ldw	r16,0(sp)
  813bcc:	dec00304 	addi	sp,sp,12
  813bd0:	f800283a 	ret

00813bd4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  813bd4:	defffe04 	addi	sp,sp,-8
  813bd8:	dfc00115 	stw	ra,4(sp)
  813bdc:	df000015 	stw	fp,0(sp)
  813be0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  813be4:	0009883a 	mov	r4,zero
  813be8:	01440004 	movi	r5,4096
  813bec:	0813f180 	call	813f18 <alt_icache_flush>
#endif
}
  813bf0:	e037883a 	mov	sp,fp
  813bf4:	dfc00117 	ldw	ra,4(sp)
  813bf8:	df000017 	ldw	fp,0(sp)
  813bfc:	dec00204 	addi	sp,sp,8
  813c00:	f800283a 	ret

00813c04 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  813c04:	defff804 	addi	sp,sp,-32
  813c08:	dfc00715 	stw	ra,28(sp)
  813c0c:	df000615 	stw	fp,24(sp)
  813c10:	dc000515 	stw	r16,20(sp)
  813c14:	df000504 	addi	fp,sp,20
  813c18:	e13ffc15 	stw	r4,-16(fp)
  813c1c:	e17ffd15 	stw	r5,-12(fp)
  813c20:	e1bffe15 	stw	r6,-8(fp)
  813c24:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  813c28:	e13ffd17 	ldw	r4,-12(fp)
  813c2c:	e17ffe17 	ldw	r5,-8(fp)
  813c30:	e1bfff17 	ldw	r6,-4(fp)
  813c34:	08111ec0 	call	8111ec <open>
  813c38:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  813c3c:	e0bffb17 	ldw	r2,-20(fp)
  813c40:	1004803a 	cmplt	r2,r2,zero
  813c44:	10001f1e 	bne	r2,zero,813cc4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  813c48:	e13ffb17 	ldw	r4,-20(fp)
  813c4c:	04002074 	movhi	r16,129
  813c50:	8415a904 	addi	r16,r16,22180
  813c54:	01400304 	movi	r5,12
  813c58:	080fe8c0 	call	80fe8c <__mulsi3>
  813c5c:	1405883a 	add	r2,r2,r16
  813c60:	10c00017 	ldw	r3,0(r2)
  813c64:	e0bffc17 	ldw	r2,-16(fp)
  813c68:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813c6c:	e13ffb17 	ldw	r4,-20(fp)
  813c70:	04002074 	movhi	r16,129
  813c74:	8415a904 	addi	r16,r16,22180
  813c78:	01400304 	movi	r5,12
  813c7c:	080fe8c0 	call	80fe8c <__mulsi3>
  813c80:	1405883a 	add	r2,r2,r16
  813c84:	10800104 	addi	r2,r2,4
  813c88:	10c00017 	ldw	r3,0(r2)
  813c8c:	e0bffc17 	ldw	r2,-16(fp)
  813c90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813c94:	e13ffb17 	ldw	r4,-20(fp)
  813c98:	04002074 	movhi	r16,129
  813c9c:	8415a904 	addi	r16,r16,22180
  813ca0:	01400304 	movi	r5,12
  813ca4:	080fe8c0 	call	80fe8c <__mulsi3>
  813ca8:	1405883a 	add	r2,r2,r16
  813cac:	10800204 	addi	r2,r2,8
  813cb0:	10c00017 	ldw	r3,0(r2)
  813cb4:	e0bffc17 	ldw	r2,-16(fp)
  813cb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  813cbc:	e13ffb17 	ldw	r4,-20(fp)
  813cc0:	081155c0 	call	81155c <alt_release_fd>
  }
} 
  813cc4:	e037883a 	mov	sp,fp
  813cc8:	dfc00217 	ldw	ra,8(sp)
  813ccc:	df000117 	ldw	fp,4(sp)
  813cd0:	dc000017 	ldw	r16,0(sp)
  813cd4:	dec00304 	addi	sp,sp,12
  813cd8:	f800283a 	ret

00813cdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813cdc:	defffb04 	addi	sp,sp,-20
  813ce0:	dfc00415 	stw	ra,16(sp)
  813ce4:	df000315 	stw	fp,12(sp)
  813ce8:	df000304 	addi	fp,sp,12
  813cec:	e13ffd15 	stw	r4,-12(fp)
  813cf0:	e17ffe15 	stw	r5,-8(fp)
  813cf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  813cf8:	01002074 	movhi	r4,129
  813cfc:	2115ac04 	addi	r4,r4,22192
  813d00:	e17ffd17 	ldw	r5,-12(fp)
  813d04:	01800044 	movi	r6,1
  813d08:	01c07fc4 	movi	r7,511
  813d0c:	0813c040 	call	813c04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  813d10:	01002074 	movhi	r4,129
  813d14:	2115a904 	addi	r4,r4,22180
  813d18:	e17ffe17 	ldw	r5,-8(fp)
  813d1c:	000d883a 	mov	r6,zero
  813d20:	01c07fc4 	movi	r7,511
  813d24:	0813c040 	call	813c04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  813d28:	01002074 	movhi	r4,129
  813d2c:	2115af04 	addi	r4,r4,22204
  813d30:	e17fff17 	ldw	r5,-4(fp)
  813d34:	01800044 	movi	r6,1
  813d38:	01c07fc4 	movi	r7,511
  813d3c:	0813c040 	call	813c04 <alt_open_fd>
}  
  813d40:	e037883a 	mov	sp,fp
  813d44:	dfc00117 	ldw	ra,4(sp)
  813d48:	df000017 	ldw	fp,0(sp)
  813d4c:	dec00204 	addi	sp,sp,8
  813d50:	f800283a 	ret

00813d54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  813d54:	defffa04 	addi	sp,sp,-24
  813d58:	df000515 	stw	fp,20(sp)
  813d5c:	df000504 	addi	fp,sp,20
  813d60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d64:	0005303a 	rdctl	r2,status
  813d68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d6c:	e0fffd17 	ldw	r3,-12(fp)
  813d70:	00bfff84 	movi	r2,-2
  813d74:	1884703a 	and	r2,r3,r2
  813d78:	1001703a 	wrctl	status,r2
  
  return context;
  813d7c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  813d80:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  813d84:	e0bfff17 	ldw	r2,-4(fp)
  813d88:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  813d8c:	e0bffc17 	ldw	r2,-16(fp)
  813d90:	10c00017 	ldw	r3,0(r2)
  813d94:	e0bffc17 	ldw	r2,-16(fp)
  813d98:	10800117 	ldw	r2,4(r2)
  813d9c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  813da0:	e0bffc17 	ldw	r2,-16(fp)
  813da4:	10c00117 	ldw	r3,4(r2)
  813da8:	e0bffc17 	ldw	r2,-16(fp)
  813dac:	10800017 	ldw	r2,0(r2)
  813db0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813db4:	e0fffc17 	ldw	r3,-16(fp)
  813db8:	e0bffc17 	ldw	r2,-16(fp)
  813dbc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  813dc0:	e0fffc17 	ldw	r3,-16(fp)
  813dc4:	e0bffc17 	ldw	r2,-16(fp)
  813dc8:	18800015 	stw	r2,0(r3)
  813dcc:	e0bffe17 	ldw	r2,-8(fp)
  813dd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813dd4:	e0bffb17 	ldw	r2,-20(fp)
  813dd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  813ddc:	e037883a 	mov	sp,fp
  813de0:	df000017 	ldw	fp,0(sp)
  813de4:	dec00104 	addi	sp,sp,4
  813de8:	f800283a 	ret

00813dec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813dec:	defffb04 	addi	sp,sp,-20
  813df0:	dfc00415 	stw	ra,16(sp)
  813df4:	df000315 	stw	fp,12(sp)
  813df8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  813dfc:	d0a01017 	ldw	r2,-32704(gp)
  813e00:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813e04:	d0a70e17 	ldw	r2,-25544(gp)
  813e08:	10800044 	addi	r2,r2,1
  813e0c:	d0a70e15 	stw	r2,-25544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813e10:	00003106 	br	813ed8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  813e14:	e0bffe17 	ldw	r2,-8(fp)
  813e18:	10800017 	ldw	r2,0(r2)
  813e1c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813e20:	e0bffe17 	ldw	r2,-8(fp)
  813e24:	10800403 	ldbu	r2,16(r2)
  813e28:	10803fcc 	andi	r2,r2,255
  813e2c:	1005003a 	cmpeq	r2,r2,zero
  813e30:	1000051e 	bne	r2,zero,813e48 <alt_tick+0x5c>
  813e34:	d0a70e17 	ldw	r2,-25544(gp)
  813e38:	1004c03a 	cmpne	r2,r2,zero
  813e3c:	1000021e 	bne	r2,zero,813e48 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  813e40:	e0bffe17 	ldw	r2,-8(fp)
  813e44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  813e48:	e0bffe17 	ldw	r2,-8(fp)
  813e4c:	10c00217 	ldw	r3,8(r2)
  813e50:	d0a70e17 	ldw	r2,-25544(gp)
  813e54:	10c01e36 	bltu	r2,r3,813ed0 <alt_tick+0xe4>
  813e58:	e0bffe17 	ldw	r2,-8(fp)
  813e5c:	10800403 	ldbu	r2,16(r2)
  813e60:	10803fcc 	andi	r2,r2,255
  813e64:	1004c03a 	cmpne	r2,r2,zero
  813e68:	1000191e 	bne	r2,zero,813ed0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  813e6c:	e0bffe17 	ldw	r2,-8(fp)
  813e70:	10c00317 	ldw	r3,12(r2)
  813e74:	e0bffe17 	ldw	r2,-8(fp)
  813e78:	11000517 	ldw	r4,20(r2)
  813e7c:	183ee83a 	callr	r3
  813e80:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  813e84:	e0bffd17 	ldw	r2,-12(fp)
  813e88:	1004c03a 	cmpne	r2,r2,zero
  813e8c:	1000031e 	bne	r2,zero,813e9c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  813e90:	e13ffe17 	ldw	r4,-8(fp)
  813e94:	0813d540 	call	813d54 <alt_alarm_stop>
  813e98:	00000d06 	br	813ed0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  813e9c:	e0bffe17 	ldw	r2,-8(fp)
  813ea0:	10c00217 	ldw	r3,8(r2)
  813ea4:	e0bffd17 	ldw	r2,-12(fp)
  813ea8:	1887883a 	add	r3,r3,r2
  813eac:	e0bffe17 	ldw	r2,-8(fp)
  813eb0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  813eb4:	e0bffe17 	ldw	r2,-8(fp)
  813eb8:	10c00217 	ldw	r3,8(r2)
  813ebc:	d0a70e17 	ldw	r2,-25544(gp)
  813ec0:	1880032e 	bgeu	r3,r2,813ed0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  813ec4:	e0fffe17 	ldw	r3,-8(fp)
  813ec8:	00800044 	movi	r2,1
  813ecc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  813ed0:	e0bfff17 	ldw	r2,-4(fp)
  813ed4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813ed8:	d0e01004 	addi	r3,gp,-32704
  813edc:	e0bffe17 	ldw	r2,-8(fp)
  813ee0:	10ffcc1e 	bne	r2,r3,813e14 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  813ee4:	e037883a 	mov	sp,fp
  813ee8:	dfc00117 	ldw	ra,4(sp)
  813eec:	df000017 	ldw	fp,0(sp)
  813ef0:	dec00204 	addi	sp,sp,8
  813ef4:	f800283a 	ret

00813ef8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  813ef8:	deffff04 	addi	sp,sp,-4
  813efc:	df000015 	stw	fp,0(sp)
  813f00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813f04:	000170fa 	wrctl	ienable,zero
}
  813f08:	e037883a 	mov	sp,fp
  813f0c:	df000017 	ldw	fp,0(sp)
  813f10:	dec00104 	addi	sp,sp,4
  813f14:	f800283a 	ret

00813f18 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  813f18:	defffb04 	addi	sp,sp,-20
  813f1c:	df000415 	stw	fp,16(sp)
  813f20:	df000404 	addi	fp,sp,16
  813f24:	e13ffe15 	stw	r4,-8(fp)
  813f28:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  813f2c:	e0bfff17 	ldw	r2,-4(fp)
  813f30:	10840070 	cmpltui	r2,r2,4097
  813f34:	1000021e 	bne	r2,zero,813f40 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813f38:	00840004 	movi	r2,4096
  813f3c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  813f40:	e0fffe17 	ldw	r3,-8(fp)
  813f44:	e0bfff17 	ldw	r2,-4(fp)
  813f48:	1885883a 	add	r2,r3,r2
  813f4c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813f50:	e0bffe17 	ldw	r2,-8(fp)
  813f54:	e0bffd15 	stw	r2,-12(fp)
  813f58:	00000506 	br	813f70 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  813f5c:	e0bffd17 	ldw	r2,-12(fp)
  813f60:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813f64:	e0bffd17 	ldw	r2,-12(fp)
  813f68:	10800804 	addi	r2,r2,32
  813f6c:	e0bffd15 	stw	r2,-12(fp)
  813f70:	e0fffd17 	ldw	r3,-12(fp)
  813f74:	e0bffc17 	ldw	r2,-16(fp)
  813f78:	18bff836 	bltu	r3,r2,813f5c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813f7c:	e0bffe17 	ldw	r2,-8(fp)
  813f80:	108007cc 	andi	r2,r2,31
  813f84:	1005003a 	cmpeq	r2,r2,zero
  813f88:	1000021e 	bne	r2,zero,813f94 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813f8c:	e0bffd17 	ldw	r2,-12(fp)
  813f90:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813f94:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813f98:	e037883a 	mov	sp,fp
  813f9c:	df000017 	ldw	fp,0(sp)
  813fa0:	dec00104 	addi	sp,sp,4
  813fa4:	f800283a 	ret

00813fa8 <atexit>:
  813fa8:	200b883a 	mov	r5,r4
  813fac:	000d883a 	mov	r6,zero
  813fb0:	0009883a 	mov	r4,zero
  813fb4:	000f883a 	mov	r7,zero
  813fb8:	08140681 	jmpi	814068 <__register_exitproc>

00813fbc <exit>:
  813fbc:	defffe04 	addi	sp,sp,-8
  813fc0:	000b883a 	mov	r5,zero
  813fc4:	dc000015 	stw	r16,0(sp)
  813fc8:	dfc00115 	stw	ra,4(sp)
  813fcc:	2021883a 	mov	r16,r4
  813fd0:	08141a00 	call	8141a0 <__call_exitprocs>
  813fd4:	00802074 	movhi	r2,129
  813fd8:	109a6a04 	addi	r2,r2,27048
  813fdc:	11000017 	ldw	r4,0(r2)
  813fe0:	20800f17 	ldw	r2,60(r4)
  813fe4:	10000126 	beq	r2,zero,813fec <exit+0x30>
  813fe8:	103ee83a 	callr	r2
  813fec:	8009883a 	mov	r4,r16
  813ff0:	08143900 	call	814390 <_exit>

00813ff4 <memcmp>:
  813ff4:	00c000c4 	movi	r3,3
  813ff8:	1980032e 	bgeu	r3,r6,814008 <memcmp+0x14>
  813ffc:	2144b03a 	or	r2,r4,r5
  814000:	10c4703a 	and	r2,r2,r3
  814004:	10000f26 	beq	r2,zero,814044 <memcmp+0x50>
  814008:	31ffffc4 	addi	r7,r6,-1
  81400c:	3000061e 	bne	r6,zero,814028 <memcmp+0x34>
  814010:	00000a06 	br	81403c <memcmp+0x48>
  814014:	39ffffc4 	addi	r7,r7,-1
  814018:	00bfffc4 	movi	r2,-1
  81401c:	21000044 	addi	r4,r4,1
  814020:	29400044 	addi	r5,r5,1
  814024:	38800526 	beq	r7,r2,81403c <memcmp+0x48>
  814028:	20c00003 	ldbu	r3,0(r4)
  81402c:	28800003 	ldbu	r2,0(r5)
  814030:	18bff826 	beq	r3,r2,814014 <memcmp+0x20>
  814034:	1885c83a 	sub	r2,r3,r2
  814038:	f800283a 	ret
  81403c:	0005883a 	mov	r2,zero
  814040:	f800283a 	ret
  814044:	180f883a 	mov	r7,r3
  814048:	20c00017 	ldw	r3,0(r4)
  81404c:	28800017 	ldw	r2,0(r5)
  814050:	18bfed1e 	bne	r3,r2,814008 <memcmp+0x14>
  814054:	31bfff04 	addi	r6,r6,-4
  814058:	21000104 	addi	r4,r4,4
  81405c:	29400104 	addi	r5,r5,4
  814060:	39bff936 	bltu	r7,r6,814048 <memcmp+0x54>
  814064:	003fe806 	br	814008 <memcmp+0x14>

00814068 <__register_exitproc>:
  814068:	defffa04 	addi	sp,sp,-24
  81406c:	00802074 	movhi	r2,129
  814070:	109a6a04 	addi	r2,r2,27048
  814074:	dc000015 	stw	r16,0(sp)
  814078:	14000017 	ldw	r16,0(r2)
  81407c:	dd000415 	stw	r20,16(sp)
  814080:	2829883a 	mov	r20,r5
  814084:	81405217 	ldw	r5,328(r16)
  814088:	dcc00315 	stw	r19,12(sp)
  81408c:	dc800215 	stw	r18,8(sp)
  814090:	dc400115 	stw	r17,4(sp)
  814094:	dfc00515 	stw	ra,20(sp)
  814098:	2023883a 	mov	r17,r4
  81409c:	3027883a 	mov	r19,r6
  8140a0:	3825883a 	mov	r18,r7
  8140a4:	28002526 	beq	r5,zero,81413c <__register_exitproc+0xd4>
  8140a8:	29000117 	ldw	r4,4(r5)
  8140ac:	008007c4 	movi	r2,31
  8140b0:	11002716 	blt	r2,r4,814150 <__register_exitproc+0xe8>
  8140b4:	8800101e 	bne	r17,zero,8140f8 <__register_exitproc+0x90>
  8140b8:	2105883a 	add	r2,r4,r4
  8140bc:	1085883a 	add	r2,r2,r2
  8140c0:	20c00044 	addi	r3,r4,1
  8140c4:	1145883a 	add	r2,r2,r5
  8140c8:	0009883a 	mov	r4,zero
  8140cc:	15000215 	stw	r20,8(r2)
  8140d0:	28c00115 	stw	r3,4(r5)
  8140d4:	2005883a 	mov	r2,r4
  8140d8:	dfc00517 	ldw	ra,20(sp)
  8140dc:	dd000417 	ldw	r20,16(sp)
  8140e0:	dcc00317 	ldw	r19,12(sp)
  8140e4:	dc800217 	ldw	r18,8(sp)
  8140e8:	dc400117 	ldw	r17,4(sp)
  8140ec:	dc000017 	ldw	r16,0(sp)
  8140f0:	dec00604 	addi	sp,sp,24
  8140f4:	f800283a 	ret
  8140f8:	29802204 	addi	r6,r5,136
  8140fc:	00800044 	movi	r2,1
  814100:	110e983a 	sll	r7,r2,r4
  814104:	30c04017 	ldw	r3,256(r6)
  814108:	2105883a 	add	r2,r4,r4
  81410c:	1085883a 	add	r2,r2,r2
  814110:	1185883a 	add	r2,r2,r6
  814114:	19c6b03a 	or	r3,r3,r7
  814118:	14802015 	stw	r18,128(r2)
  81411c:	14c00015 	stw	r19,0(r2)
  814120:	00800084 	movi	r2,2
  814124:	30c04015 	stw	r3,256(r6)
  814128:	88bfe31e 	bne	r17,r2,8140b8 <__register_exitproc+0x50>
  81412c:	30804117 	ldw	r2,260(r6)
  814130:	11c4b03a 	or	r2,r2,r7
  814134:	30804115 	stw	r2,260(r6)
  814138:	003fdf06 	br	8140b8 <__register_exitproc+0x50>
  81413c:	008020b4 	movhi	r2,130
  814140:	10a20204 	addi	r2,r2,-30712
  814144:	100b883a 	mov	r5,r2
  814148:	80805215 	stw	r2,328(r16)
  81414c:	003fd606 	br	8140a8 <__register_exitproc+0x40>
  814150:	00800034 	movhi	r2,0
  814154:	10800004 	addi	r2,r2,0
  814158:	1000021e 	bne	r2,zero,814164 <__register_exitproc+0xfc>
  81415c:	013fffc4 	movi	r4,-1
  814160:	003fdc06 	br	8140d4 <__register_exitproc+0x6c>
  814164:	01006404 	movi	r4,400
  814168:	103ee83a 	callr	r2
  81416c:	1007883a 	mov	r3,r2
  814170:	103ffa26 	beq	r2,zero,81415c <__register_exitproc+0xf4>
  814174:	80805217 	ldw	r2,328(r16)
  814178:	180b883a 	mov	r5,r3
  81417c:	18000115 	stw	zero,4(r3)
  814180:	18800015 	stw	r2,0(r3)
  814184:	80c05215 	stw	r3,328(r16)
  814188:	18006215 	stw	zero,392(r3)
  81418c:	18006315 	stw	zero,396(r3)
  814190:	0009883a 	mov	r4,zero
  814194:	883fc826 	beq	r17,zero,8140b8 <__register_exitproc+0x50>
  814198:	003fd706 	br	8140f8 <__register_exitproc+0x90>

0081419c <register_fini>:
  81419c:	f800283a 	ret

008141a0 <__call_exitprocs>:
  8141a0:	00802074 	movhi	r2,129
  8141a4:	109a6a04 	addi	r2,r2,27048
  8141a8:	10800017 	ldw	r2,0(r2)
  8141ac:	defff304 	addi	sp,sp,-52
  8141b0:	df000b15 	stw	fp,44(sp)
  8141b4:	d8800115 	stw	r2,4(sp)
  8141b8:	00800034 	movhi	r2,0
  8141bc:	10800004 	addi	r2,r2,0
  8141c0:	1005003a 	cmpeq	r2,r2,zero
  8141c4:	d8800215 	stw	r2,8(sp)
  8141c8:	d8800117 	ldw	r2,4(sp)
  8141cc:	dd400815 	stw	r21,32(sp)
  8141d0:	dd000715 	stw	r20,28(sp)
  8141d4:	10805204 	addi	r2,r2,328
  8141d8:	dfc00c15 	stw	ra,48(sp)
  8141dc:	ddc00a15 	stw	r23,40(sp)
  8141e0:	dd800915 	stw	r22,36(sp)
  8141e4:	dcc00615 	stw	r19,24(sp)
  8141e8:	dc800515 	stw	r18,20(sp)
  8141ec:	dc400415 	stw	r17,16(sp)
  8141f0:	dc000315 	stw	r16,12(sp)
  8141f4:	282b883a 	mov	r21,r5
  8141f8:	2039883a 	mov	fp,r4
  8141fc:	d8800015 	stw	r2,0(sp)
  814200:	2829003a 	cmpeq	r20,r5,zero
  814204:	d8800117 	ldw	r2,4(sp)
  814208:	14405217 	ldw	r17,328(r2)
  81420c:	88001026 	beq	r17,zero,814250 <__call_exitprocs+0xb0>
  814210:	ddc00017 	ldw	r23,0(sp)
  814214:	88800117 	ldw	r2,4(r17)
  814218:	8c802204 	addi	r18,r17,136
  81421c:	143fffc4 	addi	r16,r2,-1
  814220:	80000916 	blt	r16,zero,814248 <__call_exitprocs+0xa8>
  814224:	05bfffc4 	movi	r22,-1
  814228:	a000151e 	bne	r20,zero,814280 <__call_exitprocs+0xe0>
  81422c:	8409883a 	add	r4,r16,r16
  814230:	2105883a 	add	r2,r4,r4
  814234:	1485883a 	add	r2,r2,r18
  814238:	10c02017 	ldw	r3,128(r2)
  81423c:	a8c01126 	beq	r21,r3,814284 <__call_exitprocs+0xe4>
  814240:	843fffc4 	addi	r16,r16,-1
  814244:	85bff81e 	bne	r16,r22,814228 <__call_exitprocs+0x88>
  814248:	d8800217 	ldw	r2,8(sp)
  81424c:	10003126 	beq	r2,zero,814314 <__call_exitprocs+0x174>
  814250:	dfc00c17 	ldw	ra,48(sp)
  814254:	df000b17 	ldw	fp,44(sp)
  814258:	ddc00a17 	ldw	r23,40(sp)
  81425c:	dd800917 	ldw	r22,36(sp)
  814260:	dd400817 	ldw	r21,32(sp)
  814264:	dd000717 	ldw	r20,28(sp)
  814268:	dcc00617 	ldw	r19,24(sp)
  81426c:	dc800517 	ldw	r18,20(sp)
  814270:	dc400417 	ldw	r17,16(sp)
  814274:	dc000317 	ldw	r16,12(sp)
  814278:	dec00d04 	addi	sp,sp,52
  81427c:	f800283a 	ret
  814280:	8409883a 	add	r4,r16,r16
  814284:	88c00117 	ldw	r3,4(r17)
  814288:	2105883a 	add	r2,r4,r4
  81428c:	1445883a 	add	r2,r2,r17
  814290:	18ffffc4 	addi	r3,r3,-1
  814294:	11800217 	ldw	r6,8(r2)
  814298:	1c001526 	beq	r3,r16,8142f0 <__call_exitprocs+0x150>
  81429c:	10000215 	stw	zero,8(r2)
  8142a0:	303fe726 	beq	r6,zero,814240 <__call_exitprocs+0xa0>
  8142a4:	00c00044 	movi	r3,1
  8142a8:	1c06983a 	sll	r3,r3,r16
  8142ac:	90804017 	ldw	r2,256(r18)
  8142b0:	8cc00117 	ldw	r19,4(r17)
  8142b4:	1884703a 	and	r2,r3,r2
  8142b8:	10001426 	beq	r2,zero,81430c <__call_exitprocs+0x16c>
  8142bc:	90804117 	ldw	r2,260(r18)
  8142c0:	1884703a 	and	r2,r3,r2
  8142c4:	10000c1e 	bne	r2,zero,8142f8 <__call_exitprocs+0x158>
  8142c8:	2105883a 	add	r2,r4,r4
  8142cc:	1485883a 	add	r2,r2,r18
  8142d0:	11400017 	ldw	r5,0(r2)
  8142d4:	e009883a 	mov	r4,fp
  8142d8:	303ee83a 	callr	r6
  8142dc:	88800117 	ldw	r2,4(r17)
  8142e0:	98bfc81e 	bne	r19,r2,814204 <__call_exitprocs+0x64>
  8142e4:	b8800017 	ldw	r2,0(r23)
  8142e8:	147fd526 	beq	r2,r17,814240 <__call_exitprocs+0xa0>
  8142ec:	003fc506 	br	814204 <__call_exitprocs+0x64>
  8142f0:	8c000115 	stw	r16,4(r17)
  8142f4:	003fea06 	br	8142a0 <__call_exitprocs+0x100>
  8142f8:	2105883a 	add	r2,r4,r4
  8142fc:	1485883a 	add	r2,r2,r18
  814300:	11000017 	ldw	r4,0(r2)
  814304:	303ee83a 	callr	r6
  814308:	003ff406 	br	8142dc <__call_exitprocs+0x13c>
  81430c:	303ee83a 	callr	r6
  814310:	003ff206 	br	8142dc <__call_exitprocs+0x13c>
  814314:	88800117 	ldw	r2,4(r17)
  814318:	1000081e 	bne	r2,zero,81433c <__call_exitprocs+0x19c>
  81431c:	89000017 	ldw	r4,0(r17)
  814320:	20000726 	beq	r4,zero,814340 <__call_exitprocs+0x1a0>
  814324:	b9000015 	stw	r4,0(r23)
  814328:	8809883a 	mov	r4,r17
  81432c:	00000000 	call	0 <__reset-0x800000>
  814330:	bc400017 	ldw	r17,0(r23)
  814334:	883fb71e 	bne	r17,zero,814214 <__call_exitprocs+0x74>
  814338:	003fc506 	br	814250 <__call_exitprocs+0xb0>
  81433c:	89000017 	ldw	r4,0(r17)
  814340:	882f883a 	mov	r23,r17
  814344:	2023883a 	mov	r17,r4
  814348:	883fb21e 	bne	r17,zero,814214 <__call_exitprocs+0x74>
  81434c:	003fc006 	br	814250 <__call_exitprocs+0xb0>

00814350 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814350:	defffd04 	addi	sp,sp,-12
  814354:	df000215 	stw	fp,8(sp)
  814358:	df000204 	addi	fp,sp,8
  81435c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814360:	e0bfff17 	ldw	r2,-4(fp)
  814364:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814368:	e0bffe17 	ldw	r2,-8(fp)
  81436c:	1005003a 	cmpeq	r2,r2,zero
  814370:	1000021e 	bne	r2,zero,81437c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814374:	002af070 	cmpltui	zero,zero,43969
  814378:	00000106 	br	814380 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81437c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814380:	e037883a 	mov	sp,fp
  814384:	df000017 	ldw	fp,0(sp)
  814388:	dec00104 	addi	sp,sp,4
  81438c:	f800283a 	ret

00814390 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814390:	defffd04 	addi	sp,sp,-12
  814394:	dfc00215 	stw	ra,8(sp)
  814398:	df000115 	stw	fp,4(sp)
  81439c:	df000104 	addi	fp,sp,4
  8143a0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8143a4:	e13fff17 	ldw	r4,-4(fp)
  8143a8:	08143500 	call	814350 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8143ac:	003fff06 	br	8143ac <_exit+0x1c>
  8143b0:	00000010 	cmplti	zero,zero,0
  8143b4:	00000000 	call	0 <__reset-0x800000>
  8143b8:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  8143bc:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  8143c0:	001b0c0b 	ldhu	zero,27696(zero)
  8143c4:	00000028 	cmpgeui	zero,zero,0
  8143c8:	00000018 	cmpnei	zero,zero,0
  8143cc:	0080dce4 	muli	r2,zero,883
  8143d0:	0000066c 	andhi	zero,zero,25
  8143d4:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  8143d8:	910a9074 	orhi	r4,r18,10817
  8143dc:	94089209 	0x94089209
  8143e0:	97049606 	br	81563c <__malloc_av_+0x3fc>
  8143e4:	93019f03 	ldbu	r12,1660(r18)
  8143e8:	9c059507 	ldb	r16,5716(r19)
  8143ec:	00000002 	0x2
  8143f0:	00000028 	cmpgeui	zero,zero,0
  8143f4:	00000044 	movi	zero,1
  8143f8:	0080e350 	cmplti	r2,zero,909
  8143fc:	00000660 	cmpeqi	zero,zero,25
  814400:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  814404:	92099170 	cmpltui	r8,r18,9797
  814408:	96069408 	cmpgei	et,r18,6736
  81440c:	9c039704 	addi	r16,r19,3676
  814410:	90019f02 	0x90019f02
  814414:	9507930a 	0x9507930a
  814418:	00000005 	stb	zero,0(zero)
  81441c:	0081419c 	xori	r2,zero,1286
